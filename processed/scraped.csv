,fname,text
0,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-cancelled,"billpay_cancelled Code — BPCL Event trigger — An account is closed that has one or more billpay transactions pending. Process — This process contains the event trigger: Account closure in the Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPCL"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_cancelled"" Example JSON# billpay_cancelled example: { ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPCL"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_cancelled"" } Table of Contents Fields Example "
1,docs.galileo-ft.com/pro/docs/how-overdraft-works-at-galileo,"How Overdraft Works at Galileo Overdraft protection for debit cards, mobile wallets, and consumer checking accounts extends an immediate, predetermined line of credit to an account holder who has insufficient funds in the DDA to cover a transaction. This guide provides a high-level overview of how overdraft works at Galileo. Account holder experience From an account holder's perspective, an overdraft account does not necessarily appear as a separate account like a DDA – they may experience it more like a feature or service that prevents their DDA from reaching a negative balance or declining transactions. An account holder typically opts in to overdraft protection during account setup, or may opt in at any time after account setup, as long as eligibility requirements are met. An account holder is not required to use overdraft funds to keep the overdraft account. If an account holder makes a purchase that dips into overdraft funds, the account holder usually has 35 days to make a deposit to the DDA to repay the funds drawn on the overdraft account. A fee may be assessed when a transaction uses overdraft funds and meets the de minimis condition outside of a grace period. An account holder can become ineligible, or may opt out of overdraft at any time. When this occurs, the overdraft account is suspended and the account holder can no longer access the overdraft line of credit. Overdraft product setup overview You and Galileo take the following steps to set up and activate overdraft protection for your customers: You elect to offer a product with overdraft protection and develop an agreement with your issuing bank. See Configuring Overdraft Products for additional details. You work with Galileo to configure an overdraft product and set eligibility verification rules at the product level. When you onboard a new customer, you send a Create Account request to create the DDA. You make the DDA eligible to use overdraft either by using a product parameter or by setting an account feature. When a customer opts in to overdraft protection, you send an Add Account request with the overdraft product ID to create an overdraft account associated with the DDA. You activate the overdraft account by setting account feature 17 to P. Consult Creating an Overdraft Account for details. Overdraft transaction overview When an account holder attempts a purchase, an authorization process occurs within seconds to verify transaction eligibility, account authenticity, and funds availability. When a purchase exceeds the DDA balance, funds from the overdraft line of credit are used to cover the purchase if the following are true: The account holder has opted-in to overdraft protection and has maintained eligibility. The purchase is eligible for overdraft funds. The purchase does not exceed the available overdraft line of credit. For a detailed explanation, see Transaction authorization and settlement using overdraft funds in Overdraft Workflows.Updated 2 months ago Table of Contents Account holder experience Overdraft product setup overview Overdraft transaction overview "
2,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-tvr,"mobile_activation TVR The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — ATVR, GTVR, STVR Event trigger — Galileo receives notification from the card network that the card has been reactivated. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GTVR"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation TVR"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ATVR) ""Google"" (event code GTVR) ""Samsung"" (event code STVR) Example JSON# mobile_activation TVR example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""GTVR"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation TVR"", ""wallet_type"": ""Samsung"" } Table of Contents Fields Example "
3,docs.galileo-ft.com/pro/reference/api-reference-de025-codes,"DE025 Codes CodeDescription00Normal presentment01Cardholder not present02Unattended terminal able to retain card03Merchant suspicious04Electronic cash register05Cardholder present, card not present. May be present in AVS-only requests and CVV2-only requests/advices.06Preauthorized request07Telephone device request08Mail and/or telephone09Security alert10Customer identity verified11Suspected fraud12Security reasons15Cardholder terminal (home terminal)16Administration terminal27Unattended terminal unable to retain card40Cardholder not present, standing order/recurring payment52CVC/CVC2, CVV/CVV2 verified and valid53CVC/CVC2, CVV/CVV2 verified and invalid54Electronic commerce transaction, nonsecure or security unknown55Electronic transaction — Secure, with cardholder certificate56Electronic transaction — Secure, without cardholder certificate57Electronic commerce transaction — Channel-encrypted58Electronic commerce transaction — Nonsecure or security unknown59Deferred billing "
4,docs.galileo-ft.com/pro/docs/authorization-reversal-simulation,"Authorization Reversal Simulation A cardholder makes a $40 purchase and then returns it shortly afterwards. The merchant sends a reversal for the full amount before the transaction settles. This is similar to the transaction shown in Authorization reversal and expiry in Card Transaction Examples. 📘NoteIn Production, both an authorization and its reversal remain in the authorization table until they expire. However, CV does not have the automated expiry function, and you cannot use the Expire Authorization endpoint to expire reversed authorizations. Instead, the authorization is ""completed"" by the reversal, and it does not expire. For examples of authorization and reversal expiries in Production, see Scenario 4: Reversal on Authorization Before Clearing (Mastercard) and Scenario 5: Reversal on Preauthorization Before Clearing (Visa). Authorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount40associationvisa or mc_authmerchantNameCentral Retailmcc5999transType1 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.193,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 6677  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""49164110-ad91-4505-a589-f2bcf954f2cf""  },  ""system_timestamp"": ""2022-10-10 10:38:22"",  ""rtoken"": ""03944f54-35fc-44e7-9919-eea86cec2274"" } Capture the auth_id for later use. Reversal Call Create Simulated Card Authorization with these parameters, because reversals arrive at Galileo through the authorization stream. ParameterValueaccountNoPAN, PRN or CADamount40associationvisa or mc_authmerchantNameCentral RetailoriginalAuthIdauth_id from previous responsemcc5999transType5 (Visa) or 6 (Mastercard) JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 2.164,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 8899  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""bfa9a69b-1e62-4f0f-aff6-30e7507df5a6""  },  ""system_timestamp"": ""2022-10-10 10:44:01"",  ""rtoken"": ""8b2c86b0-251b-4a93-ad0a-1249d563eafb"" } Transactions created Call Get All Transaction History to see the two ledger entries. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Retail, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-10 10:44:01"",     ""amt"": 40,     ""source_id"": ""8899"",     ""type"": ""R"",     ""type_description"": """",     ""trans_code"": ""VIR"",     ""arn"": """",     ""merchant_id"": ""nZ8yqLz4etblcqH"",     ""external_trans_id"": """",     ""calculated_balance"": 500,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-10 10:38:22"",     ""prior_id"": ""6677"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL RETAIL, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""8899"",     ""local_amt"": 40,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""4238"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Retail, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-10 10:38:22"",     ""amt"": -40,     ""source_id"": ""6677"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VIA"",     ""arn"": """",     ""merchant_id"": ""nZ8yqLz4etblcqH"",     ""external_trans_id"": """",     ""calculated_balance"": 460,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-10 10:38:22"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL RETAIL, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""6677"",     ""local_amt"": 40,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""4238"",     ""credit_ind"": ""Y""    }   ] Updated 4 months ago Table of Contents Authorization Reversal Transactions created "
5,docs.galileo-ft.com/pro/docs/reissuing-cards,"Reissuing Cards After initially issuing a card to a customer, you might need to manually reissue them a new card. When to reissue You reissue a card in circumstances such as these: A physical card has been reported damaged, and you want to send a new card to the cardholder. Your product settings do not automatically reissue expiring cards, so you want to reissue manually. You want to reissue or replace a card with the same product ID for other reasons. When not to reissue In some similar cases, reissuing a card is not the right course of action, for example, when: You want to reissue a virtual card as a physical card; instead, use Digital First cards for new products or the Switching Products guide for existing virtual cards. A physical card is about to expire and product settings specify automatic reissue; instead, allow the automatic process to run. You want to reissue a virtual-only card that is about to expire; instead, use Add Card to create a replacement virtual card. A card has been reported lost or stolen; instead, use the Lost, Stolen, or Damaged Cards guide. The reissue is the result of the account switching from one product ID to another product ID; instead, use the Switching Products guide. Reissuing vs. replacing When you reissue a card, you can specify whether to reissue or replace it: To reissue a card is to make a new version of the card that is associated with the original card account. The PRN, PAN, and CAD stay the same, but a new emboss record with a new expiry date and CVV are created. If you have configured a reissue fee (REI), that fee is applied. Performed when a card is about to expire or when a card is reported damaged. To replace a card is to issue a net-new card. A new card record is created with the same PRN but a new PAN, CAD, expiry, and CVV. If you have configured a replacement fee (REP), that fee may be applied, depending on which reissue method you use. Performed for lost or stolen cards or other times when providing a net-new card for the same product is desired. For lost or stolen cards use the Lost, Stolen, or Damaged Cards guide instead of the replacement methods described in this guide. 📘NoteVirtual cards cannot be reissued; instead, you must replace them by using Add Card. How to reissue or replace Galileo provides two methods to reissue and replace cards: using the Reissue Card endpoint and using the Modify Status endpoint. For an explanation of the difference between the methods as well as the instructions for using Modify Status, request the Card Reissue Options PDF from Galileo. The rest of this guide explains how to use Reissue Card, which is the preferred method. Using the Reissue Card endpoint This section explains how to use the Reissue Card endpoint to reissue or replace cards. Result of calling Reissue Card When Reissue Card has been called successfully, the reissue process is initiated. Depending on how the endpoint parameters are set, the card is set to be embossed with either a new PAN and expiry or the old PAN and new expiry. When the PAN is new, a new card record is created with a new CAD, and a new emboss record is created with a new expiry date and CVV. When the PAN is not new, a new emboss record is created with a new expiry date and CVV. Because new PANs and expiries are generated by subsequent backend processes, the new PAN and expiry are not available in the response to this endpoint call. According to your arrangements with Galileo, Galileo sends event webhooks to notify when the emboss record is created, when the fee is assessed and when the card is activated. There is no event webhook for card reissue or replacement. Card reissue product parameters This product parameter affects card-reissue and replacement behavior when using the Reissue Card endpoint. ParameterDescriptionCANCSUsed in conjunction with CANOC, it specifies the status that a card must be in to be canceled when a new card is activated. Default: N,X,Y,WCANOCWhen this parameter is set to Y and a new PAN is generated, cards that have the same product ID and cardholder as the newly activated card—and that are in a status specified in CANCS—are changed to status C (canceled) when the new card is activated. When this parameter is not set, other cards are not canceled. Set this parameter at the product level so that cards with the same product ID are cancelled. If you set oldCardStatus to C or D, this parameter is not checked. 📘NoteThe Reissue Card endpoint does not check the RISCS parameter, which controls which card statuses are eligible for reissue when using Modify Status to reissue cards. Endpoint parameters This table explains the parameters that are specific to the Reissue Card endpoint. See the Reissue Card endpoint reference for details. ParameterDescriptionaccountNoThe PRN, PAN or CAD of the card to reissue. If more than one card is associated with the PRN, use the PAN or CAD.newPanPass Y to generate a new PAN for the card. When this parameter is Y then newExpiryDate: Y is required. Default: NnewExpiryDatePass Y to generate a new expiry date for the new card. Always set this parameter to Y, because otherwise it leaves the reissued card unprotected in transit. Default: NembossPass Y to send the reissued card to the embosser. The N value is not currently supported, because virtual cards cannot be reissued. Default: YoldCardStatusSpecify the status for the card that is being replaced. This parameter is valid only when newPan Y. The status is applied by the emboss process, shortly after reissue. Use D for disabled or C for canceled. Leave blank for the old card to be usable until the new card is activated. Default: Blank Valid parameter combinations Only these parameter combinations are valid. See Use cases for instructions on using these combinations. Use casenewPannewExpiryDateembossoldCardStatus1: ReissueN or blankYY or blankBlank2: ReplaceYYY or blankC, D or blank 🚧WarningIf you set both newPan and newExpiryDate to N or blank, you create an identical copy of the current card. When such a card is mailed to the cardholder, it is active and therefore vulnerable to interception. If you were to set account feature 20 or 21, you would also disable the old card. For this reason, Galileo strongly recommends that you always set newExpiryDate: Y. Reissue Card workflow Populate the Reissue Card endpoint and send. Galileo performs these checks: If the card is virtual, Galileo returns 589-01. If there are pending reissue records for this card, Galileo returns 589-09. If there is a reissue fee, Galileo checks the available balance. If there are insufficient funds, Galileo returns 589-07. Galileo attempts to process the reissue fee. If processing the fee is unsuccessful, Galileo returns 589-08. Galileo attempts to retrieve the data associated with the account and card. If it is unsuccessful, Galileo returns 589-05 or 589-06. Galileo checks the value of newPan: Y — Galileo checks the value of newExpiryDate: Y — Galileo sets a flag for a new PAN for a net-new card. N or blank — Galileo returns 590-11 N or blank — Galileo assigns the old PAN to the reissued card. Galileo checks the value of newExpiryDate: Y — Galileo sets a flag for a new expiry date for the reissued card. N or blank — This value is not recommended. Galileo checks the value of oldCardStatus. C or D — Galileo checks the value of newPan: Y — Galileo sets a flag for the old card status to change N — Galileo returns 590-04 Blank — The old card is not flagged for a status change. If the card-reissue process fails, Galileo returns 589-10; otherwise, Galileo sends status: 0. 📘NoteThe expiry_date and card_security_code (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process, as shown in the next section. After the endpoint response These steps happen after the endpoint call is successful. The emboss process runs once per day in Production for most clients and every 15 minutes in CV. The emboss process: Generates a new card record with a new CAD and PAN if newPan: Y. Generates a new expiry date and CVV. Generates a new emboss record in status: Y. Includes the emboss record in a batch file to send to the embosser. Sends the SHIP: card_shipped event webhook. If newPan: Y and oldCardStatus is C or D, changes the old card to that status. If applicable, assesses the reissue (REI) fee and sends the BFEE: fee event message. The emboss vendor creates the card and mails it to the cardholder. The cardholder activates the new card in one of these ways, according to your setup: IVR (automated phone system) Activate Card endpoint CST You receive notification that the card has been activated (BACT: card_activated event webhook). If the card has a new PAN, then the PIN must also be reset using your preferred method. If newPan: Y and oldCardStaus was blank and CANOC is not Y, then the old card is still active. Perform this step: Call Modify Status with these parameters: accountNo: CAD or PAN of old card; do not use PRN type: 5 📘NoteA reissue is represented in the CST on the Card Info screen under Reissued Card History and Emboss History. Sample endpoint request and response Consult the Reissue Card endpoint reference to see how to build the API request and to see the response schema. Because the emboss process generates new PANs, CADs, expiry dates and CVVs after the Reissue Card endpoint is called, the Reissue Card endpoint cannot return that data. After you receive the SHIP: card_shippedSHIP: card_shipped event webhook, you can retrieve the new information using Get Account Cards or Get Card. You can receive the new PAN, CVV and expiry only if you are PCI compliant. View the reissued card Because the emboss process generates new PANs and expiry dates, the Reissue Card endpoint does not return the new PAN and expiry. When you receive the SHIP: card_shipped event webhook, you can call Get Account Cards or Get Card to see the new card information. Use cases Use the Reissue Card endpoint for these use cases: Use case 1: Reissue card with same PAN and new expiry Use case 2: Replace card with new PAN and expiry Use case 1: Reissue card with same PAN and new expiry Your product settings do not reissue cards automatically when they are about to expire, so you reissue them manually. There is no reissue fee. The old card is usable until the new card is activated, and then it is disabled. You call Reissue Card with these parameters: newPan: N or blank newExpiryDate: Y emboss: Y or blank oldCardStatus: blank The emboss process: Generates a new expiry date and CVV. Creates a new emboss record in status: Y. Adds the emboss record to the batch file to send to the embosser. Sends the SHIP: card_shipped event webhook. The embosser mails the cards to the cardholders, who activate them. Galileo sends the BACT: card_activated event webhook. Because the card has the same PAN, the PIN does not need to be reset. The old card is deactivated. Use case 2: Replace card with new PAN and expiry The cardholder wants a new card with a new PAN for the same product and account. You charge a $5.00 reissue (REI) fee. (To charge a replacement [REP] fee instead, use Modify Status to replace the card. Request the Card Reissue Options PDF from Galileo for instructions.) This scenario has two methods for cancelling the old card, depending on the timing that you desire: Cancel shortly after reissuing the card — Set oldCardStatus to C or D. Cancel when the new card is activated — Leave oldCardStatus blank. You call Reissue Card with these parameters: newPan: Y newExpiryDate: Y emboss: Y or blank oldCardStatus: C, D or blank The emboss process: Creates a new card record with a new PAN and CAD. Creates a new emboss record in status: Y with new expiry date and CVV. Adds the card to a batch file to send to the embosser. Sends the SHIP: card_shipped event webhook. If oldCardStatus is populated, change the old card status to C or D. Assesses the 5.00 reissue fee and sends the BFEE: fee event message. The embosser mails the card to the cardholder, who activates it. Galileo sends the BACT: card_activated event webhook. Because the card has a new PAN, the PIN must also be reset, using your preferred method. If you left oldCardStatus blank and CANOC is not set, then the old card is still active. Perform these steps to set the old card status to C (canceled): Call Modify Status with these parameters: accountNo: CAD or PAN of old card; do not use PRN type: 5 Reissue Card status codes Status CodeDescriptionNext Steps589-01Reissue request for virtual card is invalidVerify that prodId is not a virtual card product.589-02The valid values for newPan and newExpiryDate are Y and N.Verify that the values for those parameters are Y, N or blank589-03The valid values for oldCardStatus are D and C.Verify that the value is D or C or blank589-04Trying to update card status without requesting new PANIf oldCardStatus is populated then newPan: Y is required.589-05Failure getting data associated with account/card. Cannot retrieve CAD, ENP or product ID.Contact Galileo for troubleshooting.589-06Failure getting data associated with account/card. CAD or XID is null.Contact Galileo for troubleshooting.589-07Insufficient funds to cover reissue feeFollow your business process for this use case.589-08Failure, generic error processing reissue fee.Contact Galileo for troubleshooting.589-09Failure, card has pending reissue records.None. The pending emboss record will be sent to the embosser in the next cycle.589-10Card reissue cannot be processed.Contact Galileo for troubleshooting.589-11If new_pan='Y' then new_expiry_date needs to be 'Y' too.Verify that newExpiryDate: Y when newPan: Y.Updated 2 months ago Table of Contents When to reissue When not to reissue Reissuing vs. replacing How to reissue or replace Using the Reissue Card endpoint Result of calling Reissue Card Card reissue product parameters Endpoint parameters Reissue Card workflow After the endpoint response Sample endpoint request and response Use cases Use case 1: Reissue card with same PAN and new expiry Use case 2: Replace card with new PAN and expiry "
6,docs.galileo-ft.com/pro/reference/post/startenrollment,"Start Enrollment Consult the Customer ID Verification guide for instructions on using this endpoint with Galileo's integrated CIP solution. 📘NoteIf this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See Enrollment Statuses for more information.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description504-01Card not issuable504-12An application with the same ID has already been submitted504-17Card not allocated to your store for issuance504-25An error occurred calculating credit limit504-26Unable to extend credit for this application504-29Could not create applicationLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
7,docs.galileo-ft.com/pro/reference/webhook/authorization/post/3,"Auth API Webhook 3.0 In the authorization information that Galileo sends, the response_code is the current response code value to be used for the transaction, unless the client overrides it. The client uses the response_code field in the HTTP response body to override the authorization response code, if desired. See the Authorization Controller API guide for more information. Open the Recipes below to see webhook examples that you can use for testing.RecipesAuth API v3: Approved transactionOpen RecipeAuth API v3: AVS check with in-app purchaseOpen RecipeAuth API v3: Failed PIN at ATMOpen RecipeAuth API v3: Failed PIN count exceededOpen RecipeAuth API v3: Partial approvalOpen RecipeAuth API v3: Merchant creditOpen RecipeAuth API v3: Lost cardOpen RecipeAuth API v3: Card frozen and load not permittedOpen RecipeAuth API v3: Velocity limit exceeded at ATMOpen RecipeAuth API v3: Bad CVV2 with insufficient fundsOpen RecipeAuth API v3: Expiry date mismatchOpen RecipeAuth API v3: Mobile wallet provisioning request, red pathOpen RecipeAuth API v3: Denied international incremental authorizationOpen RecipeAuth API v3: Successful card loadOpen RecipeAuth API v3: Denied cash advanceOpen RecipeAuth API v3: Visa merchant credit over Mastercard railsOpen RecipeAuth API v3: Fraud rules engine denied authOpen RecipeAuth API v3: Completion (advice) at gas pumpOpen RecipeAuth API v3: ReversalOpen RecipeAuth API v3: Balance inquiryOpen RecipeAuth API v3: Mobile wallet provisioning request, green pathOpen RecipeAuth API v3: 3-D Secure transactionOpen RecipeAuth API v3: Merchant mobile wallet checkOpen RecipeAuth SuccessAuth Denial{  ""account"": {   ""account_status"": ""N"",   ""cad"": 71563,   ""card_status"": ""N"",   ""expiration_date"": ""2301"",   ""merchant_supplied_expiration_date"": null,   ""pan"": ""5198"",   ""prn"": ""495101003222"",   ""track_expiration_date"": null,   ""xid"": 71687  },  ""amounts"": {   ""available_funds"": ""4400.64"",   ""cashback_amount"": ""0.0"",   ""currency"": ""840"",   ""exchange_rate"": ""61000000"",   ""fee_amount"": ""0.00"",   ""local_currency"": ""840"",   ""local_currency_amount"": ""25.12"",   ""trans_amount"": ""25.12""  },  ""auth_id"": 6631254,  ""auth_type"": ""Advice"",  ""bai"": null,  ""ecommerce"": {   ""is_ecommerce"": false  },  ""eligible_for_balance_return"": false,  ""emv"": {   ""is_emv"": false  },  ""entry_type"": ""Magnetic Stripe"",  ""id"": ""3bzANGgrTfCoj9LbGz3RkR"",  ""international"": false,  ""mcc"": 5542,  ""merchant"": {   ""acquirer_id"": ""006440"",   ""merchant_country"": ""840"",   ""merchant_description"": ""EXXON PRATTVILLE COOSA PRATTVILLE AL "",   ""merchant_id"": ""125807000000000"",   ""merchant_postal_code"": ""36067"",   ""merchant_state"": ""NV"",   ""terminal_id"": ""00010102"",   ""terminal_network"": ""None""  },  ""mti"": ""0120"",  ""network"": ""Mastercard"",  ""original_id"": 6620572,  ""partial_supported"": false,  ""pin_entry_capability"": ""Capable"",  ""response_code"": ""00"",  ""response_code_objects"": {},  ""risk_score"": ""None"",  ""subnetwork"": ""Mastercard Banknet"",  ""timestamp"": ""20201210:084305MST"",  ""transaction"": {   ""cardholder_present"": ""Y"",   ""transaction_initiator_code"": ""M101"",   ""recurring"": ""N""  },  ""transaction_type"": ""Auth"",  ""validation_results"": {   ""aav"": ""N"",   ""arqc"": ""N"",   ""avs_result"": ""B"",   ""cvv1"": ""N"",   ""cvv2"": ""N"",   ""cvv3"": ""N"",   ""offline_pin"": ""N"",   ""pin"": ""N""  },  ""version"": ""3.0"" } {  ""account"": {   ""account_status"": ""N"",   ""cad"": 41111,   ""card_status"": ""N"",   ""expiration_date"": ""2401"",   ""merchant_supplied_expiration_date"": ""2401"",   ""pan"": ""0777"",   ""prn"": ""494101401122"",   ""track_expiration_date"": null,   ""xid"": 41310  },  ""amounts"": {   ""available_funds"": ""7.97"",   ""cashback_amount"": ""0.0"",   ""currency"": ""840"",   ""exchange_rate"": ""61000000"",   ""fee_amount"": ""0.00"",   ""local_currency"": ""840"",   ""local_currency_amount"": ""15.93"",   ""trans_amount"": ""15.93""  },  ""auth_id"": 6620500,  ""auth_type"": ""Auth"",  ""bai"": null,  ""ecommerce"": {   ""is_ecommerce"": false  },  ""eligible_for_balance_return"": false,  ""emv"": {   ""is_emv"": false  },  ""entry_type"": ""Card Not Present"",  ""id"": ""Kz5rWJZFTB__i10ejOk7Fh"",  ""international"": false,  ""mcc"": 5734,  ""merchant"": {   ""acquirer_id"": ""010100"",   ""merchant_country"": ""840"",   ""merchant_description"": ""ADOBE ACROPRO SUBS  4085366000 CA "",   ""merchant_id"": ""000372808060886"",   ""merchant_postal_code"": ""951100000"",   ""merchant_state"": ""NV"",   ""terminal_id"": ""01296759"",   ""terminal_network"": ""None""  },  ""mti"": ""0100"",  ""network"": ""Mastercard"",  ""original_id"": 0,  ""partial_supported"": false,  ""pin_entry_capability"": ""Other"",  ""response_code"": ""51"",  ""response_code_objects"": {   ""51"": [    ""Non-sufficient funds and not a force post""   ]  },  ""risk_score"": ""123"",  ""subnetwork"": ""Mastercard Banknet"",  ""timestamp"": ""20201210:084232MST"",  ""transaction"": {   ""cardholder_present"": ""N"",   ""transaction_initiator_code"": ""M101"",   ""recurring"": ""N""  },  ""transaction_type"": ""Auth"",  ""validation_results"": {   ""aav"": ""N"",   ""arqc"": ""N"",   ""avs_result"": ""B"",   ""cvv1"": ""N"",   ""cvv2"": ""N"",   ""cvv3"": ""N"",   ""offline_pin"": ""N"",   ""pin"": ""N""  },  ""version"": ""3.0"" } LanguageShellNodeRubyPHPPythonAuthenticationBearerJWTBearer "
8,docs.galileo-ft.com/pro/reference/api-reference-external-trans-api-about-external-trans-api-security,"Security The client's product can be configured so that Galileo will use a JSON Web Token (JWT) for authenticating with the client's webhook. (While it is optional, it is strongly encouraged that clients configure their product to use JWT.) A shared secret will be used for encoding and decoding the token. The payload will have the following claims: iat - Issued At exp - Expiration TIme iss - ""galileo"" The token will be created using the following Python code: Pythonimport jwt from datetime import datetime, timedelta payload = {  'exp': datetime.utcnow() + timedelta(seconds=5),  'iat': datetime.utcnow(),  'iss': 'galileo' } token = jwt.encode(payload, secret, algorithm='HS256') where secret is the shared secret. The token will be placed in the body of the request, in the jwt property. (This will likely change in a future release.) Security Example Here is the value for exp = 1534274886 and iat = 1534274881 that would appear in the request body: JSON{  ...  ""jwt"": ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnYWxpbGVvIiwiaWF0IjoxNTM0Mjc0ODgxLCJleHAiOjE1MzQyNzQ4ODZ9.1xUk4iNFGWLo01MyJUHXRlyrNlzwPvDMSXpN38TrblU"" } Table of Contents Security Example "
9,docs.galileo-ft.com/pro/docs/managing-overdraft-accounts,"Managing Overdraft Accounts Account holders must meet requirements to enroll in overdraft protection and to maintain access to the overdraft line of credit. This guide is an overview of requirements for overdraft account eligibility, as well as account holder loss of access to the line of credit. Account holder eligibility An account holder must meet these requirements set by Galileo to be eligible for an overdraft account: The account holder must have an active primary account (usually a DDA) with a balance greater than or equal to zero. The account holder must opt in to overdraft protection. 📘NoteYou or your bank can implement additional requirements for account holder eligibility. After an overdraft account is created, the account holder must meet these requirements for ongoing eligibility: The account holder must keep a correctly formatted email address on record. The overdraft account must be paid in full within 35 days after funds are first drawn on the overdraft account (configurable). The account holder must make at least one deposit to the primary account at or above a threshold amount within 35 days (configurable). An automated process checks primary accounts for eligibility on a daily basis. These checks are performed only when account feature 17 for the primary account is P. The process suspends the overdraft account when the primary account does not meet eligibility requirements. Loss of access to the line of credit An account holder loses access to the overdraft line of credit if any disqualifying events or conditions occur. When the account holder loses access to overdraft, the overdraft account is no longer considered to be ""active,"" meaning that qualifying transactions cannot draw on overdraft funds. Some of these disqualifying events and conditions result from account holder actions, some are technical reasons, and some result from the automated process that checks the primary account for eligibility. This table shows how to reactivate an overdraft account that is no longer active, depending on the reason for the deactivation. You can usually see the reason on the overdraft information page in the CST. Disqualifying event or conditionReactivation methodAccount holder opts out of overdraft.Call Set Account Feature to change feature 17 to P or opt back in using the CST.All overdraft funds are usedThe account holder deposits funds into the primary account to free up overdraft funds.Overdraft account in status: Q (delinquent)The account holder deposits enough funds into the primary account to pay off the delinquent transaction(s).Overdraft account in status: K (suspended)See Suspended accounts.Overdraft account in status: R (charged off)See Account charge-off.Primary account switches to a product that does not support overdraftSwitch the primary account to a product that supports overdraft using Switch Product, Set Account Feature, or the CST.Overdraft account does not existUse Add Account to create the overdraft account or add it using the CST. See Creating an Overdraft Account for instructions. Suspended accounts An account in status: K has been suspended or ""frozen."" This table shows how to reactivate an account that has been frozen, depending on the reason for the suspension. Suspension reasonReactivation methodAccount holder does not have a properly formatted email address on record.Use the CST or Update Account to provide a valid email address on the primary account.A qualifying deposit has not been made to the primary account, or the primary account balance is not higher than 0.00.Account holder deposits sufficient funds into the primary account.Fee cap limit has been reached, either the number of fees or the total fee amountWait until the first day of the next month, when automated processes restore the account. Account feature 17 must already be P.Account feature 17 is not P. Account holder has opted out.Call Set Account Feature to set feature 17 to P or opt in using the CST. Manually disabling an overdraft account To manually prevent a primary account from drawing funds from the overdraft account, you have these options: Freeze the overdraft account Opt out of the overdraft account Freezing the overdraft account An overdraft account will be frozen by Galileo processes when an overdraft account exceeds the fee cap limit for the month. You can also freeze an overdraft account using the Program API by following the instructions below. When the overdraft account is frozen, the primary account cannot draw funds from it, but the account holder can still deposit funds into the primary account, which go toward paying the overdraft balance. Be advised that on the first day of the month, Galileo processes will automatically unfreeze a frozen overdraft account if the primary account meets system eligibility requirements, even if you freeze the account manually. To freeze the overdraft account manually, call the Modify Status endpoint with these values: accountNo: <overdraft PRN> type: 14 📘NoteFreezing an overdraft account does not change its status, nor does it change account feature 17 for the primary account. You can see the freeze status for the overdraft account by calling Get Overdraft Balance. To unfreeze an overdraft account, call the Modify Status endpoint with these values: accountNo: <overdraft PRN> type: 15 Opting out of the overdraft account Call the Set Account Feature endpoint with these parameters: accountNo: <primary account> featureType: 17 featureValue: E This setting prevents the primary account from drawing on the overdraft account as well as prevents the internal Galileo processes from activating the account. Galileo processes will not change account feature 17 to P after you have set it to E in this manner. When account feature 17 is I or E, the account holder can still deposit funds in the primary account, and those funds will go toward paying off the overdraft balance. Account charge-off If funds owed against an overdraft account remain unpaid for a configurable period of time (usually 35 days), the account is considered to be in default and Galileo starts the charge-off process. Funds are swept from the overdraft account to the primary account, then from the primary account to your charge-off account. For more information, see the workflow, Funds transfer in case of non-repayment. Charge-off recovery Charge-off recovery is an optional feature that allows Galileo to reactivate an account holder’s primary account after it has been charged off. When configured, any funds loaded into the primary account after closure trigger the transfer of the amount that was charged off from the primary to the overdraft account. If the primary account balance is less than the charge-off amount, all available funds are transferred to the overdraft account. The primary account will have a balance of 0.00, and the overdraft and primary account will remain in a charge-off status until the overdraft amount is repaid in full and the primary account balance is at least 0.01. If the primary account balance is greater than the charge-off amount, only the charge-off amount is transferred to the overdraft account. The primary account is reopened and the account holder can use it for transactions, but the overdraft account remains closed. To reactivate overdraft protection, you or the account holder must contact Galileo Customer Service. When charge-off recovery is not configured, if funds are transferred into the primary account, Galileo takes no action and the account holder must contact Customer Service to pay the charge-off amount owed and to reactivate overdraft protection. Activation and deactivation events You receive overdraft-related events according to your arrangements with Galileo. Galileo does not generate an event message for every disqualifying event or condition. For example, if the primary account switches to a product that does not support overdraft, you get the product-switch event (PSWC: product_switched) but you are not notified that overdraft is no longer available. Likewise, if you create a primary account and make it eligible for overdraft but do not create the overdraft account, there is no event message to remind you that the overdraft account needs to be created. When the status of an overdraft account changes, Galileo sends you the ODSC: overdraft_status_change event. Depending on the new status, you will also receive these events: K (suspended, frozen) — ODSK: overdraft_suspended N (active) — ODSN: overdraft_limit_change (a misnomer: the limit is not changed) When the status changes to R (charged off) or Q (delinquent), you do not receive a separate notification. However, the primary account will be in the same status as the overdraft account. Account holder inquiries You configure your own system to handle account holder inquiries about overdraft account eligibility and usage. Galileo offers the following services that you can incorporate. Monitoring and notifications — Galileo reports events, such as change in account holder status, funds used, funds owed, and program rule compliance. You can access this data using Galileo’s Events API (see Events API webhooks for overdraft) and the Customer Service Tool (see Viewing overdraft accounts in the CST). Custom data files (CDFs) — You can retrieve overdraft-related data at the program and product level from Galileo’s CDFs, delivered via SFTP, or in real time from gAnalytics reports. Updated 2 months ago Table of Contents Account holder eligibility Loss of access to the line of credit Suspended accounts Manually disabling an overdraft account Account charge-off Activation and deactivation events Account holder inquiries "
10,docs.galileo-ft.com/pro/reference/api-reference-card-authorization-network-codes,"Network Codes NetworkAuth APIEvents APIProgram APIRDFs subnetworknetworknetwork_codeNETWORK CODEAllpointAllpointAAACirrusMastercard Debit SwitchPCPDiscoverDiscoverDDDMaestroMastercard Debit SwitchPPPMastercardMastercard BanknetMMMMoneyPassStar MoneyPassS* O**SSPrestoStar PrestoS* R**SSPulsePulseBBBSTARStarSSSVisaVisaVVVVisa InterlinkVisa InterlinkV* I**IIVisa PlusVisa PLUSV* E**ZP * Authorization Events ** Settlement Events When Galileo sends an Authorization Event message for the Visa or STAR networks, the network field contains the network, whereas for the Settlement Event message, network contains the subnetwork. For example, an auth message for the Visa Plus subnetwork has network: V and for the corresponding Settlement Event it has network: E. For your events webhooks you may want to create a lookup table to identify networks V, I and E as Visa networks, for example, and networks S, R and O as STAR networks. fee_auth codes These are the network codes for the fee_auth field in the BFEE: fee event: CodeNetworkAAllpointBPulseCDiscoverDMastercard Maestro/Cirrus (debit)MMastercard Banknet (credit)OMoneyPassPVisa PlusRPrestoSStarVVisa and Visa InterlinkTable of Contents fee_auth codes "
11,docs.galileo-ft.com/pro/reference/api-reference-events-api-dispute-created,"dispute_created Code — DSCT Event trigger — A dispute is created. Processes — These processes contain the event trigger: Submit Case endpoint Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description dispute_amount X The amount of the dispute. Example: ""3245.22"" dispute_id X Unique identifier for the dispute. Example: ""12432"" dispute_notice_date X Date on which the cardholder disputed the charge. Format YYYY-MM-DD Example: ""2023-04-23"" dispute_rege_date X Due date for a Regulation E dispute. Format YYYY-MM-DD Example: ""2023-05-13"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DSCT"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" settle_detail_id X ID that maps back to the settlement record for the transaction. Example: ""13354855"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""dispute_created"" Example JSON# dispute_created example: { ""dispute_amount"": ""3245.22"", ""dispute_id"": ""12432"", ""dispute_notice_date"": ""2023-04-23"", ""dispute_rege_date"": ""2023-05-13"", ""msg_event_id"": ""243693"", ""msg_id"": ""DSCT"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""settle_detail_id"": ""13354855"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""dispute_created"" } Table of Contents Fields Example "
12,docs.galileo-ft.com/pro/docs/setting-up-secured-credit,"Setup for Galileo Secured Credit When setting up a Galileo's Secured Credit product, you must work with the sponsor bank and card network to create a business plan that meets bank and network requirements. This guide describes considerations for Galileo Secured Credit product. Obtaining bank and network approval Before you can offer a secured credit product, you must get a sponsoring bank. The bank that holds your customer accounts may not sponsor secured credit. If this is the case, you will need to use a separate sponsor bank for secured credit. When you set up a secured credit product, you are adding a new program with new BINs. You will need approval for the new BINs from both your sponsor bank and from the card network. From the card networks’ perspective, the card behaves more like a DDA than revolving credit, so it is important to be clear about why you want a credit BIN. You can ask your Galileo representative to help you with your conversation with the network to avoid misunderstandings. Underwriting and cardholder qualifications Galileo does not provide underwriting. You must partner with a third-party underwriter to insure the accounts and to determine what qualifications a cardholder must have, such as minimum FICO score and minimum age. Fees and interest If you decide to set up fees for your Galileo Secured Credit product, you determine what kinds of fees to assess, the fee amounts, and when and how to assess them. For secured credit products, Galileo supports either monthly or annual fee assessment with the Assess Fee endpoint. Your Galileo representative can help you set up fee types for your program. If you charge interest, you will need to calculate the amount and assess it from your own system. While there is a pending dispute on an account, you are responsible for stopping the accrual of interest and for adjusting the stoppage when the dispute is resolved. Collateral account and money movement For Galileo Secured Credit product, movement of funds into the collateral account is not automated by Galileo. The account that funds are moved from must be an account capable of holding and transferring money, such as a Galileo-hosted DDA, savings account, or an external spending account. Other types of accounts are possible as well. You determine when and how the cardholder can move funds into and out of the collateral account. You can move funds into the collateral account with a Create Account Transfer request. You can move funds out of the collateral account with either a Create Adjustment or a Create Payment request. Your sponsor bank may have conditions for allowing customers to move funds out of the collateral account. Delinquency, default, and collections For secured credit products that have a charge card, Galileo determines delinquency based on the first day of the customer's billing cycle and payment rules on the account. You determine when to send an account to collections. You may consider setting up a grace period before a delinquent account is defaulted. It is also common to set a spending block on delinquent accounts. Set up your internal system according to your business plan. 📘NoteGalileo can handle reporting only for secured credit products that operate as a charge card with the full amount due each period, and not other credit products like secured cards with revolving credit. If you have Galileo prepare a Metro 2 credit report for you, Galileo will include each delinquent account in the report. For general information on credit reporting, see Reporting to credit bureaus in this guide. You provide your own terms and conditions to state what happens when a cardholder does not pay back the credit line. Galileo does not automatically move funds from the secured credit account to pay back the amount owed. If necessary, you may have a debt facilitator assist with collections. Galileo does not recommend that you close the account when the cardholder defaults, but that you block spending instead. Reporting to credit bureaus There is no legal requirement to report credit account activity to the three credit bureaus. Whether you report the charge card activity to the credit bureaus depends on whether you believe your cardholders will benefit from it. Reporting to the bureaus will most likely help your cardholders establish or improve their credit ratings because they are likely to have a low utilization rate relative to their credit limits. The boost a cardholder can expect in this case is around 35 points at first, and then gradual increases thereafter. Metro 2 reporting at Galileo 📘NoteGalileo can handle Metro 2 reporting only for secured credit products that operate as a charge card with the full amount due each period, and not other credit products like secured cards with revolving credit. Galileo can prepare a Metro 2 credit report for you and then submit the report to the credit bureaus. This report is automatically generated once per month, the day after the customer’s billing cycle ends. To prepare the credit report, you will need to perform these tasks: Set up relationships with each of the credit bureaus to obtain a subscriber ID. This is a three-way contract between each of the three bureaus, you, and Galileo. Ensure that the credit limit has been updated to the correct amount for each account. See Setting the credit line under Developer Setup for Secured Credit. Account closure status reporting When a customer’s Galileo Secured Credit account closes, you can indicate the account closure status using Galileo’s Program API. If Galileo handles your credit reporting, Galileo will include the status in the Metro 2 report. A customer’s status at account closure may affect their credit score. 📘NoteGalileo can handle reporting only for secured credit products that operate as a charge card with the full amount due each period, and not other credit products like secured cards with revolving credit. Account closure statuses indicate whether the amount owed on the credit line was paid and who initiated the closure (the customer or the issuer). Account closure statuses are: Account is unpaid, closed by the issuer, and charged off Account is unpaid, closed by the issuer, and is in internal collections Account takeover fraud, account closed by the issuer Account is paid and closed by the issuer due to inactivity Account is paid and closed at the customer’s request For developer instructions to send account closure statuses see Reporting account closure status under Developer Setup for Galileo Secured Credit. Delinquent account closures and reporting You may set a policy to state that, when an account is delinquent, the account is closed, and the funds from the collateral account are used to pay the amount owed. If you do this, and Galileo generates your Metro 2 credit report for you, Galileo must report the account closure and delinquency to the credit bureaus. If the account is closed after the report is sent, Galileo will not include the account in future reports. If the customer wants to reopen the account, you must create a new account instead and Galileo will report the new account to the credit bureaus. However, if you reopen the account before Galileo sends the report, Galileo will continue to include the account in future reports. Bankruptcy reporting Galileo offers a feature for bankruptcy reporting to credit bureaus. Clients can request the Bankruptcy Reporting guide for more information. Chargebacks and disputes For charge cards associated with a secured credit product, you may be able to use the same chargeback process that you have for debit cards if the card network is the same. However, you are responsible for setting up your own internal process to handle disputes for fees and interest for the secured credit product. There is no provisional credit for a charge card. Statements and invoices You can use RDFs and your own internal reporting to generate statements and invoices according to your agreement with your sponsoring bank. You can change the frequency of invoices depending on how far ahead you can float transactions. For example, you could have two billing cycles per month, or set up weekly billing cycles. See Billing cycle configurations in this guide for more information. CST support for Galileo Secured Credit This section describes features in the CST related to secured credit. Billing cycles CST fieldLocationDescriptionNext Billing DateAccount Info > Account Details > Summary InformationThe customer’s next billing cycle start date. Galileo setup ParameterLevelDescriptionALWNBProductControls whether a call to the Create Adjustment endpoint can drive an account balance negative. When this parameter is set to 1, a call to the Create Adjustment endpoint can drive the balance negative.BCDAYProductControls the length of time to wait after the bill cycle start date before setting the bill cycle and assessing fees. Use an integer to specify the number of days or MONTH to indicate a one month bill cycle.CYCLEProductControls whether to assess maintenance fees monthly (MON) or yearly (YER). Weekly assessment is not available for secured credit products. Works in conjunction with CYMET.CYDAYProductSpecifies the day of the month to assess fees when CYCLE is set to MON. Valid values are 1–28. Weekly assessment is not available for secured credit products.CYMETProductControls whether to assess a fee by account (PRN) or balance (bal_id). This parameter also controls what happens if the balance is lower than the fee amount. Values for secured credit products are: A — Set an independent bill cycle for each account and assess fees by account. B — Set the same bill cycle for all accounts on the same balance and assess fees by balance. HAD — Hybrid account. Assess fees by account and defer the fee if it will drive the balance negative. HAP — Hybrid account. Assess fees by account and charge a partial fee if the entire fee will drive the balance negative. This effectively takes the balance to 0. HBD — Hybrid account. Assess fees by balance and defer the fee if it will drive the balance negative. HBP — Hybrid account. Assess fees by balance and charge a partial fee if the entire fee will drive the balance negative.Updated 7 days ago What’s NextDeveloper Setup for Galileo Secured CreditTable of Contents Obtaining bank and network approval Underwriting and cardholder qualifications Fees and interest Collateral account and money movement Delinquency, default, and collections Reporting to credit bureaus Metro 2 reporting at Galileo Account closure status reporting Delinquent account closures and reporting Bankruptcy reporting Chargebacks and disputes Statements and invoices CST support for Galileo Secured Credit Galileo setup "
13,docs.galileo-ft.com/pro/docs/card-creation-endpoints,"Card-Creation Endpoints This guide describes which endpoint to use when creating a card. New customer By far the most commonly used endpoint to create a card for a new customer is Create Account. This endpoint creates a new customer record, a new account, and a new card. You can use this endpoint to create a physical card, a virtual card or a Digital First card. With this endpoint you also have the option to load funds onto the card at the time of card creation. Do not use this endpoint for existing customers; instead, use Add Account (below). See Creating an Account for instructions. Also see Endpoints for performing ID verification in the Customer ID Verification guide for other enrollment strategies. Existing customer To create an additional card for a customer who already exists in your system, use the Add Account endpoint to create a secondary account with a separate card. See Adding an Account for instructions on using the endpoint and Primary and secondary account scenarios in the About Accounts guide to see how the account relationships are set up. Virtual-only cards To onboard a new customer and create a virtual-only card (one that will never be embossed), use the Create Virtual Card Account endpoint. To use this endpoint you must be PCI compliant, because the full PAN is returned in the response. The value passed in prodId must be for a virtual card. The most common use case for this endpoint is to create cards for a business to pay its vendors. For most other virtual cards you can use Create Account with a virtual product ID for prodId. Instant-issue cards To generate a batch of instant-issue cards, use Create Bulk Card Order. To issue an instant-issue card to an individual, use the Create Account endpoint. In the endpoint call you can omit parameters that control express delivery and ship-to addresses, because the card is already in the cardholder's hand. See Setup for Instant Issue for the complete procedure. Temporary replacement cards If you would like to issue a virtual card as a temporary replacement for a lost or stolen physical card, use the Add Card endpoint, which creates a new card record for the replacement card account. The prodId must be for a virtual card, not for a conventional physical card. See Temporarily issue cards for more information. Lost or stolen cards When a card is lost or stolen, it must be replaced, which means that a new account with a new card is created for the cardholder. Use the procedure in Lost, Stolen, or Damaged Cards to automatically create a physical replacement card. For lost or stolen virtual cards, use Add Card to create the new card. Damaged cards When a physical card is damaged and needs replacement, you reissue the card instead of creating a new card. See the Reissuing Cards guide for instructions.Updated 8 months ago Table of Contents New customer Existing customer Virtual-only cards Instant-issue cards Temporary replacement cards Lost or stolen cards Damaged cards "
14,docs.galileo-ft.com/instant/changelog/welcome-to-the-galileo-instant-docs,"Introducing the Galileo Instant API and more! Instant API The Instant API is now available! We’ve tailor-made the Instant API to ensure you can integrate seamlessly with Instant and provide a great experience for your customers. Head to the Instant Dashboard to create Products and API keys. Documentation Our new Instant API also includes refreshed API documentation. In addition to a more user-friendly layout, we’ve added developer guides to help you get your integration up and running quickly. Cardholder Insights We’ve also added cardholder data insights to the Instant Dashboard, so you can see how your card program is performing. These include tracking the spending, deposits, and new enrollments taking place on your program. Please let us know if you have any questions. We hope you enjoy these new additions to Instant. Regards, The Galileo Instant Team "
15,docs.galileo-ft.com/pro/changelog/november-2020,"November 2020 Guides debut We added the first set of guides to help you understand how to use Galileo's APIs: Accounts About Accounts — Describes the account structure in the Galileo system Creating an Account — How to create an account using the Create Account or Create Virtual Card Account endpoints Adding an Account — How to add a secondary account to an existing account holder Cards About Cards — Describes how cards are represented in the Galileo system Activating a Card — How to activate a new physical card using the Activate Card endpoint Lost, Stolen, or Damaged Cards — How to report cards as lost, stolen, or damaged, and how to replace or reissue them Transactions About Transactions — Basic characteristics of transactions in the Galileo system Transaction History — How to create your own transaction history or how to use the Program API for transaction history Mapping Transactions Within Your System — How to create unique identifiers for transactions in your system Creating an Internal Transfer — How to transfer funds from one account to another in the same program Creating a Payment — How to create, update, or reverse a payment (credit) for a customer account JWT validation for the Events API We now support using JWT to validate JSON messages in the Events webhook, in addition to using HMAC. New business name parameter For Program API endpoints that pass a customer's first and last names, we added the new businessName parameter, which you populate when prodId specifies a business product. Create Account Create Virtual Card Account Start Enrollment Update Enrollment Update Account New Auth API parameters We added new parameters to Auth API Webhook 2.0 and Auth API Webhook 3.0: The validation_results parameter includes avs_result, which indicates what was verified by AVS. mti displays the ISO 8583 message type identifier. transaction indicates whether the transaction is recurring and whether the cardholder was present. Datetime in date parameters We changed our validation method to accept datetime in all parameters that accept a date. Card data in Add Account response The Add Account endpoint now returns card_id. If you are PCI compliant, it also returns PAN/CVV/expiry. New endpoint added The new Charge Off Account endpoint charges off the specified account (sweeps funds and sets balance to 0) and moves the account to status: R (Charged off). New pagination method for selected endpoints For Program API endpoints that return large amounts of data, we standardized a new pagination method. The new default is 200 results per page. To change this default, set the provider parameter MXRPG. Get Transaction History Get All Transaction History Get Authorization History Get Deposit History Get Pending Deposits Get Bill Payment History Get Payment History Get ACH Transaction History Get Fee History Get Pending Merchant Credits "
16,docs.galileo-ft.com/pro/reference/post/runenrollmentcip,"Run Enrollment CIP 📘NoteValidation on an SSN is limited to a length check.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description483-01Failed CIP483-02Enrollment record could not be found Populate transactionId with the transaction ID that was used when the customer record was first created using Start Enrollment. If the Galileo system cannot find the transaction ID, it will locate the customer record using the id and idType parameters.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
17,docs.galileo-ft.com/instant/changelog/monthly-statements-and-ach-transfers,"Monthly Statements and ACH Transfers Monthly Statements Show your cardholders a historical summary of their transactions, broken up by month. The new endpoint allows you to fetch a list of available statements and to obtain a specific statement as an encoded PDF. See the guide for more details. ACH Transfers Galileo has partnered with Plaid to simplify the process of linking ACH accounts. After your cardholders have authenticated their accounts with Plaid, use the Instant API to create an ACH account with Plaid's processor_token. See the guide for more details. An ACH transfer may be initiated between a cardholder's spending account and ACH account via the Instant API. See the guide for more details. "
18,docs.galileo-ft.com/pro/docs/creating-a-provisioning-request,"Creating a Provisioning Request This guide describes part of the procedure for push-provisioning a tokenized card to a mobile wallet, using the Create Provisioning Request endpoint. Prior to performing this procedure, you must work with Galileo, the mobile wallet providers, and your card network to set up your program to use mobile wallets, as described in the Setup for Mobile Wallets guide. Prior to calling Create Provisioning Request Before initiating the push-provisioning process, the card to provision must already exist in the Galileo system. If the card does not exist, call one of these endpoints to create the account. Create Account — Use when the customer does not have an account on the Galileo system, or a customer wants to have a secondary account to another customer's primary account. See the Creating an Account guide for details. Add Account — Use when the customer already has an account on the Galileo system and wants to add a secondary card. See the Adding an Account guide for details. A provisioning request is successful only when the following fields in the customer record are populated. (For existing accounts call Get Account Overview to review the information): First name Last name Address 1 Address 2 (if available) City State Zip or postal code Country code Email Mobile phone number Use Update Account to populate or modify the fields as necessary. When a customer requests a tokenized card for a mobile wallet through your mobile app or web site, you send a request to the wallet provider to get keys, certificates, and other data to include in the Create Provisioning Request call that you send to Galileo. (Consult the documentation from the mobile wallet provider for instructions.) With the data in Galileo's response, you send a tokenization request to the mobile wallet provider through its SDK. As shown in Push-provisioning workflow in the Setup for Mobile Wallets guide, the wallet provider, the card network, and Galileo perform the final steps to complete the provisioning. Result of calling Create Provisioning Request When Create Provisioning Request has run successfully, you obtain encrypted information to send to the mobile wallet provider. Parameters Which parameters to populate depends on the wallet provider and the information that the provider sent to you. Parameters for Apple Pay Use these parameters for a provisioning request to Apple Pay. See the Create Provisioning Request reference for details and this recipe for an example: Create Provisioning Request call: Apple PayOpen Recipe ParameterUsageaccountNoUse the CAD (card_id) of the card to provisionwalletProvider1cert1The leaf certificate provided by Apple Pay that is signed using cert2. See Certificate formatting.cert2The subordinate certificate provided by Apple Pay that is signed using the Apple Pay’s Certificate Authority. See Certificate formatting.nonce8-character value provided by Apple Pay.nonceSignatureValue provided by Apple Pay. Parameters for Google Pay Use these parameters for a provisioning request to Google Pay. See the Create Provisioning Request reference for details and either of these two recipes for an example: Create Provisioning Request call: Visa + Google PayOpen Recipe Create Provisioning Request call: Mastercard + Google PayOpen Recipe ParameterUsageaccountNoUse the CAD (card_id) of the card to provisionwalletProvider2clientWalletAccountIDVisa only. Provided by Google Pay.clientDeviceIDVisa only. Provided by Google Pay. Parameters for Samsung Pay Use these parameters for a provisioning request to Samsung Pay. See the Create Provisioning Request reference for details and either of these two recipes for an example: Create Provisioning Request call: Visa + Samsung PayOpen Recipe Create Provisioning Request call: Mastercard + Samsung PayOpen Recipe ParameterUsageaccountNoUse the CAD (card_id) of the card to provisionwalletProvider3cert1This parameter is no longer required for Samsung Pay implementations. If you have a legacy setup that requires this field, set the SFISP parameter.cert2This parameter is no longer required for Samsung Pay implementations. If you have a legacy setup that requires this field, set the SFISP parameter.clientWalletAccountIDVisa only. Provided by Samsung Pay.clientDeviceIDVisa only. Provided by Samsung Pay. Create Provisioning Request workflow Consult this explanation for the Create Provisioning Request workflow. The actual sequence of events in the Galileo system may vary. You populate Create Provisioning Request with data from the wallet provider and send it to Galileo. Galileo verifies that walletProvider is valid, and if it is not, returns status: 548-10. Galileo verifies that you have the wallet provider set up properly, and if you do not, returns status: 548-09. Galileo verifies that the card belongs to a card network that Galileo supports for mobile wallets, and if it does not, returns status: 548-06. For Apple Pay, Galileo validates the certificates. If validation fails, Galileo returns status: 548-01. Galileo verifies that the product is eligible for tokenization, and if it is not, returns status: 548-02. Galileo verifies that the card status permits tokenization, as specified in TOKCS (default: N). If the card is in the wrong status, Galileo returns status: 548-03. For Visa, Galileo verifies that all additional parameters are valid, and if they are not, returns status: 548-11. Galileo generates and encrypts the payload for the response. If Apple Pay encryption fails, Galileo returns status: 548-07. If Galileo was unable to get provisioning data from its databases, Galileo returns status: 548-08. Galileo sends the response. Certificate formatting The values for cert1 and cert2 must be the hexlified (case-insensitive) binary data of the certificate. Example using a PEM-encoded certificate A certificate in PEM format should follow the typical standards for PEM: the tags -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- should be present and the Base64-encoded value should have lines of length 64. Start with the original certificate with its standard PEM formatting: -----BEGIN CERTIFICATE----- MIICizCCAjGgAwIBAgIJAKsEmM1ALepFMAoGCCqGSM49BAMCMGUxCzAJBgNVBAYT AlVTMQ0wCwYDVQQIEwRVdGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEbMBkG A1UEChMSR2FsaWxlbyBQcm9jZXNzaW5nMREwDwYDVQQDEwhqaGVuc2xleTAgFw0x ... -----END CERTIFICATE----- Perform the hexlify operation on the entire certificate to get the hex string: 2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494943697a4343416a4767417749424167494a414b73456d4d31... Example using DER-encoded certificate A certificate with DER encoding may look like the example below, or it may be a string of special characters: 0��0�1� ______________________________________________________________________________ � ��@-�E0 ______________________________________________________________________________ *�H�= ______________________________________________________________________________ ______________________________________________________________________________ 0e1 0  0 ______________________________________________________________________________ U ______________________________________________________________________________ US1 ______________________________________________________________________________ U ______________________________________________________________________________ Utah10 ______________________________________________________________________________ U ______________________________________________________________________________ Salt Lake Perform the hexlify operation on the entire certificate to get the hex string: 3082028b30820231a003020102020900ab0498cd402dea45300a06082a8648ce3d0403023065310b3009060355040613025553310d300b0... Event messages The Create Provisioning Request endpoint does not directly trigger any events. For event messages that are triggered by other aspects of the wallet-provisioning process, see Events API messages in the Setup for Mobile Wallets guide. Sample endpoint responses The responses to this endpoint vary according to the wallet provider. Consult the Create Provisioning Request endpoint description as well as these recipes for examples: Create Provisioning Request response: Apple PayOpen Recipe Create Provisioning Request response: Google PayOpen Recipe Create Provisioning Request response: Samsung PayOpen Recipe The wallet-specific fields that are returned in addition to the response are in the provisioning_request_data object. Apple Pay FieldDescriptionExampleencryptedPassDataAn encrypted JSON file containing the sensitive information needed to add a card to a wallet.F92C1D45EFF127F92C1D4...2C1D45EFF127==ephemeralPublicKeyA generated key that is combined with a private key.0499a6f42e83ea4f150a78780ffb562c9c....activationDataThe request's activation data. This must be Base64-encoded.8BF291C91F3ED4EF92C1D45EFF127C1F9ABC12348D PPALE is a product parameter that is set for older programs. When PPALE is set to Y, the three fields in this table could be either Base64-encoded or hex-encoded. When PPALE is not set to Y, then each of the three fields will always be Base64-encoded. Google Pay FieldDescriptionExampleopaquePaymentCardA Base64-encoded or Base64url-encoded opaque string.c2FtcGxlIHRleHQK Samsung Pay FieldDescriptionExamplepayloadA Base64-encoded or Base64url-encoded opaque string.c2FtcGxlIHRleHQK Next steps With the data from the provisioning_request_data object, create a provisioning request that you send to the wallet provider via its SDK. Status codes Consult this table to see an explanation of what each status code means and which next steps to take, if any. Status codeDescriptionNext steps548-01Certificate chain validation failedVerify that the certificate has not expired and that it is valid.548-02Virtual product ID not specified.Verify that PPUPC is set to Y for the product.548-03Bad XIDVerify that the correct value is in accountNo.548-04Error creating new PRN (legacy setups only)Contact Galileo for troubleshooting.548-05Account creation error (legacy setups only)Contact Galileo for troubleshooting.548-06Card network not implemented. The card in accountNo belongs to a card network that Galileo does not support for mobile wallets.Verify that the PAN belongs to a card network that Galileo supports for mobile wallets.548-07Apple encryption failure: There was an issue with the shared library or key generationVerify that you are using the correct libraries or that the key was properly generated. Verify that the setting for PPALE is correct for legacy setups.548-08Error getting provisioning data: There was a database connection issue, or an exception occurred while getting payment or activation dataContact Galileo for troubleshooting.548-09Wallet provider not implementedVerify that the integration work for the provider specified in walletProvider has been done. Contact Galileo for more information.548-10Wallet provider not recognizedVerify that the value for walletProvider is 1, 2, or 3548-11Visa request data missing or incomplete. Samsung Pay and Google Pay only.Verify that the Visa request data is present and that it contains all required attributes.Updated 7 days ago Table of Contents Prior to calling Create Provisioning Request Result of calling Create Provisioning Request Parameters Parameters for Apple Pay Parameters for Google Pay Parameters for Samsung Pay Create Provisioning Request workflow Certificate formatting Event messages Sample endpoint responses Next steps Status codes "
19,docs.galileo-ft.com/pro/docs/design-a-card,"Design a Card This article explains how to design your physical and digital card products. In conjunction with your bank, you can design the appearance of your cards. Card design helps differentiate your card in the customer’s wallet. Designing your card art Begin by consulting with your bank and your primary card network to get the required elements for a card design. These required elements could include the following: Bank logo Network logo Your logo or company name Card descriptor such as ""Debit Card"" or ""Cashback"" Space for the cardholder name and optionally a line underneath Space for an EMV chip Optional security features such as a hologram Disclaimers Customer service information As desired, you can create multiple card designs for the same product and give your cardholders a choice, or you can create different designs for different rewards tiers. For each design you may need to create as many as three versions, depending on which card products you provide. Although the proportions of the card art for physical and digital cards are the same, you cannot use exactly the same image for all card types: Physical — Usually requires labels such as ""Valid thru"" for the expiry date. Must include the design and text for the back of the card, where the CVV is printed and where you can include customer-service information and disclaimers. Digital — The CVV is labeled and displayed on the front of the card with the expiry but embedded chip elements are not displayed. Tokenized — Does not display the expiry, CVV or full PAN. 📘NoteAll card art for all formats must be approved by your issuing bank. Physical card design To make your card stand out among other cards, you can leverage the full sensory experience of physical card ownership—how the card looks, feels, sounds, and even smells! Instead of the conventional plastic, you can make your card out of novel materials such as metal, bamboo or wood, which changes how the card feels in the hand and affects how it sounds when dropped on a countertop. Novel surface textures can add to the card's tactile appeal, such as raised patterns or nubbly patches. Some emboss vendors even offer custom scents. Your card's visual appeal continues with the card art, which displays your logo to its best advantage and establishes your branding theme. You can then add elements such as metallic, sparkling or transparent sectors. You can also create a basic card design and then offer more ""advanced"" designs and materials for your more dedicated customers. For example, you could offer a plastic card for all cardholders at first, but after cardholders demonstrate loyalty or maintain an account-balance threshold, they can become eligible for a more elegant card, such as a metal card. When a cardholder presents an impressive card in public, onlookers are sure to ask about it, giving your cardholder the chance to share their experiences with your product. The specifications for your card design are determined by your emboss vendor in conjunction with the card network and your bank. You will not provide Galileo with the physical card design, but if you have multiple designs for the same product, you will need a way to communicate the design for each card you create. See Specifying a card design for more information. Digital card design Unlike a physical card, a digital card has only one side, which displays the cardholder name, PAN, expiry, and CVV, as well as the chosen artwork. For virtual cards and digital representations of physical cards (Digital First), follow these instructions to create the card template: Create two templates for the digital card: One blank template One template with all information populated: PAN, expiry, and CVV. This enables Galileo to know how to format the digital card image. Once you have designed the templates, work with Galileo to confirm that all the elements are properly included. Get approval from your bank. Register your blank template with Galileo. Blank card template Card image with full PAN, name, expiry, and CVV If your digital card has a physical counterpart, you can reuse some elements of your physical card design such as font, graphics, or colors, but you cannot include textures, holograms, EMV chips, transparent sectors, or other elements that cannot be reproduced by pixels. A digital card template must fulfill these requirements: JPG or PNG file format (PNG is preferred) 500 x 315 pixels A label and space for the expiration date A label and space for the CVV Horizontal or vertical orientation With vertical art, Galileo is flexible with the PAN layout—for example, you can have stacked blocks of 4, horizontal or sideways. Additional card elements that Galileo can configure: Font – Galileo offers these fonts at no charge: Arimo Heebo Black Heebo Bold Heebo Light Heebo Medium Heebo Regular Heebo Thin IBM Plex Mono IBM Plex Sans IBM Plex Serif Lato Merriweather Merriweather Sans Metropolis Monsterrat Montserrat-Regular Montserrat-Semibold OpenSans-BoldItalic OpenSans-ExtraBoldItalic OpenSans-ExtraBold OpenSans-LightItalic OpenSans-SemiboldItalic Playfair Display PT Mono PT Serif Raleyway Roboto Roboto Condensed Roboto Mono Roboto Slab Rubik Italic Rubik Regular Slabo Source Sans Pro Source Sans Pro-Light Source Sans Pro-Regular Source Code Pro-Variable Font color Font size Lower-case letters and font mixing are not supported. X/Y coordinates for data elements. Spaces to use in between each card number chunk. 📘NoteIf you want to use a different font, a sizing charge may be applied as well as licensing costs from the font's foundry. The cardholder name on the digital card image is limited to 21 characters. Names are displayed on the card in this order of precedence: First + middle + last First + middle initial + last First + last First initial + last As much of the last name as possible Tokenized card design A tokenized (mobile wallet) card template is similar to a digital card template except that it does not display the CVV, expiry or the entire PAN. You can include some elements from your physical or digital card design in your tokenized card template for branding continuity, but take note of the exceptions listed below. PNG format 1536 x 969 pixels Image must include your logo and card network logo. Image must not contain these elements: Embossed attributes Transparency overlays Magstripe EMV chip faceplate or contacts Hologram Rounded corners Shading or three-dimensional effects Labels for ""Member since,"" expiry date, or cardholder name Miniature BIN under the PAN White or other color background behind the image Specify RGB values (255, 255, 255) for: Card background, when the image cannot be rendered Foreground, for the last four digits of the PAN Label, for text on the front of the card Specifying a card design To specify which card art to use for a digital card (virtual only or Digital First), see Digital card images in the Retrieving Card Information guide. To specify which card design to use when creating a physical or tokenized card, you have several options. For each option you will have to coordinate with your emboss vendor or the card network to determine which value means which image, and you will have to arrange with Galileo to pass that value to the embosser (or the card network for tokenized cards) using one of these methods: Pass a value for one of these parameters with the Create Account or Start Enrollment endpoint. id2 — When passing card art information in this field, you must also pass idType2: 14 so that id2 does not have to pass a validation test. This option requires that the EMBFL parameter be set to GID2. If you are not using Galileo's integrated CIP process, also set IDSSN to optional and VLDLV to null; otherwise, you must populate id with unique values such as the account holder's phone number. externalAccountId — This value will also be included in the Customer Master RDF. (This value is in the Complete Enrollment endpoint instead of Start Enrollment.) Not valid for mobile wallets. Immediately after account creation, call the Set Account Feature endpoint with these settings: featureType: 16 featureValue: string|A — The string is a designator for the card art. 📘NoteIf you want to update an image for a tokenized card, first you send the new image to the card network, and then it can take up to 10 days for the new image to be propagated to individual cardholder wallets. If cardholders want to update the image sooner, they can re-provision the card to the wallet.Updated 22 days ago Table of Contents Designing your card art Physical card design Digital card design Tokenized card design Specifying a card design "
20,docs.galileo-ft.com/pro/changelog/november-2021,"November 2021 New status code To the Verify Instant Issue Card endpoint we added a new status code: 495-03 (Invalid product). Endpoint description clarifications CAPP: app_completed — We specified that it is not sent for Digital First enrollments. SHIP: card_shipped — We clarified that the event is sent for Digital First cards as well as cards in status: X. Deprecated endpoint The Set Overdraft Limit endpoint has been deprecated and removed from documentation. If you still need documentation for this endpoint, contact Galileo. ACH identifiers We added information on Using identifiers to trace ACH transactions for both incoming and outgoing ACH to the About ACH guide. New About Overdraft Accounts guide We added the About Overdraft Accounts guide, which describes how overdraft works, overdraft product configuration and account management, overdraft operational setup, and workflows. We also moved the existing Creating an Overdraft Account guide into this section. New Recipes We added two new recipes to show how two endpoint responses return transactions for a primary account that has a secondary account: Get Account Overview response, primary and secondary accounts Get Transaction History response, primary and secondary accounts Tokenization request clarification In the Tokenization requests section of the Authorization Controller API guide, we clarified that merchants also make tokenization requests when accepting a tokenized card as payment. Account identifier corrections We corrected the Account identifiers in the Galileo system table in the About Accounts guide. The Galileo account number identifiers for the Auth API and the Events API were incorrect. New endpoint We added a new endpoint, Recover Charged-Off Account, which you can use to change the status of a charged-off account and recover its balance. New Recipe We added a new Recipe for the Create Account response when passing cipStatus: 1 and receiving status code 407-13. Correction to Secured Credit guide We corrected the Secured credit account structure workflow to show that the Add Account endpoint is used when you create both the charge card account and the secured credit account. New endpoint We added the Get Related Accounts endpoint, which retrieves all accounts that are related to the specified account: primary and secondary accounts, sibling accounts, and accounts belonging to the same account holder. Explanation of Visa Money Transfer types At the foot of the Additional network transactions table of the Transaction Types enumeration, we added an explanation of the difference between the PMVA, PMVH, and PMVT codes. Incremental settlement fields To the SETL: setl event webhook description we have added three new fields that identify incremental settlements. For existing clients these fields must be enabled by request. ACH event clarification We edited the About ACH guide and the Events API webhook descriptions to include incoming ACH transactions as triggering BADJ: adj and BPMT: pmt events. New Recipes We added new Recipes for the Auth API v3, available on the Recipes page or at these links: Mobile wallet provisioning request, green path Balance inquiry Reversal Completion (advice) at gas pump 3-D Secure transaction Fraud rules engine denies auth Adjustment from an ATM Visa merchant credit over Mastercard rails Denied cash advance Successful card load Merchant mobile wallet check Denied international incremental authorization STIP notification of merchant credit Correction to Partial authorizations Under Partial authorizations in the About Card Transactions > Authorization guide, we updated the response code for partial approvals to the correct code, 10. "
21,docs.galileo-ft.com/pro/docs/digital-cards,"Setup for Virtual Cards This guide describes developer implementation for virtual cards. For general information and use cases, see Virtual cards in the Choose Your Card Strategy guide. For information about digital cards, see Digital cards in the Choose a Card Strategy guide. To create a virtual card account you must first set up a virtual card product. See Galileo setup for the parameters. This card product does not have embossing information included with it. 📘NoteThere is a difference between virtual cards—cards that do not have a physical counterpart—and virtual accounts, which are accounts that do not have cards, such as savings or overdraft accounts. As part of a virtual-card product setup, you must submit at least one virtual card template to Galileo. Follow the instructions for digital card design in the Design a Card guide. Creating a virtual card account Consult this table for the endpoints to use when creating a virtual card account. In all cases, the prodId must be for a virtual card account. 📘NoteBecause the card is active upon creation, Galileo sends the BACT: card_activated event webhook. Use CaseEndpointOnboard a new customer and issue a virtual cardCreate Account(Creating an Account guide)Onboard a new customer and issue a virtual card. You must be PCI compliant to use this endpoint.Create Virtual Card Account(Creating an Account guide)Add a virtual card account to an existing customer recordAdd Account(Adding an Account guide) Presenting the virtual card After the card account has been created, you can retrieve the card image to display in your app or on your web site. Follow the instructions for Digital card images in the Retrieving Card Information guide. Upgrading to a physical card If you are using a Virtual First strategy—where you issue a virtual card first, then upgrade to a physical card for cardholders who meet certain criteria—follow the instructions in Use case 2: Product switch with reissue and same PAN and expiry in the Switching Products guide. Galileo setup These internal parameters must be set at Galileo, according to your use case. ParameterLevelDescriptionNNEXPProductPrevents a new expiry from being generated for the physical card. Set to Y for virtual cards to be upgraded to physical by product switch (Virtual First) or for digital images of physical cards (Digital First).TSECVProgram or productMaximum seconds of access-token validity (default: 300) when retrieving the virtual card image.TUSECProgram or productMaximum times an access token can be used (default: 3) when retrieving the virtual card image.Updated 3 months ago Table of Contents Creating a virtual card account Presenting the virtual card Upgrading to a physical card Galileo setup "
22,docs.galileo-ft.com/pro/reference/post/getachaccounts,"Get ACH Accounts For instructions on using this endpoint see Viewing ACH accounts in the ACH Endpoints guide. 👍WarningIf you plan to display ACH account and routing numbers to customers, be aware that the accountNo and routingNo returned by this endpoint may be tokenized if an aggregator service (such as Plaid) is used. Only display these values to customers if you are sure they will not be tokenized.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
23,docs.galileo-ft.com/pro/reference/post/searchaccounts,Search Accounts For the recordCnt parameter use these values to get the desired number of records per page: No value — 50 records per page 1 through 100 — The specified number of records per page Values over 100 — 100 records per page See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
24,docs.galileo-ft.com/pro/docs/auth-api-field-detail,"Auth API Field Detail This guide contains details about some of the Auth API webhook fields. With this guide you may also want to consider these resources: Authorization Controller API — General information about how the Auth API works. Authorization Response Codes — Codes that Galileo supports. You may also arrange with Galileo to send custom response codes, depending on your use case and business requirements. Authorization — General explanation of the authorization process at Galileo. Tokenization requests Networks send tokenization requests when the card is first provisioned to a mobile wallet, either with manual provisioning or push-provisioning. (See Setup for Mobile Wallets for the Galileo provisioning procedures.) A tokenization request for an initial provisioning has the name of the wallet provider for token_type. Merchants also send tokenization requests to perform AVS checks on tokenized cards before accepting the cards as payment in an app or on a website. In this case, token_type: Merchant. The network relays provisioning requests that it receives from wallet providers and merchants. The requests are MTI 0100 and contain the PAN and cardholder identifiers. If the card was push-provisioned through your app or web site, the cardholder's identity and card information have already been verified. Galileo responds with 00. If the card was manually provisioned, the wallet provider is requesting additional verification checks such as AVS, CVV2, and the last four digits of the cardholder's phone number. Galileo responds with the AVS result plus 05, 85, or 00, depending on which checks were passed. For initial provisioning requests, see the Manual provisioning workflow in the Setup for Mobile Wallets guide for details. For merchant AVS requests, Galileo responds to a successful check with code 85 (AVS requested to verify account) or with 05 (do not honor) to an unsuccessful check. Additional tokenization data may be present in the tar_object, which contains details about the tokenization authorization request (TAR) such as risk scores, device location, device ID and a recommendation from the wallet provider that indicates whether the tokenization request should be approved. When the network notifies Galileo whether the provisioning request was successful, Galileo sends you an Account Event API webhook that corresponds to the result, such as ATCN: mobile_activation TCN for a successful provisioning to an Apple Pay wallet. See Events API messages in the Setup for Mobile Wallets guide for a list of tokenization-related event messages. IIAS fields Clients who issue Visa FSA (flexible spending account), HRA (health reimbursement arrangement) or HSA (health savings account) cards can receive data in the iias_data object that indicates whether the item or service being purchased is an eligible medical expense. An inventory information approval system (IIAS) at the point of sale provides this verification. Where merchants sell both qualified and non-qualified goods and services, the qualified_healthcare_products_total field indicates how much of a purchase is a qualified medical purchase. 📘NoteSome medical merchants do not use IIAS because their card readers are programmed with a healthcare-related MCC such as 8099 (Medical Services and Health Practitioners). FHA/HRA/HSA cards can be used at these locations without IIAS verification. Advanced Auth API fields The advanced_auth_api_fields object is provided only to those clients who request that additional data elements (DEs) be parsed and returned in the Auth API webhook. The ADVAF parameter must be set for these fields to be returned, and the network must be Mastercard. Point of sale data DE061 contains information about the conditions that exist at the point of sale (POS) at the time of the transaction. Consult the DE061 Subfields enumeration for a list of included subfields and their values. Example JSON""advanced_auth_api_fields"": {  ""61"": {   ""subfield 8"": ""0"",   ""subfield 1"": ""1"",   ""subfield 3"": ""2"",   ""subfield 4"": ""5"",   ""subfield 5"": ""1"",   ""subfield 6"": ""0"",   ""subfield 12"": ""00"",   ""subfield 10"": ""6""  } } Subscription services If you subscribe to Mastercard services such as Fraud Rule Management (FRM) or Safety Net, these services may make decisions on transactions before they are forwarded to Galileo. If one of the services declines a transaction, it sends an advice (MTI 0120) to Galileo to notify of the decline. Galileo can pass data elements in the Auth API webhook that provide information on the decline. Sample values are shown below—consult the documentation from Mastercard to interpret the values you receive. Values for all of these fields may or may not be returned depending on which services you're subscribed to. For example, if the transaction is declined by Safety Net, these are the values passed in the webhook: DE048 — Additional information Subfield 71 — On-behalf service (OBS) Subelement 1 — 18 (fraud scoring service) Subelement 2 — C (fraud scoring service successful) Subfield 75 — Fraud assessment prediction information Subelement 1 — 998 or 000 Subelement 2 — NM (network monitor) Subelements 3–5 — Rule-adjusted score and reason code DE060 Subfield 1 (Advice reason code) — 120 (transaction blocking) DE121 (Authorizing agent identification code) — 000003 (decline from on-behalf service) Example JSON""advanced_auth_api_fields"": {  ""48"": {   ""subfield 71"": ""18C"",   ""subfield 75"": ""998NM500202110303850040211050200""   },  ""60"": {   ""subfield 1"": ""120""  },  ""121"": ""000003"" } Updated 15 days ago Table of Contents Tokenization requests IIAS fields Advanced Auth API fields Point of sale data Subscription services "
25,docs.galileo-ft.com/instant/reference/card-status,"Card Status StatusDescriptionactiveActiveinactiveCancelled, blocked, or otherwise deactivatedlostCard is cancelled and a replacement has been orderedstolenCard is cancelled and a replacement has been orderedwaiting_for_fundsWaiting for funds so a fee can be paidembossingCard is being printedshippedMailed and ready to activateexpiredPast the expiration datefrozenTemporarily deactivated "
26,docs.galileo-ft.com/pro/reference/post/reversepayment,"Reverse Payment 📘NoteThe account balance must be sufficient to cover the amount of the reversal. If it is not, a reverse payment fee may be assessed, according to product settings. Consult the Creating a Payment guide for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description411-01Insufficient balance411-02Failed to reverse all pending holdsLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
27,docs.galileo-ft.com/pro/reference/api-reference-events-api-token-update,"token_update Code — TKUP Event trigger — The updated tokens are synchronized with Mastercard. Processes — These processes precede the event trigger: The status field in the card's freeze_info object is updated. The reissued card is activated. {'The card is updated to status': 'C (cancelled).'} Fields All fields are strings. Your field names may vary. Field Required Description cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""TKUP"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" result X Result of the token update attempt. Example: ""Success"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_action X The type of action that occurred. Possible values: ""Token updated after card frozen"" ""Token updated after card reissued"" ""Token updated after card cancelled"" ""Token updated after card unfrozen"" type X The name of this event: ""token_update"" xid X Internal Galileo-generated ID for an account. Example: ""13162"" Example JSON# token_update example: { ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""TKUP"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""result"": ""Success"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_action"": ""Token updated after card reissued"", ""type"": ""token_update"", ""xid"": ""13162"" } Table of Contents Fields Example "
28,docs.galileo-ft.com/pro/changelog/welcome-to-the-galileo-pro-documentation,"Welcome to the API Documentation for Galileo Pro Galileo Pro With the recent launch of Galileo Instant, we determined we needed to brand our core solution more distinctly. That new branding is Galileo Pro, which you may have previously known as our enterprise or custom solution. Although Galileo Pro is a new name, with its own distinct logo and color scheme, it’s the same powerful banking and card issuing platform that powers industry leaders like Chime, Robinhood, and TransferWise. Documentation We’ve moved our documentation to ReadMe to make it more interactive and easier to navigate. Feel free to test out the automatic code generation, ask a question in the discussion forum, or search for a keyword across all documentation. In most ways, our new documentation is a vast improvement over the old. However, we’re still working on a few features: The Sandbox access is not yet available directly from the website, but you may apply for access here. Instructions to connect to the Sandbox environment are found here. The Sandbox API client, used to execute test API calls from a form, is found here. We’ll continue to roll out enhancements over the coming months and expect the above features to be available very soon. If you currently use the old documentation and are concerned about losing access to it, don’t worry. We’ll continue to maintain it and will keep it live through the end of 2020. We hope that you are as excited about these changes as we are. Please let us know if you have any questions or feedback. Regards, The Galileo Pro Team "
29,docs.galileo-ft.com/pro/reference/post/addachaccountcorporate,Add ACH Account Corporate The table below lists status codes that apply to this specific endpoint. Status codeCode description606-01Identity validation failed606-02Failed to retrieve ACH account details606-03Error calling Plaid auth endpoint or failure calling Plaid identity endpoint606-04ACH account already existsLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
30,docs.galileo-ft.com/pro/reference/api-reference-events-api-pmt-delayed,"pmt_delayed Code — BDPM Event trigger — A payment or deposit violates load limits. Processes — These processes contain the event trigger: Create Payment endpoint Create Account Transfer endpoint Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description ach_trans_id Unique Galileo-generated identifier for an ACH transaction. Example: ""7971383"" act_type For all payments the activity type is ""PM"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X ""Description of the payment. Example: ""Transfer from Savings"" ext_trans_id X External transaction ID. Example: ""1234-abcdefg"" merchant_name Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BDPM"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" otype See Transaction Types for possible values. Example: ""W"" pmt_id X Galileo-generated identifier for this payment. Example: ""7971383"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""pmt_delayed"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# pmt_delayed example: { ""ach_trans_id"": ""7971383"", ""act_type"": ""PM"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""description"": ""Transfer from Savings"", ""ext_trans_id"": ""1234-abcdefg"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BDPM"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""otype"": ""W"", ""pmt_id"": ""7971383"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""pmt_delayed"" } Table of Contents Fields Example "
31,docs.galileo-ft.com/pro/reference/webhook/authorization/post/2,"Auth API Webhook 2.0 In the authorization information that Galileo sends, the response_code is the current response code value to be used for the transaction, unless the client overrides it. The client uses the response_code field in the HTTP response body to override the authorization response code, if desired. See the Authorization Controller API guide for more information.Auth SuccessAuth Denial{  ""account"": {   ""account_status"": ""N"",   ""cad"": 71563,   ""card_status"": ""N"",   ""expiration_date"": ""2301"",   ""merchant_supplied_expiration_date"": null,   ""pan"": ""5198"",   ""prn"": ""495101003222"",   ""track_expiration_date"": null,   ""xid"": 71687  },  ""amounts"": {   ""available_funds"": ""4400.64"",   ""cashback_amount"": ""0.0"",   ""currency"": ""840"",   ""exchange_rate"": ""61000000"",   ""fee_amount"": ""0.00"",   ""local_currency"": ""840"",   ""local_currency_amount"": ""25.12"",   ""trans_amount"": ""25.12""  },  ""auth_id"": 6631254,  ""auth_type"": ""Advice"",  ""bai"": null,  ""ecommerce"": {   ""is_ecommerce"": false  },  ""eligible_for_balance_return"": false,  ""emv"": {   ""is_emv"": false  },  ""entry_type"": ""Magnetic Stripe"",  ""id"": ""3bzANGgrTfCoj9LbGz3RkR"",  ""international"": false,  ""mcc"": 5542,  ""merchant"": {   ""acquirer_id"": ""006440"",   ""merchant_country"": ""840"",   ""merchant_description"": ""EXXON PRATTVILLE COOSA PRATTVILLE AL "",   ""merchant_id"": ""125807000000000"",   ""merchant_postal_code"": ""36067"",   ""merchant_state"": ""NV"",   ""terminal_id"": ""00010102"",   ""terminal_network"": ""None""  },  ""mti"": ""0120"",  ""network"": ""Mastercard"",  ""original_id"": 6620572,  ""partial_supported"": false,  ""pin_entry_capability"": ""Capable"",  ""response_code"": ""00"",  ""response_code_list"": [],  ""risk_score"": ""None"",  ""subnetwork"": ""Mastercard Banknet"",  ""timestamp"": ""20201210:084305MST"",  ""transaction"": {   ""cardholder_present"": ""Y"",   ""transaction_initiator_code"": ""M101"",   ""recurring"": ""N""  },  ""transaction_type"": ""Auth"",  ""validation_results"": {   ""aav"": ""N"",   ""arqc"": ""N"",   ""avs_result"": ""B"",   ""cvv1"": ""N"",   ""cvv2"": ""N"",   ""cvv3"": ""N"",   ""offline_pin"": ""N"",   ""pin"": ""N""  },  ""version"": ""2.0"" } {  ""account"": {   ""account_status"": ""N"",   ""cad"": 41111,   ""card_status"": ""N"",   ""expiration_date"": ""2401"",   ""merchant_supplied_expiration_date"": ""2401"",   ""pan"": ""0777"",   ""prn"": ""494101401122"",   ""track_expiration_date"": null,   ""xid"": 41310  },  ""amounts"": {   ""available_funds"": ""7.97"",   ""cashback_amount"": ""0.0"",   ""currency"": ""840"",   ""exchange_rate"": ""61000000"",   ""fee_amount"": ""0.00"",   ""local_currency"": ""840"",   ""local_currency_amount"": ""15.93"",   ""trans_amount"": ""15.93""  },  ""auth_id"": 6620500,  ""auth_type"": ""Auth"",  ""bai"": null,  ""ecommerce"": {   ""is_ecommerce"": false  },  ""eligible_for_balance_return"": false,  ""emv"": {   ""is_emv"": false  },  ""entry_type"": ""Card Not Present"",  ""id"": ""Kz5rWJZFTB__i10ejOk7Fh"",  ""international"": false,  ""mcc"": 5734,  ""merchant"": {   ""acquirer_id"": ""010100"",   ""merchant_country"": ""840"",   ""merchant_description"": ""ADOBE ACROPRO SUBS  4085366000 CA "",   ""merchant_id"": ""000372808060886"",   ""merchant_postal_code"": ""951100000"",   ""merchant_state"": ""NV"",   ""terminal_id"": ""01296759"",   ""terminal_network"": ""None""  },  ""mti"": ""0100"",  ""network"": ""Mastercard"",  ""original_id"": 0,  ""partial_supported"": false,  ""pin_entry_capability"": ""Other"",  ""response_code"": ""51"",  ""response_code_list"": [""51""],  ""risk_score"": ""123"",  ""subnetwork"": ""Mastercard Banknet"",  ""timestamp"": ""20201210:084232MST"",  ""transaction"": {   ""cardholder_present"": ""N"",   ""transaction_initiator_code"": ""M101"",   ""recurring"": ""N""  },  ""transaction_type"": ""Auth"",  ""validation_results"": {   ""aav"": ""N"",   ""arqc"": ""N"",   ""avs_result"": ""B"",   ""cvv1"": ""N"",   ""cvv2"": ""N"",   ""cvv3"": ""N"",   ""offline_pin"": ""N"",   ""pin"": ""N""  },  ""version"": ""2.0"" } LanguageShellNodeRubyPHPPythonAuthenticationBearerJWTBearer "
32,docs.galileo-ft.com/pro/reference/api-reference-events-api-card-activated,"card_activated 📘NoteModify Status endpoint with type: 7 (update card status to active) triggers CSNT: card_status_change instead of this event. Code — BACT Event trigger — The card status is updated to N. Processes — These processes contain the event trigger: Program API endpoints: Activate Card endpoint Modify Status endpoint with type: 6 Endpoints that create cards, with XAACT set to --N Customer Service Tool Galileo-hosted cardholder website IVR (automated phone system) Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" emboss_uuid UUID for an emboss record that has been sent to the embosser. Example: ""123e4567-e89b-12d3-a456-426614174000"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BACT"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""card_activated"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# card_activated example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""emboss_uuid"": ""123e4567-e89b-12d3-a456-426614174000"", ""msg_event_id"": ""243693"", ""msg_id"": ""BACT"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""card_activated"" } Table of Contents Fields Example "
33,docs.galileo-ft.com/pro/docs/other-ach-controls,"Other ACH Controls This guide describes other Galileo APIs to monitor and approve ACH transactions, as well as CST controls for ACH accounts and transactions. Events API webhooks for ACH Depending on product configuration, ACH events may trigger when an ACH transaction fails. Different events are triggered depending on the direction of the transaction and whether it debits or credits the receiver’s account. See Transaction Events Index for more information on these events. DirectionEventTriggerNext stepIncomingACHC: ach_credit_failAn incoming ACH credit request fails.Set the FACHA parameter to enable this event.You or Galileo initiate an ACH return.IncomingACHR: ach_debit_failAn incoming ACH debit request fails.Set the FACHA parameter to enable this event.You or Galileo initiate an ACH return.OutgoingFACH: ach_credit_returnAn outgoing ACH debit is returned by the external receiver.If funds have been transferred, Galileo adjusts the funds out of your customer’s account and transfers them to the external bank.OutgoingACRT: ach_returnAn outgoing ACH transaction (debit or credit) is returned by the external receiver.Set the NTSAA parameter to enable this event.If funds have been transferred, Galileo adjusts the funds in your customer’s account and, if necessary, transfers funds to the external receiver.IncomingOutgoingBADJ: adjAn ACH transaction debits funds from the cardholder account.NoneIncomingOutgoingBPMT: pmtAn ACH transaction credits funds to the cardholder account.None External Trans API for ACH You can choose to approve or deny incoming ACH debit requests via the External Trans API ACH Debit Webhook. When you reject an incoming debit request, Galileo initiates an ACH return. If you do not respond to an incoming debit request, additional requests will be sent until you respond or the maximum number of attempts has been reached. In the latter case, an ACH return will be initiated. When a transaction requires approval, it is posted in the CST on the ACH Returns page (System Administration > Other Tools > ACH Returns). During product setup, the ACDBX parameter must be set to approve or deny ACH returns via the External Trans API. Using the CST for ACH The CST has tools to help you manage ACH accounts, transactions, and returns. This section describes ACH controls in the CST Account tab and the System Administration tab. 📘NoteSome controls may not be available for all users, depending on your administrator’s Roles and Rights settings. Account controls In the CST Account tab, you can manage ACH accounts linked to a customer’s account, view ACH transactions and returns, and manage automated ACH handling. This table describes ACH controls in the CST Account tab. CST controlLocationDescriptionACH AccountsAccount > ACH InfoAdd, modify, and delete ACH accounts linked to this account.ACH HistoryAccount > ACH InfoView the history of outgoing ACH requests for the account, including queued, posted, and returned transactions.ACH Debit HistoryAccount > ACH InfoView the history of incoming ACH debit or credit requests for the account, including posted and returned transactions.ACH Automation MatchesAccount > ACH InfoView ACH transactions that match settings for automated handling and update how a matching transaction is handled in the future.Payment HistoryAccount > Account InfoView the payment history for an account, including ACH transactions. System Administration controls CST controlLocationDescriptionPayment Posts & ReturnsSystem Administration > Other ToolsReview incoming ACH transactions and decide how to handle future ACH transactions with matching program settings.ACH ReturnsSystem Administration > Other ToolsQueue for ACH transactions in status: i (manual review).ACH Debit Block ReviewSystem Administration > Other ToolsView partial matches for ACH stop payment orders. See ACH stop payment orders for more information.Updated 4 months ago Table of Contents Events API webhooks for ACH External Trans API for ACH Using the CST for ACH Account controls System Administration controls "
34,docs.galileo-ft.com/pro/reference/post/createvirtualcard,"Create Virtual Card Account Create Virtual Account is similar to Create Account except that it accepts only virtual card product IDs for prodId. Consult the Creating an Account procedure for instructions on using this endpoint, and consult the Customer ID Verification guide for how to use this endpoint with Galileo's integrated CIP solution. 📘NoteYou must be PCI-compliant to use this endpoint. If you are not PCI compliant, use the Create Account endpoint and specify a virtual card product for prodId. 📘NoteIf this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See Enrollment Statuses for more information.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description520-01Load amount outside of load limits520-02Could not create enrollment520-03Could not load card520-04Account created, ID validation failed520-05Specified load from account number is invalid520-06A load was attempted for a non-positive amount520-07Primary account is invalid520-08Secondary accounts cannot be added520-09Maximum number of secondary accounts exceeded. To increase the secondary account limit per product ID, set SECLM on the secondary account.520-10idType2 is required as main ID for running CIP520-12An application with the same ID has already been submitted520-14Success - partial limit violation520-15Success - delayed payment520-16Card is marked as fraudulent520-17Card not allocated to your store for issuanceLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
35,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-tvd,"mobile_activation TVD The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — ATVD, GTVD, STVD Event trigger — Galileo receives notification from the card network that the card has been removed from the mobile wallet. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""STVD"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation TVD"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ATVD) ""Google"" (event code GTVD) ""Samsung"" (event code STVD) Example JSON# mobile_activation TVD example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""STVD"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation TVD"", ""wallet_type"": ""Apple"" } Table of Contents Fields Example "
36,docs.galileo-ft.com/pro/docs/overview-of-business-banking-programs,"Overview of Business Banking Programs Galileo offers solutions that can serve your business customers, from large corporations to small businesses. This guide describes business banking features and services available on the Galileo platform. Virtual commercial credit or debit cards You can give your business customers on-demand access to virtual commercial debit or credit cards. Virtual commercial card products can be used with a credit line and they can be configured for one-time use cards or lodged cards. One-time use cards — One-time use virtual cards have a unique PAN for each card. This configuration does not require PCI compliance. Multi-use cards — Multi-use cards are for specific expenses, such as business travel purchases. This configuration requires PCI compliance. This table lists features of virtual commercial cards. For general information on virtual cards, see the Virtual cards in the Choose a Card Strategy guide. FeatureDescriptionNo physical cardYour business customers can request virtual cards as needed. Virtual cardholders can immediately view the PAN, CVV, and expiration date to make online purchases.Purchase controlAccount-level controls on virtual commercial cards give you increased control and insight into spending.Cash flow monitoringWhen you call the Create Account endpoint, you can pass an external ID for tracking purposes that Galileo will return in the RDF. This can be used for reconciliation and expense monitoring.Line of credit supportVirtual commercial cards may be used for products with a credit line.Mobile wallet supportVirtual commercial cards can be provisioned to a mobile wallet. Commercial credit cards for employee purchasing Your business customers can distribute commercial credit cards to employees who make purchases on behalf of the business. This table lists features of commercial credit cards. FeatureDescriptionPhysical and virtual card optionsYou can issue physical or virtual cards. See Virtual commercial credit or debit cards for more information.Business savingsCommercial credit cards can be combined with Galileo’s Business savings program.Line of credit and good funds modelCommercial credit cards may be used for products with a credit line or for accounts that use the good funds model.Mobile wallet supportCommercial credit cards can be provisioned to a mobile wallet.Card network benefitsCard networks offer additional benefits to businesses that choose commercial credit cards: Secure digitized payments Control and visibility of business expenses Analytics that focus on business expenses rather than rewards Small business debit cards (business checking) Small business debit programs combine commercial debit cards with business checking. This table lists features of small business debit. FeatureDescriptionPhysical and virtual card optionsYou can issue physical or virtual cards. See Virtual commercial credit or debit cards for more information.One-time and multi-use card optionsYour business customers can distribute one-time use or multi-use debit cards to employees.Standard and reloadable debit cardsYou can offer standard debit cards, reloadable prepaid debit cards, or payroll debit cards to your business customers.Business savingsCommercial credit cards can be combined with Galileo’s Business savings program.Good funds modelFunds deposited to the checking account are immediately available for spending.ATM withdrawalsDebit cardholders can make cash withdrawals at ATMs.Mobile wallet supportVirtual debit cards can be provisioned to a mobile wallet.Card network benefitsCard networks offer additional benefits to businesses that choose small business debit programs: Rewards programs available No interest, typically resulting in lower fees Small business credit cards Small business credit programs offer a commercial card with a line of credit. This table lists features of small business credit. FeatureDescriptionPhysical and virtual card optionsYou can issue physical or virtual cards. See Virtual commercial credit or debit cards for more information.One-time and multi-use card optionsYour business customers can distribute one-time use or multi-use credit cards to employees.Business savingsCommercial credit cards can be combined with Galileo’s Business savings program.Line of credit and good funds modelSmall business credit may be combined with the good funds model.Mobile wallet supportVirtual credit cards can be provisioned to a mobile wallet.Card network benefitsCard networks offer additional benefits to businesses that choose small business credit programs: Customers can build business credit Rewards programs available Control and visibility of business expenses Purchasing cards A purchasing card program is similar to commercial credit card programs. This table lists features of purchasing cards. FeatureDescriptionPhysical and virtual card optionsYou can issue physical or virtual cards. See Virtual commercial credit or debit cards for more information.Specific BINs for interchangePurchasing cards are assigned unique BINs for interchange purposes.Business savingsPurchasing cards can be combined with Galileo’s Business savings program.Line of credit and good funds supportPurchasing cards may be used for products with a credit line or for accounts that use the good funds payment model.Mobile wallet supportPurchasing cards can be provisioned to a mobile wallet.Card network benefitsCard networks offer additional benefits to businesses that choose purchasing cards: Secure digitized payments Control and visibility of business expenses Optional insurance coverage including purchase insurance, extended warranty, and ID theft Corporate travel and expense cards Corporate travel and expense cards are designed for business travel, and offer your business customers comprehensive insurance coverage and insight into spending. This table lists features of corporate travel and expense cards. FeatureDescriptionPhysical and virtual card optionsYou can issue physical or virtual cards. See Virtual commercial credit or debit cards for more information.Specific BINs for interchangePurchasing cards are assigned unique BINs for interchange purposes.Business savingsCommercial credit cards can be combined with Galileo’s Business savings program.Line of credit and good funds modelCorporate travel and expense cards may be used for products with a credit line or for accounts that use the good funds model.Mobile wallet supportPurchasing cards can be provisioned to a mobile wallet.Card network benefitsCard networks offer additional benefits to businesses that choose corporate travel and expense cards: Secure digitized payments Control and visibility of business expenses Insurance coverage including rental, travel accidents, purchase insurance, and extended warranty Concierge services Corporate liability insurance for employee theftCard network benefits for executive travelersCard networks offer programs for executives and frequent business travelers. These programs can be combined with a corporate travel and expense card program. Corporate executive card programs can be added to an existing BIN to provide additional travel benefits and issuer customization. World elite card programs can be paired for executives and frequent travelers. Fleet cards A fleet card program can help your business customers control fuel costs. Businesses can distribute fleet cards for employees to purchase gas and to make other purchases from gas merchants. See Fleet Cards for more information. This table lists features of fleet cards. FeatureDescriptionSpecific fleet BIN for enhanced dataFleet cards are assigned unique BINs for capturing level 2 and level 3 data, which includes gas purchase data, driver ID, and vehicle information.Gas spendingInsight into employee gas spending through Mastercard settlement files. Businesses can see data on individual gas purchases, such as gallons purchased, price per gallon, fuel grade, and more.Driver ID and odometer trackingWhen a purchase is made at a gas merchant, the card reader prompts the driver for a driver ID and odometer reading. This can help businesses track card usage, vehicle miles per gallon, and mileage for maintenance purposes.Business savingsCommercial credit cards can be combined with Galileo’s Business savings program.Card network benefitsCard networks offer additional benefits to businesses that choose fleet cards: Roadside assistance Optional insurance coverage, including rental, travel accidents, purchase insurance, extended warranty, and ID theft Business savings A business savings program is an option for business customers saving for unexpected expenses or future expansion. This table lists features of business savings. FeatureDescriptionBasic and high-interest optionsYou can offer your business customers a basic savings product or a high-yield interest product via Promontory.Combine with other business programsBusiness savings can be combined with any debit or credit business banking program.Updated 2 months ago Table of Contents Virtual commercial credit or debit cards Commercial credit cards for employee purchasing Small business debit cards (business checking) Small business credit cards Purchasing cards Corporate travel and expense cards Fleet cards Business savings "
37,docs.galileo-ft.com/pro/reference/authentication,"Authentication apiLogin apiTransKey providerId transactionId The table below describes the required authentication parameters, as well as two optional parameters that you can use for your internal reporting purposes. ParameterRequiredDescriptionAdditional infoapiLoginXGalileo-issued username for the requesting IP address.Data type: StringPattern: Max 50 charactersExample: ""AbC123-9999""apiTransKeyXGalileo-issued password for the requesting IP address.Data type: StringPattern: Max 15 charactersExample: ""4sb62fh6w4h7w34g""providerIdXGalileo-issued provider identifier.Data type: IntegerPattern: Max 10 digitsExample: 9999transactionIdXAn ID that you provide that is unique to each API request. A UUID is preferred.Data type: StringPattern: Max 60 charactersExample: ""9845dk-39fdk3fj3-4483483478""providerTransactionIdAn optional ID that you provide for the API request.Data type: StringPattern: Max 60 charactersExample: 2017-05-01 13:01:01providerTimestampAn optional timestamp that you provide for the API request.Data type: Date-timePattern: YYYY-MM-DD hh:mm:ssExample: ""47823438032233777"" Authentication setup 📘NoteIf you are connecting to the Program API for the first time, see our Quickstart guide before you start here. During onboarding, Galileo will give you the apiLogin, apiTransKey, and providerId for the IP address that you send requests from. You provide the transactionId, which must be unique for each request (UUID is preferred). Optionally, you can use providerTransactionId and providerTimestamp for your own internal records. Along with the four parameters above, when you send an endpoint request, you also send: The endpoint URL for the environment you are using, provided by Galileo The request type (POST) Any additional parameters for the request The format in which you will accept response data (application/json or application/xml) The content type for the response data (application/x-www-form-urlencoded) Authentication steps The steps below describe setup and authentication for a Ping endpoint request. You obtain authentication credentials from Galileo and generate a unique transactionId for the request. ParameterValueapiLoginaaaa-bbbbapiTransKey1212providerId9988transactionId777-777-777 You build and post your endpoint request with: The endpoint URL The request type (POST) The four authentication parameters from step 1 The Accept field, with your preferred response data format The Content-Type field, with application/x-www-form-urlencoded PythoncURLimport requests url = ""https://api-sandbox.cv.gpsrv.com/intserv/4.0/ping"" payload = ""apiLogin=aaaa-bbbb&apiTransKey=1212&providerId=9988&transactionId=777-777-777"" headers = {  ""Accept"": ""application/json"",  ""Content-Type"": ""application/x-www-form-urlencoded"" } response = requests.request(""POST"", url, data=payload, headers=headers) print(response.text) curl --request POST \  --url https://api-sandbox.cv.gpsrv.com/intserv/4.0/ping \  --header 'Accept: application/json' \  --header 'Content-Type: application/x-www-form-urlencoded' \  --data apiLogin=aaaa-bbbb \  --data apiTransKey=1212 \  --data providerId=9988 \  --data transactionId=777-777-777 Galileo sends you response data in your requested format. JSON{ ""status_code"": 0, ""status"": ""Success"", ""processing_time"": 0.022, ""response_data"": {}, ""echo"": {  ""provider_transaction_id"": """",  ""provider_timestamp"": null,  ""transaction_id"": ""A43ZQ5ZMR4XALONBW1G3"" }, ""rtoken"": ""8cc16de0-5eda-4e2a-968e-3b08fce6f778"", ""system_timestamp"": ""2020-07-13 10:48:07"" } Table of Contents Authentication setup Authentication steps "
38,docs.galileo-ft.com/pro/reference/api-reference-events-api-card-shipped,"card_shipped Code — SHIP Event trigger — An emboss record is created for the card. Processes — These processes contain the event trigger: An internal process that collects embossing data for all cards with status: X. An internal process that collects embossing data for Digital First cards. Fields All fields are strings. Your field names may vary. Field Required Description addr1 Address line 1 where the card will be shipped. Example: ""454 Pine St."" addr2 Address line 2 where the card will be shipped. Example: ""Apt 2D"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" city City where the card will be shipped. Example: ""Salt Lake City"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" emboss_expiry_date Expiration date on the emboss record. Example: ""2023-04-12"" emboss_uuid UUID for an emboss record that has been sent to the embosser. Example: ""123e4567-e89b-12d3-a456-426614174000"" fname Cardholder's first name. Example: ""Mirela"" is_emboss_reissue Whether this is a reissued card. Example: ""Y"" lname Cardholder's last name. Example: ""Arroyo"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SHIP"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four The last four digits of the PAN. Example: ""3523"" ship_type Type of shipment, either first-class mail or expedited (UPS). Example: ""First Class Mail"" shipto_name Name above the address where the card will be shipped. Example: ""Mirela Arroyo"" state State where the card will be shipped. Example: ""UT"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""card_shipped"" user_data Populated according to your use case and needs by arrangement with Galileo. xid Internal Galileo-generated ID for an account. Example: ""13162"" Example JSON# card_shipped example: { ""addr1"": ""454 Pine St."", ""addr2"": ""Apt 2D"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""city"": ""Salt Lake City"", ""credit_balance"": ""325.00"", ""emboss_expiry_date"": ""2023-04-12"", ""emboss_uuid"": ""123e4567-e89b-12d3-a456-426614174000"", ""fname"": ""Mirela"", ""is_emboss_reissue"": ""Y"", ""lname"": ""Arroyo"", ""msg_event_id"": ""243693"", ""msg_id"": ""SHIP"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""ship_type"": ""First Class Mail"", ""shipto_name"": ""Mirela Arroyo"", ""state"": ""UT"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""card_shipped"", ""xid"": ""13162"" } Table of Contents Fields Example "
39,docs.galileo-ft.com/pro/page/scenario-7-refund-after-clearing-mastercard-banknet,"Scenario 7: Refund After Clearing (Mastercard Banknet) << Back to the index A debit cardholder uses a mobile wallet's peer-to-peer function to send $300 to a friend, who does not accept the funds. The wallet provider refunds the $300 to the cardholder. The following are true: The initial available balance is $1000. The wallet provider has already validated the debit card. The network is Mastercard Banknet. Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –300.00. Galileo approves the request and places a 300.00 hold on the account. The available balance is now 700.00. Galileo sends a BAUT: auth webhook. Mastercard sends a batch file with the –300.00 transaction. Galileo backs out the 300.00 hold and posts –300.00 to the account. The available balance is still 700.00. Galileo sends a SETL: setl webhook. Mastercard sends a clearing file with the 300.00 credit. Galileo credits 300.00 to the account. The available balance is now 1000.00. Galileo sends a BADJ: adj webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth300.0022000100020210412:054330MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idsource_idoriginal_auth_idopen_to_buytimestampBAUTauth3002200220007002021-04-12 05:43:30 MSTSETLsetl3002200220007002021-04-13 09:45:32 MSTBADJadj3005511010002021-04-14 09:06:14 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME300.00-22005004122021 05:43:30 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE300.00-2200SE8220004122021 05:43:3004132021300.00+5511ADC551104142021 09:06:1404142021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. amtauth_idoriginal_auth_idtypelocal_amttimestamp-30022000A0000000300002021-04-12 05:43:30 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-30022000SE82021-04-12 05:43:302021-04-13 09:45:3230055110ADC2021-04-14 09:06:142021-04-14 09:06:14 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-30022000AUA2200700Y2021-04-12 05:43:302021-04-12 05:43:30300NoneNoneBO822001000NoneNone2021-04-13 09:45:32-30022000SE82200700Y2021-04-12 05:43:302021-04-13 09:45:32300None0ADC55111000None2021-04-14 09:06:142021-04-14 09:06:14 "
40,docs.galileo-ft.com/pro/reference/post/deletegroups,"Delete Groups Use the Delete Groups endpoint to delete one or more groups. You cannot delete a group that has subgroups or linked accounts. To delete a group that has subgroups or linked accounts, follow the steps in Delete a Group in Creating a Corporate Hierarchy. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description621-01Invalid group ID. The groupId does not exist in the core. Verify that the group ID is correct by calling Get Group Hierarchy for the root group.621-02Cannot delete a group that has subgroups. See Delete a group in Creating a Corporate Hierarchy for more information.621-03Cannot delete a group that has linked accounts. See Delete a group in Creating a Corporate Hierarchy for more information.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
41,docs.galileo-ft.com/pro/docs/setup-for-card-transaction-simulation,"Setup for Card Transaction Simulation This guide contains setup instructions that should be performed prior to simulating card transactions in the CV environment. See Simulating Card Transactions for instructions for the actual simulations. 🚧WarningDo not follow this procedure in Production. The transaction-simulation endpoints are not valid in Production. Before simulating card transactions, you should be familiar with the concepts in these guides: About Transactions — A general guide to how transactions are represented in the Galileo system. About Card Transactions — A general overview of how card transactions work, including the phases that a card transaction passes through Networks — Credit and debit network types and how transactions are routed Authorization — Authorization requests and their variants such as preauthorization, incremental authorizations, and partial authorizations Settlement — Settlements, backouts, and completions Crediting Cardholder Accounts — Card transactions that move funds into cardholder accounts such as reversals, merchant credits and card loads 📘NoteThis guide assumes that you have already set up your products in CV with the same characteristics that you will be using in Production. Work with Galileo to complete product setup. Initial setup Before you can use the special fields listed below, you must contact Galileo to perform setup. The IOANV parameter must be set for every product you intend to test, and other back-end adjustments must also be made: settleAmount settleCurrencyCode cardBillingAmount cardBillingCurrencyCode mcc originalAuthId specialFunctions posEntryMode requesterId walletId latitudeAndLongitude partialAmount partialForeignAmount cashbackAmount cashAdvanceAmount pin transType PIN setup Perform this step only if you want to simulate PIN or ATM transactions. Use one of these ways to set the PIN in the CV environment: In your CV instance of the CST, after account creation. Set CASPO to automatically set the PIN to one of these values. If you set CASPO just for the CV environment, make sure you remove CASPO before pushing your configuration to Production: Last 4 digits of home phone Last 4 digits of mobile phone Last 4 digits of PRN Four zeros: 0000 (default) Use the Direct POST or Direct Render PIN-set procedure. You will have to contact Galileo to set these methods up in CV. Keep in mind that there will be differences between the CV setup and Production, such as different submitter IDs. Create the test account Follow the instructions in Creating an Account. The prodId must be for a product with a card so that card transactions will be valid. From the Create Account endpoint response you should capture these values for future use: pmt_ref_no — PRN of the account card_id — Card ID or CAD Last four digits of card_number card_security_code — The CVV Verify card creation After creating the card account, wait 15–20 minutes before performing this step to allow the emboss process to run. Call Get Card with the pmt_ref_no or card_id of the card as the accountNo. Verify that the embossed_cards object is populated. If it is not, wait 5 more minutes and try again. JSON""response_data"": {   ""card_number"": ""515567XXXXXX9075"",   ""expiry_date"": ""2026-09-12"",   ""card_security_code"": ""123"",   ""status"": ""Y"",   ""card_id"": ""5530"",   ""external_card_id"": null,   ""pmt_ref_no"": ""999102163165"",   ""first_name"": ""Juan"",   ""middle_name"": """",   ""last_name"": ""Alvarez"",   ""encrypted_card_number"": null,   ""encrypted_expiry_date"": null,   ""embossed_cards"": [    {     ""status"": ""Y"",     ""created_date"": ""2022-09-12"",     ""emboss_date"": """",     ""expiry_date"": ""2026-09-12"",     ""shipping_type"": ""standard"",     ""product_id"": ""3333""    }   ],   ""freeze_info"": {    ""status"": ""Unfrozen"",    ""start_date"": null,    ""end_date"": null   },   ""pin_fail_count"": ""0"",   ""pin_fail_date"": null,   ""spend_controls"": {    ""available_credit"": null,    ""single_use"": null,    ""credit_limit"": null   }  } Inside the embossed_cards object, the status should be Y. If it is N, skip to Fund the test account. Capture the value of expiry_date. Activate the card Skip this step if the card status is N, such as with a Digital First card or a virtual card. Call Activate Card with these parameters: ParameterValueaccountNoPRN or CAD of the card accountcardExpiryDateexpiry_date as YYYY-MMcardSecurityCodecard_security_code (In CV it is always 123)cardNumberLastFourOptional. Last four digits of card_number. If there is more than one card associated with the PRN, you must populate this parameter. To verify that the card has been activated, call Get Card again. Inside the embossed_cards object you should see status: N. Fund the test account If you are testing a debit account, you will need to add funds to the account. If you are testing a credit card, make sure the credit limit is set to an adequate testing amount. For secured credit cards, contact Galileo for the steps to fund the card. The funds that are created for the debit account are simulated funds. You do not need to set up a source account to provide them. The RL type means ""Retail Load."" For a debit account, call Create Payment with these parameters: ParameterValueaccountNopmt_ref_no of the card accountamountTesting amount, such as 1000typeRL General guidelines when simulating card transactions: The simulator simulates transactions over Visa credit or Mastercard credit rails. Transactions over debit and ATM networks such as Maestro, Interlink, Plus, and Allpoint cannot be simulated. The merchantName parameter is required. It's a good idea to give each test transaction a unique merchant name so that you can more easily distinguish the transactions from each other when retrieving transaction data. The simulator will fill in a random value for these parameters when you leave them blank: acquirerId terminalId merchantId mcc Use a genuine mcc (ISO 18245) to test upcharges and MCC blocks. In this guide, the MCCs correspond to the merchant type specified in merchantName. The transType for Visa is often different from the transType for Mastercard for the same function. Make sure you check the correct table in the Simulated Transaction Types enumeration. When Create Simulated Card Authorization returns the auth_response_code, the auth_response_description usually contains Success, even for denied authorizations. In a future enhancement the description will correspond to the code. After using Create Simulated Card Authorization, always capture the auth_id in the response. When using Create Simulated Card Settlement, you can leave the amount field blank. The simulator ignores any value in amount and so will automatically settle for the amount of the authorization. After creating the simulated transactions, use these endpoints to see the results: To view an authorization or preauthorization before it is settled: Get Authorization History — Retrieve only authorizations that have not been settled, completed, reversed or expired. Get Account Overview — Unsettled authorizations are in the authorizations object. Get All Transaction History — Retrieve all entries in the ledger. To view settled transactions: Get Transaction History — Retrieve only transactions that have settled. Does not show backouts. Get Account Overview — Posted transactions are in the transactions object. Get All Transaction History — Retrieve all entries in the ledger, including backouts and expiries. If you need to troubleshoot with Galileo, provide the complete request and response for each transaction to investigate. Updated about 2 months ago Table of Contents Initial setup PIN setup Create the test account Verify card creation Activate the card Fund the test account General guidelines when simulating card transactions: "
42,docs.galileo-ft.com/pro/docs/secured-credit,"About Galileo Secured Credit With Galileo Secured Credit, you can give your customers an opportunity to build a credit score, help protect your customers from falling into a debt cycle, and minimize your own risk. With Galileo Secured Credit, the credit that you extend to each customer is backed by their own funds, making it an effective credit-building program. Here is a brief overview of how it works: The credit extended to each cardholder is backed by funds in a separate collateral account. At the end of each billing cycle, the cardholder is billed for the full amount owed against the credit line. If the cardholder does not pay the full amount, you can decide to pull funds from the collateral account, reducing your risk of loss. You may report payment activity to credit bureaus so that the cardholder can build a credit score. Galileo Secured Credit is a charge card product, rather than a traditional revolving credit product. This means that the balance is due in full at the end of each billing cycle, cardholders are not offered a minimum payment, and they cannot carry a balance into the next month. Interest is not assessed on Galileo Secured Credit, but you can source revenue from interchange (the amount paid to you by card networks). You may also assess optional fees, such as program fees and late fees. Be aware that the charge card associated with secured credit is often referred to as a credit card in marketing materials. Galileo Secured Credit use cases Depending on how you set up your secured credit offering, you can support these use cases: Young adults with little or no credit history can build or improve their credit history. Individuals with poor credit histories can improve their credit rating. Adults with no credit history, such as immigrants to the United States, can establish a credit history. Flexibility to book car rentals and hotels (this is an optional configuration that can be disabled). Overview of secured credit accounts To create a Galileo Secured Credit account, you start with a conventional primary spending account and add on both a secondary collateral account (also called a collateral account) and a credit account. The cardholder’s line of credit is the amount that they deposit in their collateral account. For example, if a cardholder deposits $200 in the collateral account, the credit line on the card is $200. If the cardholder deposits an additional $200, the credit line increases to $400. If a cardholder fails to pay the full amount of a monthly bill, you can decide whether to pull funds from the collateral account to pay the rest of the bill, or you can decide that the account is in default and close it. If you transfer funds from the collateral account to pay the bill but do not close the account, the credit line is reduced by that amount. Example scenario Sally is 19 and has a checking account with you. She is unable to obtain a traditional credit card because she does not have a credit history. You offer a secured credit program to customers like Sally who want to build a credit history, and Sally enrolls. After you approve her application, Sally transfers $500 from her checking account into a new collateral account. She is issued a charge card against her new credit account. Later, Sally makes a payment for $100 using her charge card. At the end of her billing cycle, she is billed for the full amount, due on a specified date. If Sally pays the full amount on time, a positive record of the billing cycle is sent to the credit bureaus. Consistent positive reports build her credit. If Sally misses a payment, you can move funds from the collateral account to cover the payment. In this case, a negative record of the billing cycle is sent to the credit bureaus. Customer onboarding experience For your customers, the onboarding experience will depend on whether they already have a primary account with you or if they are signing up for a charge card for the first time. New customer onboarding experience The customer applies for the charge card and you approve the application. The customer deposits funds into a new primary account. You create a new collateral account and credit account. The customer moves a quantity of funds into the collateral account, which serves as the credit line for the charge card. You issue a charge card to the customer and the customer activates it. Existing customer onboarding experience The customer requests a charge card and you approve the request. The cardholder moves a quantity of funds into the collateral account, which serves as the credit line for the charge card. You issue a charge card to the customer and the customer activates it. Your responsibilities When you offer a Galileo Secured Credit product, your primary source of revenue for the product is the interchange that you receive from the card networks. Setting up and administering a secured credit product is a complex process, which may require a significant investment from you. Galileo can handle some tasks for you, such as account setup, processing, and credit reporting, while you are responsible for the following: Consent to the terms of the program Establish 3-party credit reporting contracts between the credit bureaus, your partner bank, and Galileo Obtain approval from your partner bank for: The secured credit financial product A new set of credit BINs Obtain card network approval for the credit BINs Set up application and underwriting rules for customers to qualify for the charge card Provide terms and conditions for your customers Set up funds movement with your partner bank Set up a collections method Provide sufficient technical personnel, including a dedicated technical product manager, to administer the product Train customer service representatives (Galileo offers training services) Create and manage customer accounts Provide a platform for your customers to use your secured credit product Provide secured credit explainers for your customers See Setup for Galileo Secured Credit for more information on some of these responsibilities and how you can work with Galileo to configure your secured credit product.Updated 5 months ago What’s NextSetting Up Galileo Secured CreditTable of Contents Galileo Secured Credit use cases Overview of secured credit accounts Customer onboarding experience Your responsibilities "
43,docs.galileo-ft.com/pro/reference/post/commitcardpinchange,Commit Card PIN Change Consult the Direct POST PIN-Set Procedure or the Direct Render PIN-Set Procedure for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description537-01No staged PIN change found. Did you successfuly use the agserv API?537-02No active cards were found537-03PIN change has not been started. Must call getCardPinChangeKey prior to using this endpoint.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
44,docs.galileo-ft.com/pro/reference/api-reference-events-api-greendot-auth,"greendot_auth Code — GDAU Event trigger — Galileo approves a Green Dot card load authorization request. Process — This process contains the event trigger: Galileo receives an API request from Green Dot to authorize a card load. Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" confirmation_id X A confirmation ID for the Green Dot transaction. Example: ""460839-0147-POST"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X A description for the transaction. Example: ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"" ext_payment_type X Green Dot payment type. Example: ""1"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDAU"" open_to_buy X The available balance to spend. Example: ""500.00"" partner X Green Dot partner name. Example: ""InComm"" pmt_id X Galileo-generated identifier for this payment. Example: ""7971383"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" retail_chain X Retail chain name. Example: ""7-Eleven"" retail_sale_transaction_key X Transaction ID for the retail sale. Example: ""1028340657"" store_address1 X Store address line 1. Example: ""3130 Gulf Bay Blvd"" store_address2 X Store address line 2. Example: ""Ste 2"" store_city X Store city. Example: ""Clearwater"" store_county X Store county. Example: ""Pinellas"" store_latitude X Store latitude: Example: ""27.96103000"" store_longitude X Store longitude. Example: ""-82.70717000"" store_name X Store name. Example: ""7-Eleven"" store_number X Store number. Example: ""40333"" store_state X Store state. Example: ""FL"" store_transaction_date X Store transaction date-time. Format: MM/DD/YYYY hh:mm:ss Example: ""11/23/2020 18:04:05"" store_zipcode X Store postal code. Example: ""33759"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""greendot_auth"" Example JSON# greendot_auth example: { ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""confirmation_id"": ""460839-0147-POST"", ""credit_balance"": ""325.00"", ""description"": ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"", ""ext_payment_type"": ""1"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDAU"", ""open_to_buy"": ""500.00"", ""partner"": ""InComm"", ""pmt_id"": ""7971383"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""retail_chain"": ""7-Eleven"", ""retail_sale_transaction_key"": ""1028340657"", ""store_address1"": ""3130 Gulf To Bay Blvd"", ""store_address2"": ""Ste 2"", ""store_city"": ""Clearwater"", ""store_county"": ""Pinellas"", ""store_latitude"": ""27.96103000"", ""store_longitude"": ""-82.70717000"", ""store_name"": ""7-Eleven"", ""store_number"": ""40333"", ""store_state"": ""FL"", ""store_transaction_date"": ""11/23/2020 18:04:05"", ""store_zipcode"": ""33759"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""greendot_auth"" } Table of Contents Fields Example "
45,docs.galileo-ft.com/pro/page/scenario-5-reversal-on-preauthorization-before-clearing-visa,"Scenario 5: Reversal on Preauthorization Before Clearing (Visa) << Back to the index A debit cardholder attempts to pump some gas. The pump gets a pre-authorization for $50 but a few seconds later reverses out the transaction because of a technical problem. The following are true: The initial available balance is $1000. The merchant validates the debit card with a PIN. The network is Visa Interlink. Transactions for this merchant type and amount are configured to expire after seven days. Sequence of events Events in the same step have the same timestamp. Visa sends an authorization request for –50.00. Galileo approves the request and places a 50.00 hold on the account. The available balance is now 950.00. Galileo sends the BAUT: auth webhook. Visa sends a reversal for 50.00. Galileo reverses out the 50.00 hold. The available balance is now 1000.00. Galileo sends an AAAU: auth webhook. After seven days, the authorization and its reversal expire. Galileo sends the BEXP: auth_exp and BEXR: auth_exp_reversal webhooks. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth50.0011660100020210414:104131MSTReversalAuth50.009933116698020210414:104458MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth50116609502021-04-14 10:41:31 MSTAAAUauth509933116610002021-04-14 10:44:58 MSTBEXRauth_exp_reversal50993311669502021-04-22 06:01:12 MSTBEXPauth_exp501166010002021-04-22 06:01:12 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME50.00-11665004142021 10:41:3150.00+99335116604142021 10:44:58 Posted Transactions RDF The transaction does not appear in this RDF. Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. In this table both the authorization and reversal are shown; however, in Production you would get only the most recent transaction. amtauth_idoriginal_auth_idtypelocal_amttimestamp-5011660A0000000050002021-04-14 10:41:315099331166R0000000050002021-04-14 10:44:58 Get Transaction History response The transactions are not returned by this endpoint. Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-5022330VIA1166950N2021-04-14 10:41:312021-04-14 10:41:31509902233VIR99331000N2021-04-14 10:44:582021-04-14 10:44:58-50NoneNoneVXR1166950NoneNone2021-04-22 06:01:1250NoneNoneVXA99331000NoneNone2021-04-22 06:01:12 "
46,docs.galileo-ft.com/pro/reference/api-reference-tokenization-recommendation-reason-codes,"Tokenization Recommendation Reason Codes CodeReason01Cardholder’s wallet account is too new relative to launch.02Cardholder’s wallet account is too new relative to the provisioning request.03Cardholder’s wallet account card pair is newer than the date threshold.04Changes made to account data within the date threshold.05Suspicious transactions linked to this account.06Account has not had activity in the last year.07Suspended cards in the secure element.08Device was put in lost mode in the last 7 days for longer than the duration threshold.09The number of provisioning attempts on this device in 24 hours exceeds the threshold.0AThere have been more than the threshold number of different cards attempted at provisioning this phone in 24 hours.0BThe card-provisioning request contains a distinct name in excess of the permitted threshold.0CThe device score is less than 3.0DThe account score is less than 4.0EDevice-provisioning location outside of the cardholder’s wallet-account home country.0GSuspected fraud.0HPhone score is less than 3.AGIssuer preferred to defer ID and decision to token-creation time.AHIssuer-encrypted payment-instrument data has expired.AIUser/device that was intended to receive the encrypted payment instrument data is different from the one that is provisioning the token.ALSending and receiving devices are different. Passcode was included in the issuer's encrypted payment-instrument data, then it matched the user-provided value.AMPushing to a different user than the cardholder. Passcode was included in the issuer's encrypted payment instrument data, then matched the user-provided value.ANSending and receiving devices are the same but without up-front authentication or passcode verification.AOSending and receiving devices are the same but unsuccessful up-front authentication passcode verification. "
47,docs.galileo-ft.com/instant/reference/adjustment-type,"Adjustment Type TypeDescriptionmerchant_creditCredit from a merchant, often a refundprovisional_creditCredit from the bank while a dispute is investigated. May be reversed depending on the conclusion of the investigation.provisional_credit_reversalReversal of provisional credit due to the conclusion of an investigation into a disputedirect_debitDirect ACH pull from a billermanualManual adjustment from Galileo "
48,docs.galileo-ft.com/pro/reference/post/addrppsbiller,"Add RPPS Biller The table below lists status codes that apply to this specific endpoint. Status CodeCode Description485-01Invalid RPPS Biller ID485-02Customer already has this biller485-03Submitted account number does not match the associated biller mask485-04amount, nextDate, and endDate are required for scheduled bill paymentLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
49,docs.galileo-ft.com/pro/reference/post/completeenrollment,"Complete Enrollment 📘NoteIf this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See Enrollment Statuses for more information.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description480-01Card not issuable480-02Customer already has this product issued480-03Invalid instant issue card480-04Load amount outside of load limits480-05Could not create account480-06Could not load card480-07Primary account is invalid480-08Secondary accounts cannot be added to secondary accounts480-09Maximum number of secondary accounts exceeded480-10ID type 2 is required as main ID for running CIP480-11Account created, ID Validation failed480-12An application with the same ID has already been submitted480-14Success -- partial limit violation480-15Success -- delayed payment480-16Card is marked as fraudulent480-17Card not allocated to your store for issuance480-25Enrollment has already been completed and cannot be processed again480-26Invalid real-time funding accountLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
50,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-updated,"fed_benefits_status_updated Code — FBSU Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" fbe_status_id Identifier for the federal benefits status. Example: ""204938675"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSU"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_updated"" Example JSON# fed_benefits_status_updated example: { ""balance_id"": ""20211"", ""fbe_status_id"": ""204938675"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSU"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_updated"" } Table of Contents Fields Example "
51,docs.galileo-ft.com/instant/reference/idempotency-key,"Idempotency Key Generate a V4 UUID and include it as the value for the Idempotency-Key in the request header for all POST requests (excluding those made to /login and /refresh). To safely retry a request, use the same Idempotency-Key value that was used in the original request. Galileo stores each Idempotency-Key for 7 days. If two nonidentical requests use the same Idempotency-Key, the response will contain an error object with idempotency_error as the error_code. An Idempotency-Key should not be used for GET or PUT requests since they are idempotent by definition and the key will have no effect. "
52,docs.galileo-ft.com/pro/reference/post/expireauthorization,"Expire Authorization Acceptable statuses are defined by each card network, as shown in this table: NetworkStatusMastercardA,CVisaAStarA,SSee Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description532-01Card authorization could not be found532-02Card authorization could not be expired532-03System error encountered while attempting to expire authorizationLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
53,docs.galileo-ft.com/pro/docs/settlement,"Settlement This guide explains how authorizations are settled or completed after being authorized, including authorization backout. This guide assumes that you are familiar with the concepts in these guides: About Transactions — General explanation of how transactions are represented in the Galileo system About Card Transactions — High-level explanation of how card transactions work Authorization — Detailed explanation of authorization and its variants 📘NoteTo see detailed examples of transaction sequences as they appear in the Program API, Events API, Auth API, and RDFs, consult the Card Transaction Scenarios. From the networks Galileo receives batch files that contain clearing messages from the merchants. Mastercard Banknet sends a batch file every two hours, and the interbank and ATM networks send their files once every morning. Galileo processes these files by matching a clearing message to a pending authorization in its system. When Galileo finds a match, Galileo backs out the hold, changes the pending authorization to a settled transaction, sends the Settlement Events SETL: setl message for that transaction, and posts the amount to the cardholder account. The time elapsed between an authorization and its corresponding settlement can range from several hours to several days, depending on how frequently a merchant reconciles with its acquirer and how often an acquirer settles with the networks. See the Transaction types enumeration for settlement-related transaction codes. Driving an account negative Galileo is obligated to post all of the transactions that it receives in the settlement batch file, regardless of whether there is a matching authorization. In some cases, a cardholder account is driven negative by settlements that don't have a matching authorization. Such settlements fall into these categories: Unmatched settlement — Reasons for an unmatched settlement might be: The merchant did not request authorization prior to completing the transaction. Merchants that have a high volume of purchases for small amounts, such as fast-food restaurants, sometimes do not take the time to obtain authorizations. In these cases, merchants forfeit their chargeback rights if there is a dispute. The authorization expired in the system before it received a clearing message. See Authorization expiry in the Authorization guide for more information, or Settlement of an expired authorization in Card Transaction Examples. Force posting — The merchant generates a message that indicates that the amount is to be force posted to the cardholder account, often in the case of a recurring transaction. Advice messages — These messages may come from the merchant or the card network, through the authorization stream, and Galileo is not permitted to refuse the transaction, regardless of available balance, account status, or other factors that would cause a decline. Settlement overcharge — The merchant authorized the card for a small amount, just to check that the card is active, and then the settlement amount is much higher than the authorization amount. At restaurants and similar establishments the merchant may have authorized the purchase amount before the tip was added. See Upcharges in the Authorization guide for one way to mitigate this risk. The issuer or cardholder may later dispute any posted transaction. See Disputes in the Crediting Cardholder Accounts guide for more information. Backout When Galileo receives a clearing message for an existing authorization, or a completion for a preauthorization, the Galileo system automatically backs out the original authorization hold before it posts the settlement or completion. Backouts are initiated by Galileo, not by the networks, and they are triggered by the arrival of the completion (through the authorization stream) or the settlement (in the settlement batch file). By backing out the hold before posting the settlement or completion, Galileo corrects for situations when the settlement amount is different from the authorization or preauthorization amount, such as when a tip is added at a restaurant, a gas pump authorizes a larger amount than the final sale, or a foreign transaction settles for a different amount than the authorization because of changes in currency conversion rates. The backout appears as a separate transaction in the Galileo ledger, and it has the same timestamp as the corresponding settlement or completion. It also has the same source ID as the authorization that it backs out, and it has the opposite sign as the authorization. A backout is written to the ledger immediately before the settlement/completion, which results in a temporary increase in the available balance; however, the ledger is locked during the time that the backout and settlement/completion are posted, so the backed-out amount cannot be spent, and the cardholder cannot detect the backout. Galileo does not send event webhooks for backouts, but they are visible in the CST and in the response to Get All Transaction History. If you are the system of record for your program, you must devise a way to perform your own backouts when settlement or completion messages arrive. The table below shows backout activity type codes. The corresponding transaction type code will match the settlement transaction code for authorizations but is repeated for preauthorization backouts. For example, if the settlement for a Visa authorization is VSA, then the backout code is BVA. If a Maestro preauthorization is being backed out the code is PBPB. Your program may have customized backout codes; consult the curated list of transaction codes that Galileo gave you. Activity Type CodeDescriptionABAllpoint authorization backoutBAAllpoint preauthorization backoutBCDiscover authorization backoutBDMaestro authorization backoutBKMastercard Banknet preauthorization backoutBOMastercard Banknet authorization backoutBPPulse authorization backoutBSStar authorization backoutBVVisa authorization backoutPBMaestro preauthorization backoutPSStar preauthorization backoutPVVisa preauthorization backout For examples of backouts see any example in Card Transactions Examples or the Card Transaction Scenarios. Completion After obtaining a preauthorization a merchant has the option of sending a completion before the settlement. When a merchant sends a completion, the message arrives at Galileo as an advice-type message in the authorization stream. Issuers are not permitted to reject an advice, so the response code will always be 00. Galileo backs out the preauthorization amount immediately upon receiving a completion, so the completion amount is now held instead of the preauthorization amount. Later, the network sends the clearing for the completion in the bulk settlement file, and Galileo performs a conventional backout and settlement. This method produces five entries in the Galileo ledger: preauthorization, preauthorization backout, completion, backout, and settlement. The most common transaction that uses completion is a gas-pump transaction. The pump first obtains preauthorization for a high amount, such as $75, because it does not have the final sale amount before the gas is dispensed. When the gas has finished pumping the pump sends the final sale amount in a completion, which arrives at Galileo in the authorization stream. Galileo backs out the preauthorization hold and replaces it with the completion hold. When the bulk settlement file arrives, Galileo matches the settlement with the completion, backs out that hold, and posts the amount to the cardholder account. For examples of preauthorization with completion, see the Five-step sequence in Card Transaction Examples and Scenario 2: Preauthorization with Completion. Incremental clearing In most cases, a merchant clears an authorization with a single clearing message. In other cases, however, the merchant obtains preauthorization for a group of items that are later shipped separately, and the merchant sends a separate clearing message for each portion of the order as it ships. For example, an online merchant that offers items from multiple third-party vendors might obtain authorization for the total amount of the items first, and then as each vendor ships its items, the merchant clears that part of the order. 📘NoteInstead of obtaining preauthorization for the full sale amount and clearing it incrementally, an online merchant might perform an AVS-only check first, and then obtain separate authorizations for each portion of the order as it ships. Each authorization would be cleared separately, as a separate transaction, and there would be no identifier to link the parts of the transaction together. Normally, when a clearing message arrives at Galileo that is less than the authorization amount, Galileo backs out the full authorization amount and posts the settlement amount, and any remaining funds are returned to the cardholder account when the authorization expires. For example, if a merchant obtains preauthorization for $50 and then sends a $45 clearing, the $50 hold is backed out and only $45 is debited from the account, effectively returning the remaining $5 to the cardholder account when the authorization expires. However, when a merchant sends a clearing for only part of the amount and intends to send more clearings for the same preauthorization, Galileo must keep the original preauthorization in a “pending” state until all clearings have arrived instead of returning the remainder to the cardholder account. To keep the original preauthorization in a pending state after receiving a partial clearing, Galileo creates a new entry in its ledger for the remaining preauthorization amount, and when the next clearing arrives it is matched to the new entry. This new record is called a “bookkeeping” authorization record, because it is created by the Galileo system for its own purposes instead of arriving over network rails. For example, a cardholder purchases three items from three different third-party vendors on the same online store. The items are for $150, $75, and $175. The online merchant obtains preauthorization for $400, and Galileo creates a conventional entry in the authorizations table for $400. A few days later, the first vendor ships its portion of the order and the online merchant sends a clearing for $150. The clearing message contains an indicator to show that it is a partial settlement. Galileo matches the clearing message to the authorization and then creates a bookkeeping authorization record for the remaining $250. When the second vendor ships its portion, and the online vendor sends a clearing message for $75, Galileo matches the clearing to the bookkeeping authorization record and creates a second bookkeeping authorization record for the remaining $175. When the third vendor sends its portion, Galileo matches it to the second bookkeeping authorization record, and because an indicator in the clearing message says that there are no more clearings to come, Galileo marks the transaction as settled. For an example see Incremental clearing in Card Transaction Examples. International settlements When an international settlement arrives, the settlement amount is usually different from the authorization amount, because it reflects fluctuations in the currency conversion rate between the authorization time and the clearing time. There is therefore a risk of the account being driven negative, if the conversion rate at clearing results in a higher amount than the authorization. The amount in the merchant's local currency is communicated in the local_amt field in the Program API and local_currency_amount in the Auth API. Settlements in the Program API When Galileo settles a transaction it changes the state of the authorization from pending to settled. The authorization then is not returned by any endpoint that returns unsettled authorizations. To get settled transactions, use these endpoints: Get Account Overview — Returns settled transactions in the transactions object of the response. Get Transaction History — Returns only settled transactions. Get All Transaction History — Returns all transactions: settled, unsettled, unexpired, and backouts. See Obtaining transaction history via API in the Transaction History guide for the use cases for each endpoint. To see settlements in Program API responses and an explanation of the fields, open these Recipes: Get Transaction History responseOpen Recipe Get All Transaction History response: preauthorization, backout, settlementOpen Recipe Get All Transaction History: Preauth at gas pump with completionOpen Recipe Settlement Events API There is only one settlement webhook, SETL: setl, which is sent to your Settlement Events endpoint at the time that Galileo processes the batch settlement file. To see examples of transaction sequences with Events API webhooks, see Authorization events in the Events API Scenarios guide.Updated 4 months ago Table of Contents Driving an account negative Backout Completion Incremental clearing International settlements Settlements in the Program API Settlement Events API "
54,docs.galileo-ft.com/pro/reference/ach-at-galileo,"ACH at Galileo Incoming and outgoing transactions Galileo uses the terms “incoming” and “outgoing” to indicate whether an ACH transaction originates from an external account or your customer’s account in the Galileo system. An incoming ACH transaction is externally originated. The originator initiates the transaction from an external account and the receiver is your customer in the Galileo system. An outgoing ACH transaction is Galileo-originated using Program API endpoints. Your customer initiates the transaction from an account in the Galileo system and the receiver is an external entity. ACH credit and ACH debit An ACH transaction is classified as credit or debit depending on whether the originator moves funds into or out of the receiver’s account. This means that an ACH credit is a credit to the receiver and an ACH debit is a debit to the receiver. The receiver must authorize the request before funds are moved. The originator can make an ACH credit or debit request regardless of whether the transaction is incoming or outgoing. ACH credit — The originator moves funds into the receiver’s account. For example: An employer makes a direct deposit to your customer’s account via ACH transaction. A cardholder cashes out their Venmo or Paypal account balance and opts to use ACH payment. 📘NoteAn incoming ACH credit is often called a direct deposit. Some examples of incoming ACH credit are: a payroll deposit from an employer, a tax refund, a government stimulus check, and an incoming transfer from the customer’s own external account. Galileo does not make a distinction between a direct deposit and any other incoming ACH credit. ACH debit — The originator moves funds out of the receiver’s account. For example: Your customer has an external account at another bank and posts an outgoing ACH debit that moves funds out of the external account and into the account under your product. A business bills your consumer customer and removes funds from your customer’s account via ACH transaction (commonly used for utility bills, mortgage payments, other loan payments, etc). Your business customer bills an external business and draws funds from the external business’s account via ACH transaction. Nacha file Nacha (National Automated Clearing House Association) is the organization that oversees the ACH system and sets the standards for ACH transactions. A Nacha file contains bulk ACH transaction instructions in a standardized format. The ODFI sends the transaction in one Nacha file and the RDFI sends the settlement decision in a separate Nacha file. A clearing house in the ACH network transfers Nacha files between banks. Galileo creates and sends one Nacha file per day for each bank that Galileo is integrated with. Galileo sends each Nacha file via SFTP. 📘NoteGalileo uses the Nacha file format to process ACH transactions. The Nacha file format is a standardized format that all banks in the ACH network are equipped to process. Nacha files are encrypted. Decisions to make before setting up ACH Before setting up a product that is enabled for ACH transactions, you have several decisions to make. Allow incoming ACH credits — Whether to allow incoming ACH credits. Allow incoming ACH debits — Whether to allow incoming ACH debits. By default, incoming ACH debits are not allowed. Use External Trans API for incoming ACH debits — If incoming ACH debits are allowed, you can use the External Trans API to review incoming ACH debits before posting. You can either review all incoming ACH debits, or only incoming ACH debits in which the receiver's account lacks sufficient funds. If you do not use the External Trans API, then incoming ACH debits will post automatically (subject to Galileo's logic). Account statuses for incoming ACH — Acceptable account statuses for accounts to accept incoming ACH transactions. Galileo recommends declining incoming transactions to accounts that are closed or charged-off. Hold days for outgoing ACH debit — Number of hold days for outgoing ACH debit. Early ACH access — Whether account holders have early access to incoming ACH credit. Same Day ACH — Whether to allow Same Day ACH transactions. Approval for direct deposit — Whether direct deposits require manual approval in certain circumstances. For instance, you may want to manually approve a transaction if the amount exceeds a specified limit or if it originates outside of the U.S. ACH posting order at Galileo In general, Galileo stages ACH transactions for posting when requests are received. When transactions are ready to post, Galileo typically posts the credits first, then the debits. However, you may see exceptions to this because there are many factors that affect posting order. ACH accounts Before you can originate an ACH transaction, you must provide the receiver’s external bank account and routing number. Galileo stores this information in an ACH account. See Adding an ACH Account for more information on how ACH accounts are structured at Galileo. Setup for ACH transactions In an ACH transaction, funds are usually transferred between a settlement account at the RDFI and a settlement account at the ODFI via the ACH network. However, the method used to transfer funds may vary depending on regulations that each DFI is subject to. Work with your DFI to determine how to send and receive funds for ACH transfers. ACH hold days When your customer in the Galileo system originates an outgoing ACH debit request to move funds into their account, Galileo recommends setting a waiting period of at least three calendar days before the funds can be transferred to the customer’s account. These hold days give the receiver time to deny the request before the funds are debited from the receiver’s account. Per Nacha rules, an ACH transaction can be returned two days after the settlement date (returns past this time are allowed in certain situations). You can adjust the number of hold days during product setup. The hold days timer starts when Galileo sends the outgoing Nacha file to the ACH operator. Hold days only apply to outgoing ACH debit requests. See Outgoing ACH debit workflow to see how the hold days are applied. ACH Hold Days Override We now offer the flexibility to set hold days at the transaction level for outgoing ACH Debits, to provide greater control over defining hold days. While using the createAchTransaction API, you can now pass a new optional parameter: holdDays along with an integer value. When you originate an outgoing ACH debit transaction, the value you set for hold days through the API call overrides the value that was set in the product configuration. When the API request is initiated with the new parameter and value, Galileo receives the API request and the transaction is queued in Galileo’s ACH system. Once Galileo’s ACH system processes the transaction, the Nacha file is generated and sent to the partner bank. The different parameters set up for your program determine when the Nacha file is generated by Galileo, which begins the holdDays countdown. If the holdDays parameter is empty or null, Galileo uses the default hold day value set at the program level. Requirements Get approval from your partner bank to be able to use this feature. Work with your RM to enable the product configuration ACOHD to use the optional API parameter. 📘NoteThere are various product parameters that could affect when the holdDays countdown begins and ends. To make sure you get the expected results, you may want to review those other configuration settings for your program. Galileo’s system time is Arizona Time (UTC-07:00) and does not honor Daylight Savings. Same Day ACH When you send an outgoing Same Day ACH request, Galileo posts the request in the Nacha file the same day that you originated the request (unless you send the request after Galileo’s cutoff time). For a normal (non-same day) ACH request, Galileo posts the request in the next day’s Nacha file. Same Day ACH is available for both ACH credit and debit, with a $1,000,000 per-transaction limit. International transactions are not eligible for Same Day ACH. For fraud prevention purposes, ACH hold days apply to Same Day ACH. Hold days control when the funds are posted to the receiving account. Cutoff times also apply (described below), and after settlement, the RDFI has two days to initiate a return. To post a Same Day ACH request, send the Create ACH Transaction endpoint with sameDay set to Y. The ACHSD parameter must also be set to Y to enable Same Day processing. There are a few deadlines to keep in mind when posting a Same Day transaction. Galileo’s cutoff time — The time of day that Galileo generates a Nacha file for outgoing ACH transactions that originate from your program. This is usually about 40 minutes before your own cutoff time. ODFI cutoff time — The time of day that the ODFI retrieves the Nacha file from Galileo and sends it to the ACH operator. ACH operator cutoff time — Send the Nacha file to the ACH operator by the cutoff time shown below to meet your target time for funds availability. This table shows the ACH operator’s transmit deadline and corresponding time that funds are available to the receiver for Same Day ACH. Times are in Eastern Time (but be aware that Galileo’s system time is Arizona Time (UTC-07:00)). ACH operator cutoff timeFunds available to receiver(depending on applicable hold days)10:30 AM1:30 PM2:45 PM5:00 PM4:45 PMEnd of processing day ACH early access Galileo supports early access to incoming ACH deposits, a process that moves funds into a customer’s account before the settlement date. Galileo Early Pay is a feature of ACH early access, where your customers can have early access to paychecks sent via direct deposit. During product setup, you can request one of these configurations: Enable ACH early access for all accounts within a product Do not enable ACH early access for all accounts, but control access for individual accounts Clients can request the ACH Early Access guide for more information. ACH vs. bill pay Bill pay is a service that is separate from ACH. Account holders can use bill pay to make payments to service providers, either electronically or with a paper check. It is often more convenient for account holders to use the bill pay service than to pay bills via ACH. While an ACH transaction can take a few days to process, funds from an electronic bill payment can be made available to the biller the same day the bill is paid, depending on cutoff times. The bill pay service also makes it easier to cancel a recurring bill payment. For example, if the customer cancels a gym membership, the gym may not stop the ACH requests and may continue to debit the customer’s account after the membership is terminated. Bill pay allows an account holder to pay service providers without giving them access to bank account information. 📘NoteMost Galileo programs do not enable incoming ACH debit but use bill pay instead. See About Bill Pay for more information. ACH returns and stop payment orders An ACH return is initiated when an ACH transaction is rejected by the receiver or receiver’s bank. There are three types of ACH returns at Galileo. Outgoing ACH return — An external bank rejects an outgoing ACH transaction originating from your customer. Incoming ACH return — You or Galileo reject an incoming ACH transaction from an external originator. ACH stop payment order — A type of incoming ACH return that blocks an ACH debit before Galileo processes it. 📘NoteAn ACH return can only be sent for specific reasons and must include an ACH return code. Excessive or fraudulent returns can result in fines. For suspected fraud, see ACH disputes in the About Disputes guide. This section describes each type of return in detail. Outgoing ACH returns When your customer sends an outgoing ACH request to an external receiver and the external receiver rejects the transaction, the RDFI is responsible for providing an ACH return code. See the Outgoing ACH returns workflow for an overview. 📘NoteIn some cases, there is a problem with an outgoing ACH transaction but the transaction can still be posted. When this happens, the RDFI can post the transaction instead of sending a return, and may send a notice of change that states what the error is and how to correct it. When an outgoing ACH credit is returned to your customer, the resolution depends on when in the ACH process that the return was sent. If the funds were not posted, the pending transfer is cancelled. If the funds were posted, they are returned and Galileo adjusts the amount for your customer’s account. Incoming ACH returns When you or Galileo reject an incoming ACH request, Galileo prepares a Nacha file with the return and sends a return code to the ODFI. See the Incoming ACH returns workflow for an overview. You can manage incoming ACH returns using the CST. This table describes CST controls to review ACH transactions and initiate returns. CST controlLocationDescriptionPayment Posts & ReturnsSystem Administration > Other ToolsReview an ACH transaction and decide how to handle future ACH transactions with matching program settings.ACH Automation MatchesAccount > ACH InfoUpdate a decision that was made for ACH transactions in Payment Posts & Returns.ACH ReturnsSystem Administration > Other ToolsQueue for ACH transactions that are in status: i (manual review). A transaction appears in this queue if it violates load limits, if the receiver’s account status does not allow ACH transactions, or if it was sent for review via the External Trans API.Payment HistoryAccount > Account InfoDisplays the payment history for an account. On this page, you can mark an ACH transaction for return and select a return code.ACH Debit Block ReviewSystem Administration > Other ToolsShows partial matches for ACH stop payment orders. You can approve the block and start a return. See ACH stop payment orders for more information. Alternatively, you can use the Modify Pending Deposit Status endpoint to return an incoming ACH credit. See Modifying a pending ACH deposit status for more information. ACH stop payment orders When your customer wants to block an incoming ACH debit from a specific originator, you can ask Galileo to set up an ACH stop payment order. This type of return stops an incoming ACH debit before it is processed by Galileo. You provide the following information: Your customer’s account number Name of the business that originated the ACH debit to block Amount or range of amounts to block. Date or range of dates to block. Galileo compares the business name in incoming ACH debit requests against the business name you provided for the ACH debit block. When there is an exact match, the transaction is blocked. When there is a partial match, you must manually review the transaction to verify the stop payment order. Review ACH stop payment orders in the CST on the ACH Debit Block Review page. Federal benefit enrollment Federal benefit enrollment is a process that informs the U.S. federal government to send federal benefits to a customer via ACH deposit. Use the Create Federal Benefit Enrollment endpoint to enroll a customer. The FBEVA and ENIAN parameters must be set to enable Federal Benefit Enrollment. Plaid integration Plaid integration with Galileo is a simple way for customers to move funds between accounts via ACH. You place Plaid’s front-end module on your app or website. When your customer verifies an external bank account using Plaid, Plaid sends you a public token and account ID that you can use to generate a unique processor token for the external account. Galileo can provide you with instructions for Plaid integration. When you send a call to the Add ACH Account or Create ACH Transaction endpoint, pass the processor token through the endpoint instead of the account number and routing number. 📘NoteGalileo uses Plaid Identity API endpoints to retrieve identity information and compare against the Galileo stored account holder information. We can work with you to customize the match requirements to best meet your business's needs. See Plaid's documentation about integration with Galileo at plaid.com/docs/auth/partnerships/galileo/. Incoming ACH account verification An external originator can verify your customer’s account information before making an incoming ACH request for the first time. This often occurs for a new recurring ACH transaction. These are common methods for verifying the receiver’s account: Prenotification — The originator posts a non-monetary transaction that indicates the intent to transfer funds. A successful prenotification verifies that the receiver’s account is valid. Microtransactions — The originator makes small test deposits to the receiver’s account, then debits the same amount out of the receiver’s account. A successful series of micro-deposits and micro-debits verifies that the receiver’s account is valid. Bank login verification — Some banks support applications that allow account holders to add and verify their account information. Plaid verification is one example of this. Galileo setup These internal parameters must be set at Galileo for ACH, according to your use case. ParameterLevelDescriptionACCRDProgram or productControls whether to allow incoming ACH credit requests to move funds into the customer account.ACDBTProgram or productControls whether to allow incoming ACH debit requests to move funds out of the customer account.ACDBXProgram or productControls whether you participate in the approval of incoming ACH debit requests via the External Trans API.ACHCAProgram or productControls whether to verify that the receiving account is active before posting an incoming ACH debit request.ACHCBProgram or productControls whether to check account balance for insufficient funds before posting an incoming ACH debit request. If this parameter is set to N, an incoming debit may drive the balance negative, depending on settings for ACHDN and ACHOD.ACHDNProgram or productControls whether an incoming ACH debit request to move money out of a customer account is allowed to drive the account balance negative. MBCHS must also be set.ACHODProductControls whether an incoming ACH debit request to move funds out of the customer account can draw funds from an overdraft account when there are insufficient funds in the primary account.ACHPTProductSpecifies the number of hours after midnight to post outgoing ACH debit and incoming ACH credit. When this parameter is not set, outgoing ACH debit and incoming ACH credit post at midnight. If Same Day ACH is also enabled, funds may post one day earlier. Hold days go into effect immediately, but when ACHPT is set, it requires a refresh overnight.ACHRQProgram or productControls whether you participate in the approval of ACH returns. When set, all ACH returns except R01 and R03 are set to status: i (pending approval).ACHSDProgramControls whether Same Day ACH transfers are enabled and processed as Same Day transfers.ACOHDProductSpecifies whether to override the default hold days, using an optional parameter called holdDays in the Create ACH Transaction endpoint. Sponsor bank approval is required to use this parameter.ACSTSProgramSpecifies the acceptable account statuses to allow an incoming ACH credit request to move funds into the customer account.BALMCProgramControls whether Galileo checks the balance and assesses fees for outgoing ACH credit transactions. Clients that maintain their own ledger should set this parameter. This affects transactions created with the Create ACH Transaction endpoint.BTBEIProgramControls whether to include the business ID in the Nacha file for a business-to-business ACH transfer. BTBPG must also be set. If this parameter is not set, then BTBPI must be set.BTBPGProgramControls whether the program is a business-to-business program.BTBPIProgramControls whether to use a custom identification number in the Nacha file. BTBPG must also be set. If this parameter is not set, then BTBEI must be set.EAIAAProductControls whether all accounts have early access to ACH deposits or only accounts with feature type 7 (ACH early access) set to Y have early access. FBEEA must be set to enable early access.FACHAProductControls whether incoming ACH credit or debit transactions trigger ACHR: ach_debit_fail event alert when the transaction returns status: E (error) or status: R (bad routing number).FBEEAProductSpecifies the number of days before the effective deposit date that the account holder has early access to ACH deposits. This parameter is required to enable early access to ACH deposits for all accounts, including accounts with feature type 7 set to Y (enable early access).FBEVAProductEnables Federal benefits enrollment and specifies product IDs that share a Federal benefits enrollment virtual account balance for incoming ACH credit.HDACHProductControls whether to calculate hold days for ACH transactions in terms of business days instead of calendar days.LMACHProductSpecifies the minimum and maximum amounts for an ACH debit request that is set up with the Customer Service Tool.MBCHSProductControls the minimum amount that must remain in the customer account after an outgoing ACH credit moves funds out of the customer account.NTSAAProductControls whether to send the ACRT: ach_return event message when an originated ACH transfer is returned.Table of Contents Incoming and outgoing transactions ACH credit and ACH debit Nacha file Decisions to make before setting up ACH ACH posting order at Galileo ACH accounts Setup for ACH transactions ACH hold days ACH Hold Days Override Same Day ACH ACH early access ACH vs. bill pay ACH returns and stop payment orders Outgoing ACH returns Incoming ACH returns ACH stop payment orders Federal benefit enrollment Plaid integration Incoming ACH account verification Galileo setup "
55,docs.galileo-ft.com/pro/reference/api-reference-events-api-greendot-auth-failure,"greendot_auth_failure Code — GDFA Event trigger — Galileo rejects a Green Dot card load. Process — This process contains the event trigger: Galileo receives an API request from Green Dot to authorize a card load. Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" card_id X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X A description for the transaction. Example: ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"" ext_payment_type X Green Dot payment type. Example: ""1"" limit_code X Code for the authorization limit that was violated. Example: ""L302"" limit_id X Identifier for the authorization limit that was violated. Example: ""100240645"" merchant_id X An identifier for the merchant who loaded the card. Example: `""00000002049325"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDFA"" open_to_buy X The available balance to spend. Example: ""500.00"" otype X See the curated list of otypes for your program from Galileo. Example: ""AC"" partner X Green Dot partner name. Example: ""InComm"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" retail_chain X Retail chain name. Example: ""7-Eleven"" retail_sale_transaction_key X Transaction ID for the retail sale. Example: ""1028340657"" store_address1 X Store address line 1. Example: ""3130 Gulf Bay Blvd"" store_address2 X Store address line 2. Example: ""Ste 2"" store_city X Store city. Example: ""Clearwater"" store_county X Store county. Example: ""Pinellas"" store_latitude X Store latitude: Example: ""27.96103000"" store_longitude X Store longitude. Example: ""-82.70717000"" store_name X Store name. Example: ""7-Eleven"" store_number X Store number. Example: ""40333"" store_state X Store state. Example: ""FL"" store_transaction_date X Store transaction date-time. Format: MM/DD/YYYY hh:mm:ss Example: ""11/23/2020 18:04:05"" store_zipcode X Store postal code. Example: ""33759"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""greendot_auth_failure"" Example JSON# greendot_auth_failure example: { ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""card_id"": ""12534"", ""credit_balance"": ""325.00"", ""description"": ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"", ""ext_payment_type"": ""1"", ""limit_code"": ""L302"", ""limit_id"": ""100240645"", ""merchant_id"": ""00000002049325"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDFA"", ""open_to_buy"": ""500.00"", ""otype"": ""AC"", ""partner"": ""InComm"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""retail_chain"": ""7-Eleven"", ""retail_sale_transaction_key"": ""1028340657"", ""store_address1"": ""3130 Gulf To Bay Blvd"", ""store_address2"": ""Ste 2"", ""store_city"": ""Clearwater"", ""store_county"": ""Pinellas"", ""store_latitude"": ""27.96103000"", ""store_longitude"": ""-82.70717000"", ""store_name"": ""7-Eleven"", ""store_number"": ""40333"", ""store_state"": ""FL"", ""store_transaction_date"": ""11/23/2020 18:04:05"", ""store_zipcode"": ""33759"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""greendot_auth_failure"" } Table of Contents Fields Example "
56,docs.galileo-ft.com/pro/reference/post/getfeesummary,Get Fee Summary See Record-Set Pagination for instructions on using the paging parameters.Response Schema Objectobject status_codeint32 The status of the response statusstring The condition of a process or response processing_timefloat The time elapsed in processing the transaction echoobject A structure that contains transaction ID information transaction_idstring An ID that represents an API transaction provider_timestampdate-time Store a related timestamp for reporting and troubleshooting purposes provider_transaction_idstring Secondary transaction identifier (generated by a provider) system_timestampdate-time A system generated timestamp response_dataobject A structure for the response data. It can be empty but usually will contain information. fees_ytdfloat Fees year-to-date fees_mtdfloat Fees month-to-date Status CodeCode Description0Success2Invalid parameter(s).12Invalid customer account-1Indicates that the application record failed to update or return.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
57,docs.galileo-ft.com/pro/reference/lending/post/getloanpaymentschedule,"Get Loan Payment Schedule Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1204-01The loanId is invalid or does not exist.1204-02The subProductId is invalid or does not exist.1204-03This loan is voided, and all the transactions have been reversedLanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
58,docs.galileo-ft.com/pro/docs/networks,"Networks This guide explains card network types as well as how different transaction types are routed over the networks. Information about selecting primary and secondary networks is also provided. A card network (also called a ""payments network"" or ""card association"") is a business entity that comprises banks, dedicated networks, and messaging systems to facilitate card transactions. This messaging infrastructure is called a network's ""rails."" There are two primary types of card network: Credit card — Originally formed by a single bank or financial entity, these networks process credit card transactions. Examples: Visa, Mastercard, Discover. Interbank — Originally formed by groups of banks to link ATMs and process debit cards. Examples: STAR, Pulse, Cirrus, Maestro, Interlink. Most credit card networks have created or acquired at least one interbank network. As explained in Debit card validation in About Card Transactions, at the point of sale card transactions are classified according to how the card is validated: PIN — A PIN is input on a card reader Signature — A PIN is not input Each type of validation is routed over different network rails: The PIN transaction is routed over an ATM or interbank network whereas the signature transaction goes over credit rails. Merchants tend to prefer PIN transactions because they get better interchange rates over interbank network rails and better protection in disputes; however, using a PIN is not practical or possible for a merchant in all contexts, such as at a fast food drive-through or on a web site. Galileo is integrated with these card networks. OwnerNetworkTypeMastercardBanknetCredit network. Credit card and signature debit.MastercardMaestro/CirrusInterbank network. PIN debit and ATMs.VisaVisaCredit network. Credit card and signature debit.VisaInterlinkInterbank network. PIN debit and ATMs.VisaPlusATM only.DiscoverPULSEInterbank network. PIN debit.DiscoverDiscoverCredit network. Credit card and signature debit.First DataSTARInterbank network. PIN debit. Does not support contactless or EMV chips.CardtronicsAllpointATM only.PublixPresto!ATM only. Southeastern U.S. region.FiservMoneyPassATM only. When you set up your program with Galileo, you will need to determine whether to permit signature transactions, PIN transactions, or both. If you do not allow PIN transactions, your cardholders cannot use ATMs. If you do not allow signature transactions, your cardholders cannot perform transactions that don't have PIN input, such as online transactions. Credit vs debit networks Whether a card transaction uses a credit or debit network depends on these factors: Which types of transactions you permit — If you do not permit PIN transactions, for example, the transactions will arrive at Galileo over credit rails. Whether the card is credit or debit — For credit products the network is credit, unless you have enabled PINs for the credit card, and then PIN transactions use debit rails. How the merchant is set up — Some merchants such as formal restaurants prefer to not use PINs because they don't want to produce a card reader at each table. Other merchants prefer PINs because they get better interchange rates and better chargeback protection with PIN transactions. In some rare cases a PIN transaction might go over another network's credit rails, such as a Mastercard PIN transaction arriving over Visa credit rails, because networks can handle each other's transactions. Primary vs secondary networks As you set up your card products you will decide which card network to use as a primary network, usually Mastercard or Visa. Each network has separate credit and debit rails. For example, if you choose Mastercard, your signature transactions will go over Mastercard Banknet rails and your PIN transactions will go over Mastercard Maestro rails. For Visa the signature transactions go over Visa credit rails and the PIN transactions over Interlink. Depending on your circumstances, you may also need to associate a secondary, unaffiliated debit network with the primary network. This permits merchants and their acquirers to choose which debit network to use based on interchange rates and other benefits. For example, if your primary network is Mastercard, you could select Visa Interlink as a secondary network, and your PIN transactions would go over Visa Interlink or Mastercard Maestro rails according to merchant/acquirer decisioning. As desired, you can add more debit networks as secondaries, and merchants can select from among those options. Keep in mind that not all interbank networks support all card authentication types such as EMV chips or contactless transactions. ATM networks By default, ATM transactions are routed over debit rails. You may decide to apply an ATM fee on top of network or ATM operator fees. As desired, you can make arrangements with an ATM-only network to offer fee-free withdrawals to your customers when they use that network's affiliated machines. In that case, Galileo changes how the transactions are routed so that you can waive the ATM fee. For example, if Visa is your primary network and Maestro your secondary, you could arrange with MoneyPass, for example, for fee-free withdrawals. Withdrawals at MoneyPass machines would therefore be routed over MoneyPass rails, whereas non-MoneyPass withdrawals would come in over debit rails (Interlink or Maestro). To the MoneyPass withdrawals no fee would be applied but for the withdrawals over debit rails there would be an out-of-network fee. (Fees that the ATM operator applies would still be applied.) For more information on ATM transactions see ATMs in the Authorization guide. Routing examples An example debit card program has selected Mastercard as its primary network, Visa Interlink as its secondary network, and has arranged with Allpoint to provide fee-free withdrawals from its ATMs. Transactions would likely be routed as follows: Transaction descriptionNetworkAllpoint ATM withdrawalAllpointNon-Allpoint ATM withdrawalMaestro or InterlinkGas pump with PIN enteredMaestro or InterlinkOnline purchaseBanknet (credit)Mobile wallet purchaseBanknetCard-present retail purchase with PIN enteredMastro or InterlinkCard-present retail purchase with no PINBanknetFast-food purchase at the drive-throughBanknetRide-share purchase through appBanknetFood-delivery purchase through appBanknetCard loadBanknet or MaestroOutgoing peer-to-peer cash transferBanknet The responses to transaction-related endpoints such as Get All Transaction History include a cred_ind field, which is true when the transaction arrived at Galileo over credit rails. You can also arrange to have this field included in your RDFs. For example transactions over various networks see Card Transaction Examples or consult the Card Transaction Scenarios. Network differences Some aspects of card transactions are handled differently depending on the network. Some of these differences will require you to adjust your code. Risk scores The risk_score in the Auth API webhook is a 3-digit number for Mastercard (0–999) but a 2-digit number for Visa (0–99). If you are using the Auth API, you will need to devise a way to account for these different scales. Merchant credits Merchant credits for most networks are indicated by the otype (transaction type) Z, but for Mastercard Banknet (credit), merchant transactions are processed as adjustments. These adjustments have the transaction code ADC and there is no corresponding authorization entry. Galileo sends both a SETL: setl event webhook and a BADJ: adj webhook when a merchant credit is settled for Mastercard Banknet. Also see Authorization and settlement transaction types in the Transaction Types enumeration. For more information see Merchant credits in the Crediting Cardholder Accounts guide. Force postings Force-postings for most networks are indicated by the otype M, but for Mastercard Banknet (credit), force posts have the transaction code SE5, which is the same code as a typical retail settlement. You can identify a force-posted settlement in one of these ways: Expired auth ID field — You can request that the expired_auth_id field be added to your SETL: setl event messages as well as the EXPIRED AUTH CODE field to your Posted Transactions RDF. When this field is populated, the force posting is the result of an expired authorization. Missing authorization — If there is no matching authorization for a settlement, expired or otherwise, then the settlement is a true force-posting. Also see Authorization and settlement transaction types in the Transaction Types enumeration and Driving an account negative in the Settlement guide. STIP transactions Visa and Mastercard handle STIP transactions slightly differently. Each network has a backup system that uses its own set of rules for declining or approving STIP transactions. Consult the documentation from each network to see what the rules are. Also see Stand-in processing in the Authorization Controller API guide for more information on STIP. Country codes Mastercard uses different country codes for these countries: Ethiopia 230 — Mastercard 231 — All other networks Yemen 886 — Mastercard 887 — All other networks Germany 280 — Mastercard 276 — All other networks Updated 4 months ago Table of Contents Credit vs debit networks Primary vs secondary networks ATM networks Routing examples Network differences Risk scores Merchant credits Force postings STIP transactions Country codes "
59,docs.galileo-ft.com/pro/reference/lending/post/getloanstatus,"Get Loan Status Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1202-01The loanId is invalid or does not exist.1202-02The subProductId is invalid or does not exist.1202-03This loan is voided, and all the transactions have been reversedLanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
60,docs.galileo-ft.com/pro/docs/setting-up-a-card-program,"Setting Up a Card Program A card is a payment device that enables a customer to purchase goods or services from a merchant or business. This guide covers what you need to know about cards to set up a successful program with Galileo. This includes general information about cards, the relationship between cards and account, the data elements of a card, and the lifecycle of a card in the Galileo system. Related documents: Choose a Card Strategy — How to choose which card to issue and when Card-Creation Endpoints — A developer resource of endpoints to use when creating cards. Card networks A card network (also called a ""payments network"" or ""card association"") is a business entity that comprises banks, dedicated networks, and messaging systems to facilitate card transactions. The card network defines the standards and conventions for processing their cards. When a cardholder initiates a transaction, the transaction is routed through a network to Galileo. One of the first decisions you make when setting up a card program is to choose your primary network: Visa, Mastercard or Discover. See Networks for details on primary and secondary networks as well as signature vs PIN networks. Decisions to make These are some of the decisions you will need to make when setting up a card program: Which type of card to issue. See Choose a Card Strategy for more information. Whether to charge a fee for issuing, reissuing or replacing cards How your cardholders will activate their cards and set their PINs Number of years until the card expires Whether to generate PANs in sequential order or at random Whether to permit cardholders to load cash onto cards, and if so, how much and by what means (such as GreenDot, Visa Money Transfer or Maestro Loads) In which countries the card is valid Whether to block PIN transactions at ATMs or points of sale Cards and accounts Every card, physical or digital, must be associated with an account in the Galileo system. In the simplest setup, one account is associated with one card. Multiple cards can also be associated with an account, but multiple accounts cannot be associated with a card. The diagram above shows how one account holder can have multiple accounts, and each account can have one or more cards associated with it. However, only one card per account should be active at a time. (The dotted lines represent inactive cards.) 📘NoteSee About Accounts for more information about cards and accounts. See Card-Creation Endpoints for specific use cases and their respective endpoints. Card elements A card, either physical or digital, has the data necessary for a merchant to obtain authorization for a transaction. Galileo creates a cards table for your program that records all of the cards that you create. See Retrieving Card Information to learn more about card records and how they are created. The card consists of the following elements, among others: Name For personalized cards the cardholder’s name is displayed on the front of the card. For instant-issue cards the cardholder's name is not displayed. You input the name for the card in the firstName, middleName and lastName parameters in the enrollment endpoints such as Create Account. Primary account number The PAN is a globally unique 16-digit number that is displayed on a card, either physical or digital. The first six or eight digits are the BIN, depending on the card network. The PAN is called the card_number in the API responses and CARD NUMBER in the RDFs. 📘NoteYou can receive the full PAN only if you are PCI compliant. Otherwise, you receive a masked PAN in API responses and the raw data files (RDFs). Expiry date The date when the card expires. As you set up each card product you specify how many years until expiration. You have the option of randomizing the expiration month for each card so that it's harder for a fraudster to guess the expiry date for any of your cards. The expiry date is encrypted in the Galileo system. It is called expiry_date in Program API responses and EXPIRATION DATE in the RDFs. Card verification value (CVV) The 3-digit number that appears on the back of the card is used for security purposes in card-not-present transactions, such as online purchases. This value has a 1:1 relationship with the expiry date—when a card gets a new expiry date, it also gets a new CVV. The CVV is called the card_security_code in Program API responses. Card identifier In addition to the basic card elements, the Galileo system generates a card identifier (CAD). Every time you create a new card, Galileo adds a row in the cards table, and the row number is the CAD. A CAD has a 1:1 relationship with a PAN, so any time a card gets a new PAN, it also gets a new CAD. The CAD is unique across your entire program. 📘NoteYou do not need to be PCI compliant to receive the CAD, which means that any time you can pass the PAN in an endpoint, you can pass the CAD instead. The CAD is called card_id in Program API responses, cad in the Events API webhooks, and CARD ID in the RDFs. Lifecycle of a card A physical card follows a lifecycle that starts with issuance and ends when the card expires or is canceled. The following diagram outlines this lifecycle: Card lifecycle For a virtual card, the lifecycle omits the ""Emboss"" and ""Reissue"" steps. Issuance Issuance occurs when you choose to create a card record for a new customer. In most cases, when onboarding a new customer, you use the Create Account endpoint. This endpoint creates a new customer record, a new account, and a new card. See other use cases, such as issuing a virtual card, and the specific endpoints in the Card-Creation Endpoints guide. Card embossing All physical cards are embossed, meaning the card material is imprinted with the card details. You must partner with an embossing vendor to print and fulfill your card orders. Galileo has integrated with several embossing vendors and will introduce you to the vendors you choose. 📘NoteThe embossing companies differ in their support for card characteristics such as the material used for the cards and security features. See Design a Card for information on how to customize the look and feel of your cards. Preparation for the embosser In most cases, new physical cards are in status: X (set to emboss) upon creation. You can also manually change a card to status: X using the Modify Status endpoint with type: 22. An automated process in the Galileo system gathers the card information for all accounts in status: X and sends it to the configured embosser. This process runs once per day in Production for most programs. In CV the process runs every 15 minutes. An exception is a Digital First card, which is in status: N (normal, active) upon creation. The internal process picks up Digital First cards for embossing even though they are not in status: X. At the same time, you can present a digital image to the cardholder for use until the physical card arrives in the mail. See Digital First cards in the Choose a Card Strategy guide for more information. When the automated process picks up the card for embossing, it changes the card status to Y (ready to activate). See Emboss records in the Retrieving Card Information guide for more information. Canceling or pausing a card emboss If you need to cancel or pause the embossing for a card, you can call Set Account Feature with these parameters: featureType: 30 featureValue: Y startDate: as desired; default is current date-time endDate: as desired; default is 3000-01-01 You can set the end date to a predetermined number of hours from the current time, or you can accept the default of the year 3000 (which is ""never""). If the emboss process has not yet run, the emboss process skips the card for emboss; otherwise, it is too late to cancel or pause the emboss. To resume the emboss process for the card, you can let the feature expire, or you can call Set Account Feature again to set feature type 30 to N. Card shipment The embossing vendor is responsible for mailing cards to your customer. The card is sent to the customer’s primary address by default, which is set using Create Account or other enrollment endpoint. To ship the card to a different address from the primary address, you can pass the shipping address in the shipTo fields in the Create Account or Update Account endpoint. Set the shipToAddressPermanent parameter if subsequent cards should always be shipped to the shipTo address instead of the primary address. If you do not set the shipToAddressPermanent parameter, the next time the embosser mails a card, it will be sent to the primary address. According to your arrangements with your emboss partner, you can offer to ship the card via express mail. To enable express shipping you have two options: Set the expressMail parameter in the Create Account endpoint call. Verify which value to use with your emboss vendor. After the account has been created, call the Set Account Feature endpoint with these parameters: accountNo: PAN or CAD of the card featureType: 5 featureValue: Value supported by your emboss vendor. Card activation A physical card is sent to the customer inactive and it must be activated before it can be used to make purchases. Follow the procedure to activate a physical card outlined in the Activating a Card guide. Virtual cards are activated upon creation. If a card is a Digital First card, the digital card and the physical card that arrives subsequently are active upon issuance; however, you may have protected the physical card in transit, and so you need to remove the protection as soon as the cardholder sets the PIN. See the Setup for Digital First guide for more information. When a card is activated, both the emboss status and the card status are changed to N (normal, active). Personal identification number Personal identification numbers (PINs) are 4-digit numbers that customers input at a point of sale or ATM to verify their identity as the legitimate cardholder. Typically, customers set their PINs as part of card activation. Any time you generate a new PAN, you must set a new PIN. If you reissue a card without a new PAN, a customer can use the same PIN. A PIN must be set for all debit cards. You can also assign a PIN to a credit card if you want, which is recommended if the card will be used in jurisdictions where a PIN is required for all card purchases, such as in most of Europe. See PIN-Set Procedures for more information. Card expires Cards are assigned an expiration date. This date is on the card, known to the customer, and recorded in the cards table. Before a card reaches its expiry date, you can arrange for Galileo to automatically reissue and ship a new card to ensure the cardholder does not have any disruption in their purchasing ability. Typically, cards that are within 30 days of the expiry date are reissued and shipped, but you can change that interval in your product settings. These reissued cards have the same PAN as the original card but a new expiry and CVV. As soon as the reissued card is activated, the original card is set to status: C. If you would rather reissue expiring cards yourself, follow the instructions in Use case 1: Reissue card with same PAN and new expiry in the Reissuing Cards guide. As desired, you can determine that an expiring card that has not been used for a specified period will not be automatically reissued. Virtual card expiry In the case of an expiring virtual card, ask Galileo to send you the RBEX: card_expiring event webhook to notify you that a card is expiring. When you receive the webhook, use Add Card to create the replacement virtual card. A virtual card cannot be reissued, and so a net-new card with a new PAN is generated. Reissuance After initially issuing a card to a customer, you might need to manually reissue a new version of their card, such as when it is damaged. Consult the Reissuing Cards guide for a list of circumstances when you would reissue a card, along with the procedure to do so. Card cancelation Your product settings can specify some cancellation policies, such as account inactivity or negative balance. A customer can also ask to cancel a card, either because they want to discontinue the product or because it is lost or stolen. See Lost, Stolen, or Damaged Cards for the latter cases. These three statuses indicate that a card cannot be used: C — Canceled. The PAN cannot be used and should not be reactivated. D — Disabled. The PAN cannot be used, but it can be reactivated at a later time. Z — Canceled without refund. (""Without refund"" refers to the account.) To cancel a card use the Modify Status endpoint, passing the appropriate type according to the use case. If multiple cards are associated with the account, you must pass the PAN or CAD for accountNo. If you pass a Modify Status type that disables or cancels only the account, the associated card status may not change but the card(s) still cannot be used. Use caseTypeAccount statusCard statusNotesUpdate card status to Canceled5no changeCChanges the card to status: C. Does not change the account. Does not affect related secondary accounts.Deactivate account and cancel card(s)13CCChanges both the account and associated cards to status: C. Also closes any related savings accounts.Account deactivated and card(s) canceled through the Galileo API16ZZChanges both the account and associated cards to status: Z.Does not affect related secondary accounts.Cancel without refund all accounts and cards for a customer and all related accounts and cards20ZZAffects all accounts and cards of the account holder, including secondaries.Disable account and active cards23DDChanges both the account and associated active cards to status: D. Returning a canceled card As desired, you can ask cardholders to return cards that they have canceled before they can get a refund for the remaining funds. Set the CRCHK parameter for refund checks to require a returned card.Updated 22 days ago Table of Contents Card networks Decisions to make Cards and accounts Card elements Name Primary account number Expiry date Card verification value (CVV) Card identifier Lifecycle of a card Issuance Card embossing Card activation Card expires Reissuance Card cancelation "
61,docs.galileo-ft.com/pro/changelog/november-2022,"November 2022 Get Balance response fields Some of the fields for the Get Balance response had incorrect descriptions. These are the corrected definitions: balance — For debit accounts, the available balance on the account, also known as the ""open to buy."" All pending transactions have been subtracted from the total posted transactions. For credit accounts it is the unpaid balance. balance_without_pending — The total of all posted transactions with only pending authorizations subtracted out. pending_adjustments — Total of all adjustments created by a batch process. This value will almost always be 0. pending_purchase — Amounts from a deprecated feature. This value will always be 0. balance_without_auths — The balance (open to buy) without subtracting authorization holds. This field is available only when the BWOOA parameter is set. New dispute resolutions Galileo has upgraded its disputes platform, and so the values that are returned for dispute_resolution in the DSPN: dispute_final_no_pc and DSFP: dispute_final_pc events has changed. You can find them under Events API webhooks in the Disputes at Galileo guide. New simulation example We have added the Incremental Authorization Simulation to the Simulations list. We have also reorganized the simulation instructions by putting each scenario on its own page. Card Transaction Scenarios online We have converted the Card Transaction Scenarios PDF into online pages that you can find at Card Transaction Scenarios. The scenarios have also been integrated throughout the rest of the documentation. Parameter for Digital First mobile wallet cards To both the Setup for Digital First and Setup for Mobile Wallets guides we added the requirement to set the CHITR product parameter for Digital First cards that will be provisioned to mobile wallets. Corrections We corrected Closing accounts in the About Accounts guide. The guide had indicated that Modify Status type: 13 closed related savings accounts. It has been corrected to say that related savings accounts are not closed. The URL for the PIN Retrieval Service was incorrect. It had contained the string gds-[clientname] but the correct string is asset-[clientname]. Updated guide We reorganized the About Accounts guide to have a more logical flow and updated some of the details. Updates to Galileo Secured Credit We've removed the Galileo Secured Credit with Dynamic Funding offering. Please refer to the About Galileo Secured Credit product guide for the latest details on our product offering. Preliminary guides For a few upcoming products we have added reference material and guides. As of mid-November 2022 these products are still in a preliminary stage. If you are interested in trying either product, contact Galileo for more information: Fleet Cards — Specialized BINs that provide vehicle-specific information for authorization and settlement Fleet Cards product guide Direct Deposit Switch — A simple way for your customers to set up direct deposit Direct Deposit Switch product guide Setting Up Direct Deposit Switch implementation guide New guide We have added the <a href=”doc:galileo-analytics-report-index” target=”_blank"">Galileo Analytics Report Index to provide an overview of all gAnalytics reports. "
62,docs.galileo-ft.com/cdn-cgi/l/email-protection,"Email Protection | Cloudflare Please enable cookies. Email Protection You are unable to access this email address docs.galileo-ft.com The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address. If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare. How does Cloudflare protect email addresses on website from spammers? Can I sign up for Cloudflare? Cloudflare Ray ID: 7ad3839ccebfaaa6 •  Your IP:  Click to reveal 2601:646:8b00:28f8:310c:cc5b:3b8:5c65 • Performance & security by Cloudflare "
63,docs.galileo-ft.com/pro/docs/post/createaccount,"Create Account This endpoint runs CIP if you are using Galileo's integrated CIP process. In contrast with the Start Enrollment endpoint, Create Account creates a customer record and at the same time creates an account. Depending on product settings, it also creates a card and loads funds onto it. Consult the Creating an Account procedure for instructions on using this endpoint, and consult the Customer ID Verification guide for how to use this endpoint with Galileo's integrated CIP solution. The instructions include a flowchart to illustrate how Create Account works in the Galileo system. Also see Create Account vs Add Account in the About Accounts guide. 📘NoteYou can receive PCI-sensitive information only if your provider parameters permit it. Duplicate use of customer ID Galileo can configure your product parameters to allow or disallow the duplicate use of customer IDs such as SSNs across your programs. (If one of your prospective customers already has a product with another Galileo partner, no duplicate is detected.) If your program parameters disallow duplicate use of customer IDs, during the Create Account operation Galileo checks enrollment data across your programs to confirm that there are no accounts in application submitted (V), canceled without refund (Z), or active (N) status with the same ID. If no account is found in these statuses, the enrollment is allowed. CIP response If you are using Galileo's integrated CIP solution, the Create Account response includes the verdict. Consult Create Account and Create Virtual Account Process in the Customer ID Verification (CIP/KYC) guide for more information. Test names in the CV environment In the CV environment only, you can use specific names with the Create Account endpoint to trigger different CIP responses. For the firstName, middleName, and lastName parameters, use these values: John F Smith — Triggers a CIP failure (F) John R Smith — Triggers a CIP refer (R) John P Smith — Triggers a CIP pass (P) Do not use these test names in Production. 📘NoteIf this endpoint returns a status code that does not match a status code that is specific to this endpoint, it may be an enrollment status code. See Enrollment Statuses for more information.RecipesCreate Account response code 407-13Open RecipeSee Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description407-03Invalid instant issue card. An attempt was made to use an ii card which has been sold.407-04Load amount outside of load limits. Too much money is being loaded.407-05Could not create account. Contact Galileo for troubleshooting.407-06Could not load card. Contact Galileo for troubleshooting.407-07Primary account is invalid. An instant issue account is being used in the primary account field.407-08Invalid real-time funding account407-09Maximum number of secondary accounts exceeded. The limit of secondary accounts is exceeded for the PID.407-10ID type 2 is required as main ID for running CIP (only occurs when product is configured to run ID validation on new accounts). The incorrect ID type is being passed.407-11Account created, ID validation failed. Customer's personal info has failed the ID check.407-12An application with the same ID has already been submitted. Duplicate SSNs were used for enrollment.407-13The cipStatus parameter was set to 1, the application was successfully started, and CIP was run. An account was not created.407-14Success. Partial limit violation-Only part of the payment was applied due to load limits.407-15Success. Delayed payment-Payment is pending due to load limits407-16Card is marked as fraudulent. Used for instant issue cards which have been swiped before issuance.407-17Card not allocated to your store for issuance407-18The account provided (to load money from) could not be found407-19A load was attempted for a non-positive amount. A negative load amount was passed.407-20Maximum number of accounts allowed has been reached. To increase the secondary account limit per product ID, set SECLM on the secondary account.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
64,docs.galileo-ft.com/pro/docs/cdf-reference,"CDF Reference Custom data files (CDFs) are made available through the same method as RDFs. In general, CDFs are available a few hours after the RDFs. CDF data sets are securely delivered via SFTP in CSV format. This document contains details about each of the standard RDFs, including field descriptions: Expired Auth Early ACH ACH Returns Incoming ACH Overdraft Settlement MC SAFE Reporting Fleet Data Chargeback and Disputes Direct Deposit Switch Expired Auth CDF The Expired Auth CDF provides the expired authorizations for the prior day. This table contains default fields for the Expired Auth CDF. The primary key for this file is Program ID + Transaction ID + Network Code. 📘NoteThe Expired Auth CDF contains data from these networks only: Mastercard debit, Mastercard credit, Visa, STAR. CDF field nameLengthDescriptionAccount NumberNUMBERGalileo account ID, balance IDCard IDNUMBERCard identifierPRNCHAR (12)Payment reference numberProgram IDNUMBERProgram IDProductNUMBERProduct IDTransaction IDNUMBERAuthorization ID, ‘auth_id’Authorization TSDATEDatetime timestamp of when the transaction was authorizedExpired TSDATEDatetime when the authorization expiredAmountNUMBERAuthorization amountTrans Currency CodeCHAR (3)Currency code for auth_amtMerchant NumberCHAR (15)Merchant IDMerchant DescriptionCHAR (40)Merchant descriptionNetwork CodeCHAR (1)Network codeRetrieval Reference NumberVARCHAR (12)Retrieval reference number Early ACH CDF The Early ACH CDF provides the ACH details along with the number of days of early posting. This table contains standard fields for the Early ACH CDF. The primary key for this file is Transaction ID. CDF field nameLengthDescriptionTransaction IDVARCHAR2 (2)Maps as identifier for the source of load/payment or source of the adjustmentTransaction TypeCHAR (6)Concatenation of activity type (act_type) and transaction type (otype)Source IDNUMBER (18)For PMxx transaction types, this field contains the payment ID (pmt_id), and for 'ADxx' transaction types, this field contains the adjustment ID (adj_id)External Transaction IDVARCHAR2 (60)ACH transaction ID provided by client or partnerTransaction TimeDATETransaction time of the ACH recordAuthorization CodeNUMBERUnique identifier for the transactionNumber of Days EarlyNUMBERThe number of days early the ACH transaction isPosted EarlyCHAR (1)Flag for early ACH ('Y' for early ACH)Effective DateDATEACH effective date (when the Nacha file says it would have posted without early ACH)Settlement DateDATEThe date the transaction was settled/postedReceive DateDATEACH file date (the date the Nacha file was received)Load DateDATEACH load date (the date the ACH transaction was loaded to a Nacha file)AmountNUMBERAmount of the ACH transactionPRNCHAR (12)Payment reference numberTrace NumberNUMBERACH trace number as received by Galileo ACH Returns CDF The ACH Returns CDF provides details on returned ACH for the prior day. This table contains default fields for the ACH Returns CDF. The primary key for this file is TransID. CDF field nameLengthDescriptionNameVARCHAR2 (80)NameSourceNameVARCHAR (30)Source institution nameAmountNUMBERAmount of the ACH transactionDebCredIndicatorCHAR (1)Debit/credit indicator. D = debit; C = creditReceivedDateDATEDate that Galileo received the returned transactionEffectiveDateDATEDate when the ACH transaction was to take effect (without early ACH)ReturnDateDATEDate the transaction was returnedReturnReasonCodeCHAR (3)Return reason codeReturnReasonDescriptionVARCHAR2 (255)Return reason descriptionTransIDCHAR (2)Transaction IDXIDNUMBERInternal Galileo account ID Incoming ACH CDF The Incoming ACH CDF provides all incoming ACH for the prior day. This table contains default fields for the Incoming ACH CDF. The primary key for this file is Authorization Code + Transaction Type. CDF field nameLengthDescriptionCompany NameVARCHAR2 (20)Company nameCompany IDNUMBERCompany IDCompany DescriptionVARCHAR2 (15)Company descriptionIndividual NameVARCHAR2 (80)Individual nameIndividual IDNUMBERIndividual IDAuthorization CodeNUMBERAuthorization codeTransaction TypeVARCHAR2 (2)Transaction typeAmountNUMBERAmountTrace NumberNUMBERTrace numberPRNCHAR (12)Payment reference number Overdraft CDF The Overdraft (OD) CDF provides information related to overdraft DDA accounts for prior days. This table contains default fields for the OD CDF. The primary key for this file is GPR_XID. CDF field nameLengthDescriptionODProgramIDNUMBERCompany nameODAccountIDNUMBER (18)Galileo account ID, balance IDGPRAccountIDNUMBERGPR Galileo account IDODAccountStatusVARCHAR2 (2)Overdraft account statusODEligibilityStatusVARCHAR2 (2)Overdraft eligibility statusODOpt-InDateDATEOverdraft opt-in dateODOpt-OutDateDATEOverdraft opt-out dateODTotalBalanceNUMBERTotal overdraft balanceODLimitNUMBEROverdraft limitGPR_XIDNUMBER (13)Unique account identifier within a program Settlement CDF The Settlement CDF provides a BIN settlement summary report (similar to gAnalytics). This table contains default fields for the Settlement CDF. The primary key for this file is Basebin + Date + Network. 📘NoteThis report looks back one day for Visa, Mastercard, and Discover; two days for Pulse, Allpoint and STAR; and three days for Maestro/Cirrus. In comparison, the gAnalytics report looks back one day for all. CDF field nameLengthDescriptionBasebinCHAR (8)Base BINDateDATEDateNetworkVARCHAR2 (255)Card networkLoadNUMBERLoad amountLoad ReversalNUMBERLoad reversal amountCash DisbNUMBERCash disbursement amountCash Disb FeeNUMBERCash disbursement fee amountRetail SalesNUMBERRetail sales amountCreditsNUMBERCredits amountUnique TransNUMBERUnique transaction amountATM DisbNUMBERATM disbursement amountATM Disb FeeNUMBERATM disbursement fee amountInterchange FeeNUMBERInterchange fee amountSpecial TransNUMBERSpecial transaction amountMisc TransNUMBERMiscellaneous transaction amountChargebacksNUMBERChargebacks amountSec PresentNUMBERSecond presentments amountArbitrationNUMBERArbitration amountSwitch FeeNUMBERSwitch fee amountNet SettleNUMBERNet settlement amountNet TransNUMBERNet transaction amountSettle TotalNUMBERSettlement total amountNet Interchange FeeNUMBERNetwork interchange fee amount MC SAFE Report CDF The MC SAFE Report CDF provides a BIN settlement summary report (similar to gAnalytics). This table contains default fields for the MC Safe Report CDF. The primary key for this file is ARN. CDF field nameLengthDescriptionRECORD_TYPECHAR (3)Record typeISSUER_CUSTOMER_NUMBERCHAR (6)Issuer customer numberAUDIT_CONTROL_NUMBERNUMBERAudit control numberACQ_IDCHAR (11)Acquirer IDARNCHAR (23)Acquirer reference numberFRAUD_POSTED_DTDATEFraud posted dateENPVARCHAR2 (53)Encrypted PANTRANS_DATEVARCHAR2 (8)Date when the transaction was authorizedTRANS_AMTVARCHAR2 (10)Amount of the authorizationTRANS_CRNCY_CDNUMBERCurrency code for TRANS_AMTTRANS_AMT_CH_BILL_CRNCYVARCHAR2 (9)Billing amount of the transactionCH_BILL_CRNCY_CDCHAR (3)Currency code for TRANS_AMT_CH_BILL_CRNCYCARD_PROD_CODECHAR (3)Card product codeMERCHANT_NAMEVARCHAR2 (22)Name of the merchant from DE043MERCHANT_IDVARCHAR2 (15)Merchant ID from DE042MERCHANT_CITYVARCHAR2 (50)Merchant city from DE043MERCHANT_STATE_CDVARCHAR2 (3)Merchant state or province, two-character abbreviationMERCHANT_COUNTRYVARCHAR2 (3)ISO 3166-1 three-digit merchant country codeMERCHANT_POSTAL_CODEVARCHAR2 (5)Merchant postal code from DE043MCCNUMBERMerchant category codePOS_TERM_ATTD_INDVARCHAR2 (1)POS_CARD_PRES_INDVARCHAR2 (1)Point-of-sale card-present indicatorCAT_LEVEL_INDVARCHAR2 (1)Category level indicatorPOS_CDTIC_INDVARCHAR2 (1)ELEC_COM_INDCHAR (1)E-commerce indicator (3-D Secure)POS_ENTRY_MODEVARCHAR2 (1)Point-of-sale entry mode, first two characters of DE022TERMINAL_IDVARCHAR2 (8)ID for the card-reading deviceFRAUD_TYPE_CODEVARCHAR2 (8)Fraud typeSUB_FRAUD_TYPE_CODECHAR (1)Sub-fraud type codeCHARGEBACK_INDNUMBERWhether the transaction has been charged backSETTLE_DATEVARCHAR2 (8)Date when the transaction was settledAUTH_RESP_CDCHAR (2)Response code for the authorization requestPROC_DATEVARCHAR2 (8)CVC_INDVARCHAR2 (1)CVC indicatorACCT_DEVICE_TYPECHAR (1)Account device typeSECURE_CDCHAR (1)Secure codeAVS_RESP_CDCHAR (1)Address verification service response codeCARD_PRESENT_INDNUMBERCard-present indicatorTERM_OPER_CDCHAR (1) Fleet Data CDF The Fleet Data CDF contains the fleet data for the posted transactions for a given program/client. See Fleet Cards for more information. This table contains default fields for the Fleet Data CDF. The primary key for this file is auth_code + 	network_code. CDF Field NameLengthDescriptionprog_idNUMBERProgram IDbal_idNUMBERBalance IDcadNUMBERCard IDtrans_tsDATETransaction timestamptrans_typeCHAR (6)Transaction typeauth_codeNUMBERAuthorization codepost_tsDATEPosted timestampnetwork_codeVARCHAR2 (1)Network codepmt_ref_noCHAR (12)Payment reference numberprod_idNUMBER (18)Product IDcard_acceptor_typeCHAR (8)Card acceptor typecard_acceptor_tax_idVARCHAR2 (21)Card acceptor tax IDoil_company_brand_nameCHAR (4)Oil company brand namepurchase_timeCHAR (4)Purchase timemotor_fuel_service_typeCHAR (1)Motor fuel service typeproduct_codeVARCHAR2 (15)Product codeitem_descriptionVARCHAR2 (35)Item descriptionitem_quantityCHAR (13)Item quantityitem_unit_of_measureVARCHAR2 (12)Item unit of measureextended_item_amountVARCHAR2 (14)Extended item amountdebit_or_credit_indicatorCHAR (1)Debit or credit indicatormotor_fuel_informationVARCHAR2 (35)Motor fuel informationodometer_readingVARCHAR2 (7)Odometer readingvehicle_numberVARCHAR2 (17)Vehicle numberid_numberVARCHAR2 (17)ID numberproduct_type_codeCHAR (1)Product type codemotor_fuel_product_codeVARCHAR2 (35)Motor fuel product codemotor_fuel_unit_of_measureVARCHAR2 (35)Motor fuel unit of measuremotor_fuel_quantityVARCHAR2 (35)Motor fuel quantity Chargeback and Dispute CDF The Chargeback and Dispute CDF provides chargeback and dispute information for the prior day. It is similar to the Dispute Tracker Log report in gAnalytics. This table contains default fields for the Chargeback and Dispute CDF. The primary key for this file is DISPUTE_ID. CDF field nameLengthDescriptionPROG_IDVARCHAR2 (250)Program IDPROGRAMVARCHAR2 (250)Program nameAGENTVARCHAR2 (250)Dispute agent nameDISPUTE_CASEVARCHAR2 (250)Case number for all disputes filesSYSTEM_CASE_NOVARCHAR2 (250)Not usedDISPUTE_IDVARCHAR2 (250)ID assigned to each disputed transactionBAL_IDVARCHAR2 (250)Galileo ID or balance IDXIDVARCHAR2 (250)Internal Galileo account IDBASE_BINVARCHAR2 (250)Base BIN (6-8 digits)CH_NOTICE_DATEVARCHAR2 (250)Cardholder notification dateLTR_DATEVARCHAR2 (250)Date when the written confirmation letter was receivedDATE_LOGGEDVARCHAR2 (250)Date when the dispute was logged in the systemWRITTEN_CONFIRMATION_REQUESTVARCHAR2 (250)Date when the written confirmation was requestedLOST_STOLENVARCHAR2 (250)Whether the dispute is for a card after it was lost or stolenCH_DISCOVERY_DTVARCHAR2 (250)Date when the cardholder noticed the erroneous transactionERROR_DESCRIPTIONNVARCHAR2 (250)Description of dispute reason (selected from drop-down)TRANSACTION_TYPEVARCHAR2 (250)Transaction type from drop-down menu: NEW (account <30 days from first load) FOR (foreign-initiated), ATM, POS, OTH (other)FOLLOWUP_DATEVARCHAR2 (250)Follow-up datereg_eVARCHAR2 (250)Whether the dispute falls under Regulation EREGE_RESOLUTIONVARCHAR2 (250)Date when the Regulation E dispute should be resolved: 45 or 90 daysMERCHANT_NAMEVARCHAR2 (250)Merchant where the transaction took placeSETTLE_DATEVARCHAR2 (250)Date on which the disputed transaction settledDISPUTE_AMOUNTVARCHAR2 (250)Amount disputedPC_DATEVARCHAR2 (250)Date when provisional credit was issuedPC_AMTVARCHAR2 (250)Amount of provisional credit issuedPC_LETTER_DATEVARCHAR2 (250)Date when a provisional credit letter was sentPC_REVERSAL_DATEVARCHAR2 (250)Date when a provisional credit was reversedCH_LIABILITY_AMTVARCHAR2 (250)Amount for which the cardholder is liableRESOLUTIONVARCHAR2 (250)How the dispute was resolvedDATE_COMPLETEVARCHAR2 (250)Date the dispute was resolvedCURRENT_STATUSVARCHAR2 (250)Current status of the disputeMCCVARCHAR2 (250)Merchant category code for the transaction under disputeCB_DATEVARCHAR2 (250)Chargeback dateCB_AMTVARCHAR2 (250)Chargeback amountCB_REASON_CODEVARCHAR2 (250)Chargeback reason codeSEC_PRESENTMENT_DATEVARCHAR2 (250)Date of the second presentmentPRE_ARB_DATEVARCHAR2 (250)Arbitration chargeback dateENDING_STATUSVARCHAR2 (250)Final status of disputeFINAL_STATUS_DATEVARCHAR2 (250)Date when ENDING_STATUS was inputCRED_RESOLUTIONVARCHAR2 (250)Date when provisional credit was finalizedAUTH_DATEVARCHAR2 (250)Date when disputed transaction was authorizedAUTHORIZATION_CODEVARCHAR2 (250)Authorization ID (auth_id) of the disputed transactionSETTLE_DTL_IDVARCHAR2 (250)Settlement detail IDASSOCIATIONVARCHAR2 (250)AssociationPRNVARCHAR2 (250)Payment reference number Direct Deposit Switch CDF The Direct Deposit Switch CDF provides data on direct deposit switch transactions. This table contains default fields for the Direct Deposit Switch CDF. The primary key for this file is galileo_guid. CDF field nameLengthDescriptionprod_idNUMBER (10,0)Product IDxidNUMBER (12,0)Internal Galileo account IDddswitch_idVARCHAR (32)Sequence number that is the primary key in the backend databasegalileo_guidVARCHAR (32)Unique ID for the direct deposit switch transactiongalileo_timestampTIMESTAMPTransaction timestamp in UTC of when the transaction was completed in ISO 8601 formatevent_statusVARCHAR (30)Final status of the direct deposit switch transaction: COMPLETED or FAILURE. Incomplete transactions are not included.distribution_typeVARCHAR (10)Type of distribution in distribution_amount: Fixed, Percentage, Totaldistribution_amountNUMBER (20,2)Amount of the deposit.event_status_reasonVARCHAR (50)The reason for the status when event_status: FAILURE. See Direct Deposit Switch Failure Status Reasons for valid values.vendor_selectionVARCHAR (10)Direct deposit switch vendor: Atomic or PinwheelUpdated about 2 months ago Table of Contents Expired Auth CDF Early ACH CDF ACH Returns CDF Incoming ACH CDF Overdraft CDF Settlement CDF MC SAFE Report CDF Fleet Data CDF Chargeback and Dispute CDF Direct Deposit Switch CDF "
65,docs.galileo-ft.com/pro/reference/activate-card-procedure,"Activating a Card As an anti-fraud measure, physical cards must be activated by the cardholder prior to use. (A Digital First card is activated automatically upon creation but not when reissued.) You determine the card-activation method for cardholders in cooperation with your bank and Galileo at the time you set up your program. This method may be through Galileo's IVR, on your web site or mobile app, or by another method. If you choose the IVR option you do not need to follow this procedure. 📘NoteFor Digital First cards you should not follow this procedure, because the cards are already activated upon creation. Instead, follow the instructions in Protecting the physical card in the Setup for Digital First guide. Result of calling Activate Card When Activate Card has run successfully, the card is changed to status: N (active). If the CANOC parameter is set, the cardholder's other active cards have been canceled. If temporary cards were issued and the TEMPC parameter is set, the temporary cards have been canceled. (See Galileo setup for more information.) Parameters This table explains the parameters that are specific to the Activate Card endpoint. See the Activate Card endpoint reference for details. ParameterUsageaccountNoPass the PRN, PAN, or CAD. If you pass the PRN you may also want to request cardNumberLastFour from the cardholder to select the correct card. To pass in the PAN you must be PCI compliant.cardExpiryDateCardholder-provided. Use this value to test against the card to be activated.cardSecurityCodeCardholder-provided. Use this value to test against the card to be activated.cardNumberLastFourCardholder-provided. If the cardholder has more than one card associated with their account, and if you passed PRN as accountNo, use this parameter to ensure that the correct card is selected.deactivateTemporaryCardsIf you issued one or more temporary cards while the cardholder waited for the physical card to arrive in the mail, pass 1 to deactivate those cards. This applies to cards that are associated with the account of the card that is being activated (same PRN), not cards that are associated with other accounts that the account holder has. The TEMPC parameter must be set for this parameter to take effect. Card-activation workflow This flowchart shows the logical progression of the Activate Card endpoint. The actual sequence of events in the Galileo system may vary. Retrieve cardholder input, populate the Activate Card endpoint, and send. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo checks for a card with the accountNo that has an emboss record in status: Y. Failure to find such an emboss record returns status: 467-02. Galileo verifies that the card's account is not in an improper status: If it is in a status that is specified in the CRDBL parameter, status: 467-06 is returned. If it is in status: F (fraud), status: 467-05 is returned. If it is in status: R (charged off), status: 467-04 is returned. If the data the customer supplied matches the data on record, Galileo activates the card and sends the webhook BACT: card_activated, if you are configured to receive it. If there is no match, Galileo returns status: 467-01. If deactivateTemporaryCards: 1, Galileo attempts to deactivate any temporary cards that were issued. If Galileo cannot deactivate the cards, status: 467-03 is returned. If the cards are successfully deactivated or deactivateTemporaryCards is not set, status: 0 is returned. Sample endpoint request and response Consult the Activate Card endpoint to see how to build the API request and to see the response schema. Status codes Consult this table to see an explanation of what each status code means and which next steps to take, if any. Status codeDescriptionNext steps467-01No cards with an emboss status: Y match the cardholder-provided input.Cardholder must supply correct card data.467-02No cards with an emboss status: Y match the PRN or customer ID.Retry with valid PRN or customer ID. Your product settings determine which value the system searches on.467-03Card successfully activated but temporary cards could not be deactivated.Verify that your product parameters are correct, or send Modify Status calls with type: 2 for the temporary cards.467-04Account is in status: R (charged-off) and cannot be modified.Inform the cardholder that the card cannot be activated.467-05Account is in status: F (fraud) and cannot be modified.Inform the cardholder that the card cannot be activated.467-06Account is in a status that is specified in the CRDBL parameter.Inform the cardholder that the card cannot be activated. View the activated card Call the Get Card or Get Account Cards endpoint and check card_status. Galileo setup These product/program parameters affect card-activation behavior. Galileo sets these parameters according to your use case. ParameterDescriptionCANCSUsed in conjunction with CANOC, it specifies the status that a card must be in to be canceled when a new card is activated. Default: N,X,Y,WCANOCWhen this parameter is set to Y, cards that belong to the same cardholder and that are in a status specified in CANCS are changed to status C (canceled) when the new card is activated. When this parameter is not set, the cardholder's other cards are not canceled. Set this parameter at the product level so that cards with the same product ID are canceled. Set this parameter at the program level so that cards with the same program ID (including different product IDs) are canceled.CRDBLContains statuses of cards that should not be activated.TEMPCCancels temporary instant-issue cards when the personalized card is activated. The instant-issue card and the personalized card must have the same balance ID but different product IDs. Set this parameter on the instant-issue product.Table of Contents Result of calling Activate Card Parameters Card-activation workflow Sample endpoint request and response Status codes View the activated card Galileo setup "
66,docs.galileo-ft.com/pro/docs/choose-a-card-strategy,"Choose a Card Strategy As a card issuer, your decisions about when and how to provide payment cards can affect customer engagement levels and customer loyalty. This guide explains the card products that Galileo offers and how you can use those products to meet your business goals. You may also want to read these card-related guides: Setting Up a Card Program — Steps to take during the lifecycle of a card Card-Creation Endpoints — Developer instructions for creating cards What are your goals? Before deciding on a card strategy, you should have a clear idea of what you want to do with your cards. Some of your goals may be: Provide an innovative banking experience Help the underbanked make card payments Provide businesses with an easy way to pay vendors Encourage potential customers to try your product Distribute gift or rewards cards Provide a personalized banking experience Enable corporate spending accounts Provide specialized fleet cards With your goals in mind, consider these questions: Is it important for my cardholders to have a tangible card? Do I want to provide a card immediately at signup, or is it all right to wait a few days? Does the card need to be issued to an individual or can it be distributed in a store to anyone? Do I want to support mobile wallets? Will my cardholders want customized card designs? Should I distribute cards to potential customers or to signed-on customers only? Do I want a card for a single payment or should it be valid for multiple transactions? Do I want my card to boost my brand? Keep in mind these general principles: Getting a spending card into the hands of your newly enrolled customers as soon as possible is a crucial step to increasing engagement and retaining customers. You can get up to a 30% higher retention rate when customers can spend right after signup. The conventional method of signing up a customer for a physical card and then shipping it several days later introduces a gap between signup and spending during which a customer can lose interest and never come back. Today's customers typically expect their card issuer to handle sophisticated use cases such as mobile wallets and contactless payments; on the other hand, your target demographic might be looking for simplicity, with less reliance on high-tech devices and more presence outside cyberspace. To help you meet your goals, read the sections below that describe what kinds of cards you can offer. See also the Use cases section for card-strategy suggestions. Card categories Cards in the Galileo system are categorized by their tangibility: Physical — A piece of plastic or other material with the card number printed on it. Digital — An electronic representation of a card that resides only on a web site, a mobile app, or in a mobile wallet. Digital cards are further categorized as: Virtual — Exists only as an image that is displayed in a mobile app or on a website. Digital image of a physical card — Electronic representation of a physical card, with the same PAN/CVV/expiry date as the physical card. Tokenized — Provisioned to a mobile wallet. Cards are also categorized by their relationship to the cardholder: Personalized — A card that is issued to a specific cardholder, with the cardholder's name displayed on it. Instant issue — A card that is printed in bulk, with no cardholder name displayed on it. May or may not be issued to an individual cardholder. Can be preloaded with funds. Physical cards A physical card is the type of payment card that most people are familiar with. Physical cards are accepted everywhere that card payments are accepted—not every merchant has the capacity to process mobile wallet payments. For example, at many restaurants, the server collects physical cards after the meal. Providing a phone might be awkward or impractical at this point, so it's far more convenient to present a physical card. Because of its tangible presence, a physical card is a compelling way to promote your brand. Cardholders enjoy presenting distinctive cards at points of sale—if the card is unusual or particularly eye-catching, it will spark inquiries about your program and leave a lasting impression on those who see or handle your card. When you offer physical cards, you must partner with a third-party vendor that does the actual card creation—called ""embossing,"" after the former practice of printing raised numbers on the card. Galileo is integrated with multiple emboss vendors and is glad to make introductions. When you select an emboss vendor, take these factors into consideration: Materials — All vendors offer plastic, but some also offer novel materials like wood, bamboo and metal. Graphic effects — Ask about elements such as colored edges, metallic ink, sparkles, opalescence, fluorescent ink, translucence and custom surfaces. Security — Verify that the latest card-authentication security is available. Cost — Choose the balance between features and cost that best suits your use case. See Design a Card for more information. When a card is issued to a particular person, the card must be embossed and mailed to the cardholder, a process that can take several days. You can also issue a physical personalized card while at the same time providing instant access to the card by using the Digital First product. On the other hand, an instant-issue card can be distributed in person to your customers, so that they can start spending immediately. As desired, you can switch your instant-issue customers to personalized cards to enhance their experience. See Switching Products for more information. Digital cards A digital card is a graphical representation of a card in an electronic medium. A digital card can be issued immediately to a cardholder without waiting for a card to be embossed and mailed. A digital card usually has the card number displayed on the front as well as the expiry date and CVV. Cardholders typically use digital cards on online platforms such as mobile apps and web sites. You can deliver a digital card to a cardholder using these methods: Displayed in a mobile app Provisioned to a mobile wallet The design for a digital card can be similar to the design for a physical card or it can be completely different. Although digital cards do not provide the same sensory experience that physical cards do, an attractive design still helps improve cardholders' impression of your brand. See Design a Card for more information. Digital card varieties In the Galileo system, digital cards take one of three forms: Virtual card — A virtual card exists only as an image that is displayed inside a mobile app or on a website—it is never embossed. A virtual card is associated with a virtual card product, as specified in the product parameters. The PAN, CVV, and expiry date are visible. Digital image of a physical card — A physical card is issued, and a digital image of the card—with the same PAN, CVV and expiry—is also provided for the cardholder's use. The digital image is not associated with a virtual card product but with a physical card product. Tokenized card — The card is provisioned to a mobile wallet such as Apple Pay, Google Pay, or Android Pay. The PAN, CVV, and expiry are not visible on a tokenized card—the wallet contains only a token that is associated with the PAN in a secured, remote database at the time of the purchase. The underlying product can be either a virtual card or a physical card. Mobile wallet support The ubiquity of mobile phones means that mobile wallets are an increasingly popular way to make payments, both online and in person. Both physical and digital cards can be provisioned to mobile wallets (but not instant-issue cards). The act of provisioning a card to a mobile wallet is called ""tokenization."" Tokenization in the context of payment cards means that instead of storing and transmitting a card's PAN, a randomized string is substituted instead. The randomized string is generated by the card network, which keeps track of which tokens correspond to the PANs. The tokens can be specific to a particular merchant or mobile wallet, or be valid for only a specified number of purchases. Malicious actors who intercept tokens cannot use them to transact because they do not also have the associated mobile wallet, or they are not using the right token with the right merchant, or the token has already expired. A mobile wallet, instead of containing a card's PAN, CVV, and expiry date, contains only the token. The PAN, CVV, and expiry date are therefore not visible to the cardholder in the wallet interface. Cardholder experience The cardholder installs or already has a mobile wallet app on their phone. If the cardholder intends to use the mobile wallet at physical points of sale, the phone's hardware must support NFC transmissions. The cardholder requests a payment card from you or requests that an existing payment card be included in their mobile wallet. The card is provisioned to the wallet in one of these ways: Using the mobile wallet's interface, the customer manually inputs the PAN, expiry, CVV and other information. The wallet tokenizes the card. You push the card to the wallet in the form of a card image and a token. At a point of sale the customer has these options: Physical point of sale — ""Wave"" the phone near an NFC card reader Virtual point of sale — Configure a merchant's app to use the card in the mobile wallet The merchant transmits the token to the card network, which correlates the token with the PAN. The network forwards the authorization request to Galileo. You or Galileo approves the authorization request. The merchant completes the transaction. See Setup for Mobile Wallets for more information. Card products Galileo offers these card products: Personalized Instant issue Virtual Digital First Personalized cards A personalized card is issued to an individual, with that person's name displayed on the card. The card can be either digital or physical (or both), but if it is physical it must be printed on-demand by an embosser and mailed to the cardholder, a process that can take several days. (Galileo offers ways to bridge the gap with virtual and Digital First cards, explained below.) Whether physical or digital, a personalized card can be provisioned to a mobile wallet. With personalized cards the account can be associated with a debit account or with a credit account. Personalized cards are accepted by all merchants that accept payment cards. If you want to offer a card that your customers can use just about anywhere, a personalized card is your best option. Instant-issue cards In contrast to a personalized card, an instant-issue card is a physical card that is printed in bulk for distribution at a physical location such as a store. With an instant-issue card, the business name is printed on the card but the cardholder's name is not. By printing the cards in bulk, you can make the cards available immediately to cardholders instead of needing to wait a few days for a personalized card to be embossed and mailed. There are two types of instant-issue cards: Gift — The card is preloaded with a fixed denomination, it cannot be reloaded, and it is not issued to an individual. Reloadable account — The card can be issued to an individual, optionally with funds preloaded on it, and the cardholder can add funds to the card as needed. The underlying account can be a DDA or a GPR. Instant-issue cards cannot be provisioned to mobile wallets, they cannot be used with credit products, and they are not universally accepted by all merchants. For example, a car-rental agency will not accept a prepaid card to reserve a car. In the case of gift cards, they might be accepted by only one merchant, or you can make them more generally applicable. See Setup for Instant Issue for more information. Virtual cards A virtual card is a type of digital card that does not have a physical counterpart. Virtual cards can be associated with a debit or credit account, and they can be provisioned to mobile wallets. They can also be issued for a single use or for specified merchants. The primary advantage to offering a virtual card is that it can be issued and used immediately instead of waiting for a card to be embossed, mailed and activated. A virtual card is active upon creation instead of passing through various states before becoming active, as with a physical card. Virtual cards don't incur the expense of embossing a card, and they cannot be physically lost or stolen the way a physical card can. Virtual cards are especially useful as single-use cards. For example, a business might decide that instead of writing checks to its vendors, it will issue virtual cards. Virtual cards provide increased security and ease of administration over physical checks. A virtual card is also a useful component in a hybrid virtual/physical strategy (called Virtual First), wherein you issue a virtual card to new customers, and after they demonstrate the intention to stick with your product, you switch them to a physical card with the same PAN and expiry as the virtual card. See Setup for Virtual Cards for more information. Digital First cards To combine the immediacy of a digital card with the style and substance of a physical card, use the Digital First product. Customers sign up for a physical card—which is embossed and mailed as usual—and in the meantime you provide a digital image of that card to use immediately. The physical card has the same PAN, CVV, and expiry date as the digital card, so if the customer sets up recurring payments with the digital card, the arrival of the physical card won't require them to input new information. When the physical card arrives at the customer's location, the card is already activated, so they can use it immediately after setting the PIN. In contrast to a Virtual First strategy, the Digital First product provides a physical card to all of your customers, regardless of their behavior. Digital First process You and Galileo set up a Digital First product. Your customer goes to your app or web site and signs up for the product. You create the customer account. The card is created in an active state. You retrieve a digital version of the physical card and present it to the customer in your app or on a web page. The customer can see the PAN, CVV, and expiry. Alternatively, you provision the card to a mobile wallet. The physical card order is sent to the embosser. The customer uses the digital card for purchases and other purposes. The physical card arrives in the mail, and the cardholder can use it immediately after setting the PIN. See Setup for Digital First for more information. Card product comparison This table summarizes the characteristics of Galileo card products. PersonalizedInstant IssueVirtualDigital FirstPhysical cardXXXDigital cardXXXIssued to individualXX*XXNon-personal issuanceXEmbossed in bulkXEmbossed on-demandXXMobile wallet supportXXXUse immediately after issueXXXCan be reissuedXXXUniversal merchant acceptanceXX**X * For reloadable debit cards but not gift cards. ** When configured to be universal. Use cases Depending on your goals for your card, you can employ these suggested strategies or you can devise strategies of your own. Provide an innovative banking experience If one of your primary goals is to innovate, you can reflect your unique choices with these types of offerings: Personalized cards — Provide a spend-anywhere card, with or without customized images Physical cards — Let your imagination run wild to design a memorable sensory experience Digital cards — Take your card-payment solution online Digital First — Combine the immediate utility of a digital card with a physical presence Mobile wallet support — Satisfy cardholder expectations for high-tech payment options Help the underbanked make card payments People without conventional bank accounts have a hard time taking advantage of the vast card-payment infrastructure. Many of them receive paper paychecks or government benefits that they convert to cash, and then must carry and distribute in cash form, which is vulnerable to loss and theft. In one scenario, you have check-cashing services at your store, so you offer to load checks onto instant-issue debit cards: The customer has a card in hand to use immediately. If you have a special machine you can emboss the name on the card in the store. The reloadable card incentivizes the cardholder to become a repeat customer. In another scenario you are a payroll company, so you issue reloadable instant-issue cards to your payment recipients instead of cutting checks or using direct deposit. Because the cards are reloadable, you can load the recipients' funds onto the cards periodically, and the recipients can spend the funds immediately instead of waiting for ACH holds to expire or having to go to a bank to cash the check. Loading cards is more secure than issuing checks for both you and the recipient. Issuing checks can be expensive, and keeping track of each check is labor-intensive. Issuing a card is easier than setting up direct deposit, especially among the underbanked. Provide businesses with an easy way to pay vendors If you're in the B2B space, you can help businesses make secure payments to their vendors by issuing virtual cards that are used one time only. A business sends a virtual card to a vendor with the owed amount loaded on it, and the vendor arranges with the card network to move funds from the virtual card into the vendor's central account. Once the funds are transferred, the card is canceled. In another case, your customer is a small business that needs to purchase a big-ticket item for the business. Your customer asks you for a loan, and instead of mailing a check or waiting for an ACH transaction to clear, you issue a one-time use virtual card for the purchase amount. Your customer pays for the item with the virtual card, and the card is then canceled. Later, the customer pays you back in installments. Alternatively, you can make the virtual card valid for multiple purchases, and the card is canceled when card balance reaches 0.00. Using virtual cards for B2B payments has these advantages: Paying with a card is more secure than writing paper checks. Setting up ACH transfers can be complicated, and the transfers take several days. Record-keeping with cards can be more detailed and automated than with other methods. Encourage potential customers to try your product Let's say you offer a DDA product with a debit card as well as associated savings, overdraft, and early paycheck deposit. To introduce customers to your product suite, you set up displays in store locations with impressively designed instant-issue cards that have $50 preloaded on them. You issue the cards to customers on the spot, and after they demonstrate the intention to stick with your product, you switch them to personalized cards with the full suite of products. The customer has a card in hand to use immediately. The preloaded funds are an incentive to start engagement. The impressive card design entices potential customers to sign up. Distribute gift or rewards cards Your customer wants to stimulate interest in their business by distributing gift cards. The cards are in denominations of $20, $50, and $100 and are sold at retail outlets in cardboard carriers. Recipients of the gift cards can use them immediately. Recipients often purchase more than the gift-card's value. Recipients may become return customers. Unused, expired funds are retained by the issuer. The cards' denominations are customizable. In another case, your customer is a business that wants a convenient way to provide rewards to their employees, so you distribute a reloadable instant-issue card to each employee. When it's time to hand out bonuses, the business loads the amount onto the card. The company can repeatedly load bonuses on the card. Employees can spend the money immediately instead of waiting for an ACH hold to expire or having to cash a check. The business has detailed records on each card load and the card's spending record. As needed, the business can freeze or cancel a card on demand. Enable corporate spending accounts Your customers are companies that want to distribute cards to their employees to make business-related purchases. For example, your customer might have a fleet of vehicles and it wants to issue cards to the drivers to cover fuel and repairs. Both physical and digital cards can make good corporate spending cards. Galileo offers several options to help corporations limit how their cards are used—such as limiting where and when the cards are valid—as well as putting spending restrictions on each account. Provide specialized fleet cards Mastercard offers specialized fleet-card BINs that provide enhanced authorization, clearing and reporting capabilities. Fleet-card issuers can receive data such as driver ID or vehicle ID both at the time of authorization and at settlement. Galileo parses the fleet data that Mastercard provides and then passes it to you so that you can perform detailed expense analysis. Fleet cards can be issued to individual drivers or they can be associated with a vehicle. See Fleet Cards for more information.Updated 5 months ago Table of Contents What are your goals? Card categories Physical cards Digital cards Card products Personalized cards Instant-issue cards Virtual cards Digital First cards Card product comparison Use cases Provide an innovative banking experience Help the underbanked make card payments Provide businesses with an easy way to pay vendors Encourage potential customers to try your product Distribute gift or rewards cards Enable corporate spending accounts Provide specialized fleet cards "
67,docs.galileo-ft.com/pro/docs/setting-up-direct-deposit-switch,"Setting Up Direct Deposit Switch This guide explains how to set up Direct Deposit Switch using the Get Direct Deposit Switch Token endpoint. Before performing this procedure, you may want to read the Direct Deposit Switch guide for general information on the user experience and use cases. Result of following this procedure Cardholders can use your interface to set up direct deposit into an account they hold with you. Setup You must integrate with the third-party direct deposit switch (DDS) provider through its SDK. Obtain the documentation from the DDS provider at this link. Galileo must also perform setup steps on the back end. Workflow These are the entities involved in DDS: Account holder — Your customer, who has at least one account on your platform Your system — Your mobile app or web page, which has a control to launch the DDS process. Galileo — The Galileo system SDK — Interfaces with the switch provider Switch provider — Interfaces with the deposit provider Payroll provider — Paycheck distributor such as ADP, an employer, or a government benefits distributor Direct Deposit Switch workflow Your customer creates a new account on your platform, or the account holder already has an account on your platform. The account holder activates an ""add direct deposit"" control on your interface. You call the Get Direct Deposit Switch Token endpoint and pass the routing and account numbers of the account that will receive the deposit. Galileo forwards the token request to the switch provider, which generates the token. Galileo forwards the token to you in the endpoint response. Galileo sends the DDSE: direct_deposit_switch_status event webhook to you with status: TOKEN_REQUESTED. The SDK calls the payroll provider's interface and passes the account holder's account and routing numbers. The payroll provider returns its interface, which you present to the account holder. The account holder selects the deposit provider from the interface and inputs their login credentials. Galileo sends the DDSE: direct_deposit_switch_status event webhook to you with status: PROCESSING. The payroll provider sets up a recurring deposit (ACH credit) with the routing and account numbers previously supplied. The DDS provider returns a webhook to Galileo that reports success. Galileo sends the DDSE: direct_deposit_switch_status event webhook to you with status: COMPLETED. When the payroll provider sends the deposit, it arrives at Galileo as an ACH credit in a Nacha file. When the deposit is posted to the customer account, Galileo sends a BPMT: pmt event message. The otype is a code that Galileo sets up for you to indicate direct deposits. Example scenarios These scenarios explain how to implement Direct Deposit Switch for checking and savings accounts. Scenario 1: Deposit into a checking account Issuer name — CardOfMine. Routing number 33333 Customer name — Adela Sanchez Adela Sanchez opens a DDA with CardOfMine. The PRN is 77777. Adela clicks the ""direct deposit"" control on CardOfMine's interface. Adela indicates that she wants the direct deposit to go into this new DDA. The interface asks her to provide a description for the deposit. She inputs My Job Paycheck. CardOfMine's interface calls Get Direct Deposit Switch Token with these values: ParameterValueaccountNo77777ddSwitchAccountNo77777ddSwitchRoutingNo33333ddSwitchAccountTypecheckingddSwitchAccountDescriptionMy Job Paycheck Galileo passes the values to the DDS provider in a token request. The DDS provider returns the token and Galileo forwards it to CardOfMine's interface. CardOfMine's interface loads the SDK, passes the token, and retrieves the direct deposit interface. Adela selects her paycheck provider and logs in using her company credentials. Adela specifies that 50% of her paycheck should go to her CardOfMine account. The paycheck provider creates a recurring ACH credit transaction using the account number 77777 and routing number 33333. The transaction parameters also include the fact that the CardOfMine account is a checking account. After one or two pay cycles, Adela's paycheck provider sends half of her paycheck to her CardOfMine account. Later, Galileo receives the deposit in a Nacha file Galileo posts the deposit (payment) to Adela's account. Scenario 2: Deposit into a savings account Issuer name — IssueMyCard. Routing number 44444 Customer name — Karl Schwartz Karl signs up for a checking account and accompanying savings account with IssueMyCard. IssueMyCard creates the checking account as a primary account (PRN: 22222) and creates the savings account as a secondary account (PRN: 88888) to the checking account. Karl clicks the ""direct deposit"" control on IssueMyCard's interface. Karl indicates that he wants all of the direct deposit to go into his new savings account. The interface asks him to provide a description for the deposit. He inputs Deposit to Savings. IssueMyCard's interface calls Get Direct Deposit Switch Token with these values: ParameterValueaccountNo22222ddSwitchAccountNo88888ddSwitchRoutingNo44444ddSwitchAccountTypesavingsddSwitchAccountDescriptionDeposit to Savings Galileo passes the values to the DDS provider in a token request. The DDS provider returns the token and Galileo forwards it to IssueMyCard's interface. IssueMyCard's interface loads the SDK, passes the token, and retrieves the direct deposit interface. Karl selects his paycheck provider and logs in using his company credentials. Karl specifies that all of his paycheck should go to his IssueMyCard savings account. The paycheck provider creates a recurring ACH credit transaction using the account number 88888 and routing number 44444. The transaction parameters also include the fact that the IssueMyCard account is a savings account. One or two pay cycles later, Karl's paycheck provider sends all of his paycheck to his savings account. Later, Galileo receives the deposit in a Nacha file Galileo posts the deposit (payment) to Karl's account. Events API During the direct deposit switch process, Galileo sends the DDSE: direct_deposit_switch_status Account Event when the status of the deposit setup changes. This event is first triggered when Galileo generates a token and sends it to you in the endpoint response. Subsequent status changes also trigger this event message. The possible values for status and old_status are: TOKEN_REQUESTED — The token to request the direct deposit switch has been requested. PROCESSING — The direct deposit transactions are being set up. COMPLETED — The direct deposit switch has been successfully set up. FAILURE — The direct deposit switch process failed. When status: FAILURE, the status_reason field is populated by one of the values in the Direct Deposit Switch Failure Status Reasons enumeration. Viewing Direct Deposit Switches Request the Direct Deposit Switch CDF, which contains all of the direct deposit switch transactions from the previous day.Updated 4 months ago Table of Contents Result of following this procedure Setup Workflow Example scenarios Scenario 1: Deposit into a checking account Scenario 2: Deposit into a savings account Events API Viewing Direct Deposit Switches "
68,docs.galileo-ft.com/pro/reference/post/movecardinventory,Move Card Inventory The table below lists status codes that apply to this specific endpoint. Status CodeCode Description468-01Invalid location ID468-02Invalid move-to location ID468-03No card inventory moved468-04Cannot move multiple cards by CADLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
69,docs.galileo-ft.com/instant,"Overview Introduction Welcome to Instant! Instant is Galileo's end-to-end platform that makes it simple to create digital banking and branded card experiences. This documentation includes comprehensive information for building financial products and integrating with Instant. Galileo Instant® is available to U.S.-based companies only at this time. The fastest way to get your integration up and running is to use our Quick Start guide, which walks you through the essential integration steps. Glossary business: A business entity that has partnered with Galileo; identified by business_id; each business can have many products. product: A set of card and account attributes; for example, card_color and daily_spending_limit are defined in this set of attributes; identified by product_id; a product is required to create a cardholder. cardholder: An individual customer who has been issued a card; identified by cardholder_id; each cardholder has at least one account. account: A bank account where money is stored; identified by account_id. card: A device for transacting at a point-of-sale; identified by card_id. transaction: Any type of account activity that affects your cardholder's balance; identified by transaction_id. access_token: A short-lived token used to access data using the Instant API. About the Platform Instant is built on the core Galileo Platform, which processes billions of dollars of payments annually and inherits all scalability, reliability, and security features of the core platform. Instant Components All financial products built on Instant are comprised of four components: Dashboard: A web tool for a business to manage its master funds account and card program. Instant API: An interface for integrating with Instant. Card Program: The underlying card program that enables a business to create Instant cards. Digital Banking: Mobile and/or online banking applications that cardholders use to manage their accounts. Dashboard Getting a business_id Before using Instant to create financial products, enroll your business through our Dashboard, and get a business_id. Master Funds Account Galileo creates a master funds account for every business that enrolls in Instant. This account can be used to instantly fund cardholder accounts, enabling a wide variety of product use cases. The account_id, balance, account number, routing numbers, and transactions for the master funds account are available in our Dashboard. Creating a Product Products are fundamental for creating Instant cardholders. Use our Dashboard to create and manage your products. Instant API Creating API keys Before integrating with the Instant API, you must create an account in our Dashboard and generate an API key. Once you have a key, you can exchange it for an access_token. An access_token is required for all subsequent API requests. API Hosts SandboxProductionhttps://sandbox.galileo-ft.com/instant/v1 https://production.galileo-ft.com/instant/v1 API Protocols The Instant API uses POST requests to communicate and HTTP response codes to indicate status and errors. All requests must include a Content-Type of application/json and the body must be valid JSON. All responses are in standard JSON. Card Program When a cardholder is created, a physical card is shipped to the cardholder. All cards support Apple Pay, Google Pay, and Samsung Pay. Digital Banking Cardholders need a way to manage their accounts. This includes viewing balances, tracking spending, and accessing monthly statements. Digital banking is how we describe any user interface that provides these functions for cardholders. Instant Mobile Banking is an out-of-the-box digital banking solution available for businesses. Custom interfaces are also supported but may be subject to approval by Galileo and our bank partner.Updated over 1 year ago Table of Contents Introduction Glossary About the Platform Instant Components Dashboard Instant API Card Program Digital Banking "
70,docs.galileo-ft.com/pro/docs/events-setup-and-configuration,"Event Setup and Configuration This section describes event setup and configuration at Galileo and within your own system. It also includes considerations for receiving and prioritizing events, as well as information on event delivery statuses reported by the CST Alerts Log. Receiving events In cooperation with Galileo, you select which events you want to receive, and then for each event, select which fields you want to include in the event message body. In the API reference, the Events API indexes (listed below) show which fields are included by default, and you can request to remove or add fields as desired. Account Events Index Authorization Events Index Settlement Events Index Transaction Events Index In most cases, you receive events only for active accounts. The individual event descriptions specify which events are sent regardless of account status. You can set the MSGDA parameter to send other events regardless of account status. Events prioritization If an event is triggered with high frequency, it may delay the delivery of other event messages. To prioritize other events over the high-frequency event, Galileo can create a secondary queue for the high-frequency event. For example, you can ask Galileo to create a secondary queue for the SETL: setl event, which is triggered every time an authorization is settled. Then, the events in the primary queue are delivered before the SETL events when there is a high volume of SETL events. It is also common for Galileo to create a secondary queue for BADJ: adj events. Events with debit or credit amounts Some transaction events that have an amount field do not explicitly use a negative sign to report a debit amount. For example, BPAY: billpay reports a successful bill pay debited from the customer’s account and always has a positive amount in the amount field. For your internal setup, make sure to note whether an event reports a debit or credit amount. Events configuration at Galileo During product configuration, you determine when and how you will receive Events API webhooks from Galileo. The following are components of Events API configuration in Galileo’s system. Format for receiving events and sending responses — Galileo can send you events in JSON format or as form data, and Galileo can receive your response in JSON or XML format. See About Events API in the API reference for examples. URLs for receiving events — You provide URLs hosted by a server on your system where Galileo will send Events API webhooks. You must provide separate URLs for the CV and Production environments. Product parameters for events — Behavior for some events can be configured with product parameters. Work with your Galileo representative to decide which events you want to receive for each product and when they should be sent. Events to enable in CV and Production — Galileo can enable different events in the CV and Production environments so that you can test an event in CV while disabling it in Production. Frequency and maximum count for message retries — The RETRY parameter controls the maximum number of retries for an event message and the RTRDL parameter controls the delay between attempts. See “Retry” under About Events API in the API Reference for more information. Your operational setup The following are considerations for handling Events API webhooks in your own system. Forwarding events to customers — Determine whether you will send events to customers and how you will display them. Account balance reporting — The value in the open_to_buy field may cause confusion if you display it to customers. Instead, use the Program API to display transaction history. See the Transaction History guide for more information about using data sources to display transaction history to customers. Reporting and reconciliation — The datastore that you build with the Events API should not be used to perform reconciliation, run large reports, perform data analysis or build statements. Instead, you should create a separate datastore using the RDFs. See Building a datastore in the About RDFs and CDFs guide for more information. Transaction event timestamps and account balance Although you can use event messages to track an account's transaction activity, you cannot use events to determine an account's balance at any given time. Keep in mind the following: The timestamp in the event body corresponds to the time when the event occurred on the Galileo system, but the open_to_buy was captured later, during the message assembly. You can add opentobuy_ts to your transaction-related events to see exactly when the open_to_buy was captured. Event messages will likely not arrive on your system in the same order they were generated. Some events are delayed, and occasionally they do not arrive at all. You should therefore interpret open_to_buy as being accurate as of opentobuy_ts, not as the result of the reported event. To obtain the latest open to buy value, use the balance value from a Program API call: Get Balance, Get Account Overview or Verify Account. CST Alerts Log In the Customer Service Tool, the Alerts Log displays a record of Events API messages that Galileo has sent as a result of activity on an account. The Alerts Log is located in the CST Account tab. The Alerts Log displays the delivery status for each event. This table lists each event delivery status and describes the next step to take. StatusNext stepProcessedNoneCard holder has not opted to receive this alertNoneErrorWork with Galileo to determine why the event was not sent.Queued to be sentNone. If there is a high volume of event messages, this message will be sent later. See Events prioritization for information on creating a secondary queue.Product not configured for this msg_idIf you did not expect this event, there is no next step.Alert Processing Not CompletedWork with Galileo to determine why the event was not sent. Galileo setup ParameterLevelDescriptionCDMSGProductSpecifies which card status updates will trigger the CSNT: card_status_change event. For valid values see the Card Statuses enumeration.MSGDAProductSpecifies which events are triggered regardless of account status. Default: BACT: card_activated, BFID: failed_id, CAPP: app_completed, NACT: denied_auth_inactive_card, PSUC: card_returnedRETRYProductMaximum retries to send a message.RTRDLProductDelay in seconds before resending a message. The delay increases exponentially for each retry by multiplying the square of the retry count by RTRDL.Updated 23 days ago Table of Contents Receiving events Events prioritization Events with debit or credit amounts Events configuration at Galileo Your operational setup Transaction event timestamps and account balance CST Alerts Log Galileo setup "
71,docs.galileo-ft.com/pro/reference/api-reference-events-api-ach-debit-fail,"ach_debit_fail Reasons for failure could be: Insufficient funds Inactive customer account The originator of the transaction is not allowed or not found ACDBT is not set to Y The transaction was denied through the External Transactions API with an Rxx return code. Code — ACHR Event trigger — You or Galileo deny the request, or the request fails. Processes — These processes contain the event trigger: Galileo receives a Nacha file that contains a request to move funds out of a customer account. You receive an ACH request to move funds out of a customer account through the External Transactions API. Fields All fields are strings. Your field names may vary. Field Required Description ach_source_trace Trace ID for an ACH transaction, generated by the originator. 15 digits. Example: ""034294619573021"" amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ACHR"" open_to_buy The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" receiver_name Name on the recipient account. Example: `""Jamal Williams"" return_code X See ACH Return Codes for possible values. Example: ""R01"" source X Name of the originating depository financial institution (ODFI). Example: ""Bank of Centerville"" source_id X Identifier for the source. Example: ""3029674"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""ach_debit_fail"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# ach_debit_fail example: { ""ach_source_trace"": ""034294619573021"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""ACHR"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""receiver_name"": ""Jamal Williams"", ""return_code"": ""R01"", ""source"": ""Bank of Centerville"", ""source_id"": ""3029674"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""ach_debit_fail"" } Table of Contents Fields Example "
72,docs.galileo-ft.com/pro/docs/designing-authorization-controls,"Designing Authorization Controls This guide explains how to design product-level authorization controls and how to decide which account-level controls (ALCs) to create. Related documents: About Account-Level Authorization Controls — General explanation about ALCs, including use cases. Setting Account-Level Authorization Controls — Instructions for developers to apply ALCs to individual accounts. MCC and Merchant ID ALC Examples — Tables that show how MCC and merchant ID controls are applied. When you set up a product, you define default authorization controls for each product. These controls are configured in cooperation with your bank, according to your use case. In addition, you can create authorization controls to apply to individual accounts. You should also consult with your bank to make sure that your ALCs don't violate a limit that the bank sets. You can set up three kinds of ALCs: Velocity MCC Merchant ID Velocity controls Velocity controls have these attributes: Transaction types affected, such as ATM or point-of-sale Timespan affected, such as day, week or single transaction Whether domestic or international transactions are affected Whether PIN or signature transactions are affected Amount per period or transaction Number of transactions per period Some example product-level velocity controls that you might set are in this table: DescriptionAmountTransaction countTotal daily ATM withdrawal, domestic$600.003Total daily ATM withdrawal, international$400.00blankPer-transaction ATM limit, domestic and international$200.001Total weekly point-of-sale amount, domestic and international$5000.00blankTotal weekly amount, all types, domestic and international$10,000.00blank For example, the top row controls how much may be withdrawn from domestic ATMs per day—$600 total in no more than three transactions, and the second row shows a total daily international ATM withdrawal limit of $400 but no limit on the number of transactions. You determine which default velocity controls to set in conjunction with your bank. At the same time, you can get permission for other controls that can be set on a per-cardholder basis and determine which criteria the cardholder must meet to qualify for the different limits. Product-level velocity controls are represented in the Galileo system as shown in this table with sample values: Control IDDescriptionPeriodTrans TypeDomestic FlagHas PIN1Daily ATM withdrawal limit, domestic1DATMYA2Daily ATM withdrawal limit, international1DATMNA3Per-transaction ATM limit1TATMAA4Weekly POS limit7DPOSAA5Monthly combined limit (ATM, POS, CAD, CBD)1MATM, POS, CAD, CBDAA Control ID — A Galileo-generated value to identify the control. This ID is unique per core. Description — A textual description of the control, provided here for clarity. Period — The format is [numeral][D|T|M], where: D – Calendar day, from 00:00:00 to 23:59:59 in Galileo system time T — Single transaction M — Calendar month; a rolling 30-day period is 30D Trans Type — Type of transaction affected: ATM — Automated teller machine CAD — Cash advance (over-the-counter, teller) CBA — Cash back (at point of sale) POS — Point of sale VFT — Visa funds transfer Domestic Flag — Whether domestic or international transactions are affected: Y — Domestic only N — International only A — Both domestic and international Has PIN — Whether PIN or signature transactions are affected: Y — PIN only N — Signature only A — Both PIN and signature Each velocity control also has an amount, a count (number of transactions) or both. A blank means that there is no limit. For example: Control IDDescriptionAmountTransaction Count1Daily ATM withdrawal limit, domestic500122Daily ATM withdrawal limit, international300123Per-transaction ATM limit200blank4Weekly POS limit1500blank5Monthly combined limit (ATM, POS, CAD, CBD)10000blank Galileo can create your default product-level velocity controls during product setup, or you can set them in the GCC. Once these product-level controls are created, you can view them in the GCC and CST and retrieve them using the Get Auth Controls endpoint. Velocity ALCs A velocity ALC must correspond to an existing product-level velocity control. If the product-level control does not exist, you cannot create the ALC. This table shows which ALCs can be created, given the controls shown in the tables above. Account-level controlValidNot validPer-transaction ATM limitXMonthly cashback limit (CBA)XDaily ATM withdrawal limit, internationalXWeekly ATM withdrawal limit, domesticXDaily POS limitXPer-transaction POS limitX The product-level controls do not impose limits on velocity ALCs—you can set the ALCs to whatever value you want, and the ALC overrides the product-level control. However, your bank may require that ALCs not exceed a certain threshold. When you set an ALC, you can specify either the amount or the transaction count or both. If you do not specify one of the limits, then that limit does not exist—the product-level limit is not used. For example, if you set the amount but not the transaction count, then the control does not have a transaction-count limit. You cannot set other properties of a velocity control at the account level (transaction type, domestic flag, has-PIN flag). ALCs can be applied either permanently or temporarily. For example, you can create an ALC that is in effect for one week only, either the current week or a week in the future. You can also create an ALC that takes effect ""now"" but that expires in 24 hours. Account-level velocity control examples The table below contains examples of velocity ALCs that you might set, given the product-level controls in the tables above, and assuming that today is March 10. DescriptionAmountTransaction countStart DateEnd DateTotal daily ATM withdrawal, domestic10006NowNoneTotal daily ATM withdrawal, international600Unlimited (blank)March 10March 17Per-transaction ATM limit, domestic and international5003NowMarch 21Total weekly point-of-sale amount, domestic and international500014NowTomorrowTotal weekly amount, all types, domestic and international7000Unlimited (blank)NowMarch 31 ""Now"" means the time when you create the ALC, in Galileo system time. When an account-level control is removed, the account reverts back to the product-level controls. See Velocity controls in the Setting Account-Level Authorization Controls guide for instructions on using the API to set velocity ALCs. See Authorization workflow to see how velocity controls are applied. MCC controls Merchant category codes (MCCs) are 4-digit numbers established by ISO 18245 to categorize merchants by type, such as hotels, airlines, bookstores, gas stations, and so on. Merchants pass their MCCs to card issuers in authorization request messages. You can set MCC controls at three levels: MCC blocklist Account level Product level MCC blocklist conventions Set for all Galileo programs at the product level, the MCC blocklist typically blocks some gambling-related MCCs and other MCCs according to your bank's guidelines. This control overrides all other MCC and merchant ID controls. Changing this blocklist is done by Galileo at your request. 🚧WarningWhen deciding which MCCs to add to the blocklist, make sure there is no overlap with existing product-level MCC controls. If there is overlap, the product-level control will be invalidated. Ask Galileo to help you change product-level MCC controls as needed to accommodate the blocklist. Account- and product-level MCC control conventions An account-level MCC control is applied in addition to product-level MCC controls, not instead of. MCC ranges in an ALC cannot overlap existing MCC ranges. For example, if the MCC ranges at the product level are 2000–3000 and 4500–4550, then the ALC MCCs cannot overlap those ranges. An ALC that specified 2995–3100 would not be valid. If no MCC controls exist, then all MCCs are allowed, except those MCCs in the MCC blocklist. You are not required to set MCC controls at the product or account level. Product-level controls are set in cooperation with Galileo during product setup and can be edited by request. When inputting values in the endpoint calls or the CST, the valid range is 0001–9999, but the values 0001–0599 are not currently mapped to any merchant categories. Multiple ranges of MCCs can be specified at the product level, but the ranges cannot overlap. The MCC range of an account-level control cannot overlap a product-level range or another account-level range. MCC ranges at the product or account level cannot overlap the values in the MCC blocklist. An MCC control must either ALLOW or DENY a range. If one or more MCCs are ALLOW, then all other MCCs are denied. If one or more MCCs are DENY, then all other MCCs are allowed. All MCC controls at the product and account levels must all be either ALLOW or DENY. Account-level controls cannot contradict the ALLOW/DENY property of product-level controls. For example, if the product-level controls are ALLOW, then the account-level controls must also be ALLOW. If the product-level MCC control is 0000–0000 ALLOW it means DENY ALL, so account-level MCC controls can be ALLOW. In contrast, 0000–0000 DENY is not a valid setting, because ALLOW ALL is already the default. Setting 0000–0000 ALLOW must be done at Galileo by your request. MCC controls can be set for online transactions only, at both the product and account levels. When Galileo denies an authorization request because of an MCC violation, the response code is 57. 🚧WarningWhen an account is switched to a new product, the account-level MCC controls move with it. However, if the account-level MCCs conflict with the new product's MCC controls, the authorization process will fail and authorization requests will be denied. Before performing product switches, ensure that the account-level controls do not conflict with the new product's MCC controls. You may need to consult with Galileo to confirm or adjust the values. Example MCC controls This table shows how MCC controls are applied. Example 1Example 2Example 3TransactionMCC 3000MCC 3000MCC 3000MCC blocklist——MCC 3000Product levelMCC 2000–2999 ALLOWMCC 4000–4999 ALLOWMCC 2000–2999 ALLOWMCC 4000–4999 ALLOWMCC 2000–2999 ALLOWMCC 4000–4999 ALLOWAccount level—MCC 3000 ALLOWMCC 3000 ALLOWResultDENYALLOWsetting not validReasonMCC 3000 falls outside the product-level ALLOW rangesMCC 3000 is allowed at the account levelMCC 3000 ALLOW cannot be set at the account level because it overlaps with the MCC blocklist See Authorization workflow to see more on how MCC controls are applied. Also see MCC and Merchant ID ALC Examples. Online-only property All MCC controls, at both the product and account levels, can be configured to apply only to online (card not present) transactions. By default, an MCC control applies to all transactions. You cannot specify that a control apply only to non-online (card present) transactions. This table shows how the online-only property is applied. Example 4Example 5Example 6TransactionMCC 5750onlineMCC 5550not onlineMCC 5750onlineMCC blocklistMCC 7995MCC 7995MCC 7995Product-level MCC5500–5600 ALLOW5500–5600 ALLOW5500–5600 DENYOnline only (product)YYNAccount-level MCC——5750 DENYOnline only (account)——YResultDENYDENYDENYReasonMCC 5750 is outside the ALLOW range.MCC 5550 is allowed only for online transactions.MCC 5750 is denied at the account level for online transactions. Also see MCC and Merchant ID ALC Examples. Define product-level MCC controls This table shows examples of product-level MCC controls that you might set. (When planning your own MCC controls, obtain the latest version of ISO 18245 to confirm the MCCs instead of using this guide.) MCC controlMerchant types3000–3300 ALLOWAirlines3350–3450 ALLOWCar rental3500–3899 ALLOWHotels4000–4790 ALLOWGround transportation5044–5046 ALLOWOffice supplies5531–5533 ALLOWAuto parts5541–5542 ALLOWGas stations, fuel pumps6010–6012 ALLOWATMs and other cash disbursement With these MCC ranges set to ALLOW, all other MCCs are denied. Other factors to keep in mind: Some merchants use more than one MCC. For example, Amazon began life as a bookstore, but since branching out it now uses multiple MCCs, depending on the service. Some of its MCCs are: 5942 (Bookstores) — Amazon Marketplace 5968 (Continuity/subscription) — Amazon Prime, Audible 5411 (Grocery stores, supermarkets) — Groceries New MCCs can be added to ISO 18245 at the request of merchant groups when the category has at least $10 million annual revenue. Always consult the most recent version of ISO 18245 when setting MCC controls. Design account-level MCC controls When determining which account-level MCC controls to set, remember that the account-level controls are applied in addition to product-level MCC controls, not instead of. For this reason they cannot overlap any of the product-level MCC ranges or the MCCs in the blocklist. They must also have the same ALLOW/DENY property as the product-level controls. If you set the product-level MCC controls in the table above, all of your account-level MCC controls must also be ALLOW, and they cannot overlap any of the product-level ranges. This table shows which account-level controls would be valid and which would not. ALCMerchant typesValidity5812–5814 ALLOWRestaurantsValid5942–5943 ALLOWBooks and stationeryValid3690 ALLOWCourtyard by Marriott HotelNot valid. Cannot overlap other ranges.5611–5691 DENYClothing storesNot valid. Must be ALLOW.4121 DENYTaxi cabs and limousinesNot valid. Must be ALLOW, and cannot overlap other ranges See MCC and Merchant ID ALC Examples for more examples of how MCC ALCs are applied. See MCC controls in the Setting Account-Level Authorization Controls guide for instructions on calling the API to set MCC ALCs Merchant ID controls A merchant ID (MID) control is derived from DE042 of an ISO 8583 authorization request, which contains an identifier that is unique to a point of sale. An MID control at the account level can override existing MCC controls, either to ALLOW or DENY a transaction from a merchant that would otherwise be denied or allowed based on its MCC. Account-level MID controls exist independently of the product-level MID controls. If no product-level MID controls exist, you can still set MID controls, and they can overlap MCC controls and other MID controls. Merchant ID control conventions A merchant ID is specific to a point of sale such as a store location or web site, not to a chain of stores. Product-level merchant controls follow these rules: The product-level control is applied only if the MCC controls allow the transaction. The product-level control includes the MID as well as terminal ID and merchant description so that it can be used to assess fees. If you are using Galileo's fraud-detection engine, the engine will automatically add DENY MIDs to your product-level controls as necessary. An MID control must specify the entire merchant ID—no wildcards are allowed. The MID is not case-sensitive. Merchant IDs often change when a merchant replaces its card readers or makes other adjustments. A single ecommerce site that provides merchandise or services from third parties will use different MIDs for each vendor. See Amazon transaction in Card Transaction Examples to see different MIDs in the same transaction. An account-level MID control overrides product-level and account-level MCC controls but does not override the MCC blocklist. When Galileo denies an authorization request because of a merchant ID violation, the response code is 57. This table shows how MID controls are applied. Example 7Example 8Example 9TransactionMCC 3000MID 5555MCC 3000MID 5555MCC 3000MID 5555MCC blocklist——MCC 3000Product-level MCCany valueany valueany valueAccount-level MCCany valueany valueany valueProduct-level MIDany valueany valueany valueAccount-level MIDMID 5555 DENYMID 5555 ALLOWMID 5555 ALLOWResultDENYALLOWDENYReasonThe account-level MID overrides MCC controls.The account-level MID overrides MCC controls.The MCC blocklist overrides all other controls. See MCC and Merchant ID ALC Examples for more examples of how MID ALCs are applied. See Authorization workflow to see more on how MID controls are applied. Galileo does not have a list of merchant IDs to provide—you must compile the list yourself. You can get these numbers from the merchants by request or you can harvest that data from Galileo data sources such as the Auth API, RDFs and Authorization Events messages. However, Galileo sources return the merchant ID only after the authorization process has checked for merchant ID controls, so you cannot harvest them from the Auth API webhook, for example, and then create a merchant ID ALLOW control for the current authorization—the MID control would apply only to subsequent authorization requests. Because the product-level merchant controls are used to assess fees, you will develop these controls in conjunction with Galileo and your bank during product setup. In contrast, the ALCs specify only the MID to provide a quick way to allow or deny a particular merchant. If you would like to correlate a merchant ID with the merchant name (DE043) in your lookup table, use these fields from these Galileo data sources: SourceMerchant ID (DE042)Merchant description (DE043)Auth APImerchant_idmerchant_description + merchant_state + merchant_postal_codeEvents APImerchant_numbermerchant_name + merchant_locationRDFsMERCHANT NUMBERMERCHANT DESCRIPTIONProgram APImerchant_id*detailsformatted_merchant_desc* * Get Transaction History and Get All Transaction History only. Authorization workflow During the authorization process, Galileo runs a series of checks and calculates a list of response codes when there are violations. When multiple violations result in multiple response codes, Galileo returns a single code to the network according to a proprietary algorithm. (See the Auth API Validation Checks guide for more information.) Galileo performs the authorization checks described in this guide in this order: MCC blocklist Account-level MID Account- and product-level MCC Product-level MID Account-level velocity Product-level velocity This flowchart shows the process for checking these authorization controls. The MCC online only property has been omitted for clarity. Galileo receives an authorization request from the network. If the MCC is on the MCC blocklist, Galileo calculates response code 57 or 03 (Mastercard) and stops checking authorization controls. If a merchant ID ALC exists, Galileo applies that control. If the ALC is DENY, Galileo calculates code 57 and stops checking authorization controls. If the ALC is ALLOW, Galileo begins to check the velocity controls. If no ALC exists, Galileo goes to the next step. If MCC controls exist, Galileo applies those controls. If the MCC controls DENY, Galileo calculates response code 57 or 03 (Mastercard) and stops checking authorization controls. If the MCC controls ALLOW, Galileo goes to the next step. If MCC controls do not exist, Galileo goes to the next step. If a product-level merchant ID control exists, Galileo applies that control: If the product-level control is DENY, Galileo calculates response code 57 and stops checking authorization controls. If the product-level control is ALLOW, Galileo goes to the next step. If no product-level control exists, Galileo goes to the next step. If a velocity ALC exists for the control, Galileo applies the ALC to the transaction. If an amount limit exists in the ALC, Galileo applies that limit; if it does not exist, then no amount limit is applied. If the transaction violates the amount limit, Galileo calculates response code 61 and stops checking authorization controls. If the transaction does not violate the amount limit, Galileo goes to the next step. If a transaction count limit exists in the ALC, Galileo applies that limit; if it does not exist, then no transaction-count limit is applied. If the transaction violates the transaction-count limit, Galileo calculates response code 65 and stops checking authorization controls. If the transaction does not violate the transaction-count limit, Galileo checks the next control, if it exists. If no ALC exists for the control, Galileo applies the product-level control to the transaction. If an amount limit exists at the product level, Galileo applies that limit; if it does not exist, then no amount limit is applied. If the transaction violates the amount limit, Galileo calculates response code 61 and stops checking authorization controls. If the transaction does not violate the amount limit, Galileo goes to the next step. If a transaction count limit exists at the product level, then Galileo applies that limit; if it does not exist, then no transaction-count limit is applied. If the transaction violates the transaction-count limit, Galileo calculates response code 65 and stops checking authorization controls. If the transaction does not violate the transaction-count limit, Galileo checks the next control, if it exists. Updated 15 days ago Table of Contents Velocity controls Velocity ALCs MCC controls MCC blocklist conventions Account- and product-level MCC control conventions Define product-level MCC controls Design account-level MCC controls Merchant ID controls Merchant ID control conventions Authorization workflow "
73,docs.galileo-ft.com/instant/docs/about-cardholders,"About Cardholders Galileo refers to your customers as Cardholders. The Cardholder Object (see below) contains personal information about your cardholder. This information may be used for various purposes, as described below. Information such as ssn is used solely to pass the CIP identity verification and isn't available to you after cardholder creation. Information such as the shipping_address is used by Galileo for operational purposes (e.g., mailing cards). Information such as mobile is available to you and may be useful for your purposes. The Cardholder Object does not contain any financial information such as balance or transactions; this information belongs to an account. When a cardholder is created, an associated Spending Account is created by default. A cardholder does not itself belong to any particular product, but each of its accounts does. The cardholder object Address The address is used to pass the CIP identity verification. It must be in the US and may not be a PO box. It may differ from the shipping address. city: City of residence. state: State of residence. street: Street address, i.e., ""Address Line 1"". unit: Unit number, i.e., ""Address Line 2"". zip_code: Five-digit ZIP Code. Agreements The list of each agreement_id that corresponds to each agreement that the cardholder has agreed to. Email Used to enable communication between Galileo and the cardholder. For example, statements are delivered via email. First name This is the legal first name used for CIP identity verification. The legal first name is used on the card, card carrier envelope, statements, and in email correspondence. Identification Personal identification information is required for CIP identity verification. date_of_birth: Customer's date of birth. id: Customer's SSN or ITIN. id_type: Denotes whether the id is an SSN or ITIN. Income The bank requires income information to understand the cardholder's financial standing: amount: Cardholder's annual income amount (see the Income Amount Enum for options). frequency: The frequency of the cardholder's income payments (see the Income Frequency Enum for options). occupation: The cardholder's primary line of work (see the Occupation Enum for options). source: The cardholder's primary source of income (see the Income Source Enum for options). Last name This is the legal last name used for CIP identity verification. The legal last name is used on the card, card carrier envelope, statements, and in email correspondence. Mobile This is the cardholder's mobile phone number. As this phone number may be used for two-factor authentication, it is important that it can receive SMS messages. Shipping address This is the address to which the card is shipped. This field is optional. If no shipping_address is added, the card is shipped to the address.Updated over 2 years ago What’s NextCreating a CardholderTable of Contents The cardholder object "
74,docs.galileo-ft.com/pro/reference/api-reference-events-api-ext-trans-debit-retry,"ext_trans_debit_retry Code — GDBR Event trigger — The External Trans API schedules an ACH debit retry. Process — This process contains the event trigger: External Trans API attempt times out Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the transaction. Unsigned. Example: ""63.21"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDBR"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" tp_trans_id X ACH transaction ID. Example: ""323232323"" type X The name of this event: ""ext_trans_debit_retry"" Example JSON# ext_trans_debit_retry example: { ""amount"": ""63.21"", ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDBR"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""tp_trans_id"": ""323232323"", ""type"": ""ext_trans_debit_retry"" } Table of Contents Fields Example "
75,docs.galileo-ft.com/instant/reference/income-frequency,Income Frequency NameDescriptionweeklyEvery weekbiweeklyEvery two weeksbimonthlyTwice per monthmonthlyEvery monthquarterlyOnce every three monthsbiannuallyTwice per yearannuallyEvery yearotherOtherdecline_to_answerDecline to answer 
76,docs.galileo-ft.com/instant/changelog/refreshed-site-design,"Refreshed site design Splitting API reference documentation into separate pages for each endpoint Removing the landing page at docs.galileo-ft.com (and routing that traffic to the Pro docs by default) Refreshing the overall site design We're excited to bring you these improvements! Now that the changes are live, we recommend updating any bookmarks or links to our docs that you may have in your own internal documentation. "
77,docs.galileo-ft.com/pro/docs/creating-an-overdraft-account,"Creating an Overdraft Account This guide describes how to create and manage overdraft accounts using the Set Account Feature and Add Account endpoints. Prior to creating the overdraft account, you arrange the details of the overdraft account with your bank, and then you communicate the details to your Galileo representative, who incorporates those details in the setup for the overdraft product. For more information see About Overdraft Accounts. Follow this procedure to: Make a primary account eligible to use overdraft Create an overdraft account Disable or enable overdraft Result of following this procedure When this procedure is successfully completed, the following are true: The primary account is eligible to use overdraft. The overdraft account exists and is ready for use. Overdraft can be disabled or re-enabled. Creating an overdraft account This guide assumes that the primary account holder has opted-in to using overdraft by whichever means your bank requires, such as agreeing to a disclosure document. 1. Create the primary account When you set up the primary account product that will be using overdraft (usually a DDA), you can ask Galileo to set the ODELG parameter to Y, which automatically makes the primary account eligible for an overdraft account when it is created. Then, use the Create Account endpoint to create the primary account. (Consult the Creating an Account guide for instructions.) If the primary account already exists, and you want to add overdraft as a new feature, continue to the next step. 2. Make the primary account eligible Before you can add the overdraft account, the primary account must be eligible for an overdraft account. The Galileo system requires that the primary account be active and that the balance be 0.00 or higher. When the primary account meets the system requirements, the primary account must be made eligible at a technical level. Account feature 17 controls whether a primary account is eligible for an overdraft account and whether the overdraft account has been opted-in or opted-out. Before a primary account can have an overdraft account attached to it, account feature 17 must be set to E (eligible). You have two options: If ODELG is set to Y for the primary account product, it automatically sets account feature 17 to E when the primary account is created. You call the Set Account Feature endpoint on an existing primary account with these values: accountNo: <primary account> featuretype: 17 featureValue: E When you create a primary account with ODELG set to Y, you receive the ODIN: overdraft_opt_in message, according to your arrangements with Galileo. (This message is also sent when an account is opted-in to overdraft using the CST.) The message contains the PRN for the primary account. This message does not indicate that the overdraft account has been created—only that the primary account is eligible to use overdraft. This message also does not indicate that the overdraft account can be used. 3. Create the overdraft account To create the overdraft account, call the Add Account endpoint to add the overdraft as a secondary account to the primary account. Consult the Adding an Account guide for instructions. Use these parameters: accountNo: <primary account> prodId: <overdraft product ID> sharedBalance: 0 The endpoint returns the overdraft PRN in the response. 4. Activate the overdraft account To make the overdraft account active and ready for use, call Set Account Feature with these parameters: accountNo: <primary account> featureType: 17 featureValue: P (Earlier versions of this guide said that account feature 17 changed to P automatically, but that behavior has changed.) Viewing the overdraft account Call the Get Overdraft Balance endpoint to return information such as: Available overdraft limit Payback amount OTB of the overdraft and primary account, with and without pending fees Freeze status For the accountNo parameter you can use any of these values: Overdraft PRN Primary account PRN Primary account PAN You cannot call the Get Account Overview endpoint for an overdraft account. To see the primary account's overdraft status, call the Get Account Features endpoint with accountNo: <primary account> and check the value for account feature 17. Possible values are: I — Ineligible. Account cannot have an overdraft account E — Eligible. Account can have an overdraft account P — Participating (opted in) For further management of overdraft accounts see Managing Overdraft Accounts.Updated 3 months ago Table of Contents Result of following this procedure Creating an overdraft account 1. Create the primary account 2. Make the primary account eligible 3. Create the overdraft account 4. Activate the overdraft account Viewing the overdraft account "
78,docs.galileo-ft.com/pro/docs/card-statuses,"Card Statuses A card's status is designated by a single capital letter in the Galileo system, as shown in the Card Statuses enumeration. 📘NoteCard status is not the same as account status. The statuses may be similar in some cases, but they operate independently. Compare with the Account Statuses enumeration. When a merchant attempts to authorize a transaction, the Galileo system checks to see whether the card is active (status: N). The account must also be active (status: N) for the transaction to be approved. When a card or account is not active the authorization request is denied. In both the Card Statuses and Account Statuses enumerations, the columns on the right show which operations are permitted for each status. Keep in mind that the Galileo system always checks both the card and account statuses when determining whether to allow a transaction. Changing card statuses The original status of a card is determined by the XAACT parameter. This parameter has three characters—the third character specifies which status to assign to new cards. Default is W (waiting to be processed). For virtual and Digital First cards the value is N (normal, active), because they are activated at the time they are created. Card statuses can be changed either manually with an endpoint or automatically by internal Galileo processes. To manually change a card status, use the Modify Status endpoint. Make sure the type affects what you want it to affect—some types affect both the card and the account, whereas others affect only the account or only the card. Automated processes that change a card status include: Emboss process — Picks up cards in status: X (set to emboss) or status: W, includes them in the batch file for the emboss vendor, and changes the cards to status: Y (ready to activate). Card activation — When the cardholder activates the card using your designated methods, the card is changed to status: N (normal, active). Depending on your settings, other cards on the account may be set to status: C (canceled) at the same time. See Activating a Card for more information. Lost/stolen — When you use Modify Status to report a lost or stolen card, the process changes the card to status: L or status: S. See Lost, Stolen, or Damaged Cards for more information. PIN failures — When the number of failed PIN attempts reaches a threshold, the card may be changed to status: B, depending on your settings. Card reissue or replacement — When a reissued or replacement card is activated, the previous card may be set to status: C or status D, depending on the parameters you pass with the Reissue Card endpoint call. See Reissuing Cards for more information. Fraud detection — If you are using Galileo's fraud-detection engine, you can configure a rule to set a card to a disabled status when certain criteria are true. Freezing cards Instead of reporting a card as lost or stolen, your cardholders might want to temporarily freeze a card. A frozen card cannot be used for purchases but has not been canceled. An account with a frozen card can still receive payments and deposits. As soon as the card is unfrozen it is usable again without reissuing the card or creating a new card. Reasons for freezing a card rather than disabling or canceling it include: The cardholder cannot locate their card but is not ready to report it lost or stolen. Parents want to stop their teenager from accessing funds for a time. A company wants to temporarily withdraw fund access for an employee. To freeze a card call the Modify Status endpoint with type: 17. To unfreeze it use type: 18. When you call Modify Status with type: 17 to freeze a card, use the startDate and endDate as follows: startDateendDateResultblankblankFreeze starts at the current date-time and ends in current date-time +24 hours in Galileo System Time.blankPopulatedFreeze start defaults to current date-time in Galileo System Time.PopulatedblankReturns status code 2. When unfreezing a card with type: 18, the startDate and endDate parameters are ignored and the card is unfrozen immediately. When a card is frozen because of suspected fraud—such as when a fraud-detection rule is triggered—the expiration date is set to 3000-01-31. Fraud-related freezes that are created by the API or the CST have that same expiry date. 📘NoteModify Status types 17 and 18 do not change the card or account status. To see whether a card is frozen call the Get Card or Get Account Cards endpoint and check the freeze_info object. Affected transaction types When a card is frozen, it cannot be used for transactions that arrive at Galileo through the authorization stream: Authorizations (purchases) Completions Reversals Merchant credits Card loads (except Green Dot and Western Union) 📘NoteIf you want to permit transactions on frozen cards that credit the account, set CTRNS. Setting this parameter permits merchant credits, reversals, and card loads, but anything that debits the account is still blocked. Transactions that are not initiated in the authorization stream can still be performed: Settlements ACH Billpay, including scheduled transactions Direct deposits Funds movement created by automated processes or the Program API (payments, adjustments, internal transfers, fees) Provisional credit and other dispute-related money movement Events API messages These event messages indicate stages in the card lifecycle and changes to card status. You must arrange with Galileo to receive these event messages: SHIP: card_shipped — The card has been picked up by the emboss process and is included in the batch file for the embosser. Card is now in status: Y. BACT: card_activated — Card has been activated and is now in status: N. CSNT: card_status_change — The card status has changed to a status specified in the CDMSG parameter. This event message is triggered regardless of which process changed the status. FRZN: frozen — The card has been frozen. The status has not changed. UFRZ: unfrozen — The card has been unfrozen. The status has not changed. CDFR: bulk_frozen — The card has been frozen by a bulk-freeze action in the CST. RBEX: card_expiring — The card will expire in the number of configured days. Default: 30 days. PSUC: card_returned — The cardholder mailed the card back and the shipping room recorded the return. LSCN:lost/stolen card no replacement — The card has been marked lost or stolen and no replacement card has been created. Status is L or S. LSCR:lost/stolen card with replacement — The card has been marked lost or stolen and a replacement card has been created. Status is L or S. Updated 4 days ago Table of Contents Changing card statuses Freezing cards Affected transaction types Events API messages "
79,docs.galileo-ft.com/pro/reference/post/getbillers,Get Billers See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
80,docs.galileo-ft.com/pro/reference/post/createlocationfee,Create Location Fee These are the fee types: FBD — FBE direct deposit fee DEL — ACH direct deposit fee See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description595-01Location was not found595-02Fee has already been created595-03locationType 1 name is maximum of 15 characters595-04locationType 0 and 2 require location to be an integer value.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
81,docs.galileo-ft.com/pro/reference/post/getaccountcards,"Get Account Cards 📘NoteYou can receive PCI-sensitive information only if your provider parameters permit it.RecipesGet Account Cards response, secondary account, multiple emboss recordsOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
82,docs.galileo-ft.com/pro/docs/post/updateaccount,"Update Account Nullifying data elements Pass the string null for any of these parameters to update that value to null. firstNamemiddleNamelastNameaddress1address2citystatepostalCodeprimaryPhoneotherPhonemobilePhonewebUidsecretQuestionsecretAnswermailBouncedemail*embossLine2shipToAddress1 *Only if the provider parameter AENUL permits it. 🚧WarningExercise caution when nullifying a primary address — for compliance in the United States you must maintain a physical address as an individual cardholder's primary address. Updating customer ID When you are using Galileo's integrated CIP process, you can update the primary customer ID (id and idType) as long as the customer has not passed CIP. If the customer has already passed CIP, status code 415-02 is returned. Secondary customer ID (id2 and idType2) can be updated regardless of customer CIP status. Updating the ship-to address When updating the ship-to address for a customer, the elements shipToAddress1, shipToCity, shipToState, and shipToPostalCode are required – shipToAddress2 is optional. You can retrieve the current customer ship-to address data using the Get Account Card endpoint. By default, the embosser sends the card to the primary address. To ship to a different address than the primary, use the ship-to address fields. If you pass shipToAddressPermanent: 1 the embosser will always send cards to the ship-to address; otherwise, the ship-to address is used only for the current order.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description415-01Account information could not be updated at this time. Please try again later.415-02Customer primary ID can not be modified when CIP is passed415-03All elements except shipToAddress2 required for ship to address415-04Your provider configuration does not allow the nullifying of email address415-05Changing SSN is not allowedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
83,docs.galileo-ft.com/pro/page/scenario-2-preauthorization-with-completion,"Scenario 2: Preauthorization with Completion << Back to the index A debit cardholder goes to a gas station and pumps $30 worth of gasoline. The issuer has configured an upcharge of $75 for gas pumps (MCC 5542). The following are true: The original available balance is $1000. The gas pump uses a PIN to validate the debit card. The network is Visa Interlink. Sequence of events Events in the same step have the same timestamp. Visa sends a preauthorization request for –1.00. Galileo replaces the 1.00 request with a 75.00 upcharge, approves the request and puts a 75.00 hold on the account. The available balance is now 925.00. Galileo sends a BAUT: auth webhook. When the gas has been pumped, the pump sends a completion for –30.00. Galileo backs out the 75.00 hold and replaces it with a 30.00 hold. The available balance is now 970.00. Galileo sends an AAAU: auth webhook. Visa sends a batch file with the –30.00 transaction. Galileo backs out the 30.00 hold and posts –30.00 to the account. The available balance is still 970.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthPreauth75.00555501000.0020210413:183718MSTAdviceAuth30.0077225555925.0020210413:183936MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth75555509252021-04-13 18:37:18 MSTAAAUauth30772255559702021-04-13 18:39:36 MSTSETLsetl30772255559702021-04-14 15:11:02 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME75.00-55555004132021 18:37:1830.00-77225555504132021 18:39:36 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE30.00-7722ISC772204132021 18:39:3604142021 Get Authorization History response This endpoint returns only transactions that have not settled, expired or completed. These transactions are also returned by Get Account Overview. This example shows both the authorization and completion; however, in Production you would get only the most recent transaction. amtauth_idoriginal_auth_idtypelocal_amttimestamp-7555550A0000000001002021-04-13 18:37:18-3077225555C0000000030002021-04-13 18:39:36 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-3077225555ISC2021-04-13 18:37:182021-04-14 15:11:02 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-75.0055550VIL5555925.00N2021-04-13 18:37:182021-04-13 18:37:1875.00NoneNonePVPV55551000.00NoneNone2021-04-13 18:39:35-30.0077225555VIC7722970.00N2021-04-13 18:37:182021-04-13 18:39:3630.0077225555BVC77221000.00N2021-04-13 18:37:182021-04-14 15:11:02-30.0077225555ISC7722970.00N2021-04-13 18:37:182021-04-14 15:11:02 "
84,docs.galileo-ft.com/pro/docs/business-banking-programs,"Business Banking Programs Galileo offers programs that can help you provide banking services to your business customers. With Galileo’s business banking programs, you can offer your customers benefits like: Fully digital business banking. Employee access to a single business account. Single-use virtual cards, eliminating the need for paper checks. A complete debit program. Business savings accounts. This guide describes business banking programs at Galileo. Overview of Business Banking Programs — Business banking solutions and features offered by Galileo. Business Banking Program Configuration — Decisions and considerations for configuring your business banking programs. Operational Setup for Business Banking — Galileo API endpoints, webhooks, and tools for managing business banking programs. Updated over 1 year ago "
85,docs.galileo-ft.com/pro/docs/auth-api-validation-checks,"Auth API Validation Checks This guide shows which validation checks Galileo performs on all incoming authorization requests and describes which corresponding fields Galileo sends in the Auth API webhook. If you are not using the Auth API, this guide provides insight into how Galileo decides which response code to return. With this guide you may also want to consider these resources: Authorization Controller API — General information about how the Auth API works. Authorization Response Codes — Codes that Galileo supports. You may also arrange with Galileo to send custom response codes, depending on your use case and business requirements. Authorization — General explanation of the authorization process at Galileo. The actual order of the checks may vary from what is shown here. PAN validation The PAN must exist in the Galileo system. If the PAN does not exist, Galileo returns 14 (invalid card number) to the network and performs no further checks. When Galileo returns a 14, you do not receive a webhook. Card validation The card-validation checks help ensure that the card used at the point of sale is an authentic card and that an authorized cardholder is presenting it. The summary of card-validation results is in the validation_results object. AVS check See AVS-only checks in the Authorization guide for an explanation of these checks. Galileo returns the result of an AVS check in the avs_result field. In the avs_data object, Galileo provides the information that it used to perform the check. If you have reason to believe that Galileo is not using the correct address for the account, you can perform AVS yourself and override Galileo's result. See AVS override in the Authorization Controller API guide for more information. Galileo does not use AVS results to calculate a response code: Merchants decide how to handle each result. It is therefore possible for Galileo to return avs_result: N with response_code: 00, which means that there was no AVS match but the transaction is otherwise approved, because the account supports it. If you do not want AVS checks for your product, such as for gift cards, set the NOAVS product parameter to return a ""gift"" value for avs_result. Merchants can decide whether to accept the result as success or failure and then proceed according to their business policies. PIN When a PIN is not provided, the transaction usually arrives at Galileo over credit rails and pin: N. When a PIN is provided, the transaction usually arrives at Galileo over debit rails. These are the steps for validating the PIN. The actual order of the steps may vary from what is shown here: Galileo checks whether a PIN has been set for the card. If it has not been set, Galileo returns 55 (incorrect PIN) and pin: M. If a PIN has been set, Galileo checks whether PBLOK permits this type of PIN transaction. If it does not, Galileo returns 57 (transaction not permitted to cardholder) and pin: B (blocked). If this type of PIN transaction is permitted, Galileo checks whether the PIN has been locked after exceeding the number of failed PIN attempts. If it has, Galileo returns 75 (allowable number of PIN tries exceeded) and pin: L (locked). (The failed PIN count will reset to zero after the time specified in PBTIM.) If the PIN has not been locked, Galileo compares the provided PIN to the hashed PIN that Galileo has on record. If the PINs do not match, Galileo returns 55 (incorrect PIN) and pin: F. If all checks are passed, the pin field contains Y (verified). Offline PIN Some implementations of EMV chips permit card readers to validate PINs without contacting the issuer. With offline PIN validation, the chip contains a PIN block (encrypted PIN) that the card reader compares to the PIN provided on the keypad. The card reader includes the result in the authorization request message. Galileo passes the summary of the result in the offline_pin field. This table shows which other fields will be populated according to the result. offline_pinMeaningOther fieldsYValidatedcardholder_verification_not_successful: falseFFailedcardholder_verification_not_successful: trueNNot presentis_emv: falseemv object not populatedEOffline PIN attempts exceededpin_try_limit_exceeded: truePIgnored, because the transaction amount is less than a specified thresholdNone The terminal_verification_results (TMV) object inside the emv object contains the results of the PIN verification. The raw field contains a value provided by the network, and the meaning of the value is different for each network. Galileo provides the interpretation of the raw field in the rest of the fields inside the TMV object. In most cases, the card reader can verify the PIN using the chip, but if the PIN has been recently changed, the reader needs to contact the issuer for verification. When the card reader is requesting online PIN verification from Galileo, then online_pin_entered: true. See Offline PINs in the PIN-Set Procedures guide for more information on changing offline PINs. CVV Galileo checks whether the CVV matches the hashed CVV in the Galileo system. There are three possible CVV values to match, depending on how the card information was acquired: CVV1 — Embedded in tracks 1 and 2 of a magnetic stripe, it verifies that merchants have the physical card in their possession for card-present transactions. When this CVV does not match, Galileo returns 05 (do not honor). CVV2 — Printed on a card, this three-digit number is used for card-not-present transactions. When this CVV does not match, Galileo returns N7 (CVV2 error) for Visa or 05 (do not honor) for Mastercard. CVV3 — This code is cryptographically generated by a contactless transaction and verified by the issuer. When this CVV does not match, Galileo returns 05 (do not honor) and arqc: F. 3-D Secure Some e-commerce sites add another layer of cardholder verification using the 3-D Secure protocol (3DS), which is a two-step authentication process that cardholders must pass at the time they attempt to make a purchase on a 3DS-enabled web site. The standard in general is facilitated by EMVco, and each card network has a branded implementation of 3DS: Visa — Visa Secure Mastercard — SecureCode Discover — ProtectBuy Galileo recommends that you obtain documentation from the networks to better understand how they implement 3DS. This table shows country-by-country requirements for 3DS as of October 2021. Countries with regulation requiring a service like 3DSCountries that strongly recommend having 3DSNo current requirements for 3DSAll European countriesAustraliaCanadaIndiaBrazilSingaporeBangladeshMalaysiaNigeriaSouth AfricaChinaUnited StatesColombiaMexico For 3DS to be successful, three entities must be participating in 3DS: The merchant The issuer The cardholder When a cardholder attempts to make a purchase on a 3DS-enabled site, the results of the authentication are passed in the authorization request, and Galileo includes them in the aav field and the ecommerce object. When the e-commerce site does not implement 3DS, is_ecommerce: false and the remaining fields in the ecommerce object are not sent. Galileo does not currently perform 3DS validation. You may integrate with a third-party 3DS provider, called an access control server (ACS), if you want to support 3DS, or you may use the networks' on-behalf services. The 3DS-related fields that Galileo relays in the Auth API webhook show the results of 3DS validation after it has been performed by the ACS or network. Galileo approves or denies transactions based on the validation results, and so these fields are provided for your information, not for decisioning. As you parse the ecommerce object, remember that some combinations of values result in a liability shift from the merchant to the issuer. Consult the documentation from each network to see which results trigger a liability shift. The AAVPV product parameter controls whether Galileo uses the validation results that it receives from the ACS or network when deciding whether to approve a transaction. Set this value to Y for Galileo to use the validation results. When this parameter is not set, Galileo does not use 3DS validation results for decisioning. See the reference material for the Auth API v2 or Auth API v3 for details on what each e-commerce field means. Transaction type validation Galileo checks product and account settings to determine whether the transaction type is permitted to the cardholder. When any of the following items is true, Galileo returns 57: ATM withdrawals are blocked by account feature 9 or PBLOK. Point-of-sale (POS) transactions are blocked by PBLOK. Recurring transactions are blocked by BLKRI. Non-mobile-wallet transactions are blocked by account feature 20. Card-present transactions (except mobile wallet) are blocked by account feature 21. Mobile wallet transactions are blocked by account feature 22. Card-not-present transactions are blocked by account feature 6. Cash transactions are blocked by product settings. Cashback transactions are blocked by CASHB. Cash advances are blocked by account feature 10. Cash and POS transactions are blocked in this country. International transactions are blocked by account feature 8. All but Mastercard. Transactions with this MCC are blocked. Card loads are not allowed by product settings. Suspected fraud (all but Visa, Mastercard and STAR). Mastercard only. Card is in status X (waiting for emboss), Y (ready to activate), B (blocked) or O (operations hold). Where there is an account feature blocking the transaction, you can call Set Account Feature to unblock the transaction type for that account. Where a product parameter or product settings block the transaction, you can ask Galileo to change the setting for the product. Account validation Galileo verifies that the account can support the transaction. Card and account status Galileo verifies that the card and account statuses are both N (normal, active). For Visa, if the card or account is in any status except N, Galileo returns 46 (closed account). For Mastercard, Galileo returns 78, 57 or 51, depending on the card status: Card statusResponse codeC (canceled)R (charged off)Z (canceled without refund)D (disabled)V (voided)W (waiting for payment)78 (invalid account)X (set to emboss)Y (shipped, ready to activate)B (blocked)O (operations hold)57 (transaction not permitted to cardholder)Q (delinquent)51 (insufficient funds) For lost or stolen cards, these are the response codes: Card statusResponse codeL (lost)A (lost card waiting for sufficient funds)Visa only. 46 (closed account)All others. 41 (lost card)S (stolen)Visa only. 46 (closed account)All others. 43 (stolen card, pick up) For all other networks, for any other account statuses besides N, S, or L, Galileo returns 05 (do not honor). Card frozen The ""frozen"" attribute of a card is independent of its status. An authorization request for a frozen card is always denied. Galileo returns 78 (card frozen) for Visa, 62 for Mastercard, or 57 (transaction not permitted) for all other networks. Expiry date For card-not-present transactions, the expiry date that the cardholder entered is in merchant_supplied_expiration_date. For card-present transactions the expiry data in the magnetic stripe is in track_expiration_date. Galileo checks the expiry date against the expiry date in the Galileo system to ensure that the values match. Galileo provides the date that it has on file in expiration_date. If the dates do not match, Galileo returns 54 (card expiration date mismatch). If the expiration date has passed, Galileo also returns 54. Sufficient funds If Galileo holds the account balance, Galileo checks the available funds in the cardholder account against the amount in trans_amount. The available funds do not include any holds, such as from previous unsettled authorizations. Galileo populates the available funds in the available_funds field in the amounts object. This value represents the account balance before the transaction is applied. If you hold the account balance, you must determine whether the account can support the amount in trans_amount, based on your records. If the account does not contain sufficient funds, the standard response code is 51 (insufficient funds). However, there are several ways to address insufficient funds without returning 51: Partial authorization — If the merchant accepts partial authorizations (partial_supported: true), you or Galileo can return the amount of the authorization in partial_amount with response code 10. Overdraft — If you have set up overdraft, your account settings determine whether an ATM withdrawal can use overdraft (ODATM) and also whether the overdraft funds are moved at the time of authorization or settlement (ODTOR). Real-time transfers — You move funds from a dedicated account into the cardholder account to cover the authorization amounts. Velocity limits Galileo checks whether the transaction violates velocity limits—whether the amount or number of transactions exceeds a threshold, for example. These velocity limits are determined at the time you set up your products. You can also arrange with Galileo to create account-level velocity controls (ALCs). (See About Account-Level Authorization Controls for more information.) If trans_amount violates an amount limit, Galileo returns 61 (exceeds withdrawal amount limit) or if a transaction-count limit is reached Galileo returns 65 (exceeds withdrawal frequency limit). Also see Overriding limits in the Authorization Controller API guide. Other checks These other checks validate characteristics of the transaction not included in the previous categories. Merchant validity According to your product settings you can prohibit transactions with certain merchant types (per MCC) or by merchant ID. For ATM withdrawals in specified countries you can prohibit transactions at certain times of day. You can also arrange with Galileo to create account-level merchant controls (ALCs). (See About Account-Level Authorization Controls for more information.) If the MCC or merchant ID is prohibited, Galileo returns 03 for Mastercard or 57 (transaction not permitted to cardholder) for all other networks. Country Galileo verifies that the transaction is taking place in a country that has not been blocked in your product settings. If the country has been blocked, Galileo returns 62 (card not valid in this region) for Visa or 05 (do not honor) for all other networks. Fraud risk Galileo compares the value that the network provides in risk_score with the value set in product parameters (BRSGE, BRSMC or BRSPU). If the risk score exceeds the threshold, Galileo returns 59 (suspected fraud) for Visa and STAR networks, 63 for Mastercard, or 57 for the other networks. Risk scores are not returned when the transaction is an advice, because the transaction has already been acted on by the network. If you are using Galileo's dynamic fraud rules engine, any rule violations are reported in the rules_denied and rules_warned fields, provided you have the RULAP product parameter set. When the rule violations are sufficient to deny a transaction, Galileo returns 59.Updated 7 days ago Table of Contents PAN validation Card validation AVS check PIN CVV 3-D Secure Transaction type validation Account validation Card and account status Card frozen Expiry date Sufficient funds Velocity limits Other checks Merchant validity Country Fraud risk "
86,docs.galileo-ft.com/pro/reference/api-reference-simulated-transaction-types,"Simulated Transaction Types The MTI column shows which MTI is generated by each transType value. The MTIs are visible in the Auth API in the mti field. Also see Message types in the Authorization Controller API guide for more information. Visa Use the values in this table when association: visa. TypeDescriptionMTI1Retail sale (default)02002Preauthorization01003Incremental preauthorization. Before passing this type, you must first create a preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.01004Completion. Before passing this type, you must first create a preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.02205Reversal. Before passing this type, you must first create a retail sale (transType: 1) or preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.04006Reversal advice. Before passing this type, you must first create a retail sale (transType: 1) or preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.04207Load02008Transfer02009Merchant credit012010Foreign authorization020011ATM withdrawal020012Foreign ATM withdrawal020013Balance inquiry020014EMV chip authorization010015EMV chip authorization with PIN010016Tokenization authorization020017Tokenization preauthorization. Populating latitudeAndLongitude is optional.010018Tokenization notification0620 Mastercard Use the values in this table when association: mc_auth. TypeDescriptionMTI1Retail sale (default)01002Preauthorization01003Completion advice. Before passing this type, you must first create a preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.01204Non-financial advice01205Load02006Reversal. Before passing this type, you must first create a retail sale (transType: 1) or preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId.04007Reversal advice. Before passing this type, you must first create a retail sale (transType: 1) or preauthorization (transType: 2) transaction. Use the auth_id from that transaction to populate originalAuthId04208Account status inquiry01009EMV chip authorization010010EMV chip authorization with PIN010011Tokenization authorization0100Table of Contents Visa Mastercard "
87,docs.galileo-ft.com/pro/reference/api-reference-events-api-email-addr-change,"email_addr_change Code — ECHG Event trigger — The email field is updated. Process — This process contains the event trigger: Update Account endpoint Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" email X New email address. Example: ""[email protected]"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ECHG"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""email_addr_change"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# email_addr_change example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""email"": ""[email protected]"", ""msg_event_id"": ""243693"", ""msg_id"": ""ECHG"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""email_addr_change"" } Table of Contents Fields Example "
88,docs.galileo-ft.com/pro/reference/post/resubmitfbenrollment,Resubmit Federal Benefit Enrollment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description529-01Enrollment not found529-02Invalid agencyType529-03Cardholder is already enrolled with this SSN in this benefit type529-04Failed to resubmit enrollment529-05Invalid recipientTypeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
89,docs.galileo-ft.com/pro/reference/api-reference-enrollment-statuses,"Enrollment Statuses Status codeDescription-01Card not issuable-02Customer already has this product issued-03Invalid instant issue card-04Load amount outside of load limits-05Could not create account-06Could not load card-07Primary account is invalid-08Secondary accounts cannot be added to secondary accounts-09Maximum number of secondary accounts exceeded-10ID type 2 is required as main ID for running CIP-11Account created, ID Validation failed-12An application with the same ID has already been submitted-14Success -- partial limit violation-15Success -- delayed payment-16Card is marked as fraudulent-17Card not allocated to your store for issuance-18Specified load from account number is invalid-19A load was attempted for a non-positive amount-20The prodId for the secondary account is not allowed "
90,docs.galileo-ft.com/pro/reference/api-reference-auth-api-about-auth-api,"About Auth API When Galileo receives an ISO 8583 authorization request from the network, it performs initial checks such as validating the PIN, verifying account status, and checking account balance. Galileo calculates the response code, converts the request into the Auth API webhook, and passes it to you so that you can make the final decision—whether to accept Galileo's verdict or override. For more information see the Authorization Controller API guide. Versions There are currently two supported versions of the Auth API: 2.0 and 3.0. Version 3 is a breaking change from version 2. See Differences between version 2 and version 3 in the Authorization Controller API guide. Security Use HTTPS for the Auth API webhook to ensure fundamental security is in place. Galileo uses JSON web token (JWT) for authenticating with the client's webhook. A shared secret is used for encoding and decoding the token. The payload will have the following arguments: iat — Issued-at time exp — Expiration time iss — galileo The times are expressed as Unix epoch time. The token is created using this Python code: Pythonimport jwt from datetime import datetime, timedelta payload = {  'exp': datetime.utcnow() + timedelta(seconds=5),  'iat': datetime.utcnow(),  'iss': 'galileo' } token = jwt.encode(payload, secret, algorithm='HS256') where secret is the shared secret. The token is placed in the Authorization header field. Security Example This is the header value for exp = 1534274886 and iat = 1534274881: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnYWxpbGVvIiwiaWF0IjoxNTM0Mjc0ODgxLCJleHAiOjE1MzQyNzQ4ODZ9.1xUk4iNFGWLo01MyJUHXRlyrNlzwPvDMSXpN38TrblU Paths You provide a base URL, hosted by a server in your system. Galileo invokes your webhook at the /Authorization endpoint. Examples These are some examples of how you use the Auth API. See Overrides in the Authorization Controller API guide for details. Overriding the response code Galileo receives an authorization request and plans to approve it (response_code: 00) because all validation checks passed and the account has sufficient funds. Galileo sends the Auth API webhook to you. You determine that the transaction amount is above a limit, so you return response_code: 61 (Exceeds amount limit), and the transaction is declined. When you maintain the balance: For your program, you may be the system of record for client accounts instead of Galileo. Galileo gets a balance inquiry, but because Galileo does not have the latest balance, Galileo invokes your Auth API webhook. You return the balance available in the available_balance field and Galileo relays that balance to the network. Client initiates transfer Galileo receives an authorization request and the cardholder has insufficient funds, so Galileo calculates response_code: 51. Galileo sends you the Auth API webhook. You see that the account has insufficient funds, so you initiate a transfer by populating the transfer_prn and transfer_amount. (This must be set up specially at Galileo before using.) After the transfer, the cardholder has sufficient funds, and Galileo approves the request. For examples of webhook code, see the Auth API v3 webhook examples in the Authorization Controller API guide.Table of Contents Versions Security Security Example Paths Examples Overriding the response code When you maintain the balance: Client initiates transfer "
91,docs.galileo-ft.com/pro/reference/post/setaccountlevelauthcontrol,"Set Account-Level Auth Control When updating an existing account-level velocity control, follow these rules: Positive value — Set the control to this value Blank — Do not change the value Null — Nullify the existing value See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description599-01Failure, generic error, return values are invalid.599-02Failure, control_id does not exist.599-03Failure, prod_id is not configured to use specified control_id.599-04Failure, an optional parameter is required for update/insert599-05Failure, start_date is later than end_dateLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
92,docs.galileo-ft.com/instant/reference/fee-type,Fee Type TypeDescriptioncard_replacementFee to print and mail a card replacementexpress_shippingFee to expedite card shipmentdomestic_atmFee for using an ATM in the USinternational_atmFee for using an ATM outside of the USdomestic_cashbackFee for receiving cash back in the USinternational_cashbackFee for receiving cash back outside of the US 
93,docs.galileo-ft.com/instant/docs/creating-a-cardholder,"Creating a Cardholder The first step when on-boarding a new customer is to create a cardholder. When you create a cardholder, Galileo automatically creates a Spending Account associated with the cardholder and prints and mails a card to the customer. Keep in mind, a cardholder must be 18 years old or older, reside in the U.S. with a valid U.S. address, and have a valid SSN or ITIN. CIP All banks are required to have a Customer Identification Program (CIP) to ensure they know the identity of each customer. Banks fulfill this requirement by: Obtaining identifying information from the customer Verifying the information Because your software acts as the front end to the bank, you are required to collect the identifying information from your cardholder. The required parameters in the API request to create a cardholder designate the identifying information you must collect. See About Cardholders for more information about the required parameters. Galileo works with a third-party identity validation platform to verify the identifying information. The verification happens in real-time, and you will know from the API response whether the verification is successful. If the identification is unsuccessful, the customer is not eligible to enroll. It is possible to simulate CIP failure in the Sandbox by passing Failcip (case insensitive) as the last name in the API request to create a cardholder. Agreements There are several agreements your customer must agree to before the cardholder may be created. During the on-boarding process, each applicable agreement must be shown to the cardholder and the cardholder must explicitly agree to each by checking a box that indicates they have read and accept the agreement. In the API request to create a cardholder, include the agreement_id of each agreement that has been agreed to in the agreements parameter. For a more detailed explanation about agreements, see the Cardholder Agreements Guide. Account creation fee There is a $5 fee to create an account. Because a Spending Account is created automatically and concurrently when the cardholder is created, you are assessed a $5 fee for each new cardholder. The fee is deducted automatically from your Master Funds Account. If the balance of your Master Funds Account is less than $5, the API request to create a cardholder results in an 'insufficient_funding_account_funds' error. If the cardholder fails CIP, the account is created with a failed_cip status and the account creation fee is charged.Updated over 2 years ago Table of Contents CIP Agreements Account creation fee "
94,docs.galileo-ft.com/pro/docs/about-galileo-buy-now-pay-later,"About Galileo Buy Now, Pay Later With Galileo’s new Buy Now, Pay Later (BNPL) solution powered by Mastercard, you can offer your customers flexible short-term installment loans (up to $500) to help pay off large and unexpected purchases. This allows customers to receive a loan directly from their bank, rather than using a third-party service at point of sale or adding to their credit card debt. You have strong flexibility in how you design your BNPL offering. Galileo works directly with you to determine the varying terms, including the number of installments, frequency of repayment, fees, etc. that meet your business requirements. Here is a brief overview of how BNPL works: You pre-approve a customer to make a one-time purchase using your BNPL service, with a minimum purchase amount of $50. You present an offer within your application. Upon customer acceptance of the offer, you issue a single-use virtual card which is provisioned to the customer’s mobile wallet. The customer makes a purchase using the single-use virtual card. When the customer uses the card, it is removed from their wallet and is unusable by the customer. You create a loan that the cardholder will pay off in installments. Use case A single parent unexpectedly needs to replace their dishwasher at home. They have not budgeted for a significant purchase and are weary of adding to their credit card debt. Instead, they apply and are approved for a single purchase of up to $500 through their bank’s BNPL service. This allows the family to buy the new dishwasher today and make payments on the purchase amount in installments. Benefits Galileo Buy Now, Pay Later can benefit your business in the following ways: Easier entry into the BNPL market — Integrate BNPL services into your existing products using Galileo’s Program API. No merchant network required — By default, the single-use virtual card issued by Mastercard is accepted where Mastercard is accepted unless a merchant has opted out. Control over underwriting — You can make underwriting decisions based on your own customer knowledge and risk tolerance, rather than relying on external BNPL providers. Loan management — Galileo manages your installments loans and offers the flexibility to add incremental pricing and edit the loan frequency and duration. What Galileo provides Galileo provides a platform for you to offer an on-demand BNPL solution to your customers. Galileo has built two key products to offer a complete BNPL offering: Single-use virtual cards — Instant issuance of a virtual card powered by Mastercard Installments program. See Setup for Single-Use Virtual Card for more details. 📘NoteThe single-use virtual card can be offered as a standalone solution if you already have loan servicing capabilities. Installment loans — Loan creation with payment schedule, repaid in installments. See Setup for Installment Loans for more details. Additionally, Galileo also provides reporting and controls for you to monitor BNPL activity. For single-use virtual card, Galileo offers: Card transaction reporting — Posted transactions are reported daily via RDF. Real-time events reporting — Galileo reports posted and pending card transactions in real-time via the Events API. Authorization controls — You may participate in authorization decisions via the Auth API. For our installment loans product, Galileo offers two daily reporting file exports: Daily Loan Status — List of the current loans, subproducts, statuses, and installment due dates. Daily Transaction — Details on daily transactions related to loans. Updated 3 months ago What’s NextSetup for Single-Use Virtual CardTable of Contents Use case Benefits What Galileo provides "
95,docs.galileo-ft.com/pro/docs/,"About the API Documentation Welcome to the Galileo Pro API documentation! This site contains guides on basic Galileo concepts and instructions for using the endpoints. We're just getting started on the guides—there are many more to come. Here are some links to help you get familiar with the basics: Beginner’s Guide to Open APIs in Banking — A less technical overview of banking APIs. Environments — An overview of environments for testing and development. Quickstart — Connect to the Sandbox environment and send a test call to the API. Build a Sample App — Create a sample account, load and transfer funds, activate a card, simulate a transaction, and freeze the account. Postman Setup — Set up Galileo's collection in Postman. For the APIs themselves, see our API Reference. Updated 2 months ago "
96,docs.galileo-ft.com/instant/reference/occupation,"Occupation NameDescriptionaccountingAccountant / BookkeeperartArtist / Actor / MusicianbankingBanking / BankerclergyClergy / Religious AffiliationconstructionConstruction / Contracting / BuildingconsultingConsultantmedicineDoctor / Nurse / Healthcare Adminscience_engineeringEngineer / Scientist / Lab TechentertainmentEntertainmentagricultureFarmer / Agriculture / Food ProductiongovernmentGovernment Employee / State / Federal / LocalhomemakerHomemakerhospitalityHotel Operator / Travel Agent / Tour Companyimport_exportImport-Export Business / Freight Forwarderinformation_technologyInformation TechnologylawLawyer / Attorney / ParalegalmanufacturingLight or Heavy Manufacturing / Production / AssemblymarketingMarketing / AdvertisingnonprofitNonprofit / Political Campaign Professionalair_travelPilot / Flight Attendant / Airport Employeereal_estateReal Estate Agent / Title AgentretailRetail / SalesretiredRetiredstudentStudenteducationTeacher / Education / School AdmintransportationTransportation Logistics / Truck, Bus, Limo or Cab DriverunemployedUnemployedotherOtherdecline_to_answerDecline to answer "
97,docs.galileo-ft.com/pro/reference/dispute/post/getdocrequirements,"Get Doc Requirements Use the Get Doc Requirements endpoint to retrieve any required documents for the account holder to fill out, depending on the nature of the dispute. If there is a document to fill out, this endpoint returns a templateDocumentStream of a PDF form for the account holder to fill out. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1508-4Invalid caseId or caseId returned no result1508-5Invalid Request:1508-13caseId references a case that is currently locked1508-14Invalid request message-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
98,docs.galileo-ft.com/instant/docs/simulating-card-transactions,"Simulating Card Transactions In Sandbox, it's possible to simulate Card Transactions for testing purposes. Authorization An authorization may be simulated by sending a POST request to the Transactions endpoint. The amount is the purchase amount, not negated as it is in the Transaction Object. The merchant_name comes back in the Transaction Object as description. Settlement A settlement may be simulated by sending a PUT request to the Transactions endpoint, using the transaction_id returned from the POST request above. The settlement amount may be different from the authorization amount, e.g., if a cardholder spends $100 at a restaurant and tips $20, the authorization is for $100 and the settlement is for $120.Updated over 2 years ago Table of Contents Authorization Settlement "
99,docs.galileo-ft.com/pro/reference/post/getauthhistory,Get Authorization History See Record-Set Pagination for instructions on using the paging parameters. Open the Recipe below to see a response example.RecipesGet Authorization History responseOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
100,docs.galileo-ft.com/pro/reference/transaction-events-webhook,"Transaction Events Webhook Requests The event data (described in the index pages that follow) will be in the body of the request, as JSON or form data. JSON example (application/json): JSON{ ""type"": ""ach_credit_fail"", ""account_id"": ""2011"", ""amount"": ""45.00"", ""pmt_ref_no"": ""155200002022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""return_code"": ""R01"", ""source"": ""Chase Bank"", ""source_id"": ""6426460"", ""timestamp"": ""2019-10-09 11:20:33 MST"" } Form example (application/x-www-form-urlencoded): type=ach_credit_fail&account_id=2011&amount=45&pmt_ref_no=155200002022&prod_id=1701&prog_id=305&return_code=R01&source=Chase+Bank&source_id=6426460&timestamp=2019-10-09+11%3A20%3A33+MST Responses JSON example: JSON{ ""success_code"": ""0"" } XML responses should use the webhook name (Transaction) as the envelope. Example: XML<Transaction><success_code>0</success_code></Transaction> LanguageShellNodeRubyPHPPython "
101,docs.galileo-ft.com/pro/reference/post/setaccountgrouprelationships,Set Account Group Relationships Use the Set Account Group Relationships endpoint to associate one or more accounts with a group. This endpoint can update up to 100 accounts in one request. You can also use this endpoint to reassign an account to a different group without first deleting the existing relationship. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description618-01Invalid group ID. The groupId does not exist in the core. Verify that groupId is correct by calling Get Group Hierarchy for the root group.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
102,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-opt-out,"overdraft_opt_out Code — ODOT Event trigger — Account feature 17 for the core account changes to E or I. Processes — These processes contain the event trigger: Set Account Feature endpoint Automated process that deactivates overdraft accounts after the number of days in ODPDN have passed without outstanding overdraft balance being paid off. Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODOT"" od_f_open_to_buy Available overdraft balance minus pending fees. Example: ""120.00"" od_open_to_buy Available overdraft balance. Example: ""140.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_opt_out"" Example JSON# overdraft_opt_out example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODOT"", ""od_f_open_to_buy"": ""120.00"", ""od_open_to_buy"": ""140.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_opt_out"" } Table of Contents Fields Example "
103,docs.galileo-ft.com/pro/reference/api-reference-events-api-ach-return,"ach_return This event is triggered any time an outgoing ACH transaction is returned. When internal processes detect that a returned transaction is a credit (moving funds into the customer account), the FACH: ach_credit_return event is also triggered. Code — ACRT Event trigger — Galileo finds the returned transaction in the Nacha file. Process — This process contains the event trigger: Galileo receives a Nacha file. Fields All fields are strings. Your field names may vary. Field Required Description ach_acct_id X Customer ACH account number. Example: ""999101538205"" ach_proc_id X Identifier in the ACH returns table. Example: ""333811"" ach_trans_id Unique Galileo-generated identifier for an ACH transaction. Example: ""7971383"" act_type For this message type the value is always ""AD"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" deb_cred_ind Whether the ACH transaction would have debited or credited the recipient account: ""C"" (credited) or ""D"" (debited). description Description of the ACH transaction. Example: ""Transfer from external account"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ACRT"" open_to_buy The available balance to spend. Example: ""500.00"" otype See the curated list of otypes for your program from Galileo. Example: ""AC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" receiver_name Name on the recipient account. Example: `""Jamal Williams"" return_code See ACH Return Codes for possible values. Example: ""R01"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""ach_return"" Example JSON# ach_return example: { ""ach_acct_id"": ""999101538205"", ""ach_proc_id"": ""333811"", ""ach_trans_id"": ""7971383"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""description"": ""Transfer from external account"", ""msg_event_id"": ""243693"", ""msg_id"": ""ACRT"", ""open_to_buy"": ""500.00"", ""otype"": ""AC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""receiver_name"": ""Jamal Williams"", ""return_code"": ""R01"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""ach_return"" } Table of Contents Fields Example "
105,docs.galileo-ft.com/pro/docs/overdraft-workflows,"Overdraft Workflows Transaction authorization and settlement using overdraft funds This flowchart illustrates authorization and settlement for a card transaction that uses overdraft funds. An account holder makes a purchase over card network rails and the card network sends an authorization request. The DDA has insufficient funds to cover the purchase, but the account is linked to an overdraft account. Galileo determines whether the authorization request is eligible to draw from the overdraft account. Eligibility depends on whether the transaction is a qualifying purchase and if there are sufficient funds available in the overdraft account line of credit. If the authorization is not eligible for overdraft funds, Galileo denies the authorization request and sends response code 51 to the card network. If the authorization is eligible for overdraft funds, Galileo places a hold for the authorized amount on the overdraft account. a. Galileo sends the BAUT: auth event and the ODAA: overdraft_authorization event. b. If this is the first time the DDA has drawn on the overdraft account since the overdraft account was fully repaid, Galileo sends the ODNB: overdraft_negative_balance event. c. If the authorization exceeds de minimis and triggers a grace period for fee repayment, Galileo sends the ODGP: overdraft_start_grace_period event. The card network sends a settlement batch file. Galileo backs out the authorization hold on the primary account and posts the overdraft funds to the primary account, bringing the DDA balance to 0. Galileo sends the SETL: setl event. Overdraft fees An overdraft fee is usually charged when a primary account draws from its overdraft account, with some exceptions. This flowchart illustrates the process to determine when overdraft fees are charged to an account. An account holder makes a purchase with insufficient funds in the primary account. The DDA draws on its overdraft account. Galileo determines if the amount owed to the overdraft account exceeds the de minimis threshold. If the overdraft amount does not exceed de minimis, Galileo does not post an overdraft fee. If the amount owed to the overdraft account exceeds de minimis, Galileo determines if an overdraft grace period is in effect on the amount owed. If a grace period is in effect, Galileo does not apply an overdraft fee. Galileo will reevaluate the fee when the grace period ends. If a grace period is not in effect Galileo determines if the overdraft fee would exceed the fee cap. If the overdraft fee would exceed the fee cap, Galileo does not post the overdraft fee, but starts the process to suspend the overdraft account. Galileo sends the ODOT: overdraft_opt_out and the ODSC: overdraft_status_change events. If the overdraft fee does not exceed the fee cap, Galileo posts the overdraft fee to the primary account, driving the account balance negative. Galileo sends the BFEE: fee event. 📘NoteOverdraft fees do not trigger repayment. The DDA balance will remain negative until the overdraft amount is paid. Overdraft repayment This flowchart illustrates the process to repay funds owed on an overdraft account. A payment is made to a DDA that is linked to an overdraft account. Galileo sends the BPMT: pmt event. If funds are not owed on the overdraft account, the full payment is posted to the DDA balance after any fees are paid. If funds are owed on the overdraft account once settlement occurs: a. The payment is first posted to the overdraft balance. b. The remaining amount is posted to the DDA after any fees are paid. Charge-off When an overdraft account remains unpaid for a specified period (usually 35 days), a process to transfer funds and charge-off the account is triggered. This flowchart illustrates a possible configuration for the charge-off process. An overdraft account remains unpaid for the number of days set by ODPDN (typically 35 days). The owed funds are moved out of the overdraft account and into the DDA. The total amount owed is now the negative primary account balance combined with the overdraft line of credit consumed (configured with ODPAA). The primary account and overdraft account are set to status: R (charge-off) (configured with ODMOB). Account feature 17 (overdraft eligibility or participation) is set to I (ineligible). The account holder can no longer use the overdraft account (configured with ODOBI). Galileo sends the ODOT: overdraft_opt_out event. Updated about 1 year ago Table of Contents Transaction authorization and settlement using overdraft funds Overdraft fees Overdraft repayment Charge-off "
106,docs.galileo-ft.com/pro/reference/post/recoverchargedoffaccount,Recover Charged-Off Account The table below lists status codes that apply to this specific endpoint. Status CodeCode Description597-01The account was not in status: R (charged off).597-02There was no outstanding balance for the charged-off account.597-03chargeOffRecoveryAmount is greater than the net charged-off amount.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
107,docs.galileo-ft.com/pro/docs/about-rdfs-and-cdfs,"About RDFs and CDFs The raw data files (RDFs) and custom data files (CDFs) are text files that you receive from Galileo once per day. These files contain low-level extracts of the prior day’s activity from Galileo's databases. The files are securely delivered each day. With the raw data you can build your own data store to compare with your production database, build statements and reports, and provide your customers with long-term transaction histories. The RDFs comprise a standard suite that is offered as a unit: Customer Master — A list of primary accounts, their balances, and customer information Account Card — A list of cards issued Authorized Transactions — Authorization activity Posted Transactions — Settlements, payments, adjustments, and fees Lookup — A lookup file for the other RDFs See Standard RDF Reference for a list of the fields for each file. 📘NoteGalileo now offers a suite of secondary RDFs that contain all possible fields for each of the standard RDFs. All new clients (beginning Feb 2023) will receive this secondary RDF suite, and existing clients can request to receive the secondary suite instead of the standard suite. You can also request one or more CDFs: Chargebacks and Disputes — Enhanced chargeback and dispute data that is similar to the Dispute Tracker Log in gAnalytics. Overdraft — Enhanced overdraft data beyond what the Posted Transactions RDF shows Authorization Expiries — Unsettled authorizations that have expired from the authorization database Early ACH — ACH details as well as number of days early the transaction posted ACH Returns — Details on returned ACH transactions Incoming ACH — Details on incoming ACH transactions Settlement — Similar to the Settlements - Bin Summary report in gAnalytics, this data looks back one day for Visa, Mastercard and Discover, three days for Maestro/Cirrus, and two days for Pulse, Allpoint and Star. In contrast, the gAnalytics report looks back one day for all networks. Mastercard SAFE Report — The SAFE report that was sent to Mastercard over the last seven days Fleet Data — Data specific to fleet cards such as vehicle numbers and fuel purchases. Other data — Any specialty data sets that Galileo can set up for you. See CDF Reference for a list of the fields for each file. 📘NoteRDFs and CDFs are available in Production but not in CV. Galileo has sample RDFs that you can see for example values and formats. CDF samples are not available. In addition, you can consult the card transaction scenarios to see examples of how different transaction types are represented in the RDFs. Accessing the files The RDFs and CDFs are generated early every morning and contain activity from the previous calendar day, which is from 00:00:00 (midnight) to 23:59:59 Galileo system time. Because many different files are generated every day, availability times are staggered throughout the morning. Consult with Galileo for the times when you can expect your files to be ready. On days when maintenance upgrades are performed, the availability time may be delayed. In general, CDFs are available a few hours after the RDFs. Galileo uses Secure File Transfer Protocol (SFTP) to deliver RDFs and CDFs. You can arrange to retrieve the files from Galileo's SFTP server or Galileo can push the files to your SFTP server. Coordinate with Galileo to get an account name and password. RDF and CDF filenames have this format. The date represents the day when the file was generated, so a file that is dated 20231010 contains data from October 9, 2023: accountcard_yyyymmdd.txt authorizedtransactions_yyyymmdd.txt customermasterfile_yyyymmdd.txt lookup_yyyymmdd.txt postedtransactions_yyyymmdd.txt accountcard_yyyymmdd.csv authorizedtransactions_yyyymmdd.csv customermasterfile_yyyymmdd.csv lookup_yyyymmdd.csv postedtransactions_yyyymmdd.csv Dispute_Chargeback_Report_&%m%d.csv expired_auth_%Y%m%d.csv early_ach_report_%Y%m%d.csv ach_returns_report_%Y%m%d.csv od_details_DDA_%Y%m%d.csv settlement_%Y%m%d.csv incoming_ach_report_%Y%m%d.csv mc_safe_<ica>%Y%m%d.csv fleetfile_%Y%m%d.csv The files are PGP-encrypted using your public PGP key. The standard RDFs are fixed-width files, which means that each field takes a fixed amount of space, including trailing spaces to pad out the field. Secondary RDFs and CDFs are comma-separated value files (CSVs). Galileo will provide you with a document that specifies the layouts for your program, including field sizes and data types. You can also access the latest version of your RDF layouts from the gAnalytics (Galileo Analytics) tool. Only the standard RDF layouts are available in gAnalytics. If there is no activity in your program during a calendar day, you will receive files that contain headers and footers but no records. If there is a system or connectivity failure that prevents the files from being delivered at the usual time, the files will be delivered as soon as it is possible instead of waiting until the next day. PCI compliance Some of the fields contain PCI-sensitive information. If you are PCI compliant, you have the option of requesting that these values be masked or replaced by spaces. If you are not PCI-compliant, these values will be replaced by spaces: CARD NUMBER (PAN) ID or ID 2, when ID TYPE or ID TYPE 2 is SSN (Social Security number) DATE OF BIRTH Building a datastore Galileo strongly recommends that you use the RDFs to create a datastore of transactions and customer records that is separate from the production database that you create from the Events API or Program API. (For more information on building a production database see the Transaction History guide.) Use the RDF-based datastore to: Ensure that there are no missing or incorrect transactions in your production database. Where there are discrepancies between the RDFs and your records, you should consider the RDFs to be authoritative. Run reports and perform data analysis, where large queries would overly tax your live production environment. Produce longer-term transaction histories in your app or on your website instead of using costly endpoint calls to Get Transaction History or other Program API endpoints. Use the CDF-based datastore to add details to the transactions in the Posted Transactions RDF, such as overdraft, ACH and expired authorizations. Because RDFs and CDFs are daily differential files instead of complete histories, you can read the files into your own data histories every day, which allows you to maintain a complete history by stitching together each day’s changes. Keep in mind that when you are the system of record, the Galileo system may not have all of your transactions, depending on which transactions you report to Galileo. For example, Galileo may not have your card loads or other deposits. Performing queries across tables With each RDF in its own table you can perform complex queries. If you need to join two RDF tables in a query, join on these two fields: UNIQUE PROGRAM ID GALILEO ACCOUNT ID When joining CDF-based tables, select fields that uniquely identify the account or transaction: auth_id + network_code uniquely identifies card transactions pmt_ref_no uniquely identifies an account bal_id uniquely identifies balances, though you should keep in mind that multiple accounts can transact on the same balance Building statements See Creating Statements from the RDFs for instructions on using your RDF datastore to build customized statements for your customers. Field descriptions Consult RDF Reference, Secondary RDF Reference, or CDF Reference for individual field descriptions as well as other details about each file.Updated 29 days ago Table of Contents Accessing the files PCI compliance Building a datastore Performing queries across tables Building statements Field descriptions "
108,docs.galileo-ft.com/pro/page/scenario-8-partial-reversal-on-preauthorization,"Scenario 8: Partial Reversal on Preauthorization << Back to the index A debit cardholder goes to an agency to rent a car. The agency obtains a $500 preauthorization. The next day, the cardholder returns the car, and the bill comes to $60. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network is Mastercard Banknet. Mastercard does not link the reversal to the original authorization with an identifier. Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –500.00. Galileo approves the request and places a 500.00 hold on the account. The available balance is now 500.00. Galileo sends a BAUT: auth webhook. When the car is returned, Mastercard sends a pre-authorization reversal for 440.00. Galileo releases 440.00 from the hold. The available balance is now 940.00. Galileo sends an AAAU: auth webhook. Mastercard sends a batch file with the –60.00 transaction. Galileo expires the reversal and reverses out the 440.00 credit from the account. Galileo sends a BEXR: auth_exp_reversal webhook, and then Galileo backs out the 500.00 hold and posts –60.00 to the account. The available balance is still 940.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthPreauth500.0055880100020210413:074419MSTReversalAuth440.007711050020210414:042833MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth500558805002021-04-13 07:44:19 MSTAAAUauth440771109402021-04-14 04:28:33 MSTBEXRauth_exp_reversal440771105002021-04-15 09:03:47 MSTSETLsetl60558809402021-04-15 09:07:10 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME500.00-55885004132021 07:44:19440.00+77115558804142021 04:28:33 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE60.00-5588SE5558804132021 07:44:1904152021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. This table shows both the authorization and the reversal; however, in Production you would get only the most recent transaction. amtauth_idoriginal_auth_idtypelocal_amttimestamp-50055880L0000000500002021-04-13 07:44:1944077110R0000000440002021-04-14 04:28:33 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-6055880SE52021-04-13 07:44:192021-04-15 09:07:10 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-50055880AUL5588500Y2021-04-13 07:44:192021-04-13 07:44:1944077110AUR7711940Y2021-04-14 04:28:332021-04-14 04:28:33-440None0EXR7711500NoneNone2021-04-15 09:03:47500None0BO555881000NoneNone2021-04-15 09:07:10-6055880SE55588940Y2021-04-13 07:44:192021-04-15 09:07:10 "
109,docs.galileo-ft.com/instant/reference/income-amount,Income Amount NameDescriptionu50kUnder $50ku100k$50k - $100ku150k$100k - $150ku200k$150k - $200ko200kOver $200kdecline_to_answerDecline to answer 
110,docs.galileo-ft.com/pro/page/real-time-funding-transaction-examples,"Real-Time Funding Transaction Examples These examples show the entries that are written to the ledger for different transaction types. The tables combine the activity for both the RTF funding and RTF spending accounts. For all examples the following is true: 3333333 — PRN of the RTF funding account 7777777 — PRN of the RTF spending account The source_id for all adjustments refers to the adj_id in the adjustments table. The RTF funding account contains 1000.00 as a beginning balance. The RTF spending account contains 0.00 as a beginning balance. Examples Conventional purchase Reversal without settlement Reversal with settlement Merchant credit (Maestro) Merchant credit (Mastercard credit) Gas pump Incremental authorization Partial reversal on authorization Force post Incremental clearing Conventional purchase A Mastercard cardholder makes a $35 purchase on 13 Jul 2023 at 9:00 am. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-07-13 09:00:00ADFY-3533333334445553336669652023-07-13 09:00:00ADSY357777777444555333667352023-07-13 09:00:00AUA-35777777744455544455502023-07-15 07:31:22BO5357777777None444555352023-07-15 07:31:22SE5-3577777774445554445550 The top row shows the transfer of funds out of the RTF funding account. The source_id refers to the entry in the adjustments table (adj_id). The second row shows the transfer of funds into the RTF spending account. The third row shows the approved authorization amount. A 35.00 hold is placed on the RTF spending account, so the available balance is 0.00. Between the time that the 35.00 is moved into the RTF spending account and the hold is placed, the amount is locked, so the 35.00 cannot be spent by another process. The fourth and fifth rows show the settlement time, when the authorization hold is backed out and the settlement is posted to the RTF spending account. For instructions on simulating this type of transaction see Perform transactions in Testing Real-Time Funding in CV. Reversal without settlement The cardholder makes a $45 purchase on 12 Aug 2023 at 8:00 pm, and it is reversed an hour later. The reversal happens before the transaction clears, so there is no settlement. The network is Visa. Most authorization reversals follow this pattern. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-08-23 20:00:00ADFY-4533333333330009993339552023-08-23 20:00:00ADSY457777777333000999334452023-08-23 20:00:00VIA-45777777733300033300002023-08-23 21:00:00VIR457777777333111333111452023-08-23 21:00:00ADSZ-45777777733311199944402023-08-23 21:00:00ADFZ45333333333311199944510002023-08-30 05:00:00VXA457777777333000333000452023-08-30 05:00:00VXR-4577777773331113331110 The first two rows show the transfer from the RTF funding account to the RTF spending account. The third row shows the approved authorization amount. A 45.00 hold is placed on the RTF spending account, so the available balance is 0.00. The fourth row shows the reversal an hour later. Galileo reverses out the 45.00 hold, so the available balance is 45.00. For this transaction, the prior_id (reversal ID) would be 333000. The fifth and sixth rows show that the 45.00 is immediately transferred back to the RTF funding account. The seventh and eighth rows show the expiry of the authorization as well as the reversal seven days later. For instructions on simulating this type of transaction see Authorization reversal in Simulating Card Transactions. Reversal with settlement The cardholder makes a $45 purchase on 12 Aug 2023 at 8:00 pm, and it is reversed an hour later. The network sends the reversal in the settlement file. The network is Visa. An authorization reversal followed by a settlement is not a common event. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-08-23 20:00:00ADFY-4533333333330009993339552023-08-23 20:00:00ADSY457777777333000999334452023-08-23 20:00:00VIA-45777777733300033300002023-08-23 21:00:00VIR457777777333111333111452023-08-23 21:00:00ADSZ-45777777733311199944402023-08-23 21:00:00ADFZ45333333333311199944510002023-08-26 05:00:00VSA457777777333000333000452023-08-26 05:00:00VXR-4577777773331113331110 The first two rows show the transfer from the RTF funding account to the RTF spending account. The third row shows the approved authorization amount. A 45.00 hold is placed on the RTF spending account, so the available balance is 0.00. The fourth row shows the reversal an hour later. Galileo reverses out the 45.00 hold, so the available balance is 45.00. For this transaction, the prior_id (reversal ID) would be 333000. The fifth and sixth rows show that the 45.00 is immediately transferred back to the RTF funding account. The seventh row shows the settlement from the daily batch file, which arrives before the authorization would have expired. The settlement triggers the expiration of the reversal, in the eighth row. Merchant credit (Maestro) The cardholder makes a $100 purchase on 3 Nov 2023 at 11:00 am. A week later, the cardholder returns the item for a full refund. The transaction settled before the item was returned. The network is Mastercard Maestro (debit). A Visa merchant credit (credit or debit network) follows the same process. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-11-03 11:00:00ADFY-10033333335552222223339002023-11-03 11:00:00ADSY10077777775552222223341002023-11-03 11:00:00DBA-100777777755522255522202023-11-05 06:30:00BDA1007777777None5552221002023-11-05 06:30:00SDA-100777777755522255522202023-11-10 14:00:00DBZ100777777755533355533302023-11-12 06:00:00DBZ10077777775553335553331002023-11-12 06:00:00BDZ-1007777777None55533302023-11-12 06:00:00SDZ10077777775553335553331002023-11-12 06:00:00ADSZ-100777777755533322244402023-11-12 06:00:00ADFZ10033333335553332224451000 The first two rows show the transfer from the RTF funding account to the RTF spending account. The third row shows the approved authorization amount. A 100.00 hold is placed on the account, so the available balance is 0.00. The fourth and fifth rows show the transaction being backed out and settled. The sixth row shows the advice for the merchant credit. However, the merchant credit is not posted to the account at this time. The seventh, eighth, and ninth rows show the arrival of the merchant credit in the batch settlement file. Galileo creates a new authorization and backout entry before posting the credit. The tenth and eleventh rows show the 100.00 being moved immediately back into the RTF funding account. Merchant credit (Mastercard credit) This is exactly the same scenario as above only using Mastercard Banknet (credit). Galileo processes Mastercard Banknet merchant credits as adjustments. The cardholder makes a $100 purchase on 3 Nov 2023 at 11:00 am. A week later, the cardholder returns the item for a full refund. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-11-03 11:00:00ADFY-10033333335554442223339002023-11-03 11:00:00ADSY10077777775554442223341002023-11-03 11:00:00AUA-100777777755544455544402023-11-05 06:30:00BO51007777777None5554441002023-11-05 06:30:00SE5-100777777755544455544402023-11-10 14:00:00ADC1007777777None5556661002023-11-10 14:00:00ADSZ-100777777755566622244402023-11-10 14:00:00ADFZ10033333335556662224451000 The first two rows show the transfer from the RTF funding account to the RTF spending account. The third row shows the approved authorization amount. A 100.00 hold is placed on the RTF spending account, so the available balance is 0.00. The fourth and fifth rows show the transaction being backed out and settled. The sixth row shows the merchant credit, which arrived at Galileo in the batch settlement file that Mastercard sent Galileo. Galileo processes the merchant credit as an adjustment. The seventh and eighth rows show the credit being moved out of the RTF spending account back to the RTF funding account. Gas pump The cardholder dispenses $50 worth of gas at a gas pump on 3 Jul 2023 at 10:00 am. There is a $75 upcharge for gas purchases. The network is Mastercard Maestro. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-07-03 10:00:00ADFY-7533333338885552221119252023-07-03 10:00:00ADSY757777777888555222112752023-07-03 10:00:00DBL-75777777788855588855502023-07-03 10:03:00PBPB757777777None888555752023-07-03 10:03:00SDC-507777777888777888777252023-07-03 10:03:00ADSY-25777777788877722222202023-07-03 10:03:00ADFY2533333338887772222239502023-07-06 06:00:00BDA507777777None888777502023-07-06 06:00:00SDA-5077777778887778887770 The first and second rows show the amount of the preauthorization being moved from the RFT funding account into the RTF spending account. The third row shows the approved authorization amount. A 75.00 hold is placed on the RTF spending account, so the available balance is again 0.00. The fourth and fifth rows show the preauthorization hold being backed out and replaced by the –50.00 completion. Galileo replaces the 75.00 hold with a 50.00 hold, leaving 25.00 in the RTF spending account. The sixth and seventh rows show the 25.00 being moved immediately from the RTF spending account back into the RTF funding account. The trans_codes are ADSY/ADFY because completions arrive at Galileo through the authorization stream. The eighth and ninth rows show the 50.00 completion hold being backed out and settled. For instructions on simulating this type of transaction see Five-step sequence in Simulating Card Transactions. Incremental authorization A cardholder calls a ride-share service through its app, and the cost of the proposed destination is $25. The app authorizes the transaction at 9:00 am. After arriving at the first destination 20 minutes later, the cardholder requests a second destination for $15, and then after arriving at the second destination 30 minutes later, requests a third, for $10. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-07-07 09:00:00ADFY-2533333335551114440009752023-07-07 09:00:00ADSY257777777555111444001252023-07-07 09:00:00VIA-25777777755511155511102023-07-07 09:20:00PVPV257777777None555111252023-07-07 09:20:00ADFY-1533333335552224440109602023-07-07 09:20:00ADSY157777777555222444011402023-07-07 09:20:00VIA-40777777755522255522202023-07-07 09:50:00PVPV407777777None555222402023-07-07 09:50:00ADFY-1033333335553334440209502023-07-07 09:50:00ADSY107777777555333444021502023-07-07 09:50:00VIA-50777777755533355533302023-07-09 05:00:00BVA507777777None555333502023-07-09 05:00:00VSA-5077777775553335553330 The first and second rows show the amount of the authorization being moved from the RFT funding account into the RTF spending account. The third row shows the approved authorization amount. A 25.00 hold is placed on the RTF spending account, so the available balance is again 0.00. The fourth row shows the 25.00 being backed out because Galileo received an incremental authorization request. The fifth and sixth rows show the additional 15.00 being moved from the RTF funding to the RTF spending account. The seventh row is the –40.00 incremental authorization request. Galileo places a 40.00 hold on the RTF spending account, so the available balance is again 0.00. The eighth row shows the 40.00 hold being backed out because Galileo received another incremental authorization request. The ninth and tenth rows show the additional 10.00 being moved from the RTF funding to the RTF spending account. The eleventh row is the –50.00 incremental authorization request. Galileo places a 50.00 hold on the RTF spending account, so the available balance is again 0.00. The last two rows show the 50.00 hold being backed out and settled. Notice that the auth_id corresponds to the last authorization in the series. Partial reversal on authorization A cardholder goes to an agency to rent a car. The agency obtains a $500 preauthorization. The next day, the cardholder returns the car, and the bill comes to $60. The network is Mastercard Banknet (credit). post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-11-22 10:00:00ADFY-50033333337774443332225002023-11-22 10:00:00ADSY50077777777774443332235002023-11-22 10:00:00AUL-500777777777744477744402023-11-23 11:00:00AUR44077777777775557775554402023-11-23 11:00:00ADSZ-440777777777755533344402023-11-23 11:00:00ADFZ44033333337775553334459402023-11-25 06:00:00EXR-4407777777None777555-4402023-11-25 06:00:00BO55007777777None777444602023-11-25 06:00:00SE5-6077777777774447774440 The first and second rows show the amount of the authorization being moved from the RFT funding account into the RTF spending account. The third row shows the approved preauthorization amount. A 500.00 hold is placed on the RTF spending account, so the available balance is again 0.00. The fourth row shows the preauthorization reversal for 440.00. The available balance is 440.00. The fifth and sixth rows show the reversal amount being moved back from the RTF spending account to the RTF funding account. The seventh row shows the expiry of the 440.00 reversal, which is triggered by the arrival of the batch settlement file. The eighth and ninth rows show Galileo backing out the original 500.00 hold and posting –60.00 to the account. Force post A cardholder makes a $15 purchase at a store. Technical problems prevent the merchant from getting an authorization at sale time, so the next day the merchant sends a force posting in the settlement batch file. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-09-21 07:30:00ADFZ-1533333339991111114449852023-09-21 07:30:00ADSZ157777777999111111445152023-09-21 07:30:00DBM-15777777799911199911102023-09-21 07:30:00BDM157777777None999111152023-09-21 07:30:00SDM-1577777779991119991110 When Galileo receives a settlement for a transaction that has no corresponding authorization, Galileo creates an authorization, backs it out, and settles it at the same time. The third, fourth, and fifth rows show this process. The first and second rows show the transaction amount being moved from the RTF funding account to the RTF spending account before the authorization is created. For instructions on simulating this type of transaction see Force-post in Simulating Card Transactions. Incremental clearing A cardholder purchases three items from three different third-party vendors on the same online store. The items are for $150, $75, and $175. The online merchant obtains preauthorization for $400, and then each item is cleared separately when the vendors ship them. post_tstrans_codeamtpmt_ref_noauth_idsource_idcalculated_balance2023-10-01 14:00:00ADFY-40033333331114448883336002023-10-01 14:00:00ADSY40077777771114448883344002023-10-01 14:00:00AUL-400777777711144411144402023-10-03 05:00:00BO51507777777None1114441502023-10-03 05:00:00SE5-150777777711144411144402023-10-05 06:00:00BO5757777777None111444752023-10-05 06:00:00SE5-75777777711144411144402023-10-07 05:30:00BO51757777777None1114441752023-10-07 05:30:00SE5-17577777771114441114440 The first and second rows show the amount of the authorization being moved from the RFT funding account into the RTF spending account. The third row shows the approved preauthorization amount. A 400.00 hold is placed on the RTF spending account, so the available balance is again 0.00. The fourth and fifth rows show the first settlement. Galileo backs out 150.00 of the hold and posts –150.00 to the account. The remaining hold is for 250.00. The sixth and seventh rows show the second settlement. Galileo backs out 75.00 of the hold and posts –75.00 to the account. The remaining hold is for 175.00. The eighth and ninth rows show the last settlement. Galileo backs out the remaining hold and posts –175.00 to the account. "
111,docs.galileo-ft.com/pro/changelog/may-2022,"May 2022 About Cards clarification We updated the Card identifiers section in the About Cards guide to clarify the relationships between the CAD and PAN and PIN-setting, and between CVV, expiry date and emboss UUID. New response field To the Set Credit Limit endpoint response we added the available_credit field to indicate how much credit the account currently has for spending. New Auth API object To the Auth API webhook (v2 and v3) we have added the tar_info object that contains subfields for tokenization authorization request data. Specific fields vary by card network. New statements documentation Galileo is now offering statements for clients who would like basic statements for debit accounts. Statements — Galileo's offering, and how to call individual statements from your interface. Creating Statements from the RDFs — Details on how to use the RDFs to generate customized statements. Emboss UUID fields We have added new fields to some Program API responses and event messages that help distinguish between new and older emboss records. new_emboss_uuid — UUID for an emboss record that has not yet been sent to the embosser. emboss_uuid — UUID for an emboss record that has been sent to the embosser. When this field is present outside the embossed_cards object, it contains the most recent emboss UUID. The new fields are in the responses to these endpoints. Check the response schema for each endpoint to see where the fields are nested. Create Account Get Card Get Account Cards Reissue Card Switch Product By request, you can also get the new fields in these event messages: LSCR: lost/stolen card with replacement (new_emboss_uuid) SHIP: card_shipped (emboss_uuid) BACT: card_activated (emboss_uuid) Cancel ACH Transaction correction The description for the Cancel ACH Transaction description incorrectly instructed the user to pass the transactionId of the transaction to cancel. Instead, you should pass the achTransactionId of the transaction to cancel. Special characters for the businessName parameter We added some missing characters to the list of accepted characters for businessName. Event descriptions updated We updated the descriptions for these events, to provide more context: BDPM: pmt_delayed BSPM: pmt_split Clarified descriptions We clarified parameter descriptions for the Create Bulk Card Order endpoint. User-defined field locations We clarified that the user-defined fields created by the Set User-Defined Account Field endpoint are visible on the Account tab of the CST. Secured credit account closure reporting In the Secured Credit guide, we added information about reporting account closures for secured credit products. Account closure status reporting under Setting Up Secured Credit Reporting account closure status under Developer Setup for Secured Credit New Auth API field To v2 and v3 of the Auth API, we added a new field to the amounts object: upcharge_amount, which shows how much of the trans_amount is an upcharge. AWS URL requirement When you access the asset application, Galileo now prefers that you call an AWS instance that is specially provisioned for your program. We have removed the non-AWS URLs from the following guides. If you don't have an AWS URL yet, request one from Galileo. Digital Cards Direct POST PIN-Set Procedure Direct Render PIN-Set Procedure PIN Retrieval Service Auth response code added We added response code 04 (capture card) to the Authorization Response Codes enumeration. Digital image clarification In the Digital Cards guide we clarified that you must provide two image templates to Galileo: one blank and one populated. Event message fields All of the Event API messages now show msg_id (four-letter event code) and msg_event_id (unique message ID) as optional fields. New guide Galileo clients can now ask for the Multicurrency BINs PDF, which explains what multicurrency BINs are and how Galileo handles them. New events We have added events related to External Trans API retries: GDBR: ext_trans_debit_retry GDBF: ext_trans_debit_fail ACH account ID The BADJ: adj and BPMT: pmt events now show ach_acct_id as an optional field. Card status descriptions The Card Statuses enumeration has been corrected to show that status B indicates when the bounce-mail flag is set to Y rather than status D. "
112,docs.galileo-ft.com/pro/reference/post/removeaccountgrouprelationship,Remove Account Group Relationship Use the Remove Account Group Relationships endpoint to remove an account or accounts from a group. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description619-01Invalid value in accountNo. Ensure that all PRNs are correct.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
113,docs.galileo-ft.com/pro/docs/overdraft-operational-setup,"Overdraft Operational Setup This guide describes endpoints, webhooks, and CST functionality for managing overdraft accounts in your own system. Using the Get Overdraft Balance endpoint The Get Overdraft Balance endpoint retrieves information about an overdraft account and its linked primary account. Information returned by this endpoint includes balances, fees, limits, and frozen status. When you call the Get Overdraft Endpoint, pass the PRN or PAN for the primary account through the accountNo field. This table describes the fields returned by the Get Overdraft Balance endpoint. FieldDescriptionOverdraftAccountNoThe overdraft account number that is linked to the primary account passed through the endpoint.AvailableThe overdraft line of credit that is currently available to the account holder.PaybackThe amount that the account holder has drawn on the overdraft account.PaybackWithPendingFeesThe total amount owed by the account holder, including the amount drawn on the overdraft account and fees.ActualWithPrimaryThe combined balance of the primary account and overdraft account.LimitThe amount that the account holder may draw on the overdraft account if nothing is owed. The amount in this field accounts for overdraft fees.RawLimitThe total credit set on the overdraft account. The Limit field may be less than this amount if there are overdraft fees.FrozenThe value I in this field indicates that the overdraft account is frozen. Events API webhooks for overdraft This table describes Events API webhooks that are specific to overdraft account activity. EventTriggerNext stepODAA: overdraft_authorizationAn authorization drives the DDA balance negative and the DDA draws on its overdraft account.If the amount drawn on the overdraft account meets or exceeds the de minimis threshold, a fee is applied, or, if configured, the grace period starts.ODCL: overdraft_credit_limit_changeAn overdraft account meets requirements for a credit limit adjustment and the overdraft credit limit is adjusted.The adjusted credit limit is effective immediately.ODGP: overdraft_start_grace_periodA transaction meets or exceeds the overdraft transaction de minimis and a grace-period timer starts.If there is an overdraft fee, the account holder can pay the full amount drawn on the overdraft account and reverse the fee before the grace period ends.ODIN: overdraft_opt_inAn account becomes eligible to use overdraft or an overdraft account is created.If the overdraft account was created and the account is eligible, the DDA can draw on the overdraft account.ODNB: overdraft_negative_balanceA DDA draws on its overdraft account for the first time since the primary account balance was positive.While the primary account remains negative, any later authorizations that draw on the overdraft account trigger the ODAA: overdraft_authorization event.ODOT: overdraft_opt_outA DDA loses access to the overdraft line of credit.The overdraft account remains closed until a process determines that the account holder is eligible for overdraft.ODSC: overdraft_status_changeAn overdraft account status changes.Status changes are applied to the overdraft account. If the account is frozen or suspended, the ODSK: overdraft_suspended event is also triggered.ODSK: overdraft_suspendedAn overdraft account is suspended or frozen.The overdraft account remains closed until a process determines that the account holder is eligible for overdraft.ODSN: overdraft_limit_changeAn overdraft account became active, usually because it was unfrozen.The primary account can draw on its overdraft account. Viewing overdraft accounts in the CST To view a customer’s overdraft activity In the CST: Go to the Account tab, open the Client Info section and select the customer’s overdraft product from the dropdown. Go to the Overdraft Information page located in the Account Info section. The Overdraft Information page contains: Overdraft summary Line of credit Fees Deposit history Opt-in/opt-out status Account configuration Updated 2 months ago Table of Contents Using the Get Overdraft Balance endpoint Events API webhooks for overdraft Viewing overdraft accounts in the CST "
114,docs.galileo-ft.com/pro/docs/event-testing-and-triggers,"Event Testing and Triggers This guide describes testing events, events that are triggered by automated processes, and events that are triggered by actions taken in the CST. Testing events Most event messages that are available in the Production environment can also be tested in the CV environment. You can request to enable different events in CV and Production, allowing you to test functionality in your own system before you go live in Production. The following events are not available for testing in the CV environment. Mobile wallet events AACN, GACN, SACN: mobile_activation ACN ARDP, GRDP, SRDP: mobile_activation RDP ATKC, GTKC, STKC, VTKC: mobile_activation TKC ATVD, GTVD, STVD: mobile_activation TVD ATVN, GTVN, STVN: mobile_activation TVN ATVR, GTVR, STVR: mobile_activation TVR AYLP, GYLP, SYLP: mobile_activation YLP VAPI: mobile_activation VAPI ACH events ACHC: ach_credit_fail ACHR: ach_debit_fail ACRT: ach_return FACH: ach_credit_return 📘NoteACH transactions cannot be tested in the CV environment, which also means that payment (BPMT: pmt) and adjustment (BADJ: adj) events for ACH transactions cannot be tested in CV. However, payment and adjustment events can be tested in CV for other types of transactions. Events triggered by automated processes Some event messages in the Events API are triggered by automated processes outside of your system rather than directly as a result of your action or your customer’s action. The following tables describe events that are triggered by automated processes. Account events EventDescriptionAutomated triggerBBAL: balAn account has a positive balance.Process that detects accounts with a positive balance. BBAL is triggered daily, or if PDBAL is set, BBAL is triggered only after the first deposit made to the account.BNEG: neg_balAn account has a negative balance.Process that detects accounts with a negative balance. BNEG is sent only when MPNEG is set.CSNT: card_status_changeA card status has changed.Internal process that changes the card status.LBLC: low_balance_notifyA balance has dropped below the amount specified in LOBTH.Automated process that checks for balances lower than LOBTH.ODCL: overdraft_credit_limit_changeAn overdraft credit limit was adjusted based on the available core balance that the account holder maintained over a period.Automated process that determines overdraft account activity and core account eligibility for a credit limit adjustment.ODOT: overdraft_opt_outA core account lost overdraft functionality.Automated process that deactivates overdraft accounts.ODSC: overdraft_status_changeAn overdraft account status has changed.Automated process that changes the overdraft status.ODSK: overdraft_suspendedAn overdraft account was suspended or frozen.Internal process that detects whether the monthly fee cap has been exceeded.ODSN: overdraft_limit_changeAn overdraft account has become active, usually because it was unfrozen after the account holder paid off the overdraft.Automated process that unfreezes qualifying accountsPSUC: card_returnedThe shipping department received a card that was returned by a cardholder.Internal reporting process.RBEX: card_expiringA card is going to expire in the specified number of days.Internal process that detects which cards will expire.SHIP: card_shippedGalileo sent a create-card request to a third-party embosser.An internal process that gathers embossing data. Authorization events EventDescriptionAutomated triggerBEXP: auth_expAn authorized transaction expired before it was cleared.Internal Galileo process that detects authorization expiry. Transaction events EventDescriptionAutomated triggerBPAR: billpay_retryThe bill-pay process retried a transaction after the previous attempt was unsuccessful because of insufficient funds.Internal bill-pay process.BPAY: billpayA bill-pay transaction was posted to the specified account.Internal bill-pay process.BPCC: billpay_check_clearedA paper bill-pay check was cashed and the payment has cleared.Internal bill-pay process.BPCM: billpay_check_mailedA paper bill-pay check order was created.Internal paper-check process.BPEX: billpay_expiredA bill-pay check has not cleared six months after the check's date, and the check is no longer valid.Internal process that monitors bill-pay check cashing.BPMT: pmtA payment (deposit) was posted.Internal processes that move funds into customer accounts.BSPF: sched_billpay_failA scheduled bill payment has failed because of insufficient funds.Scheduled bill-pay process.CRHD: create_holdA hold has been placed on all or part of the specified account.Automated processes.EXHD: expire_holdA hold that was placed on a customer account has expired.Internal process that expires holds. Events triggered via CST Some Events API messages are triggered when you perform an action in the CST. The tables below list events triggered by CST processes. Most of these events can be triggered outside of the CST as well. Account events EventCST pageCST triggerACCL: account_closedAccount > Account InfoAn account was closed on the Account Info page. Some charge-offs result in this event.BACT: card_activatedAccount > Card Info > Activate CardA card was activated.BFID: failed_idAccount > Miscellaneous > Enroll/Register CustomerA customer failed Galileo’s integrated ID verification.CAPP: app_completedAccount > Miscellaneous > Enroll/Register CustomerA cardholder’s application for a new product was successful.CHPC: cardholder_info_changedAccount > Client InfoCustomer profile information was changed in the CST.CSNT: card_status_changeAccount > Card InfoA card status was changed with the Change Card Status control. CDMSG controls which new card statuses trigger this event.FRZN: frozenAccount > Card Info > Freeze ControlA card was frozen.FTID: fail_idAccount > Miscellaneous > Enroll/Register CustomerA customer failed Galileo’s integrated ID verification and the account status has changed to the value specified in TIDST.LSCN: lost/stolen card no replacementAccount > Card InfoA card was marked lost or stolen with the Change Card Status control and no replacement will be issued.LSCR: lost/stolen card with replacementAccount > Card InfoA card was marked lost or stolen with the Change Card Status control and a replacement card will be issued.NOTE: noteAccount > Enter NotesA note was added to the account.ODIN: overdraft_opt_inAccount > Miscellaneous > Enroll/Register CustomerAccount > Account Info > Overdraft ProtectionAn account became eligible to use overdraft or an overdraft account was created.ODNB: overdraft_negative_balanceAny process that moves funds out of the accountA core account has drawn on its overdraft account.ODOT: overdraft_opt_outAccount > Account Info > Overdraft ProtectionA customer service representative clicked the Opt Out button on the Overdraft Protection page.ODSC: overdraft_status_changeAccount > Account Info > Overdraft ProtectionAn overdraft account status has changed.ODSK: overdraft_suspendedAccount > Account Info > Overdraft ProtectionAn overdraft account was suspended.ODSN: overdraft_limit_changeAccount > Account Info > Overdraft ProtectionAn overdraft account limit has changed.PCHG: profile_changedAccount > Client InfoCustomer profile information was changed and the change is not covered by a more specific event.PHCH: phone_changedAccount > Client InfoA customer phone number was changed. If this event is not configured, PCHG is sent instead.PSWC: product_switchedAccount > Miscellaneous > Enroll/Register CustomerAn account changed from one product to another.PTID: pass_idAccount > Miscellaneous > Enroll/Register CustomerA customer passed Galileo's integrated ID verification process.UFRZ: unfrozenAccount > Card Info > Freeze ControlA card was unfrozen. Transaction events EventCST pageCST triggerBADJ: adjAccount > Finance BarAny process that makes an adjustment for the accountThe available balance has been adjusted.BDPM: pmt_delayedAccount > Account History > Payment HistoryAny process that moves funds into the accountAn attempt to move funds into a customer account has been delayed because of a load limit violation.BFEE: feeAccount > Account Info > Fee HistoryAny process that posts a fee to the accountA fee was posted to an account.BPCQ: billpay_request_madeAccount > Account Info > Bill PaymentsA bill pay request was initiated and the funds have been removed from the account.BPMT: pmtAccount > Account History > Payment HistoryAny process that deposits funds into a customer accountA payment (deposit) was posted.BSPM: pmt_splitAccount > Account History > Payment HistoryAny process that moves funds into the accountA transaction to move funds into an account was only partially completed because of load limit violations.CRHD: create_holdAccount > Account InfoA hold has been placed on all or part of a customer account.EXHD: expire_holdAccount > Account InfoA hold that was placed on a customer account has expired.FREV: fee_reversalAccount > Account Info > Fee HistoryAny process that reverses a fee previously posted to an accountA fee that was posted to the specified account has been reversed.Updated 2 months ago Table of Contents Testing events Events triggered by automated processes Account events Authorization events Transaction events Events triggered via CST Account events Transaction events "
115,docs.galileo-ft.com/instant/docs/instantly-funding-an-account,"Instantly Funding an Account Fund your cardholders' accounts by transferring money from your Master Funds Account—instantly and free. A transfer between the Master Funds Account and a cardholder account may also be useful for promotional incentives (e.g., referral bonuses) or other custom payment mechanisms (e.g., cashback). Instructions Step 1: Obtain the destination_account_id Obtain the account_id for the account that you want to fund, i.e., the destination account. The account_id may be obtained by sending a GET request to the Accounts endpoint, including the cardholder_id of the cardholder who is receiving money as the path parameter. Step 2: Obtain the source_account_id Obtain the account_id of the Master Funds Account. Since the Master Funds Account belongs to your business and not to a cardholder, the API path is different than that in Step 1 above. The account_id may be obtained by sending a GET request to the /businesses/:id/accounts endpoint, including your business_id as the path parameter. Your business_id may be found on the Dashboard. Step 3: Create the transfer Send a POST request to the Transfers endpoint, including the account_id of the Master Funds Account as the source_account_id, the account_id of the destination account as the destination_account_id, and the amount. If the amount is greater than the Master Funds Account balance, the request will result in an insufficient_funding_account_funds error. The response contains a source_transaction_id and a destination_transaction_id that map the transfer to transactions on the respective accounts. Both participating accounts now have transactions with a transfer type and an account_funding subtype in the transaction history.Updated over 2 years ago Table of Contents Instructions Step 1: Obtain the destination_account_id Step 2: Obtain the source_account_id Step 3: Create the transfer "
116,docs.galileo-ft.com/pro/reference/api-reference-set-account-feature-values,"Set Account Feature Values featureTypeFeature descriptionfeatureValue1Enable bill-payment reporting.Y or N2Enable paper statements.Y or N3Change product ID. Alternatively, use the Switch Product endpoint for granular control.New product ID (integer)5Enable express shipping. Use the values supported by your emboss vendor.Y or N or 0-96Allow card-not-present transactions.Y or N7Enable ACH early access.Y or N8Allow international transactions.Y or N9Disable ATM withdrawals.Y or N10Disable cash advances.Y or N11Enable savings round-up.Y or N13Mark customer as high risk.Y or N14Pass featureValue: Y to disable Galileo dynamic fraud rules. When featureValue: Y you can optionally set startDate and endDate; otherwise, the default for endDate is the year 3000. When featureValue: N (enable rules), the date fields are ignored and the rules are re-enabled immediately. To disable only your selected fraud rules, use featureType: 26 instead.Y or N16Custom card art ID. Must include pipe A (|A) at the end of the ID.Example: Ca9ykshiu|A17Overdraft eligibility or participationE (eligible)I (ineligible)P (participating)E, I, P19Opt in to E-sign.Y or N20Block card-present and card-not-present transactions. Allow only those with a token (mobile wallet and AVS). Does not block card loads. Use this setting to ensure that only mobile wallet transactions are authorized until the cardholder receives the physical card and activates it.Y or N21Block card-present transactions. Allow card-not-present, AVS and token (mobile wallet) transactions. Does not block card loads. Use this feature to permit cardholders to use a digital version of a card online.Y or N22Block all token transactions. Use this feature to block mobile-wallet transactions when a cardholder reports a mobile wallet as lost or stolen. This feature permits AVS, card-present and card-not-present transactions.Y or N23First delinquency date. To remove the delinquency date, call Set Account Feature again and set endDate to ""now,"" which expires the delinquency date.YYYY-MM-DD24Delinquency amountDecimal amount25Emboss line 2String26Pass featureValue: Y to disable only your selected dynamic fraud rules, while leaving safety fraud rules enabled. When featureValue: Y you can optionally set startDate and endDate; otherwise, the default for endDate is the year 3000. When featureValue: N (enable rules), the date fields are ignored and the rules are re-enabled immediately. To disable all fraud rules, use featureType: 14 instead.Y or N29Update the contents of the CRMSG parameter (carrier message). 150 characters max. You must set up the CRMSG parameter with Galileo before using this featureType.String "
117,docs.galileo-ft.com/instant/reference/introduction,"Introduction Creating API Keys Before integrating with the Instant API, you must create an account in our Dashboard and generate an API key. Once you have a key, you can exchange it for an access_token. An access_token is required for all subsequent API requests. API Hosts SandboxProductionhttps://sandbox.galileo-ft.com/instant/v1 https://production.galileo-ft.com/instant/v1 API Protocols The Instant API uses POST requests to communicate and HTTP response codes to indicate status and errors. All requests must include a Content-Type of application/json and the body must be valid JSON. All responses are in standard JSON.Table of Contents Creating API Keys API Hosts API Protocols "
118,docs.galileo-ft.com/pro/docs/environments,"Environments There are three environments for testing and deploying your code integrations with Galileo APIs. The best environment to use depends on your stage of development: Sandbox environment — Test API integration using a standard program and product. Client Validation environment — Test API integration with your programs and products. Production environment — Deploy your code and go live. This table provides a quick comparison of environments. FunctionSandboxClient ValidationProductionUses a standard product and program.XTest environment, no movement of real funds.XXUses your specific product and program configurations.XXAccess to real-world transactions like ATM withdrawals, refunds, and ACH direct deposits.XActs on live customer data.XLive product, transactions move real funds.X Sandbox environment The Sandbox environment gives you access to a standard configuration of the Galileo Program API. This shared environment is intended to help you get familiar with the Program API before you integrate your customized programs and products. Sandbox usage Use the Sandbox environment to: Explore some of the methods in the Program API. See Sandbox endpoints for a list of methods available in the Sandbox environment. There is a limit of 1000 API requests every 10 minutes. Test a simple program (prog_id: 6914) and product (prod_id: 2769) configured with typical parameters. The Sandbox environment simulates a generic configuration. To test your own configuration, use the Client Validation environment. 📘NoteSandbox API data is wiped on a rolling 7-day basis. Sandbox setup Sandbox API calls are secured with client certificate validation. Before using the Sandbox, make sure you have the following: A Sandbox account from Galileo. If you don't have one, use the Request Sandbox Access form. Access to the Sandbox Dashboard. 📘NoteNew Sandbox API credentials are required after 30 days and must be generated by your company's Sandbox team admin. If the incorrect details are used, your API request will fail, and your company account may be locked. When you have your credentials, see the Quickstart for a brief tutorial on connecting to the API. Then see Build a Sample App to create a test account and call some common endpoints. Sandbox endpoints These endpoints are available in the Sandbox environment: Accounts and Cards: Add Customer Note Complete Enrollment Create Account Create Account Transfer Create Adjustment Get Account Get Account Cards Get Account Features Get Balance Get Card Get Customer Note History Get Enrollment Info Modify Status Search Accounts Set Account Feature Start Enrollment Update Account Update Enrollment Verify Account Verify Enrollment Transactions: Add ACH Account Cancel ACH Transaction Create Payment Get Account Overview Get ACH Accounts Get ACH Transaction History Get All Transaction History Get Authorization History Get Payment History Get Transaction History Modify ACH Account Remove ACH Account Reverse Adjustment Reverse Payment Simulate Card Authorization Simulate Card Settlement Miscellaneous: Ping Client Validation environment The CV environment is a development environment where you can integrate your programs and products with the latest Galileo APIs. You can use this environment to create test users, accounts, and cards without affecting real customer accounts. Client Validation usage Use the CV environment to: Develop your program and product integrations with the Galileo Program API. Stage upgrades and additions to your program before deploying to your production application. Test your configurations without affecting customer accounts. Access the latest Program API endpoints and features. Simulate point-of-sale payments using the Simulate Card Authorization. For instructions see: Setup for Card Transaction Simulation Simulating Card Transactions Test the Customer Service Tool (CST). Because CV is an isolated environment, there are some limitations. Some functionality is unavailable outside of Production: ACH direct deposit simulations RDFs Client Validation setup Your Galileo representative will help you get access to the CV environment with the Galileo Connectivity Guide. Access to the CV environment will require: Your IP addresses for connecting to the Program API. Your URLs for Auth API and Events API webhooks. Your IP addresses for accessing the CST. Once you have your credentials, you can use your CV URL in the same way you used the Sandbox URL. Replace the Sandbox URL with the CV URL to use the CV environment. Production environment The Production environment has access to live data. Any products connected to the Production environment can affect live customer accounts. Production usage When you are ready to go live, use the Production environment to access live data and enable your customers to make real transactions. 📘NoteEnabling certain processes in Production may require approval and coordination from the issuing bank. Your Galileo representative will work with you to identify any processes that require manual testing or third-party coordination. Production setup Similar to CV, your Galileo representative will work with you to collect the following information to grant you access to the Production environment: Your IP addresses for connecting to the Program API (must be different from CV environment IP addresses). Your preferred transfer method for RDFs. Your URLs for Auth API and Events API webhooks (must be different from CV environment URLs). Your IP addresses for accessing the CST and Galileo Analytics. Updated about 2 months ago Table of Contents Sandbox environment Sandbox usage Sandbox setup Sandbox endpoints Client Validation environment Client Validation usage Client Validation setup Production environment Production usage Production setup "
119,docs.galileo-ft.com/pro/reference/api-reference-events-api-lost-stolen-card-with-replacement,"lost/stolen card with replacement Code — LSCR Event trigger — The card status is updated to L or S, and it triggers the replacement operation. Processes — These processes contain the event trigger: Modify Status endpoint with one of these type values: 3 — Lost, with replacement 4 — Stolen, with replacement Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""LSCR"" new_emboss_uuid UUID for an emboss record that has not yet been sent to the embosser. Example: ""123e4567-e89b-12d3-a456-426614174000"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four X The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""lost/stolen card with replacement"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# lost/stolen card with replacement example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""LSCR"", ""new_emboss_uuid"": ""123e4567-e89b-12d3-a456-426614174000"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""lost/stolen card with replacement"" } Table of Contents Fields Example "
120,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-bad-pan,"denied_auth_bad_pan Code — BPAN Event trigger — You or Galileo deny an authorization request because the PAN has not been issued. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPAN"" network See Events Network Codes for possible values. Example: ""V"" response_code X See Authorization Response Codes for possible values. Example: ""05"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""denied_auth_bad_pan"" Example JSON# denied_auth_bad_pan example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPAN"", ""network"": ""V"", ""response_code"": ""05"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""denied_auth_bad_pan"" } Table of Contents Fields Example "
121,docs.galileo-ft.com/instant/reference/errors,"Errors In the event of a failed request, the response body will contain an error object to provide more information about what went wrong. For example trying creating a cardholder with an already used e-mail will result in a 402 response code as well as the response body: duplicate email{  ""error"": {   ""error_code"": ""duplicate_email""  } } Response and Error Codes: Response CodeError CodeDescription400invalid_parametersInvalid parameters were used in the request; validation_errors will be returned in the response with a string that contains the portions of the request body that failed validation401expired_login_credentialsAPI credentials have expired and new credentials must be generated401invalid_jwtThe JWT is either incorrect or expired401invalid_login_credentialsThe provided credentials don't match a provisioned API key402account_creation_errorA Galileo system error occurred when creating the account402account_inactive_due_to_fraudThe Account has been deactivated due to potentially fraudulent activity402account_is_charged_offThe Account has been closed due to inactivity402accounts_must_be_activeOccurs when a transfer is attempted between two accounts that are not both active402ach_limit_violationOne of the ACH origination limits was violated402cannot_update_card_statusEither the Card's current status may not be changed via API or the provided status is not attainable via API402cardholder_not_activeThe Cardholder status is not active402destination_account_limit_violationThe transfer failed because a load limit on the destination account was violated402destination_account_velocity_violationThe transfer failed because a velocity limit on the destination account was violated402duplicate_cardholderA Cardholder with this identity already exists402duplicate_emailA Cardholder with this email already exists402duplicate_mobileA Cardholder with this mobile already exists402insufficient_funding_account_fundsThe Master Funds Account doesn't have sufficient funds for the Account creation fee402insufficient_fundsThere were not enough funds to cover the transaction402missing_required_agreementsOne or more required agreements is missing from the agreements list402no_such_transactionThe provided transaction_id does not map to a valid Transaction in Sandbox and may not be updated402source_account_velocity_violationThe transfer failed because a velocity limit on the source account was violated402transaction_deniedThe simulated authorization was denied402transfer_must_be_funding_or_peer_to_peerIn invalid transfer was attempted, e.g. an attempt to transfer from a cardholder account to the MFA403not_permittedAn action was performed that is not allowed, e.g. attempting to get account information for an account_id that doesn't belong to the product or business500error_contacting_serverUnable to communicate with Galileo's backend services500system_exceptionGeneric Galileo system exception that is unhandledTable of Contents Response and Error Codes: "
123,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-resubmit,"fed_benefits_status_resubmit Code — FBSM Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" fbe_status_id Identifier for the federal benefits status. Example: ""204938675"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSM"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_resubmit"" Example JSON# fed_benefits_status_resubmit example: { ""balance_id"": ""20211"", ""fbe_status_id"": ""204938675"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSM"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_resubmit"" } Table of Contents Fields Example "
124,docs.galileo-ft.com/pro/reference/api-reference-events-api-greendot-auth-commit-fail,"greendot_auth_commit_fail Code — GDFC Event trigger — The Green Dot commit fails. Process — This process contains the event trigger: Galileo attempts to commit a Green Dot card load after it was authorized. Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" card_id X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X A description for the transaction. Example: ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"" ext_payment_type X Green Dot payment type. Example: ""1"" limit_code X Code for the authorization limit that was violated. Example: ""L101"" limit_id X Identifier for the authorization limit that was violated. Example: ""100240645"" merchant_id X An identifier for the merchant who loaded the card. Example: `""00000002049325"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDFC"" open_to_buy X The available balance to spend. Example: ""500.00"" otype X See the curated list of otypes for your program from Galileo. Example: ""AC"" partner X Green Dot partner name. Example: ""InComm"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" retail_chain X Retail chain name. Example: ""7-Eleven"" retail_sale_transaction_key X Transaction ID for the retail sale. Example: ""1028340657"" store_address1 X Store address line 1. Example: ""3130 Gulf Bay Blvd"" store_address2 X Store address line 2. Example: ""Ste 2"" store_city X Store city. Example: ""Clearwater"" store_county X Store county. Example: ""Pinellas"" store_latitude X Store latitude: Example: ""27.96103000"" store_longitude X Store longitude. Example: ""-82.70717000"" store_name X Store name. Example: ""7-Eleven"" store_number X Store number. Example: ""40333"" store_state X Store state. Example: ""FL"" store_transaction_date X Store transaction date-time. Format: MM/DD/YYYY hh:mm:ss Example: ""11/23/2020 18:04:05"" store_zipcode X Store postal code. Example: ""33759"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""greendot_auth_commit_fail"" Example JSON# greendot_auth_commit_fail example: { ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""card_id"": ""12534"", ""credit_balance"": ""325.00"", ""description"": ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"", ""ext_payment_type"": ""1"", ""limit_code"": ""L101"", ""limit_id"": ""100240645"", ""merchant_id"": ""00000002049325"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDFC"", ""open_to_buy"": ""500.00"", ""otype"": ""AC"", ""partner"": ""InComm"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""retail_chain"": ""7-Eleven"", ""retail_sale_transaction_key"": ""1028340657"", ""store_address1"": ""3130 Gulf To Bay Blvd"", ""store_address2"": ""Ste 2"", ""store_city"": ""Clearwater"", ""store_county"": ""Pinellas"", ""store_latitude"": ""27.96103000"", ""store_longitude"": ""-82.70717000"", ""store_name"": ""7-Eleven"", ""store_number"": ""40333"", ""store_state"": ""FL"", ""store_transaction_date"": ""11/23/2020 18:04:05"", ""store_zipcode"": ""33759"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""greendot_auth_commit_fail"" } Table of Contents Fields Example "
125,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-acn,"mobile_activation ACN The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — AACN, GACN, SACN Event trigger — Galileo receives an activation code from Mastercard (advice). Process — This process contains the event trigger: The cardholder performed steps to verify their identity by following the instructions in the xYLP message. Fields All fields are strings. Your field names may vary. Field Required Description activation_code X One-time activation code from Mastercard. 8 digits. Example: ""23649703"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GACN"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" send_type X How the passcode was sent: email or phone. Example: ""email"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activtion ACH"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code AACN) ""Google"" (event code GACN) ""Samsung"" (event code SACN) Example JSON# mobile_activation ACN example: { ""activation_code"": ""23649703"", ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""GACN"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""send_type"": ""email"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation ACN"", ""wallet_type"": ""Apple"" } Table of Contents Fields Example "
126,docs.galileo-ft.com/pro/docs/adding-an-account,"Adding an Account This guide describes the procedure for creating a secondary account using the Add Account endpoint. With this endpoint you can add a secondary account to an existing account holder without running CIP on that account holder. Follow this procedure to: Add a secondary account to an existing account holder, such as a savings or overdraft account. For overdraft accounts, also consult the Creating an Overdraft Account guide. Add a secondary card product to an existing account holder, either a virtual or personalized card Do not follow this procedure to: Onboard a new customer for a physical or virtual card; instead, see the Creating an Account guide. Deposit funds into an account at the time of account creation; instead, see the Creating an Account guide. Create a secondary account for a different customer than the primary account holder, such as a spouse or child; instead, see the Creating an Account guide. 📘NoteBefore following this procedure read the About Accounts guide to familiarize yourself with Galileo's account structure and conventions, especially the Create Account vs Add Account use cases. Result of calling Add Account When Add Account has been called successfully, these items are created or updated in the Galileo system. See New account creation in the About Accounts guide for details. Customer record — Referenced from the customer record of the primary account. However, the customer ID and ID type fields are not referenced, because Add Account does not perform CIP. Account record — Contains general account information. Card record (for card products) — Contains card information. You can receive unmasked PAN/CVV/expiry date values only if you are PCI compliant. Relationship to primary account Accounts that are added with the Add Account endpoint are associated with the primary account such that the primary account holder is also the secondary account holder. At the time you call this endpoint you must decide whether to share the balance with the primary account. You cannot share or unshare balances after the secondary account has been created. See Joint accounts and shared balances in the About Accounts guide for more information. Additional product, separate balances In this scenario the secondary account does not share a balance with the primary account. To create this scenario, follow these steps: Call the Create Account endpoint to create the customer's first account (primary account). Call the Add Account endpoint to create the secondary account. In the request to the Add Account endpoint pass these parameters: accountNo: primary account number sharedBalance: 0 or leave blank This is the relationship that is set up: Additional product, shared balance In this scenario the secondary account shares a balance with the primary account. To create this scenario, follow these steps: Call the Create Account endpoint to create the first customer's account (primary account). Call the Add Account endpoint to create the secondary account. In the request to the Add Account endpoint pass these parameters: accountNo: primary account number sharedBalance: 1 Parameters This table explains the parameters that are specific to the Add Account endpoint. See the Add Account reference for details. ParameterUsageaccountNoThe primary account to associate with this secondary account. This can be a primary account number or a secondary account number.prodIdIdentifier for the product. Product parameters must permit this product to be a secondary account to the product of the account specified in accountNo.sharedBalancePass 1 when creating a secondary account that will transact on the same balance as the specified accountNo; otherwise, do not populate. 📘NoteIf you want to add an external account ID to an account created with addAccount, call updateAccount and populate externalAccountId. Add Account workflow Consult this flowchart and explanation for the Add Account workflow. The actual sequence of events in the Galileo system may vary. 📘NoteBefore calling Add Account, you must have already performed the Creating an Account procedure to onboard the customer. Populate the Add Account request and send. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo references the account holder profile information and creates a new account with status: W (waiting to be processed). If sharedBalance: 1 the balance ID is set to the primary account balance ID. If sharedBalance: 0 the balance ID is unique. If the account cannot be created Galileo returns status: -1. If account creation was successful, Galileo sends two messages: API response with status: 0 (successful) Account Event CAPP: app_completed, if you are configured to receive it. Galileo runs an account setup process to determine whether other criteria for the account have been fulfilled, according to product settings. When all criteria are fulfilled, the Galileo system checks the XAACT product parameter for how to set the account status: First character — Account active/inactive (Y/N) Second character — Account status Third character — Card status (if any) For example, if the product is a card account, and XAACT is YNX, then when account setup is completed these are the settings: Account active: Y Account status: N (active) Card status: X (set to emboss) See Lifecycle of a card in Setting Up a Card Program for the next steps when the account has a card. Sample endpoint request and response Consult the Add Account reference to see how to build the API request and to see the response schema. Status codes Consult this table to see an explanation of what each status code means and which next steps to take, if any. Status CodeDescriptionNext steps456-01Product cannot be added using the Add Account endpoint.Retry with a supported product ID.456-02Your product settings require a customer to have a specified amount in their primary account to add this product.Notify customer that their primary account funds are insufficient for adding this product.456-03Your product settings do not permit a customer to have multiple accounts for the same product.Notify customer that they cannot have multiple accounts for this product.456-04Your product settings do not permit this savings account to be added.Notify customer that this product cannot be added.456-05Your product settings do not permit the primary account to have this product as a secondary account.Retry with a valid primary account, or notify the customer that this account is ineligible, or verify that your product settings are correct. View the new account Use the Get Account Overview endpoint to retrieve account status and other information. Consult Retrieving account information in About Accounts for a list of endpoints and the specific account information they retrieve.Updated 4 months ago Table of Contents Result of calling Add Account Relationship to primary account Additional product, separate balances Additional product, shared balance Parameters Add Account workflow Sample endpoint request and response Status codes View the new account "
127,docs.galileo-ft.com/pro/reference/post/addcard,"Add Card Use this endpoint in scenarios such as these: Replacing a virtual card when lost, stolen, or expired Replacing a lost instant-issue card at a storefront (for card programs with a retail integration) Temporarily replacing a lost personalized card See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description442-01Invalid instant issue account442-02This product is not configured to allow shared balances442-03This product is not configured to allow the same product to be added442-04Usage not currently supported. The product ID for the account must match prodId.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
128,docs.galileo-ft.com/pro/reference/api-reference-limit-response-codes,"Limit Response Codes Return codeDescriptionL101Load amount is at maximum allowed amount, but is less than amount requested.L201Load amount is 0.0. Maximum load amount violated.L301Load amount is 0.0. No load can be done. Amount loaded for given period already equals or exceeds maximum amount.L302Load amount and previous load amount for given period will equal maximum amount but is less than total amount within time period.L401Load amount is 0.0. No load can be done. The maximum number of transactions are exceeded.L501Load amount is 0.0. No load can be done. Maximum balance has already been reached.L502Load amount and previous load amount will equal maximum balance but is less than amount requested.L601Load amount is 0.0. No load can be done. Maximum balance has already been reached.L602Load amount and previous load amount will equal maximum balance but is less than amount requested.L603This is an excluded account balance.L701Usage count has already been exceeded. "
129,docs.galileo-ft.com/pro/reference/post/reissuecard,"Reissue Card Galileo recommends that you use the CAD for accountNo; however, you can use the PRN if only one card has ever been associated with the account. Galileo recommends that you use this endpoint instead of Modify Status with type: 12 to reissue cards. For instructions see the Reissuing Cards guide. 📘NoteThe expiry_date and card_security_code (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process. Call Get Card to retrieve the new values after the emboss process has run. Status CodeCode Description589-01Reissue request for virtual card is invalid589-02The valid values for newPanFlag and newExpirationDate include Y/N589-03The valid values for oldCardStatus include D/C589-04Trying to update card status without requesting new PAN589-05Failure getting data associated with account/card589-06Failure getting data associated with account/card589-07Insufficient funds to cover reissue fee589-08Failure, generic error processing reissue fee.589-09Failure, card has pending reissue records.589-10Card reissue cannot be processedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
130,docs.galileo-ft.com/pro/docs/about-bill-pay,"About Bill Pay 👍NoticeThis guide is in a preliminary state. Some of the details may be incorrect, and we will be updating them as needed. Contact Galileo to report any errors or omissions. This guide explains bill pay at Galileo. With bill pay your customers can send funds from their accounts directly to a U.S.-based individual or service provider. Biller-direct vs. consolidated bill pay Account holders typically have monthly expenses with a variety of entities such as utilities, landlords and loan creditors. These billers often use the biller-direct system to collect payments, where the biller informs the account holder via email or text message that a bill is due, and the account holder logs into that biller’s system to pay the bill. This system is somewhat convenient for the account holder because it provides quick access to pay bills and pay them on time. In this system, the biller maintains control of the payment process, which improves cash flow for the biller, and time spent on disputes is typically lower. However, users must maintain separate accounts for each biller on each site, which can become burdensome. In contrast, Galileo offers a consolidated billpay system, meaning that account holders can see and pay all of their bills on a single web page. Having a billpay function on your site drives engagement with your account holders and increases loyalty to your program. Account holder experience When your account holders want to pay a bill, their experience can be as simple as this: Go to your billpay interface. Select a biller. Enter the amount of the bill. Click Send. Later that day, the billing amount is deducted from the account, and depending on how the biller is set up, the payment arrives at the biller within 1–10 days. If the desired biller is not already present on your interface, the account holder can create that biller, and at the same time, set up recurring payments that can continue for up to five years in the future. Biller types In the Galileo system, there are two types of billers: electronic and paper. Electronic billers are integrated with Mastercard RPPS. Paper checks are conventional checks. Bill pay is not an ACH system. For a comparison of the two systems, see ACH vs. bill pay in the ACH at Galileo guide. Electronic Mastercard RPPS is a large electronic biller directory, used by the majority of consumer and treasury banks in the U.S. The RPPS has ~40,000 billers in its directory, and Mastercard manages the transfer of funds to the biller. Galileo checks for pending RPPS transactions in your core four times per day, every day, compiles the billpay transactions into a file, and sends the file to Mastercard. According to the arrangements the biller has made with Mastercard, the payment is sent to the biller's bank, where it is deposited in the biller's account. Paper check Paper checks for bill pay are printed every business day. Requests made up to midnight Galileo system time are included in the morning check run on the next business day. The checks are issued by Bank of America and are void after 180 days. Because checks are not issued until after the check amount has been withdrawn from the customer account, the checks do not bounce. Checks can be mailed to U.S. addresses only. 📘NoteGalileo classifies transactions in one of four categories: authorization/settlement (card transactions), payment, adjustment or fee, as described in Classifying transactions in the About Transactions guide. Bill ""payments"" are actually adjustments in the Galileo system, because the funds move out of the account holder's account. Decisions to make To set up bill pay in your program, ask Galileo for assistance. The first part of the process includes coordination between your program manager, your bank, and Galileo. When setting up billpay for your program, you will need to make these decisions: How to design your billpay interface. You will need to provide: A control to add billers A place for a list of added billers A control to make a payment A way to display past bill payments per biller A way to display future bill payments per biller An edit function for billers and recurring payments A way to cancel a pending payment A way to delete billers The maximum amount allowed per bill payment. The default is $25,000, but you can set a different limit. Whether to charge fees for bill payments. You can charge for these events: Electronic transaction Paper check transaction Check cancellation Whether to allow recurring billpay transactions to use overdraft funds. Whether to defer fees when there are sufficient funds for the bill payment but not the fee. Which Events API webhooks to receive. If you are the system of record for your accounts, you should decide whether to approve scheduled billpay transaction using the External Trans API. If not, you must devise a way to synchronize your balances with Galileo so that Galileo always has an account's true balance. Billpay process The basic billpay process proceeds as follows: The account holder adds the biller, either paper or electronic. The account holder creates a billpay transaction, either one-time or scheduled. On the transaction's process date, Galileo adjusts the amount from the account. Galileo further processes the transaction: Electronic biller — Galileo compiles all the electronic transactions into one file and sends it to Mastercard, four times per day. Paper biller — Galileo prints the checks on the next business day and mails them. The biller receives either the electronic payment or the paper check. Billpay FAQ Q — When is the billpay amount removed from the account? A — On the same day that the transaction is initiated, within 30 minutes, whether it was initiated with the Program API or the scheduler. This applies to both electronic and paper transactions. Q — How soon after a successful billpay API call will the transaction be available in Get Account Overview? A — Internal processes pick up the transaction, and within 15 minutes or so after the amount is adjusted from the account, it is available in Get Account Overview and other transaction-retrieval endpoints. Q — What happens if there are insufficient funds for a billpay transaction? Is there a retry? A — There is no retry. Galileo sends a notification, and you can pass that notification to the account holder, who can add funds to the account and initiate a new transaction. Q — What if there are sufficient funds for the bill payment but not for the fee? Can we defer the fee? A — Yes, you can set the BPPPF parameter to allow fee deferral. The fee is charged as soon as there are sufficient funds in the account. Q — How do we know that a bill payment has been successful? A — For electronic bills, Mastercard sends Galileo notification only when the payment fails or is rejected; successful payments get no notification. For paper checks, Galileo sends an event message when Galileo receives the cashed check from the bank. Q — An account holder calls and says that their biller did not receive payment. What can we provide to the account holder? A — Call Get Bill Payment History. This endpoint returns both electronic and paper check details. Q — How do we get check images? A — There is no API endpoint to return a check image. Q — If a check is lost in the mail, what do we do? A — Cancel the check, and then initiate another check payment. You may need to wait until after the check amount is returned to the account before initiating another, which happens after 1–3 days. Q — When we create an RPPS biller, does it validate biller account numbers? A — Not individual account numbers; however, the endpoint validates the account number format for the biller. Q — Are BPCM: billpay_check_mailed and BPCC: billpay_check_cleared events only for paper billers? A — Yes Q — When we remove a biller using the Remove Biller endpoint, does it also delete all the scheduled transactions assigned to it? A — No, we do not check the client biller record status to stop the scheduled transactions. Instead, use a Modify X Biller endpoint to cancel them. Updated 2 days ago Table of Contents Biller-direct vs. consolidated bill pay Account holder experience Biller types Electronic Paper check Decisions to make Billpay process Billpay FAQ "
131,docs.galileo-ft.com/pro/reference/post/getrtfaccountrelationship,Get RTF Account Relationship For instructions on using this endpoint see Creating Real-Time Funding Accounts.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description611-01Account must be a funding or a spending accountLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
132,docs.galileo-ft.com/pro/reference/api-reference-events-api-product-switched,"product_switched Code — PSWC Event trigger — The prod_id for the account changed. Processes — These processes contain the event trigger: Program API endpoints: Set Account Feature with featureType: 3 Switch Product endpoint Customer Service Tool Galileo-hosted cardholder websitee Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PSWC"" old_prod_id X The old/original product ID of the account, before the switch. Example: ""1234"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X New product ID. Example: ""4455"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""product_switched"" Example JSON# product_switched example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""PSWC"", ""old_prod_id"": ""1234"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""4455"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""prod_switch"" } Table of Contents Fields Example "
133,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-retry,"billpay_retry Code — BPAR Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billername X Name of the biller. billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPAR"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_retry"" Example JSON# billpay_retry example: { ""act_type"": ""AD"", ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPAR"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_retry"" } Table of Contents Fields Example "
134,docs.galileo-ft.com/pro/docs/cashback-simulation,"Cashback Simulation A cardholder makes a $45 purchase at a grocery store and requests $20 cash back. Before simulating this transaction type, verify that your product settings do not prohibit cashback transactions (such as the CASHB parameter). In the request, the amount should contain the purchase amount plus the cashback amount. For cashBack pass the amount to return in cash. This amount is visible in the cashback_amount field of the Auth API. Authorization Call Create Simulated Card Authorization with these parameters. ParameterValueaccountNoPAN, PRN or CADamount65associationvisa or mc_authmerchantNameCentral Supermarketmcc5411cashBack20specialFunctionsadd_cashback (Visa)make_cashback (Mastercard)transType1 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.799,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 5544  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""790596d5-1fb8-48f2-958b-5d307ddc3bad""  },  ""system_timestamp"": ""2022-10-11 15:12:17"",  ""rtoken"": ""3c5c147a-0a1b-453f-b718-71c2b093c77e"" } View the authorization Call Get Authorization History to see the authorization. The amount and local_amt fields show the same amount. JSON""authorizations"": [    {     ""auth_id"": ""5544"",     ""details"": ""Central Supermarket LT LAKE CITY UTUS"",     ""details_formatted"": ""CENTRAL SUPERMARKET, LT LAKE CITY, UT"",     ""amount"": ""-65"",     ""timestamp"": ""2022-10-11 15:12:17"",     ""type"": ""A"",     ""mcc"": ""5411"",     ""merchant_id"": ""X7adaltrCVWxDKE"",     ""acq_id"": ""727755"",     ""terminal_id"": ""94463484"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""V"",     ""local_amt"": ""000000006500"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ] Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id from the previous authorizationaccountNoPAN, PRN or CADamount65 or leave blankassociationvisa or mc_auth JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 5.494,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 806  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""e39d9881-dd7e-42a6-b19c-558d8a23c355""  },  ""system_timestamp"": ""2022-10-11 15:16:21"",  ""rtoken"": ""168b7a7b-0565-4c65-add5-0241c92a0eb3"" } Transactions created Call Get All Transaction History to see the three ledger entries: JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Central Supermarket, LT LAKE CITY, UTUS"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-10-11 15:16:19"",     ""amt"": -65,     ""source_id"": ""5544"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VSA"",     ""arn"": ""17277552284855368553685"",     ""merchant_id"": ""X7adaltrCVWxDKE"",     ""external_trans_id"": """",     ""calculated_balance"": 935,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:12:17"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL SUPERMARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""5544"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Supermarket, LT LAKE CITY, UTUS"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-10-11 15:16:19"",     ""amt"": 65,     ""source_id"": ""5544"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""BVA"",     ""arn"": ""17277552284855368553685"",     ""merchant_id"": ""X7adaltrCVWxDKE"",     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:12:17"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL SUPERMARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""5544"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Supermarket, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-11 15:12:17"",     ""amt"": -65,     ""source_id"": ""5544"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VIA"",     ""arn"": """",     ""merchant_id"": ""X7adaltrCVWxDKE"",     ""external_trans_id"": """",     ""calculated_balance"": 935,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:12:17"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL SUPERMARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""5544"",     ""local_amt"": 65,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    } } Updated 4 months ago Table of Contents Authorization View the authorization Settlement Transactions created "
135,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-confirmed,"fed_benefits_status_confirmed Code — FBSC Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" fbe_status_id Identifier for the federal benefits status. Example: ""204938675"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_confirmed"" Example JSON# fed_benefits_status_confirmed example: { ""balance_id"": ""20211"", ""fbe_status_id"": ""204938675"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_confirmed"" } Table of Contents Fields Example "
136,docs.galileo-ft.com/pro/reference/api-reference-special-characters,"Special Characters By default, the name parameters (firstName, middleName, lastName) accept only letters (including International characters, when enabled), spaces, single quotes, and hyphens. To support an extended character set for the name parameters, the CNSCR provider parameter must be set. Extended character set CharacterDescription.Period,Comma?Question mark@At sign&Ampersand!Bang (exclamation point)#Hash sign~Tilde (standalone)*Asterisk;Semicolon+Plus sign0-9Numerals businessName parameter The businessName parameter supports these characters as well as the International characters, when enabled. CharacterDescriptionA-Z, a-zLetters0-9NumbersSpaces-Hyphen'Single quote.Period,Comma?Question mark#Hash sign~Tilde (standalone)*Asterisk+Plus sign@At sign!Exclamation point( )Parentheses_Underscore;Semicolon’Closing single curly quote&Ampersand must be URL-encoded: %26 International characters International characters are Latin letters with diacritics such as accent marks, umlauts, and tildes. To use this character set, contact Galileo to enable it. The Latin-9 ISO-8859-15 character set includes these characters: á, é, í, ó, ú, Á, É, Í, Ó, Ú à, è, ì, ò, ù, À, È, Ì, Ò, Ù â, ê, î, ô, û, Â, Ê, Î, Ô, Û ã, ñ, õ, Ã, Ñ, Õ ä, ë, ï, ö, ü, ÿ, Ä, Ë, Ï, Ö, Ü, Ÿ å, Å ø, Ø æ, Æ, œ, Œ, ß ç, Ç š, ž, Š, Ž þ, ð, Þ, Ð The following parameters support the Latin-9 character set (ISO-8859-15). These parameters are found in multiple endpoints: Name fields firstName, middleName, lastName, businessName, merchantName, (location) name, beneficiaryFirstName, beneficiaryLastName, billerName, storeName Address fields address1, address2, shipToAddress1, shipToAddress2, billerAddress1, billerAddress2, storeAddress1, storeAddress2, city, shipToCity, billerCity, storeCityTable of Contents Personal name parameters businessName parameter International characters "
137,docs.galileo-ft.com/pro/docs/build-a-sample-app,"Build a Sample App This tutorial will help you get familiar with the Galileo API. You will learn to create a simple account, activate it, simulate a transaction, send funds to another account, and freeze the account. Before you start, see the Quickstart to get connected to the API. You can follow this tutorial using your own backend code or the Postman API client (see Postman Setup for a brief introduction to the tool). Step 1 — Create an account and deposit funds In this step, you will create an account and deposit funds using these endpoints: Create Account Create Payment For code samples of each endpoint request, see the API reference documentation. 📘NoteThe Create Account endpoint can deposit funds during account creation, but it's often useful to deposit funds separately. In this tutorial, you will use the Create Payment endpoint to deposit funds after you create an account. Create an account To create an account, send a POST request to the Create Account endpoint. For all API requests in this tutorial, you'll need these credentials: apiLogin apiTransKey providerId Check the output. There should be a new pmt_ref_no in the response data. In JSON format, the output should look like this: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 09:03:31"",  ""response_data"": [   {    ""pmt_ref_no"": ""1111"",    ""product_id"": ""5094"",    ""galileo_account_number"": ""0000"",    ""cip"": null,    ""card_id"": ""2726"",    ""card_number"": ""512773XXXXXX1828"",    ""expiry_date"": null,    ""card_security_code"": null   }  ],  ""processing_time"": 4.772,  ""echo"": {   ""transaction_id"": ""c6285802-72e4-4760-9011-b39993ecfbd5"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } In the next step, you'll use the new account number to deposit funds into the account. Deposit funds To deposit funds into the account, call the Create Payment endpoint using the values in this table: ParameterValueaccountNoThe pmt_ref_no from your createAccount callamount50typeRL (indicates a Retail Load payment) 📘NoteWhen you deposit funds to an account in Sandbox and CV, the funds are not taken from a real account, but are simulated in the environment. Check the output. The new_balance should be 50: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 09:25:31"",  ""response_data"": {   ""old_balance"": 0,   ""new_balance"": 50,   ""fee_amount"": ""0"",   ""payment_trans_id"": 2543,   ""transaction_id"": ""08009594-5b37-4e84-9b42-4dd7450010f6""  },  ""processing_time"": 4.492,  ""echo"": {   ""transaction_id"": ""08009594-5b37-4e84-9b42-4dd7450010f6"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } Keep your code accessible. You will use both of these endpoints in later steps. Step 2 — Activate the card and account In this step, you will activate the account and card so that they can be used in transactions. Card and account statuses are independent, so you will need to activate both before you can use the card. You'll activate both with these endpoints: Modify Status Get Card Activate the account To activate the account, call the Modify Status with the following values: ParameterValueaccountNoThe pmt_ref_no from your createAccount calltype11 (moves the account to status: N). For more information on types and statuses, see the Account and card statuses table under Modify Status. Check the output. The account_status should be N, indicating that the account is active: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 10:24:13"",  ""response_data"": {   ""pmt_ref_no"": ""1111"",   ""account_status"": ""N""  },  ""processing_time"": 4.358,  ""echo"": {   ""transaction_id"": ""5ffa9361-fbfa-4068-8489-d14811b44e88"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } The account is now active but the card is not. To see the card status, call the Get Card endpoint with the following value: ParameterValueaccountNoThe pmt_ref_no from your createAccount call Check the output. The status should now be W (see Card Statuses for more information): JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-09 14:34:01"",  ""response_data"": {   ""card_number"": ""512773XXXXXX6554"",   ""expiry_date"": null,   ""card_security_code"": null,   ""status"": ""W"",   ""card_id"": ""2728"",   ""external_card_id"": null,   ""pmt_ref_no"": ""1111"",   ""first_name"": """",   ""middle_name"": """",   ""last_name"": """",   ""encrypted_card_number"": null,   ""encrypted_expiry_date"": null,   ""embossed_cards"": [],   ""freeze_info"": {    ""status"": ""Unfrozen"",    ""start_date"": null,    ""end_date"": null   },   ""pin_fail_count"": ""0"",   ""pin_fail_date"": null,   ""spend_controls"": {    ""available_credit"": null,    ""single_use"": null,    ""credit_limit"": null   }  },  ""processing_time"": 0.285,  ""echo"": {   ""transaction_id"": ""a551f1ba-aa71-4672-8eed-73b25a2ac484"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Activate the card To activate the card, call the Modify Status endpoint again, but change the type to 7: ParameterValueaccountNoThe pmt_ref_no from your createAccount calltype7 (moves the card to status: N). For more information on types and statuses, see the Account and card statuses table under Modify Status. Check the output again. The account_status should still be N: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 10:36:15"",  ""response_data"": {   ""pmt_ref_no"": ""1111"",   ""account_status"": ""N""  },  ""processing_time"": 4.647,  ""echo"": {   ""transaction_id"": ""41690d14-cf35-4f28-bfc8-924d50e0ae5a"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Call the Get Card endpoint again with the same accountNo. Check the output for the Get Card call. The status should now be N, indicating the card is active: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-09 14:45:56"",  ""response_data"": {   ""card_number"": ""512773XXXXXX6554"",   ""expiry_date"": null,   ""card_security_code"": null,   ""status"": ""N"",   ""card_id"": ""2728"",   ""external_card_id"": null,   ""pmt_ref_no"": ""0000"",   ""first_name"": """",   ""middle_name"": """",   ""last_name"": """",   ""encrypted_card_number"": null,   ""encrypted_expiry_date"": null,   ""embossed_cards"": [],   ""freeze_info"": {    ""status"": ""Unfrozen"",    ""start_date"": null,    ""end_date"": null   },   ""pin_fail_count"": ""0"",   ""pin_fail_date"": null,   ""spend_controls"": {    ""available_credit"": null,    ""single_use"": null,    ""credit_limit"": null   }  },  ""processing_time"": 0.296,  ""echo"": {   ""transaction_id"": ""54c53a34-d1d3-43cd-9e9e-d824f97fc80d"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Step 3 — Simulate a card transaction After the account and card are active, you can simulate a card transaction. In a test environment, it is not possible to use a real transaction with a card network. Instead, you'll simulate authorization, simulate settlement, and then check the final balance with these endpoints: Simulate Card Authorization Simulate Card Settlement Get Balance Simulate authorization To simulate the authorization of a $20 transaction, call the Simulate Card Authorization endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from your createAccount callamount20associationvisamerchantNameA business name (for example, The Toastery). Check the output. The auth_response_code should be 00: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-07 15:51:57"",  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 1437  },  ""processing_time"": 0.756,  ""echo"": {   ""transaction_id"": ""4a228320-c991-4a8f-b95a-eb6c82f8961b"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } 📘NoteIf the auth_response_code is 05, it is likely that either the card or account was not properly activated (see Authorization Response Codes for more information). Make sure to pass type: 7 and type: 11 through the Modify Status endpoint. Simulate settlement Now that you have authorized a transaction, the next step is to settle it. Call the Simulate Card Settlement endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from your createAccount callassociationvisaauthIdThe authId from your createSimulatedCardAuth call Check the output. The settle_response_code should be 00: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 10:55:49"",  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl_id"": 512  },  ""processing_time"": 1.826,  ""echo"": {   ""transaction_id"": ""2af57d44-8787-43bd-b314-99b35832a354"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Get the balance Check the balance to make sure the transaction went through as expected. Call the Get Balance endpoint with the following value: ParameterValueaccountNoThe pmt_ref_no from your createAccount call Check the output. The balance should be 30: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.088,  ""response_data"": {   ""balance"": 30,   ""balance_without_pending"": ""30"",   ""currency_code"": ""840"",   ""pending_adjustments"": 0,   ""pending_billpay"": 0,   ""pending_purchase"": 0,   ""balance_without_auths"": 30  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""CUXXD4AEUMWOBMPKYBZ8""  },  ""rtoken"": ""8cc16de0-5eda-4e2a-968e-3b08fce6f778"",  ""system_timestamp"": ""2020-07-13 10:31:56"" } Step 4 — Send funds between accounts In this step, you’ll set up a second account, activate it, and send funds from the first account. Be sure to keep your account number handy. You will use these endpoints: Create Account Modify Status Create Account Transfer Create a second new account To create a second account, call the Create Account. Check the output. The status should indicate Success: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:24:08"",  ""response_data"": [   {    ""pmt_ref_no"": ""7777"",    ""product_id"": ""5094"",    ""galileo_account_number"": ""0000"",    ""cip"": null,    ""card_id"": ""2727"",    ""card_number"": ""512773XXXXXX7167"",    ""expiry_date"": null,    ""card_security_code"": null   }  ],  ""processing_time"": 4.882,  ""echo"": {   ""transaction_id"": ""40478edd-5047-477d-b100-83f339a090c5"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Activate the receiving account and card Activate the second account and card in the same way you activated the first account. To activate the account, call the Modify Status endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from the second account you createdtype11 (moves the account to status: N) Check the output. The account_status should be N, indicating that the account is active (see Account Statuses for more information): JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:27:03"",  ""response_data"": {   ""pmt_ref_no"": ""7777"",   ""account_status"": ""N""  },  ""processing_time"": 4.524,  ""echo"": {   ""transaction_id"": ""78dc07c5-a353-48dc-a8a7-3c84e5df1873"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Next, activate the card. Call the Modify Status endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from the second account you createdtype7 (moves the card to status: N) Check the output again. The account_status should be N: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:27:03"",  ""response_data"": {   ""pmt_ref_no"": ""7777"",   ""account_status"": ""N""  },  ""processing_time"": 4.524,  ""echo"": {   ""transaction_id"": ""78dc07c5-a353-48dc-a8a7-3c84e5df1873"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Transfer funds To transfer funds from the first account to the second, call the Create Account Transfer endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from the first account you createdamount10transferToAccountNoThe pmt_ref_no from the second account you created Check the output response_data: The top-level new_balance should be 20 (this is the balance for your first account). Under transfer_to_account, the new_balance should be 10 (this is the balance for your second account): JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:33:53"",  ""response_data"": {   ""old_balance"": 30,   ""new_balance"": 20,   ""adjustment_trans_id"": 2042,   ""transfer_account_id"": ""1150"",   ""sender_fee_amount"": 0,   ""payment_trans_id"": 2549,   ""transfer_to_account"": {    ""old_balance"": 0,    ""new_balance"": 10   }  },  ""processing_time"": 4.809,  ""echo"": {   ""transaction_id"": ""753d02ed-fe4c-4d29-aa5e-89641f78692e"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } You can verify the balance by sending each PRN to the Get Balance endpoint. You might also try sending each PRN to Get Transaction History to see how one account was credited and the other debited. Step 5 — Freeze an account In this step, you'll freeze an account, verify that it's frozen, then unfreeze it. You will use these endpoints that you've already had practice with: Modify Status Simulate Card Authorization Simulate Card Settlement Freeze the account To freeze the account, call the Modify Status endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from the second account you createdtype17 (freezes the account) Check the output. The status should indicate Success: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:48:10"",  ""response_data"": {   ""pmt_ref_no"": ""1111"",   ""account_status"": ""N""  },  ""processing_time"": 4.391,  ""echo"": {   ""transaction_id"": ""564f70db-759e-4601-a9f0-c2e95cd26e54"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } 📘NoteWhen you freeze an account, the freeze is reflected in the freeze_info object in the Get Card and Get Account Cards endpoints, and not the status. See Freezing cards in the About Cards guide for more information. Test the frozen account Try authorizing a transaction to see what happens to a frozen account. Call the Simulate Card Authorization endpoint with the following values: ParameterValueaccountNoThe pmt_ref_no from the first account you createdamount10associationvisamerchantNameA business name (for example,The Toastery). Check the output. The auth_response_code should be 57, indicating that the transaction is not permitted (see Authorization Response Codes for more information): JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:52:01"",  ""response_data"": {   ""auth_response_code"": ""57"",   ""auth_response_description"": ""Transaction not permitted"",   ""auth_id"": 1445  },  ""processing_time"": 0.505,  ""echo"": {   ""transaction_id"": ""6d2c2ea9-bd8f-4b12-8d8d-ced6a3ba68fb"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Unfreeze the account To remove the freeze from the account, call the Modify Status endpoint again, but change type to 18: ParameterValueaccountNoThe pmt_ref_no from the frozen accounttype18 (unfreezes the account) Check the output. The status should indicate Success: Text{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:55:19"",  ""response_data"": {   ""pmt_ref_no"": ""1111"",   ""account_status"": ""N""  },  ""processing_time"": 4.42,  ""echo"": {   ""transaction_id"": ""292c9caf-6482-43d4-895e-f0f81587bb53"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Test the unfrozen account Call the Simulate Card Authorization endpoint with same following values: ParameterValueaccountNoThe pmt_ref_no from the first account you createdamount10associationvisamerchantNameA business name (for example,The Toastery). Check the output. The auth_response_code should now be 00, indicating that the transaction is authorized: JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""system_timestamp"": ""2020-12-08 11:58:01"",  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 1446  },  ""processing_time"": 0.543,  ""echo"": {   ""transaction_id"": ""ed6de582-897d-4968-8de9-d5ccf89a2188"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  } } Updated about 2 months ago Table of Contents Step 1 — Create an account and deposit funds Create an account Deposit funds Step 2 — Activate the card and account Activate the account Activate the card Step 3 — Simulate a card transaction Simulate authorization Simulate settlement Get the balance Step 4 — Send funds between accounts Create a second new account Activate the receiving account and card Transfer funds Step 5 — Freeze an account Freeze the account Test the frozen account Unfreeze the account Test the unfrozen account "
138,docs.galileo-ft.com/pro/reference/post/activatecard,Activate Card Consult the Activating a Card procedure for more information.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description467-01No non-activated card found that match all parameters467-02No non-activated cards found467-03Card successfully activated - However there were errors deactivating temporary cards467-04Invalid account - account is in charged off status and cannot be modified467-05Invalid account - account is in fraud status and cannot be modified467-06Card not activated - card in blocked statusLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
139,docs.galileo-ft.com/instant/reference/payment-type,Payment Type TypeDescriptiondirect_depositDirect depositmanualManual payment from GalileowireA wire transfer 
140,docs.galileo-ft.com/pro/docs/direct-deposit-switch,"Direct Deposit Switch Direct deposit functionality is a powerful factor in increasing customer engagement and spend. Accounts with direct deposit have ~10x lifetime value over accounts without direct deposit. However, the conventional method of setting up direct deposit is cumbersome and mistake-prone. The account holder has to manually provide routing and account numbers to their employer or payroll provider, either by filling out a paper form, providing a voided check, or by updating information in an online portal. There are no validation checks to ensure that there were no typos—only when the first paycheck arrives several days or weeks later does anyone know whether the setup has been successful. If something went wrong, it can take quite a while to fix the problem. Galileo's Direct Deposit Switch provides your customers with a speedy, guided method to set up direct deposit that avoids many of the pitfalls involved with the manual process. Galileo's Direct Deposit Switch provides a ~50% increase in direct deposit adoption over conventional methods. The convenience and ease of Direct Deposit Switch provides satisfaction to customers, who expect a seamless experience from today's banks. Advances across the market in direct deposit setup mean that your offering will be competitive. About 70% of your customers can use Direct Deposit Switch because Galileo is integrated with: Most top employers and payroll companies All federal agencies All state unemployment agencies Gig-worker platforms Additional coverage as partner integrations grow Instead of integrating with multiple vendors, consolidate your direct deposit functionality with Galileo's one-stop shop. Galileo's strong market presence and higher volume tractions mean better rates than you could get from integrating directly with a third-party vendor. Customer experience Your customers' experience can be as simple as this: Create an account on your platform. Launch a Direct Deposit Setup control on your interface. Customers follow a simple set of prompts to set up direct deposit. Select the employer or payroll provider from a list. Log in using company credentials. Specify how much of each check—some or all—to deposit in the new account. Submit request. Get immediate feedback about the status of the request. Because Direct Deposit Switch permits your customers to specify how much of a check to deposit in their accounts, they can create accounts for specific purposes, such as a vacation or education fund, and make regular deposits into those accounts. Implementation You need only create a user interface to launch the Direct Deposit Switch functionality. Most of the rest of the interface is provided by Galileo: Employer/payroll selector Login screen Amount selector Success/failure screens See Setting Up Direct Deposit Switch for implementation instructions.Updated 4 months ago Table of Contents Customer experience Implementation "
141,docs.galileo-ft.com/pro/docs/about-transactions,"About Transactions This guide describes general characteristics of transactions in the Galileo system. For an explanation of how card transactions work specifically, consult About Card Transactions. In the Galileo system, “transaction” describes any movement of funds into or out of a customer account. Transaction types include payment-card transactions, direct deposits, ACH transfers, cash loads, ATM fees, and other types of money movement. Transactions are central to any banking app. Your customers expect to use your product to create transactions and to see a history of their transactions. You can enable them to do both by using Galileo's API. Creating transactions Transactions are created in two primary ways: Using the API — The transaction can be initiated by: Your customers on your web site or mobile app, such as an ACH credit You, according to your business logic, such as assessing a fee Outside the API — The transaction can be initiated by: A card reader at a point of sale or ATM, such as a card purchase at a merchant site. See About Card Transactions for more information. An external depositing entity, such as an employer making a direct deposit. See About ACH for more information. An external debiting entity, such as a utility automatically withdrawing a billing amount For the transactions that are created outside of your programmatic control, you can be notified of them by consuming the Auth API webhook or the Events API webhook, obtaining Transaction History via API, or consuming the daily RDFs. See About the Events API and About RDFs and CDFs for more information. 📘NoteGalileo recommends that you keep a record of all transactions in your own system by consuming the Events API and reconciling it against the daily RDFs, as explained in the Transaction History guide. You should also create an identifier in your system for each transaction that is unique across all transactions. See the Mapping Transactions Within Your System guide for more information. Classifying transactions Each transaction is classified by its activity category and transaction type. Activity category All transactions belongs to one of four activity categories: Authorization/Settlement — A transaction that occurs over a card network's rails (system), such as when a cardholder initiates a purchase at a store. Payment — A transaction by which funds are moved into a customer account, originating with the Program API or with an external source such as a paycheck deposit. Adjustment — A transaction used to modify the customer's balance for various operational purposes, either a credit or debit, originating with the Program API or a direct debit from outside the API, such as an ACH transaction. Fee — A transaction that charges a cardholder for a particular service, which may originate with the Program API or by an automated process. The authorization/settlement category is broken down into multiple activity types, whereas payments, adjustments, and fees have only one activity type each. The activity types in the authorization/settlement category differentiate among card networks such as Mastercard and Visa and types of transactions such as authorizations, expired authorizations, backouts and settlements. Galileo uses two capital letters to represent activity types. Some common authorization/settlement activity types are: CodeActivity typeAUMastercard Banknet authorizationSEMastercard Banknet settlementDBMastercard debit authorizationSDMastercard debit settlementVIVisa authorizationVSVisa settlementISVisa Interlink settlementPLVisa Plus settlementEXExpired authorization Non-network activity types are represented as follows: CodeActivity typePMPaymentADAdjustmentFEFee 📘NoteFor a list of all activity types consult the Activity Type enumeration. Transaction type Each of the activity type categories is divided into more specific transaction types, often called otypes. For example, a payment could be a direct deposit, a cashier's check, or a cash load, among others. A transaction type consists of one to four characters and may contain letters or numbers. Transaction types are case sensitive, so in the adjustment activity category, DC is a Discover chargeback whereas dc is a direct-load reversal. A transaction type is unique only within the activity category. For example, Z is a bill-payment check in the adjustment activity category and a refund in the authorization/settlement activity category. This table contains some authorization/settlement transaction types that are common to all networks: CodeTransaction type5Mastercard Banknet settlement8Mastercard Banknet settlement for mobile wallet or peer-to-peer cash transferARetail saleBBalance inquiryCPreauthorization completionLPreauthorizationRReversalWATM withdrawalZRefund See the Transaction Types enumeration for a list of authorization/settlement transaction types. For payments, adjustments, and fees, the list of supported transaction types is specific to your use case and bank requirements. Galileo will provide you with a curated list of transaction types that you will be using. Transaction codes A transaction code (often designated trans_code) is a combination of an activity type (the first two characters) and a transaction type (the remaining characters). This table shows some common transaction types. CodeActivity typeTransaction typeAUAAU — Mastercard Banknet authorizationA — Retail saleSE5SE — Mastercard Banknet settlement5 — SettlementDBADB — Mastercard debit authorizationA — Retail saleSDASD — Mastercard debit settlementA — Retail saleVILVI — Visa authorizationL — PreauthorizationISCIS — Visa Interlink settlementC — CompletionPMVTPM — PaymentVT — Visa Money TransferADHAD — AdjustmentH — ChargebackFE0013FE — Fee0013 — Domestic ATM withdrawal fee Because of this structure, a transaction code can be easily deconstructed to obtain the activity type and transaction type. Activity type and transaction type in the Galileo system The transaction code and its component parts are represented differently by different aspects of the Galileo system. Program API The program APIs return the transaction code, activity type and transaction type in these fields: Endpointtrans_codeact_typetypeGet Account OverviewXXGet Authorization HistoryXGet Transaction HistoryXXGet All Transaction HistoryXXX Use the trans_code for reconciliation with the Posted Transactions RDF. Events API Authorization, Settlement, and Transaction Events messages break out the transaction code into two fields: activity type (act_type) and transaction type (otype). Auth API The activity type must be derived from the auth_type and subnetwork parameters. For example, if auth_type: Auth and subnetwork: Mastercard Debit Switch, then the activity type is DB (Mastercard Debit Authorization). The transaction type is in the transaction_type parameter. However, the value will be a transaction-type description rather than the code. For example, you would see transaction_type: Balance Inquiry instead of B. RDFs The Posted Transactions RDFs includes the transaction code as TRANSACTION CODE/TYPE. The transaction code may be deconstructed to obtain the activity type and transaction type. Use the lookup file included with the RDFs to obtain the transaction code description. 📘NoteThe TRANSACTION CODE field in the Authorized Transactions RDF does not contain the trans_code. It contains a numeral that specifies the type of authorization that was requested. See the Authorization types list in the Transaction Types enumeration. CST On the All Transactions screen in the CST, the Type column contains the activity type description, and the Type field in the Details column contains the transaction type code. This table summarizes the way transaction codes are represented in the Galileo system. Galileo systemActivity type / transaction typeGet Account Overview Get Transaction History Get All Transaction Historytrans_codeEvents APIact_type / otypeAuth APIsubnetwork+ transaction_typePosted Transactions RDFTRANSACTION CODE/TYPECSTType column / Type field in the Details column Transaction properties Among a transaction’s properties, the most important are amount, timestamp, and the category-specific properties. Amount The amount or amt field indicates how much money is involved in the transaction and specifies which direction the funds are moving: a positive amount means that money is entering the customer account (credit) and a negative amount means that money is leaving the account (debit). The sign for the amount is represented differently in different Galileo systems. RDFs In the standard RDFs the TRANSACTION AMOUNT field is followed by the single-character TRANSACTION AMOUNT SIGN field, which contains either - (debit) or + (credit). In the secondary RDFs, the sign follows the amount and is in the same TRANSACTION AMOUNT field as the amount, for example: 30.25- for a debit or 23.67+ for a credit. Auth API In the Auth API the amount does not have a plus or minus sign. You must determine whether it is positive or negative by the transaction type. First, multiply the amount by –1, then multiply again by –1 for each of these conditions: auth_type: Reversal transaction_type: Merchant Credit transaction_type: Payment Program API Amounts that credit a cardholder account have no sign, and amounts that debit an account are are preceded by a hyphen: 35.41 and -254.78. Events API Most events have no sign in the amount field, so you must infer whether the amount is credited or debited by the event type. For example, a BAUT: auth event is a debit whereas AAPM: auth_payment is a credit. On the other hand, FREV: fee_reversal contains a negative number because it is reversing out a fee. These exceptions are noted in each Event description. Timestamp Depending on the data source and the activity category, there may be one or two timestamps. If there are two timestamps showing different times, the earlier timestamp shows the time the transaction was initiated and the later timestamp shows when it was posted. For authorization/settlements, the first timestamp is the authorization and the second the settlement. If the two timestamps show the same time it means the transaction was posted immediately. 📘NoteAll Galileo timestamps are in the America/Phoenix time zone (MST -07:00), a time zone that does not observe daylight saving Category-specific properties Other properties of the transaction may be important, depending on which activity category the transaction belongs to. For example, mcc (merchant category code) is pertinent to authorizations and settlements, and related_transaction is pertinent to pending fees. Linking transactions Some transactions pass through multiple phases before completion, such as most card transactions (authorization/settlement), whereas fees are often connected to transactions that may or may not have originated on the card networks. The fields in this table can help you link related transactions. Transaction typeLinked toLinking fieldAuthorizationAuthorizationoriginal_auth_idprior_idoriginal_idReversal IDSettlement or postingAuthorization or non-network transactionauth_idsource_idFeeAny transactionrelated_transaction The linking fields for authorizations have different names in different systems, but they all contain the same value: original_auth_id — Get Authorization History, Get Transaction History, Events API prior_id — Get All Transaction History original_id — Auth API Reversal ID — RDFs (by request) and CST related_transaction — Get Pending Fees and Get Account Overview. The linking fields contain the auth_id of a previous authorization in these circumstances: The merchant performs incremental authorizations for a single purchase. Each authorization has the auth_id of the previous authorization in the chain. An authorization or preauthorization is reversed. The reversal has the auth_id of the transaction to reverse in the linking field. A preauthorization is followed by a completion. The completion contains the auth_id of the original preauthorization. You charge a fee for a card transaction, such as an ATM fee. The fee is broken out separately from the settlement in the Posted Transactions RDF, and the fee entry has the auth_id of the original authorization. (The original authorization has the fee included in the amount instead of broken out.) For authorization/settlement transactions the auth_id and source_id contain the same value. However, the source_id for a transaction that does not originate on a card network may or may not have an auth_id, but when the auth_id is present, the source_id is often different, because it maps to the specific transaction type such as a payment ID or fee ID. For example, a Maestro load payment (trans_code: PMMX) can have an auth_id in the Authorized Transactions RDF that maps to the auth_id in the Posted Transactions RDF, but the source_id is different, because it maps back to the payment ID. See Scenario 17: Card Load (Maestro) for an example. In the CST, the ID field always maps to the source_id. For examples of linking fields in use, see these card transaction scenarios: Scenario 2: Preauthorization with Completion Scenario 3: Incremental Authorizations Scenario 4: Reversal on Authorization Before Clearing (Mastercard) Scenario 5: Reversal on Preauthorization Before Clearing (Visa) Scenario 12: ATM Reversal Transaction history See the Transaction History guide for the various methods to retrieve and maintain an account’s transaction history.Updated about 1 month ago Table of Contents Creating transactions Classifying transactions Activity category Transaction type Transaction codes Activity type and transaction type in the Galileo system Transaction properties Amount Timestamp Category-specific properties Linking transactions Transaction history "
142,docs.galileo-ft.com/pro/reference/post/removeachaccount,Remove ACH Account For more information on this endpoint see Removing an ACH account in the ACH Endpoints guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description492-01ACH account not found.492-02ACH account has already been deletedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
143,docs.galileo-ft.com/pro/reference/api-reference-events-api-single-use-invalid-amount,"single_use_invalid_amount Code — SUVA Event trigger — Galileo determines the authorization falls below the minimum transaction amount configured for the product. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" de39 See Authorization Response Codes for possible values. Example: ""00"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amt Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" merchant_postal_code The postal code for the merchant. Example: ""10021"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SUVA"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_requester Name of the entity that is requesting a tokenized version of the card. Example: ""Apple Inc."" token_requester_id Identifier for ""token_requester"". Example: ""40010030273"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""single_use_invalid_amount"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# single_use_invalid_amount example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""de39"": ""00"", ""domestic"": ""Y"", ""fee_amt"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant"": ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""merchant_postal_code"": ""10021"", ""msg_event_id"": ""243693"", ""msg_id"": ""SUVA"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_requester"": ""Apple Inc."", ""token_requester_id"": ""40010030273"", ""token_type"": ""Apple Inc."", ""type"": ""single_use_invalid_amount"" } Table of Contents Fields Example "
145,docs.galileo-ft.com/pro/reference/api-reference-events-api-bal,"bal The Galileo process that reports daily balances runs every morning from 03:00–04:00 MST. When PDBAL is set, BBAL is sent only after the first deposit has been made to the account. Also see BNEG: neg_bal, which you can enable to notify about negative balances only, leaving BBAL for positive and zero balances. Codes — AABI, BBAL, BMON Event trigger — One of these things happens: AABI — You or Galileo approve an ATM balance inquiry. BBAL — The account has a positive balance today (if MPNEG is set) or the daily balance is being reported. BMON — The monthly balance is being reported. Processes — These processes contain the event trigger: AABI — Incoming ATM balance inquiry BBAL — Internal process that reports daily balances BMON — Internal process that reports monthly balances Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad BBAL and BMON only. Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BBAL"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts BBAL and BMON only. The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""bal"" user_data BBAL and BMON only. Populated according to your use case and needs by arrangement with Galileo. Example JSON# bal example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""BBAL"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""bal"" } Table of Contents Fields Example "
146,docs.galileo-ft.com/pro/reference/api-reference-deposit-status-codes,"Deposit Status Codes StatusDescriptionEErrorGDeposit returned.LManual Review for large dollar amount.NNew deposit posted, but activity not inserted.PProcessed activity inserted.QReturned to the bank in return files.RMarked for return pending status.TManual review for tax deposit.UManual review for name match review.VPaypal Deposits less than 1 (this is hardcoded).WPosted direct deposit that was reversed.XExceptionYUnposted direct deposit that was reversed.ZCanceled without being processed.iManual review returns, review due to a load limit violation or account status issue.lPending additional information.mManually processed deposit--for EPS.tPending additional information.uPending additional information. "
147,docs.galileo-ft.com/pro/reference/dispute/post/addrequireddocs,"Add Required Docs Use the Add Required Docs endpoint to submit the PDF form that the account holder filled out, if a form was returned by Get Doc Requirements. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1509-4Invalid caseId or caseId returned no result1509-5Invalid Request:1509-6Error saving case1509-13caseId references a case that is currently locked1509-14Invalid request message1509-15This case is already resolved with status:1509-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
148,docs.galileo-ft.com/pro/reference/post/searchbillerdirectory,Search Biller Directory The response to this endpoint includes a masked account number that can be displayed to customers and other outside parties.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description421-01No billers found matching the search criteria Account Patterns Legend CharacterDefinition#Any number*Any letter@Any letter or number!Any special characterLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
150,docs.galileo-ft.com/pro/changelog/may-2021,"May 2021 New Customer ID Verification guide We added a new Customer ID Verification (KYC/CIP) guide to explain how to perform KYC/CIP and how to use Galileo's integrated ID verification process with the account-creation endpoints. Disputes endpoints removal We removed the disputes-related endpoints from documentation pending the implementation of a new disputes process. If you still need to see documentation for those endpoints, contact Galileo. credit_ind field in API responses For endpoints that retrieve settled transactions—Get Transaction History and Get All Transaction History—a new credit_ind field has been added to the responses to specify whether the card was authenticated with a PIN or a signature: Y is for signature transactions and N means a PIN was used. [This entry formerly included Get Account Overview, which was an error.] Event correction The Creating an Overdraft Account guide used to say that the ODIN: overdraft_opt_in event was triggered by the Set Account Feature endpoint. It has been corrected to say that the event is triggered when a DDA is created with ODELG set, and that the event can also be triggered by opting in to overdraft on the CST. ACH events descriptions updates We updated the descriptions for the ACH-related events to clarify which way the funds are moving as well as what triggers the events. ACHC: ach_credit_fail ACHR: ach_debit_fail ACRT: ach_return FACH: ach_credit_return "
151,docs.galileo-ft.com/pro/reference/post/getcardpinchangekey,Get Card PIN-Change Key Consult the Direct POST PIN-Set Procedure or the Direct Render PIN-Set Procedure for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description536-01Possible failure due to previous attempt. Two processes attempted to save the same record to the database at the same time.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
152,docs.galileo-ft.com/pro/docs/reports-for-installment-loans,"Reports for Installment Loans Galileo currently offers two standard reporting files for installment loans: Daily Loan Status — A list of the current loans, subproducts, statuses, and installment due dates Daily Transaction — Details on daily transactions related to loans Reports are securely delivered as a CSV file each day. The reports contain invaluable data to reconcile your loans and transactions data for that day. It can also be used for reporting purposes to your bank partner. Daily Loan Status file This table contains details about the fields included in the Daily Loan Status file. The fields in the daily file are presented in this order. Field NameTypeLengthDescriptionLoan_Idstring30Galileo-generated identifier for the loan.Customer_Prnstring12The PRN for the customer’s primary account.Subproduct_Codestring15Galileo-generated identifier for the loan subproduct assigned to the simulation or loan, as configured for the program. For programs with multiple subproducts, the choice would be determined by underwriting.Loan_Status_Descriptionstring13Current status of the loan. See the Loan Payment Status and Loan Status Table for detailed descriptions of each status.Loan_Payment_Statusstring4Current loan payment status code. See the Loan Payment Status and Loan Status Table for detailed descriptions of each status.Loan_Aprfloat16(2)Annual percentage rate for interest charged on the loan. Calculated from the interest defined by the subproduct, the length of the loan, and the origination fee (if applicable).Loan_Start_Datedate8Date the funds are disbursed and interest, if configured, begins to accrue. Format: YYYYMMDDLoan_Start_Today_Flagstring5Returns TRUE if the loan started today; otherwise, returns FALSE.Interest_Ratefloat16(2)Interest rate applied to the loan, as defined by the subproduct.Per_Diemfloat16(2)Daily interest charged on the loan. This amount will update as installments are paid.Scheduled_Installment_Amountfloat16(2)Payment due at each installment.Loan_Terminteger9Total count of installments, as defined by the subproduct.Original_Loan_Amountfloat16(2)Total loan amount borrowed by the customer.Principal_Balancefloat16(2)Current principal balance remaining on the loan.Principal_Paid_To_Datefloat16(2)Principal amount of the loan that is paid off.Interest_Paid_To_Datefloat16(2)Interest amount of the loan that is paid off.Fees_Paid_To_Datefloat16(2)The fee amount the customer has paid to date.Total_Payoff_Amountfloat16(2)Total amount to pay off the remaining loan if the customer paid it off today. Includes the remaining principal amount, interest, and fees.Maturity_Datedate8The projected date the loan can be paid off by. This is a dynamic value that is based on the customer's actual payment activity. Format: YYYYMMDDClosed_Datedate8Date that the loan was closed. Value returned if the loan is paid off or charged off. Otherwise, it returns null. Format: YYYYMMDDPaid_Installmentsinteger2Number of installment payments that the customer has made on the loan.Remaining_Installmentsinteger2Number of installment payments remaining on the loan.Non_Accrual_Flagstring5Returns TRUE if interest is not accruing on the loan. Otherwise, returns FALSE.Delinquency_Datedate8Date when the oldest unpaid installment became past due. (Coming Soon!) Format: YYYYMMDDPast_Due_Amountfloat16(2)The installment amount that is past due for the loan.Days_Past_Dueinteger9The number of days that the loan is delinquent. When the loan is charged off, this value resets to 0 because the loan is officially closed.Loan_Status_Reason_Codestring32The reason provided for charging off the loan, as provided in the API request.Total_Charge_Off_Amountfloat16(2)The total amount of the loan that was charged off.Installment_Due_Datedate8Dates when the installments are due. Includes up to 24 columns up to 24 installments. Format: YYYYMMDD Loan Payment Status and Loan Status table This table shows fields returned in Loan_Payment_Status and Loan_Status_Description in the Daily Loan Status file. Loan payment status codeLoan statusOverall loan payment descriptionOCURValidOpen and payments are current.OPDEValidOpen, but at least one payment is past due.PYOFCompletedPaid offCGOFCharge OffCharged-offPNDGPendingLoan has been simulated but not created.EXPDExpiredLoan is past the maturity date, and at least one of the installment is unpaid and past due. Daily Transaction file This table contains details about the fields included in the Daily Transaction file. The fields in the daily file are presented in this order. Field NameTypeLengthDescriptionProduct_Codestring5Indicates the loan product. Currently the only possible value is 90000.Subproduct_Codestring15Galileo-generated identifier for the loan subproduct assigned to the simulation or loan as configured for the program. For programs with multiple subproducts, the choice would be determined by underwriting.Branch_Codestring3Indicates the assigned bank branch.Institution_Codestring4The fintech identification number.Loan_IDstring30Galileo-generated identifier for the loan.Currency_Codestring3Three-letter ISO 4217 code is provided for the currency. Currently it only supports USD.Txn_Codestring4Specifies the type of transaction. Possible values: 9001 — Loan advance 9099 — Advance reversal 9002 — Regular payment9098 — Payment reversal 9020 — Payoff 9024 — Charge off 9006 — Past due payment 9005 — Installment past due 9004 — Daily interest accrualReason_Codestring4Specifies whether the transaction source is an external or internal DDA account. 3 — External 9999 — Referential code to indicate internal loan activitiesTransaction_Amountfloat16(2)Amount of the transaction.Amount_Typestring2Specifies whether the transaction was related to principal, interest, or fees. Possible values: 4 — Principal 5 — Interest 64 — FeesCharge_CodestringSpecifies the fee type that is applied to the transaction. Possible values: 8 — Origination fee 9 — Late feeSituationstring11Indicates whether interest is accruing on the loan. Possible values: Accural Non_AccuralBusiness_Datedate8Date the transaction became effective. Format: YYYYMMDDValue_Datedate8Date the transaction became effective. Format: YYYYMMDDPayment_Idstring30Galileo-generated unique identifier for the payment on the loan. This is the same field as loan_payment_number, which is provided in the Create Loan Payment API response.Payment_Source_Codestring4Specifies the source of the payment on the loan. Possible values: USRP — User-initiated payment SYSP — System-initiated payment CRDP — Credit payment CSRP — Customer service payment IVRP — IVR payment PCRP — Provisional credit payment MCRP — Merchant credit payment RCRP — Refund credit paymentReversal_Flagstring5Returns FALSE by default. Returns TRUE on the duplicate transaction record when a loan or payment is reversed. Allocation of payment amount in Daily Transaction file When a customer makes a payment, they first pay the interest, then the principal, and lastly the fees for the current installment. If there is an overpayment, after making the current installment payment, the remaining amount is allocated first to the interest of the next installment, then the principal and the fees. For the Daily Transaction file, this appears differently—the transactions will have separate rows. The transaction lines are separated by transaction codes for interest, principal, and fees. If there is an overpayment, the Daily Transaction file will include a line for each interest, principal, and fees depending on the amount due in the installment. If the transaction amount is $0.00, it will not be included. The loan_payment_number for all the transactions will be the same, which indicates that the customer made a single payment for multiple installments. For example, a customer made a payment of $205.00. The current installment due for the customer was $105.00. This breaks down to: $25.00 towards the interest $75.00 towards the principal $5.00 for the fees on that installment In the Daily Transaction file, you can expect to see the following: Transaction line for the interest paid ($25.00) for current installment Transaction line for the principal paid ($75.00) for current installment Transaction line for the fees paid ($5.00) for current installment Transaction line for the interest paid ($25.00) for next installment Transaction line for the principal paid ($75.00) for next installment Since the fee amount for the next installment is $0.00, the transaction line for will not be included.Updated 1 day ago Table of Contents Daily Loan Status file Loan Payment Status and Loan Status table Daily Transaction file Allocation of payment amount in Daily Transaction file "
153,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-limit-change,"overdraft_limit_change Code — ODSN Event trigger — The overdraft account status changes to N. Processes — These processes contain the event trigger: Automated process that unfreezes qualifying accounts Modify Status endpoint with type: 15 Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODSN"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: `""overdraft_limit_change"" Example JSON# overdraft_limit_change example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODSN"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_limit_change"" } Table of Contents Fields Example "
154,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-api,"mobile_activation API Code — VAPI Event trigger — Galileo receives an activation code from Visa. Process — This process contains the event trigger: The cardholder performed steps to verify their identity by following the instructions in the xYLP message. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""VAPI"" network See Events Network Codes for possible values. Example: ""V"" passcode X One-time passcode to activate the card. 6 digits. Example: ""999999"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" send_type X How the passcode was sent: email or phone. Example: ""email"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation API"" wallet_type Wallet provider. Only valid value is ""Visa"". Example JSON# mobile_activation API example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""VAPI"", ""network"": ""V"", ""passcode"": ""999999"", ""pmt_ref_no"": ""155101003022"", ""send_type"": ""email"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation API"", ""wallet_type"": ""Visa"" } Table of Contents Fields Example "
155,docs.galileo-ft.com/pro/docs/disputes-at-galileo,"Disputes at Galileo This guide explains Galileo's dispute process and what you can expect when using Galileo's dispute process. This document assumes that you are familiar with the concepts in About Disputes. As a Galileo client, you have these options for handling disputes: Let Galileo take care of it — Galileo offers a full end-to-end dispute process for both card transactions and ACH returns. Continue to the next section for more information. Provide your own solution — If you devise your own dispute process, you will still need to integrate your solution with Galileo to some degree. For example, if Galileo holds your balances and you need to grant provisional credit, you or your disputes provider would have to call the Create Adjustment endpoint. You would also need Galileo to advise you of the dispute-related money movement that the networks report to Galileo. Consult with Galileo to work out the integration details, and work with your bank to ensure compliance. Galileo's dispute process Galileo can handle all aspects of card disputes and ACH disputes. Dispute intake Galileo can provide dispute intake for you in one of these ways: A Dispute API that you can integrate into your web page, mobile app or customer-service tool. This API handles both card disputes and ACH disputes. See the Creating a Dispute guide for more information. If you are using Galileo's CST, your customer service representatives can use the CST's dispute-intake tool. Your customers can call Galileo's customer service line to report errors and dispute transactions. If Galileo holds your balances, Galileo regularly reviews your accounts for transactions that drive accounts negative and then disputes those transactions. If you hold your balances, you can notify Galileo of the transactions that you want to dispute. Post-intake processing After intake, Galileo handles the rest of the dispute process: Galileo gathers all necessary information to successfully process the dispute. This includes any information from the customer that was provided during intake (questionnaire, written statement, sales receipt or other supporting documentation). Galileo also reviews cardholder transactions and account access history as well as any information provided by the merchant. Galileo offers a de minimis threshold to process disputes, which is the minimum dollar amount that triggers an investigation. For example, if you indicate a 15.00 de minimis, all disputes above 15.00 will be investigated by a Galileo agent. All disputes below this threshold are credited to the customer's account, a write-off occurs and a final resolution notification is sent to the customer. Provisional credit You can arrange with Galileo to provide provisional credit or you can perform the money movement yourself using the Program API. If you are performing the money movement, use the Create Adjustment endpoint with type: tc. See Provisional credit in the About Disputes guide for information on when to award provisional credit. Notifications Galileo provides cardholders with the applicable notifications at each point of the investigation. By default, Galileo sends these notifications electronically but can send paper letters if the cardholder hasn’t authorized email communications. Events API webhooks You can arrange with Galileo to receive Events API webhook messages during various stages of the dispute process. If you are providing notifications to your cardholders, you can pass these webhooks to the cardholder: DSCT: dispute_created — Sent when a card or ACH dispute is initiated on the Galileo system, whether in the CST, the Dispute API, or a customer-service call. DSPC: dispute_pc — Sent when provisional credit is awarded to an account, either by you or Galileo. A BADJ: adj event is sent at the same time. DSFN: dispute_final_no_pc — The dispute has been finalized, and provisional credit had not been awarded to the account holder. The outcome of the dispute is in the dispute_resolution field. DSFP: dispute_final_pc — The dispute has been finalized, and provisional credit had been awarded to the account holder. The outcome of the dispute is in the dispute_resolution field. These are the possible values in the dispute_resolution field: MERCHANT_CREDIT — The merchant sent credit to the account holder's account. If provisional credit was awarded, it should be withdrawn. CUSTOMER_LOSS — The dispute was not resolved in the account holder's favor. If provisional credit was awarded, it should be withdrawn. CHARGEBACK — The dispute was settled in the account holder's favor. If provisional credit was awarded, it should be made permanent. PRTL_CHARGEBACK — Part of the dispute was settled in the account holder's favor. If provisional credit was awarded, the partial amount should be made permanent and the remainder should be withdrawn. WRITE_OFF — The amount is awarded to the account holder and the issuer writes off the amount, usually because the amount is below the de minimis. CH_CANCELED — The account holder canceled the dispute. If provisional credit was awarded, it should be withdrawn. Transaction codes for disputes The otypes (transaction types) for dispute-related funds movement vary according to the network. All dispute-related transactions are adjustments (act_type: AD). See the Additional network transactions table in the Transaction Types enumeration. The labels for the dispute-related otypes are: Chargeback — Funds moving from the merchant to the issuer. Temporary credit — Provisional credit awarded to the cardholder. Second presentment — Funds moving from the issuer to the merchant. Exception — An exception to the process has occurred, such as the time for raising a chargeback has expired, but the chargeback was raised anyway. Final dispute — Funds movement representing the final state of the dispute, such as provisional credit being made permanent or withdrawn. See Disputes in Card Transaction Examples to see how a dispute looks in the ledger. Notice that the chargeback and second presentment are posted at the same time, because Galileo waits until the dispute is final before posting dispute-related adjustments to the account. Every settled transaction has an acquirer reference number (ARN) that can be used when disputing a transaction. The ARN is available in the CST, the Program API responses, and by request in the Posted Transactions RDF. Disputes and reconciliation In Galileo Analytics (gAnalytics) you can refer to two reports that are in Standard Reports > Chargebacks & Disputes: Dispute Tracker Log — A list of all disputes made, the status of the dispute, and whether a chargeback was raised Dispute Summary — Total amounts charged back, second presentments, and arbitration and pre-arbitration You can also request a daily Chargeback and Dispute CDF (custom data file) from Galileo to get detailed information on disputes. The information is similar to the Dispute Tracker Log report. 📘NoteDispute-related transactions in the Posted Transactions RDF and event messages do not have an identifier to tie them back to the transaction under dispute. Use the AUTHORIZATION_CODE field in the Chargeback and Dispute CDF to link disputes to their original transactions. Example dispute sequence For this example, the intake method is the Dispute API, which you have integrated into your mobile app. You subscribe to the events messages that are mentioned in this scenario. Galileo holds the balances for your accounts, and the network is Mastercard. The cardholder launches the dispute function in your interface to dispute a $50 transaction. The cardholder fills out all the required information and submits the dispute. Galileo sends the DSCT: dispute_created message, which you pass to the cardholder as an acknowledgment of the dispute. Because the amount is above your dispute threshold, a Galileo agent investigates the dispute. The agent determines that it is a valid dispute but more information from the merchant is needed, so the agent raises a chargeback with Mastercard. In this case the dispute falls under Regulation E, so Galileo awards provisional credit to the cardholder and sends the DSPC: dispute_pc event message. In your Posted Transactions RDF the next day, the provisional credit is included, with transaction code ADtc. The merchant receives the chargeback notice from Mastercard but does not respond. Because the merchant does not respond, Galileo rules in favor of the cardholder. Galileo sends the DSFP: dispute_final_pc event message with dispute_resolution: CHARGEBACK, which you pass to the cardholder as a notification of the verdict. Galileo posts these transactions to the ledger, which are visible in your Posted Transactions RDF the next day: Chargeback — Transaction code ADH, which adds 50.00 to the issuer account. Provisional credit backout — Transaction code ADtc for –50.00 from the cardholder account Permanent credit added — Transaction code ADfd for 50.00 to the cardholder account Galileo sends you a BADJ: adj event message for each of the three adjustments. Updated 2 months ago Table of Contents Galileo's dispute process Dispute intake Post-intake processing Provisional credit Notifications Events API webhooks Transaction codes for disputes Disputes and reconciliation Example dispute sequence "
156,docs.galileo-ft.com/instant/reference/income-source,Income Source NameDescriptionemploymentEmploymentbusiness_incomeBusiness ownershipinheritanceInheritanceinvestmentInvestmentsocial_securitySocial securityunemploymentUnemploymentretirement_incomeRetirement incomeother_government_benefitsOther government benefitsalimonyAlimonyinsurance_benefitsInsurance benefitsotherOtherdecline_to_answerDecline to answer 
157,docs.galileo-ft.com/pro/reference/post/getcustomernotehistory,Get Customer Note History The table below lists status codes that apply to this specific endpoint. Status CodeCode Description513-01No note records found for this customer and date rangeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
158,docs.galileo-ft.com/pro/docs/about-the-events-api,"About the Events API The Events API is a set of webhooks that communicate events that happen in the Galileo system. You can use the Events API to get messages that are triggered by events like authorizations, settlements, adjustments, ACH returns, bill pay, changes to a customer’s account, and more. Events API webhooks are automated, and each event is triggered by specific processes. Sections in this guide: Events API Scenarios — Examples from each category of Events API webhooks. Events Setup and Configuration — Considerations and decisions to make when configuring your products and system for events. Event Testing and Triggers — Information about testing events, events that are triggered by automated processes, and events that are triggered by the CST. 📘NoteFor information about all events in the Galileo system, including event IDs, fields, and triggers, see the Events API reference, starting at About Events API.Updated over 1 year ago "
159,docs.galileo-ft.com/pro/reference/post/setaccountfeature,"Set Account Feature When enabling and disabling fraud rules (featureType: 14), keep in mind that if you pass featureValue: Y and do not pass endDate, the end date is set to 3000-01-01, meaning that fraud rules are suspended indefinitely. To update the timespan for fraud-rule suspension, pass featureValue: Y and the new start and/or end date-times. To immediately re-enable fraud rules, pass featureValue: N. When featureValue: N, the date fields are ignored. 📘NoteFeature types 20, 21, and 22 are mutually exclusive. Only one can be set to Y at a time.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description426-01Invalid feature type426-02Feature not allowed for account product426-03Feature value does not match the configured format for the feature type426-04Product cannot be switched to the same product426-05Product cannot be switched to an unauthorized product426-06Features cannot be set simultaneously. Unset all the others to set this one.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
160,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-credit-limit-change,"overdraft_credit_limit_change Account feature 17 is changed to P (participating) and the core account meets requirements for a credit-limit increase. The credit limit is decreased. The credit limit is removed because the account no longer meets eligibility requirements. Code — ODCL Event trigger — The credit limit changes. Process — This process contains the event trigger: Automated process that determines overdraft account activity and core account eligibility for a credit-limit adjustment Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credlim X The adjusted overdraft credit limit. Example: ""400"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODCL"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_credit_limit_change"" Example JSON# overdraft_credit_limit_change example: { ""balance_id"": ""20211"", ""credlim"": ""400"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODCL"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_credit_limit_change"" } Table of Contents Fields Example "
161,docs.galileo-ft.com/pro/reference/api-reference-events-api-dispute-final-no-pc,"dispute_final_no_pc Code — DSFN Event trigger — The dispute is finalized. Process — This process contains the event trigger: Galileo receives notification from the network or bank. Fields All fields are strings. Your field names may vary. Field Required Description dispute_amount X The amount of the dispute. Example: ""3245.22"" dispute_id X Unique identifier for the dispute. Example: ""12432"" dispute_notice_date X Date on which the cardholder disputed the charge. Format YYYY-MM-DD Example: ""2023-04-23"" dispute_rege_date X Due date for a Regulation E dispute. Format YYYY-MM-DD Example: ""2023-05-13"" dispute_resolution X The final resolution of the dispute. Valid values: MERCHANT_CREDIT — Merchant credited the cardholder account CUSTOMER_LOSS — Dispute not settled in cardholder's favor CHARGEBACK — Dispute settled in cardholder's favor; amount moved into cardholder account PRTL_CHARGEBACK — Dispute settled in the cardholder's favor; partial amount moved into cardholder account. WRITE_OFF — Amount written off and awarded to cardholder CH_CANCELED — Cardholder canceled the dispute dispute_resolution_date X Date on which the dispute was resolved. Example: ""2023-04-29"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DSFN"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" settle_detail_id X ID that maps back to the settlement record for the transaction. Example: ""13354855"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""dispute_final_no_pc"" Example JSON# dispute_final_no_pc example: { ""dispute_amount"": ""3245.22"", ""dispute_id"": ""12432"", ""dispute_notice_date"": ""2023-04-23"", ""dispute_rege_date"": ""2023-05-13"", ""dispute_resolution"": ""CUSTOMER_LOSS"", ""dispute_resolution_date"": ""2023-04-29"", ""msg_event_id"": ""243693"", ""msg_id"": ""DSFN"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""settle_detail_id"": ""13354855"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""dispute_final_no_pc"" } Table of Contents Fields Example "
162,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-returned,"fed_benefits_status_returned Code — FBSR Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" fbe_status_id Identifier for the federal benefits status. Example: ""204938675"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSR"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_returned"" Example JSON# fed_benefits_status_returned example: { ""balance_id"": ""20211"", ""fbe_status_id"": ""204938675"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSR"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_returned"" } Table of Contents Fields Example "
163,docs.galileo-ft.com/pro/reference/api-reference-events-ach-return-codes,ACH Return Codes CodeDescriptionR01Insufficient fundsR02Account not activeR03Account cannot be foundR04Invalid account number structureR05Unauthorized debitR06Returned per ODFIR07Authorization revoked by customerR08Payment stoppedR09Uncollected fundsR10Customer advises unauthorized transactionR11Check truncationR12Account sold to another DFIR13Invalid ACH routing numberR14Representative payee deceasedR15Beneficiary deceasedR16Account frozenR20Originator not allowedR23Credit refused by receiver 
164,docs.galileo-ft.com/pro/docs/account-holder-refunds,"Account Holder Refund This guide explains what the account holder refund product is and how by using this automated process, a paper check can be issued to return remaining funds to an account holder once the account is canceled. Once the refund product has been configured, the check can be issued via the automated process outlined in this guide, or you can self-issue a check through the CST. The account holder refund process can be initiated by the account holder, or by the program manager. This guide contains the parameters to set during product configuration to optimize the experience for program managers and their account holders. The refund product is for clients who need a solution to offer refunds for closed accounts. Refund product process The refund product process has five basic steps: You or the account holder decide to close an open account that contains a positive balance. You call the Modify Status endpoint to close the account. See Closing accounts in the About Accounts guide for more information. You present options to refund the balance before the account is closed. These options would already be determined in the cardholder T&Cs and cannot be changed. See Recommended sequence to refund closed accounts. After a configurable waiting period, the remaining balance transfers to a Galileo-owned refund account. Galileo recommends choosing a waiting period based on your standard authorization expiration times and any potential payment hold activity the client may initiate. Galileo issues and mails a paper check for the full refund amount to the former account holder. Recommended sequence to refund closed accounts Accounts may be closed for a number of reasons by you or by the account holder. When an account with a positive balance is closed, Galileo recommends that you present the following options to the account holder, in this order: Allow/encourage the account holder to spend the remaining funds. This process does not require setting up the refund product. Allow the funds to be obtained through an ATM withdrawal by the account holder. (Keep in mind the machine will only provide whole dollars, not cents. This may incur a loss on the part of the account holder). Initiate an ACH transfer of the remaining funds back to the account holder’s preferred financial institution. See Creating an ACH transaction in ACH Endpoints for more information. Galileo recommends you establish these options as part of your cardholders terms and conditions. We always recommend vetting and approval of your partner bank as your first step in this process. In some cases your partner bank may offer to mail refund checks, this is a good question to ask them in your vetting process. Use the refund product to offer the account holder a paper check via the Galileo refund product process. Canceled with refund Account status: C If the account holder initiates the closure of an account with a positive balance, your terms and conditions should clearly outline the policy around when and how a refund will be issued. Once the funds reach the Galileo refund account, Galileo issues the refund check, which includes: The program name The name the account holder The full refund amount Instructions for the account holder to cash the check with 180 days Envelope with Galileo return address If the check is not cashed or is returned to Galileo Funds are moved back into the refund account. If you have an updated address for the account holder, the address can be updated in the CST or via batch file and you can manually reissue a check. Canceled without refund Account status: Z An account that is closed without a refund can be the result of a zero balance on the account, fraudulent activity on the card, or government seizure of the individual account holder’s assets. None of these scenarios require the use of Galileo’s refund product as no refund will be issued back to the account holder. Refund product configuration To configure the refund product, you will work with Galileo to set up the product. Your Galileo representative will provide best practices on the mandatory and optional parameters that will need to be set. See Galileo setup for the product parameters. Information required to set up a refund product You need to make adjustments to your public terms and conditions that outline what the refund process looks like for the account holder. Account holder refund workflow You or the account holder close the account. If the account is closed without refund, you send a Modify Status request with type: 20. The account status is set to Z (closed without refund). If the account is canceled with refund, you send a Modify Status request with type: 13 and the account status is set to C (closed with refund). Galileo sends the NOTE: note event. For an account closed with refund, the waiting period starts. The configurable waiting period is set by MDAYC. Optional: the account holder may initiate an ACH request to withdraw funds before the waiting period is over. At the end of the waiting period, if there are still funds in the account, Galileo moves the funds out of the account. Galildo sends the BADJ: adj event. Galileo moves the funds into a refund account. Galileo issues and mails a paper check. The account holder receives the check. The account holder cashes the check within 180 days. If the check is not cashed in 180 days, the funds are immediately transferred back to the Galileo refund account and held indefinitely until an action is taken. If you have an updated address for the account holder, the address can be updated in the CST or via batch file and you can manually reissue a check. Galileo setup These parameters are required to allow Galileo to process refunds for your customers and customize the experience to your program’s needs. All parameters are set at the product level. ParameterDescriptionCRCHKControls whether a card must be mailed back before a refund check is issued. This parameter is required when there is a refund product set up for this product. When this parameter is not set, accounts will not be refunded. This parameter is required when OGRAC is set. When this parameter is set to Y, MCTOB and MDAYC are required.MCOTBContains the maximum amount for a refund check issued when an account is canceled. This parameter is required when there is a refund product set up for this product. When this parameter is not set, attempts to issue a refund are denied. Example: $5,000MDAYCSpecifies the number of days after the last payment to issue a refund on an account that fails KYC/CIP. This parameter is required when OGRAC is set. When this parameter is set, MTOTB must also be set.MDAYPSpecifies the number of days after the last payment to issue a refund on an account that fails KYC/CIP. This parameter is required when OGRAC is set. When this parameter is set, MTOTB must also be set.MTOTBContains the maximum amount for a refund check that is issued when an account fails Galileo’s integrated KYC/CIP process. When MDAYP is set, this parameter is required.OGRACSpecifies the refund account to debit when paying out a refund for this product. This parameter is required when a refund product exists for this product. When this parameter is set, RANAM is required on the refund account.RANAMContains the name of the refund account that is specified in OGRAC. This parameter is set on the refund account, and it is required when OGRAC is populated on the product that uses the refund account. When this parameter is not populated and OGRAC is set, refunds are not processed.Updated 24 days ago What’s NextChoose a Card StrategyTable of Contents Refund product process Recommended sequence to refund closed accounts Canceled with refund Canceled without refund Refund product configuration Information required to set up a refund product Account holder refund workflow Galileo setup "
165,docs.galileo-ft.com/pro/reference/dispute/post/getcaseconfirmation,Get Case Confirmation Use the Get Case Confirmation endpoint to retrieve a confirmation number and PDF after the dispute claim has been submitted. This endpoint is valid only after Submit Case has been called for the case. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1513-4Invalid caseId or caseId returned no result1513-5Invalid Request:1513-11Error generating confirmation document1513-13caseId references a case that is currently locked1513-14Invalid request message-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! 
166,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-request-returned,"billpay_request_returned Code — BPCR Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPCR"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_request_returned"" Example JSON# billpay_request_returned example: { ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPCR"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_request_returned"" } Table of Contents Fields Example "
167,docs.galileo-ft.com/pro/reference/api-reference-events-api-fail-id,"fail_id Code — FTID Event trigger — Galileo's integrated ID verification process returns a Failed verdict. Processes — These processes contain the event trigger: Program API endpoints: Create Account Create Virtual Card Account Start Enrollment Run CIP Run Enrollment CIP Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FTID"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fail_id"" Example JSON# fail_id example: { ""balance_id"": ""20211"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""FTID"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fail_id"" } Table of Contents Fields Example "
168,docs.galileo-ft.com/pro/docs/authorization-controller-api,"Authorization Controller API With the Authorization Controller API (Auth API) Galileo clients have the ability to participate in the approval process for authorization requests that arrive over card-network rails. This guide explains how to use the Auth API and how to interpret the webhook. You can view the full reference guide for the Auth API webhook fields here: Version 2 Version 3 This guide assumes that you are familiar with the concepts explained in these guides: About Card Transactions Authorization To see how specific transaction types are represented in the Events API, Program API and RDF data alongside Auth API data,see the Card Transactions Scenarios. For actual Auth API webhooks, see Auth API v3 webhook examples on this page. Differences between version 2 and version 3 All new clients are set up on version 3. For clients on version 2 who want to upgrade to version 3, these are the differences between the versions of the Auth API: Version 3 includes this field: response_code_objects — An object that contains a list of response codes and textual descriptions that Galileo calculated when determining the value in response_code. Version 3 does not include this field: response_code_list — A list of response codes that Galileo calculated when determining the value in response_code. ❗️WarningVersion 3 is a breaking change from version 2. Requirements The specifics of your setup will be particular to your use case and to the types of systems you are using. Whatever you construct to handle the Auth API, your endpoint must be able to handle what Galileo sends: Authentication uses a JWT with a shared secret. See Security in the Auth API reference for details. The webhook payload is sent as an HTTP POST using HTTP/1.1 over TLS. You must respond within 2 seconds of the value in the webhook's timestamp field, which is when Galileo sent the webhook. Galileo initiates multiple, simultaneous TCP sessions and sends webhooks in parallel on those connections. For efficiency, Galileo uses the keep-alive function instead of terminating each connection. How many connections per second depends on how many cardholders you have and how often they perform card transactions. You must use your own business logic to obtain this sizing information. Decisions to make When designing your implementation of the Auth API, you will need to address issues such as these, as well as others: Whether you or Galileo will be the system of record. This decision affects funds flow, how parameters are set on the back end, how you respond to the webhooks, and other considerations. How to respond to balance inquiries. When to override the Galileo response code, if permitted. Whether to implement a real-time funding strategy to transfer funds into a cardholder account to cover the amount of an authorization. How to deal with edge cases. Consult the Card Transactions Scenarios for detailed examples of some of the transaction types you will encounter: Completions and settlements Incremental authorizations Reversals and their expiry Advices Message workflow This is the general sequence of events for an authorization: The merchant sends an authorization request to its acquirer. The acquirer forwards the request to the network. The network forwards the request to Galileo. Gaileo forwards the request to you. You return a response to Galileo. Galileo forwards the response to the network. The network forwards the response to the acquirer. The acquirer forwards the response to the merchant, who completes the transaction. Message types Messages sent between acquirers and issuers over card-network rails conform to the ISO 8583 standard. The standard defines message type indicators (MTIs), which specify the type of message being sent and indicate what kind of response is expected. MTIs are four-digit codes that are broken out as follows, with the values that are most likely to be included with Auth API webhooks: First digit — Version of ISO 8583 used 0 — 1987 version 1 — 1993 version Second digit — General purpose of the message 1 — Authorization message 2 — Financial message 4 — Reversals and chargebacks Third digit — Message function 0 — Request 1 — Request response 2 — Advice 3 — Advice response Fourth digit — Session initiator 0 — Acquirer 2 — Issuer The typical flow of messages between acquirer and issuer follows this pattern: The merchant sends a message to its acquirer. The acquirer converts the message into ISO 8583 format and sends the message to the card network with a request or notification-type MTI. The network forwards the message to the issuer. The issuer processes the message information and then sends a response message to the network with a response-type MTI. The network forwards the response to the acquirer. The acquirer processes the message and sends the response to the merchant. For example, when an acquirer sends an authorization request over credit rails, the MTI is 0100, and when the issuer responds it's MTI 0110. These are the most common MTI request/response combinations that you will encounter with the Auth API. DescriptionFrom acquirerIssuer responseAuthorization or preauthorization request over credit rails or preauthorization request over debit rails01000110Authorization request over debit rails02000210Advice over credit rails01200130Advice over debit rails02200230Authorization reversal over credit or debit rails04200430 When you send your response to Galileo, you are not required to provide the MTI: Galileo will convert your response into ISO 8583 format and include the appropriate MTI to send to the network. 📘NoteWhen the third digit is 2, the message is an advice, which you cannot reject: only a 00 response code is permitted. Alongside the MTI in the webhook, Galileo further breaks down message types based on other information that it receives in the message to provide you with more detail. This information is provided in the auth_type and transaction_type fields. These are the combinations you will most likely encounter. Descriptionauth_typetransaction_typemtiAuthorization requestAuthAuth0100 (credit rails)0200 (debit rails)Preauthorization requestAuthPreauth0100ATM withdrawal requestAuthATM0200Request for a cash advance from a tellerAuthCash Advance0200Balance inquiry from an ATM or other vendorAuthBalance Inquiry0200Request to apply credit from a merchantAuthMerchant Credit0200Request to load a cardAuthPayment0200Request to convert a card into a token for a mobile walletAuthTokenization0100Notification of a completionAdviceAuth0120 (credit rails)0220 (debit rails)AdjustmentAdviceAdjustment0200Notification of a reversalReversalAuth0420 Data elements The ISO 8583 standard defines data elements (DEs) that contain details about the transaction, such as transaction amounts, card-reader identifier and PIN capabilities, merchant name and identifier, and currency codes and conversion rates. Galileo extracts information from the DEs and converts it into the human-readable field names and values of the Auth API webhook. Because each network uses the DEs differently, the documentation does not always indicate which DE corresponds to which Auth API field. Refer to the documentation from each network to see how they use the DEs. Auth API process This is the sequence of events between Galileo and you for a typical authorization request. Galileo receives an authorization request over a card network's rails in ISO 8583 format. Galileo performs validation checks and calculates response codes. Galileo converts its response codes and selected elements of the network message into webhook format and sends it to you. You apply logic to decide whether to override Galileo's response code, if permitted. You send your response to Galileo within two seconds. Galileo converts your response into ISO 8583 format and forwards it to the network. Validation checks See Auth API Validation Checks. Additional field information See the Auth API Field Detail guide for more information on these topics: Tokenization requests Tokenization requests IIAS fields IIAS fields Advanced Auth API fields Point of sale data Subscription services Calculating a response code Based on the checks Galileo performs, Galileo populates response_code_list (version 2) or response_code_objects (version 3). From these lists, Galileo selects the response code to return in the response_code field. Galileo chooses the response_code from among multiple codes according to a proprietary algorithm. Galileo returns 00 (success) if no other response codes were generated or if the authorization message is an advice. When the response code is 00, response_code_objects or response_code_list is empty. Sending a response Your response must be in JSON format. Sample responses are in the reference (Version 2, Version 3). The response must arrive at Galileo within two seconds of the time Galileo sent the webhook to you. If you do not respond in time, Galileo may perform fallback processing, depending on your arrangements with Galileo. See Fallback processing for more information. Overrides You are permitted to override Galileo's responses only under certain circumstances. Response code override Galileo recommends that you build logic to override these response codes only: 00 — Success 10 — Approved for partial amount 46 — Suspected fraud (Visa only) 51 — Insufficient funds 59 — Suspected fraud Overriding these response codes requires bank approval. To add more response codes to override after initial setup, you will need additional bank approval and a legal addendum to the Master Service Agreement. AVS override When Galileo performs AVS checks, the verdict is in the avs_result field and the values used to perform the check are in the avs_data object. If you have reason to believe that Galileo does not have the latest address information, you can perform AVS yourself on the updated address and populate avs_response to override Galileo's result. Overriding insufficient funds When Galileo returns 51 (insufficient funds), you can override it in one of two ways: partial authorization or real-time transfers. Alternatively, Galileo can provide partial authorizations. Partial authorization Merchants determine whether they will accept partial authorizations. If the merchant accepts partial authorization, then partial_supported: true. If you hold the balance, populate partial_amount with the amount to authorize for the transaction and return response_code: 10 (approved for partial amount) or response_code: 87 (approved for partial purchase amount but not cash back). If Galileo holds the balance, the partial_amount field is already populated with the amount to authorize—which will be the available balance—and response_code: 10. If you do not want to authorize the partial amount, return response_code: 51 to override Galileo's code. If you never want to support partial authorizations, set the PAPPR parameter. Real-time transfers As desired, you can build logic on your side to transfer funds into a cardholder account to cover the amount of an authorization when the cardholder account has insufficient funds. In that case, you populate these fields: transfer_prn — The PRN of the account to provide funds. transfer_amount — The amount of the transfer. source_transfer_type — Transaction type code for the account in transfer_prn. dest_transfer_type — Transaction type code for the cardholder account. The activity type will be AD (adjustment) for both the source account and cardholder account. Use the transfer type codes that Galileo provided in a specially curated list of codes. For example, if the cardholder has $25.00 in their account and the amount of the authorization is $30.00, you could transfer $5.00 into the cardholder account and return response_code: 00. 👍TipYou can use real-time transfers to partially subsidize transactions. For example, you can build logic on your end to transfer a portion of the request amount from a central account when the request is from a certain MCC or merchant, and the rest of the amount would be drawn from the cardholder account. For example, if a request from the designated MCC arrives for $20, you can transfer $5 from the central account, and then the remaining $15 would automatically come from the cardholder account. Galileo also offers Real-Time Funding, another method of transferring funds into a card account at authorization time, which is unrelated to real-time transfers. Overriding limits With the override_limit field you can override velocity limits that are set for the product. Use the amt_til_limit and nearest_limit fields to see how close an account is to exceeding a limit and which limit that would be. Exercise caution with this type of override, however. Confirm with your bank that you are able to override limits and ensure that you have clearly defined which circumstances permit an override. Balance inquiry responses A typical balance inquiry is a separate transaction with trans_amount: 0.00 and transaction_type: Balance Inquiry. For these standalone inquiries, eligible_for_balance_return is always true. When Galileo holds the balance, Galileo returns 00 (success) and provides the balance that it has in available_funds. If you hold the account balance, populate available_balance with the current available balance and return response_code: 00. If you do not populate available_balance, Galileo will return the balance that it has on record. If you have a Mastercard program, your product parameters control which merchant category codes (MCCs) can receive the account balance in the U.S., Canada, Mexico, and Colombia. For Visa programs, product parameters specify only whether balance inquiries are permitted. In the case of Visa transactions, balance inquiries are permitted only at ATMs. For both networks, balance inquiries are permitted only for card-present transactions. With Mastercard, a ""courtesy balance"" request might also be included in a conventional authorization request, such as at a retail merchant where the merchant wants to print the balance on the receipt. In that case, eligible_for_balance_return: true and transaction_type contains a value other than Balance Inquiry. You may provide the balance in available_balance or Galileo will provide it. When Galileo receives a balance inquiry, and product settings indicate that merchant is not eligible to receive the balance, Galileo responds with 05 (do not honor). In the Authorized Transactions RDF, balance inquiries are identified by TRANSACTION CODE 10. These inquiries are not included in the Posted Transactions RDF, Program API responses, or the CST. Fallback processing When you do not respond to Galileo in time, Galileo can perform ""fallback"" processing, meaning that Galileo either responds with 05 (do not honor) for all transactions, or it returns the response that it has calculated, depending on how the APIFB product parameter is set. When this parameter is not set, Galileo returns 05 (do not honor) for all transactions that you do not respond to. When APIFB is set to Y, Galileo returns the response that it has calculated. If Galileo will provide fallback processing and you are the system of record, you must devise a way to keep Galileo updated on your account balances so that Galileo can determine whether accounts have sufficient balance. You could send a batch file every few hours, for example. When Galileo does not receive your response in time, it sends the OATO: Auth_API_Timeout Account Event webhook, and then Galileo sends you the AUFB: auth_fallback Authorization Event webhook to notify of both approved and denied fallback authorizations. Stand-in processing In some cases, the network must make a decision on Galileo's behalf, such as when Galileo does not respond to an authorization request from the network in time. The network may also process a transaction instead of sending it to Galileo first, for a variety of reasons. When you set up your relationship with the card network, you specify how and when the network will perform this stand-in processing (STIP). Based on these configuration and processing rules, the network may either deny or approve the transaction on Galileo's behalf. After the network performs a STIP transaction, it sends an advice notification to Galileo. If the transaction changes the available balance, Galileo relays the advice to you as an MTI 0120 or 0220 message. If the advice does not change the balance, Galileo does not send an Auth API webhook. Galileo also sends event messages according to the type of STIP transaction: STPA: auth_stip_advice — Mastercard approval or denial. The STIPD parameter must be enabled. If is_stip_denial: Y, then the transaction was denied. BAUT: auth — Visa approvals. No STIP information is provided with this message. STPD: denied_auth_stip — Denials. The STIPD parameter must be enabled. STIP Reason Codes Galileo not responding is only one reason why networks perform STIP. To indicate why they performed stand-in processing, Visa and Mastercard networks send a reason code in the advice notification. Galileo forwards this reason code in these fields: stip_info — In the STPD: denied_auth_stip event message stip_advice — In the STPA: auth_stip_advice event message stip: {detail} — In the Auth API webhook Consult the documentation from each network to interpret the codes: Visa SMS POS Technical Specification for field 63.4 Mastercard Single Message System Specifications and Customer Interface Specification for DE 60 Sample codes NetworkCodeDescriptionMastercard4000000Late response from issuerVisa9020The response from issuer timed outVisa9054Online CAM validation failedVisa9061Internal system error or other switch-detected error condition Authorization Events API You can arrange for Galileo to send you Events API webhooks to notify of approvals and denials. See the Authorization Events index for the list of webhooks you can receive. For common Authorization Events sequences, see Authorization events in the Events API Scenarios guide. Also see the examples in the Card Transactions Scenarios. Galileo setup These are some of the parameters that control the behavior of the Auth API. Also see Galileo setup in the Authorization guide for parameters that affect authorization behavior. ParameterDescriptionAPIFBControls whether to perform fallback processing when your response to the webhook times out. When this parameter is N or not set, Galileo returns response code 05 (do not honor) for all fallback transactions. When this parameter is Y, Galileo returns the response code that it has calculated.APPOLControls whether you review all transactions via the Auth API or only transactions that pass Galileo’s initial check.AUAPIContains host:port addresses for servers that Galileo sends webhooks to.AUAPRControls whether Galileo waits for a response to an advice. When set to Y or not set, Galileo waits for your response for all Auth API webhooks. When set to N, Galileo doesn't wait for your response for advice authorizations. (For all other authorizations, Galileo still waits for your response.)MLAPIContains the host:port address of the server to use for machine-learning fraud detection.RULAPControls whether to send a comma-separated list of rule names that caused a DENY or WARN for an authorization in the Auth API request payload. The DENY rules are in the rules_denied field and the WARN rules are in the rules_warned field. Valid only when using Galileo's fraud-detection process. Auth API v3 webhook examples Use these code samples (called Recipes) to help test your system. These samples come from actual Auth API v3 webhooks. You can also find these Recipes by clicking Recipes in the top navigation bar. Auth API v3: Approved transactionOpen Recipe Auth API v3: AVS check with in-app purchaseOpen Recipe Auth API v3: Failed PIN at ATMOpen Recipe Auth API v3: Failed PIN count exceededOpen Recipe Auth API v3: Partial approvalOpen Recipe Auth API v3: Merchant creditOpen Recipe Auth API v3: Lost cardOpen Recipe Auth API v3: Card frozen and load not permittedOpen Recipe Auth API v3: Velocity limit exceeded at ATMOpen Recipe Auth API v3: Bad CVV2 with insufficient fundsOpen Recipe Auth API v3: Expiry date mismatchOpen Recipe Auth API v3: Mobile wallet provisioning request, red pathOpen Recipe Auth API v3: Mobile wallet provisioning request, green pathOpen Recipe Auth API v3: Balance inquiryOpen Recipe Auth API v3: ReversalOpen Recipe Auth API v3: Completion (advice) at gas pumpOpen Recipe Auth API v3: 3-D Secure transactionOpen Recipe Auth API v3: Fraud rules engine denies authOpen Recipe Auth API v3: Adjustment from an ATMOpen Recipe Auth API v3: Visa merchant credit over Mastercard railsOpen Recipe Auth API v3: Denied cash advanceOpen Recipe Auth API v3: Successful card loadOpen Recipe Auth API v3: Merchant mobile wallet checkOpen Recipe Auth API v3: Denied international incremental authorizationOpen Recipe Auth API v3: STIP notification of merchant creditOpen RecipeUpdated about 11 hours ago Table of Contents Differences between version 2 and version 3 Requirements Decisions to make Message workflow Message types Data elements Auth API process Validation checks Additional field information Calculating a response code Sending a response Overrides Balance inquiry responses Fallback processing Stand-in processing STIP Reason Codes Authorization Events API Galileo setup Auth API v3 webhook examples "
169,docs.galileo-ft.com/pro/reference/api-reference-events-api-create-hold,"create_hold Code — CRHD Event trigger — A hold is placed on the account. Processes — These processes contain the event trigger: Create Hold endpoint ACH transaction Customer Service Tool Automated processes Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for hold_amount. Example: ""840"" description Description for the hold. Example: ""Manual hold"" expiry_dt Date-time when the hold will expire. Format: YYYY-MM-DD hh:mm:ss Example: ""2023-12-02 14:10:17"" hold_amount Amount of the hold. Example: ""25.00"" hold_id X Unique identifier for the hold. Example: ""234567"" hold_source The table that hold_source_id comes from. Example: ""pmt_info"" hold_type The transaction type (otype) of the hold. See the curated list of hold types for your program. Example: ""OR"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CRHD"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""create_hold"" Example JSON# create_hold example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""description"": ""Manual hold"", ""expiry_dt"": ""2023-12-02 14:10:17"", ""hold_amount"": ""25.00"", ""hold_id"": ""234567"", ""hold_source"": ""pmt_info"", ""hold_type"": ""OR"", ""msg_event_id"": ""243693"", ""msg_id"": ""CRHD"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""create_hold"" } Table of Contents Fields Example "
170,docs.galileo-ft.com/pro/reference/post/getfeehistory,Get Fee History See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
172,docs.galileo-ft.com/pro/reference/post/createprovisioningrequest,Create Provisioning Request The table below lists status codes that apply to this specific endpoint. Status CodeCode Description548-01Certificate chain validation failed548-02Virtual Product ID not specified548-03Bad XID548-04Error creating new PRN548-05Account creation error548-06Association not implemented548-07Apple encryption failure548-08Error getting provisioning data548-09Wallet provider not implemented548-10Wallet provider not recognized548-11VISA request data missing or incomplete548-12Active physical card to tokenize not foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
173,docs.galileo-ft.com/pro/reference/post/updateenrollment,Update Enrollment 📘NoteValidation on an SSN is limited to a length check.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
174,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-limit-violation,"billpay_limit_violation Code — BLVF Event trigger — An attempted bill payment violates the limit set in the LIMBP product parameter. Processes — These processes contain the event trigger: Internal bill-pay process for scheduled payments Create Bill Payment endpoint Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the payment. Example: ""376.50"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billername X Name of the biller. billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BLVF"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" proc_time X The time at which the payment was rejected. Example: ""2022-03-24 23:23:22"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_limit_violation"" Example JSON# billpay_limit_violation example: { ""amount"": ""376.50"", ""avail_cash"": ""143.11"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""msg_event_id"": ""243693"", ""msg_id"": ""BLVF"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""proc_time"": ""2022-03-24 23:23:22"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_limit_violation"" } Table of Contents Fields Example "
175,docs.galileo-ft.com/pro/reference/api-reference-on-demand-alert-statuses,"On-Demand Alert Statuses StatusDescriptionEEnroll and send verification PINUUpdate mobile phone, enroll, and send verification PINFUpdate mobile phone and force registration (no verification PIN sent to customer)CConfirm PIN and registerSStop and unregister "
176,docs.galileo-ft.com/pro/reference/api-reference-events-api-account-status-change,"account_status_change Code — ACST Event trigger — The account status changes to a value in ACMSG. Processes — These processes contain the event trigger: Customer Service Tool Program API Internal processes Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ACST"" new_status X See Account Statuses for possible values. Example: ""C"" old_status X See Account Statuses for possible values. Example: ""N"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""account_status_change"" Example JSON# account_status_change example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ACST"", ""new_status"": ""C"", ""old_status"": ""N"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""account_status_change"" } Table of Contents Fields Example "
177,docs.galileo-ft.com/pro/docs/creating-a-dispute,"Creating a Dispute This guide explains how to use the Dispute API endpoints to initiate and submit a dispute. You might want to read these guides along with this one: About Disputes — General explanation of the dispute process from inception to verdict. Disputes at Galileo — What Galileo offers with its dispute service. With Galileo's Dispute API endpoints, you can integrate the dispute process into your mobile app or website to provide account holders with a seamless dispute experience. The account holder's experience might be as simple as this: Click a ""dispute transaction"" button or link. Select one or more transactions to dispute. Answer a series of questions about the transactions. Fill out additional documents, if required. Submit the dispute. If later adjustments need to be made to the dispute, such as attaching more documents, edit the dispute. Track the status of the dispute until completion. Using the Dispute API endpoints also ensures that disputes are made in compliance with card network requirements and regulations such as Regulation E and Regulation Z. Any updates to the requirements are accounted for on the backend, without disrupting your workflow. Galileo has developed a conversational API for its disputes function. A ""conversational"" API is a series of calls that are made in a certain order, with the response from one call providing the data for the next call. By using a conversational API, Galileo makes it possible to tailor the user experience according to the nature of a given dispute and also to conform to regulations governing disputes. For example, if an account holder indicates that a disputed transaction is a duplicate, you can provide follow-up questions that are specific to duplicate charges, whereas an account holder who indicates suspected fraud will get questions that are related to fraud. Result of following this procedure A dispute has been entered into the dispute system. The information gathered and submitted for the dispute conforms to either Reg E or Reg Z, depending on the characteristics of the account and account holder. UI requirements For your mobile app or web site, create a user interface that permits account holders to initiate and submit a dispute. The dispute-creation process involves multiple steps that must be performed in the order shown in the numbered steps below. The UI must be flexible enough to display dynamic responses from the endpoints, which are returned depending on the characteristics of the dispute that were indicated in earlier endpoints calls. Some responses from the account holder will trigger further displays, and so on. You should include an interface for uploading files. Dispute-creation workflow Follow these steps to create a dispute. ❗️WarningUnless otherwise specified, you must call the endpoints in the order shown here. Failure to follow the sequence will prevent you from completing the process. Endpoint sequence This is a summary of the sequence in which endpoints must be called. Read each numbered section below (starting here) to see exactly how to call the endpoints. Initiate the case and obtain the case reason 1. Create Case 2. Get Case Reasons 3. Add Case Reasons Select transactions 4. Get Transactions 5. Add Transactions Get follow-up questionnaire answers 6. Get Questionnaire 7. Add Questionnaire Attach documents 8. Get Doc Requirements 9. Add Required Docs 10. (Optional) Add Attachments Finalize the case 11. Submit Case 12. (Optional) Get Case Confirmation 1. Initiate the case and obtain the case reason Initiate the case, obtain the case reason from the account holder, and send it back to Galileo. The account holder initiates a dispute on your mobile app or website by clicking an ""initiate dispute"" control. You call the Create Case endpoint with the PRN, PAN, or CAD of the account. Galileo returns the caseId. You pass caseId for all subsequent calls for the case. You call Get Case Reasons with the caseId. Galileo returns a JSON containing the case reason types and case reasons. The response varies depending on the account and user type. For example, a consumer debit account might get a different response than a business credit account. You present the case reasons to the account holder. See ""Presenting the case reasons,"" below, for instructions. The account holder selects the category and reason. You pass the category and reason back to Galileo in the Add Case Reasons call. See Returning the case reasons for more information. Galileo returns status: 0. Presenting the case reasons Use the response from the Get Case Reasons endpoint to populate a screen that prompts two interactions with the account holder. First, the account holder selects a case reason type (ClaimReasonType) and then selects a case reason (ClaimReason). The JSON in the response is structured as answerList levels nested inside questionList levels. The first level contains the case reason type in the top level, and then when the account holder selects one of the types, you present the corresponding case reasons in the next level down. This is an example of the first screen to present. The values in parentheses are identifier values in the Get Case Reasons response. You may get a different set of fields in the response depending on the account and account holder types. Which of the following would you like to report? (ClaimReasonType) I made this purchase, but there is a problem and I need to dispute it. (NonFraud) I did not authorize this transaction. I suspect fraud. (Fraud) I had an issue while using my card at an ATM. (NonFraudATM) When the account holder selects a case reason type, present the case reasons that are nested in the corresponding answerList. The case reasons should have radio-button controls so that the account holder can select only one case reason. For example, if the account holder selects NonFraud, present these options: Which of the following best describes the reason for your dispute? (ClaimReason) I was charged or credited incorrectly. (ChargedCreditedIncorrect) I am dissatisfied with the merchandise or a service I received. (MerchandiseServiceIssue) I continue to be charged for a recurring transaction after I canceled. (MerchantRecurring) I canceled or returned the merchandise or service and have not received the expected credit. (MerchantCreditNotIssued) I haven't received merchandise or a service I purchased. (MerchantNotProvided) I was charged more than once. (MerchantDuplicate) 📘NoteYou cannot add your own case reason type or case reasons—they will not be recognized by the dispute system. Returning the case reasons When the account holder selects the case reason type and case reason, pass them back to Galileo by calling the Add Case Reasons call. Populate reasonType with the case reason type and reason with the case reason. Use the value in the Identifier field of the Get Case Reasons response. These are the valid reasonType and reason combinations for the example shown above. reasonTypereasonNonFraudMerchantDuplicateMerchantNotProvidedMerchantCreditNotIssuedMerchantRecurringMerchandiseServiceIssueChargedCreditedIncorrectFraudCardLostCardStolenCardNotReceivedCardSecureNonFraudATMATMPar 2. Select transactions Present a list of eligible transactions for the account holder to select and pass the transactions back to Galileo. You call Get Transactions with the caseId. You pass start and end dates and optionally the amount and merchant name as filters. Galileo returns a list of transactions that are eligible for dispute and that fit the filter criteria. You present the list of transactions to the account holder. The list should have check-box controls to select multiple transactions. See ""Transaction entries,"" below, for more information. You submit the transaction IDs of the selected transaction(s) in the Add Transactions call. See Submitting the transactions for the restrictions on this call. Galileo returns status: 0. Transaction entries Each entry that is returned by Get Transactions contains these metadata fields: authorizationStatus — The only valid value is Posted. debitCredit — Whether the transaction debits or credits the account: Debit Credit transactionType — The type of transaction. Possible values: ACH — ACH transaction ATMWD — ATM withdrawal CardPinless — Card transaction without PIN (signature) CardPinned — Card transaction with PIN P2P — Peer-to-peer transfer description — The description of the transaction amount — Transaction amount; unsigned cardNumberEndingIn — Last 4 digits of the PAN date — Date of the transaction: YYYYMMDD transactionId — Identifier assigned by the disputes platform You may need to record each disputed transaction with its metadata so that you can make the correct decision if you are awarding provisional credit. See Provisional credit in About Disputes for more information. Submitting the transactions When submitting the transactions using the Add Transactions endpoint, you must follow these rules, depending on the reasonType that you submitted with the Add Case Reasons call: If reasonType != Fraud, all transactions submitted in an Add Transactions call must be from the same merchant. If the account holder has selected transactions from multiple merchants, send multiple Add Transaction calls with the transactions from the same merchant bundled together. If reasonType = Fraud, the transactions in the same call can be from different merchants. If you send Add Transactions multiple times with different values, the last request is honored. For example, if you send transactions 1111 and 2222, and then soon after send 2222 and 3333, transactions 2222 and 3333 are submitted—1111 is not. 3. Get follow-up questionnaire answers According to the reason that the account holder returned, present the follow-up questions. You call Get Questionnaire with the caseId. Galileo returns a JSON of the questionnaire. You present the questionnaire to the account holder, according to the contents of the response. See ""Presenting the questionnaire,"" below, for instructions. The account holder answers the questions. You pass the answers back to Galileo with the Add Questionnaire call. See Returning the answers to the questionnaire for instructions. Galileo returns status: 0. Presenting the questionnaire The questions that you receive in the response to Get Questionnaire will vary according to the reason that you passed in the Add Case Reasons call as well as the network. The response may contain many dozens of lines of JSON formatting. 📘NoteEvery questionnaire is subject to change over time as network requirements change, so you should not cache the questionnaires. Your interface must be able to handle truly dynamic responses. As with the JSON in the Get Case Reasons response, there are answerList levels nested inside questionList levels. However, instead of only two levels of questions, the number of levels that you will use depends on the answers that the account holder provides in each level. For example, if you submitted reasonType: Fraud and reason: CardSecure (""I didn't make the purchase, but I still have my card."") in the Add Case Reasons call, the questionnaire that Get Questionnaire returns is called FraudCardSecure. See Dispute Questionnaire: FraudCardSecure for an example response, keeping in mind that this is an example only, and your response may be different. The next level down is a questionList called CardPossession that contains two questions. This is the first question to present: JSON{ ""type"": ""YesNo"" ""identifier"": ""CardPossessionInd"" ""displayText"": ""Do you always have possession of the card?"" ""dataType"": ""String"" } Nested inside that questionList level is the answerList with two possible answers, Yes and No, and nested inside each of those answers are follow-up questions that you display depending on which answer the account holder selects. If the account holder selects Yes then there are no further questions to display for that answer. If the account holder selects No, then you display two more questions, each with a text box for the answer: JSON{ ""type"": ""Text"" ""identifier"": ""CardLocation"" ""displayText"": ""Where is the card usually kept?"" ""dataType"": ""String"" } JSON{ ""type"": ""Text"" ""identifier"": ""CardNoPossession"" ""displayText"": ""In what circumstances do you not have the card in your possession?"" ""dataType"": ""String"" } After the account holder answers those questions you present the next set of four questions, which are inside vsq1. This is the first of those questions: JSON{ ""type"": ""YesNo"" ""identifier"": ""HasAuthorizedOthers"" ""displayText"": ""Have you ever authorized another person to use your card?"" ""dataType"": ""String"" } As the account holder answers the questions, present any follow-up questions that are nested inside the answers until you reach the end of the node, and then go to the next question in that level. Capture the identifier and the answer for each question answered to return in Add Questionnaire, as described in the next step. This is one possible sequence of answers for the FraudCardSecure questionnaire. The identifier for the question is shown in parentheses: Do you always have possession of the card? (CardPossessionInd) No Where is the card usually kept? (CardLocation) ""In my purse"" In what circumstances do you not have the card in your possession? (CardNoPossession) ""When I go to the gym"" Have you ever authorized another person to use your card? (HasAuthorizedOthers) No Have you ever shared your Personal Identification Number (PIN)? (HasSharedPIN) No Where do you keep your PIN? (WherePinKept) In memory (InMemory) Due to the fraud on your account, would you like to cancel your card now? (CancelCardInd) Yes Would you like us to send you a replacement card? (ReissueCard) No Should the account be closed permanently? (ConfirmAccountClosure) Yes After presenting the main parts of the questionnaire, you display the postQuestionnaire questions, which permit the account holder to add information such as comments or to attach further documents. Do you have any additional information to provide about this dispute? (AddlInfo) No Do you have any additional information that should be provided to the merchant regarding your dispute? (HasVisaComments) No Returning the answers to the questionnaire The questionnaire parameter in the Add Questionnaire endpoint accepts a JSON list (questionList) that contains identifier/answerValue pairs. identifier contains the identifier for the question in the Get Questionnaire response and answerValue contains the response that the account holder selected or entered. This example shows what you would return for the questions in the example section, above: JavaScriptquestionnaire: {  ""questionList"": [   {   ""identifier"": ""CardPossessionInd"",   ""answerValue"": ""No""   },   {   ""identifier"": ""CardLocation"",   ""answerValue"": ""In my purse""   },   {   ""identifier"": ""CardNoPossession"",   ""answerValue"": ""When I go to the gym""   },   {   ""identifier"": ""HasAuthorizedOthers"",   ""answerValue"": ""No""   },   {   ""identifier"": ""HasSharedPIN"",   ""answerValue"": ""No""   },   {   ""identifier"": ""WherePinKept"",   ""answerValue"": ""InMemory""   },   {   ""identifier"": ""CancelCardInd"",   ""answerValue"": ""Yes""   },   {   ""identifier"": ""ReissueCard"",   ""answerValue"": ""No""   },   {   ""identifier"": ""ConfirmAccountClosure"",   ""answerValue"": ""Yes""   },   {   ""identifier"": ""AddlInfo"",   ""answerValue"": ""No""   },   (   ""identifier"": ""HasVisaComments"",   ""answerValue"": ""No""   ) ] } 4. Attach documents Depending on the case reasons and the transactions selected, the account holder may need to fill out a form. Other documents can be attached to the case as well, as prompted in the post-questionnaire. You call Get Doc Requirements. Galileo returns one of two options: A message saying that no further documents are required. A base64-encoded PDF (templateDocumentationStream) that the account holder must fill out and return. When the account holder has filled out the form, you call Add Required Docs to send the completed form to Galileo. The account holder optionally clicks an ""Attach Documents"" control (which may be included in the post-questionnaire flow instead of being after Add Questionnaire) and uploads files such as screenshots and receipts to your interface. Supported file types: JPG, JPEG, TIFF, PNG and PDF File size maximum: Mastercard — 20 MB Visa — 10 MB You call Add Attachments to attach the files to the case. 📘NoteIf the account holder does not fill out and return the required PDF before submitting the case, you can add the PDF form later using Add Attachments. Make sure you keep track of which required documents have not yet been submitted. 5. Finalize the case The account holder clicks ""submit"" at the end of the process. The account holder clicks a ""submit"" control to signal that they have finished inputting information for the dispute. You call Submit Case. The ""Requirements for submission,"" below, must be fulfilled. Galileo returns success and sends the DSCT: dispute_created event message. Requirements for submission Before you can call Submit Case, these minimum requirements must be fulfilled: The case number was created. (Create Case) The case-reason category and reason were submitted. (Add Case Reasons) One or more transactions were submitted. (Add Transactions) The questionnaire answers were submitted. (Add Questionnaire) 📘NoteIf the account holder begins the dispute process but does not complete it, the case that was created remains in the dispute system for eight hours and then times out. If the account holder decides to return to a case that has timed out, you have to start over with Create Case to create a new caseId. After submitting the dispute After you have successfully called Submit Case, you can optionally call Get Case Confirmation to retrieve a confirmation number and PDF that you can present to the account holder. Before the verdict arrives, if the account holder wants to add more documents to the case, or if the account holder needs to return the required PDF form, call Add Attachments with the case ID to attach the documents. For more information on what happens to a dispute after it is submitted, begin with Post-intake processing in Disputes at Galileo or consult the Card-transaction dispute lifecycle in About Disputes.Updated 7 days ago Table of Contents Result of following this procedure UI requirements Dispute-creation workflow Endpoint sequence 1. Initiate the case and obtain the case reason 2. Select transactions 3. Get follow-up questionnaire answers 4. Attach documents 5. Finalize the case Requirements for submission After submitting the dispute "
178,docs.galileo-ft.com/pro/reference/api-reference-events-api-ach-credit-fail,"ach_credit_fail Reasons for failure could be: The customer account is not in a status that is specified in ACSTS. The product does not accept incoming credits, as specified in ACCRD. A load limit has been violated: Either the amount of the transaction is too large or the cumulative amount during a certain time is too large. Code — ACHC Event trigger — You or Galileo reject the request, or the request fails. Processes — These processes contain the event trigger: Galileo receives a Nacha file that contains a request to move funds into a customer account. Modify Pending Deposit Status endpoint with actionType: R Fields All fields are strings. Your field names may vary. Field Required Description ach_source_trace Trace ID for an ACH transaction, generated by the originator. 15 digits. Example: ""034294619573021"" amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ACHC"" open_to_buy The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" return_code X See ACH Return Codes for possible values. Example: ""R01"" source X Name of the originating depository financial institution (ODFI). Example: ""Bank of Centerville"" source_id X Identifier for the source. Example: ""3029674"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""ach_credit_fail"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# ach_credit_fail example: { ""ach_source_trace"": ""034294619573021"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""ACHC"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""return_code"": ""R01"", ""source"": ""Bank of Centerville"", ""source_id"": ""3029674"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""ach_credit_fail"" } Table of Contents Fields Example "
179,docs.galileo-ft.com/pro/docs/incremental-authorization-simulation,"Incremental Authorization Simulation A debit cardholder calls a ride-share service through its app, and the cost of the proposed destination is $25. After arriving at the first destination the cardholder requests a second destination for $15, and then after arriving at the second destination requests a third, for $10. The network is Visa, because the Mastercard simulator does not have incremental authorization capability. The starting balance is $1000. This example is similar to Scenario 3: Incremental authorizations but with some differences: Scenario 3 was derived from live data in Production, where the incremented transactions were authorizations that were later settled. Because of the way the simulator is set up in CV, this simulation has preauthorizations for the incremented transactions, which are completed and then later settled. The card product in this example has a 15% upcharge for MCC 4121 (taxicabs and limousines) that rounds up to the next whole number. First preauthorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount25associationvisamerchantNameEastern Ridesharemcc4121transType2 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.052,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 3333  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""a6fa4617-a71e-40b7-bf72-70dc1242d517""  },  ""system_timestamp"": ""2022-11-17 17:02:18"",  ""rtoken"": ""8993e8d9-f236-4a9e-9f19-2c317e03f542"" } Capture the auth_id for later use. View the preauthorization Call Get Authorization History to see the preauthorization. Notice that the amount includes the upcharge whereas local_amt does not. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.385,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""3333"",     ""details"": ""Eastern Rideshare  LT LAKE CITY UTUS"",     ""details_formatted"": ""EASTERN RIDESHARE, LT LAKE CITY, UT"",     ""amount"": ""-30"",     ""timestamp"": ""2022-11-17 17:00:22"",     ""type"": ""L"",     ""mcc"": ""4121"",     ""merchant_id"": ""xUuamfF2K9m2vrH"",     ""acq_id"": ""417101"",     ""terminal_id"": ""88121702"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""V"",     ""local_amt"": ""000000002500"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""f2e57001-6fa7-432a-8bef-cb7a9473d80b""  },  ""system_timestamp"": ""2022-11-17 17:05:00"",  ""rtoken"": ""6f20af30-d5d6-4c3b-9229-c3404269486d"" } Second preauthorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount15associationvisamerchantNameEastern Ridesharemcc4121originalAuthIdauth_id from the previous responsetransType3 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.743,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 6666  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""7e481adb-1354-42b8-8d6c-1b5daab7e911""  },  ""system_timestamp"": ""2022-11-17 17:04:09"",  ""rtoken"": ""d167057c-5f53-4084-96dd-fa60f096f83f"" } Capture the auth_id for later use. View the preauthorization Call Get Authorization History to see the preauthorization. When Galileo received this incremental preauthorization, it backed out the previous preauthorization and replaced it with this one. The amount field shows the cumulative amount of the two requests plus upcharges, whereas local_amt shows only the amount from this second preauthorization, without upcharges. The original_auth_id contains the auth_id of the previous preauthorization. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.385,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""6666"",     ""details"": ""Eastern Rideshare  LT LAKE CITY UTUS"",     ""details_formatted"": ""EASTERN RIDESHARE, LT LAKE CITY, UT"",     ""amount"": ""-48"",     ""timestamp"": ""2022-11-17 17:04:09"",     ""type"": ""L"",     ""mcc"": ""4121"",     ""merchant_id"": ""xUuamfF2K9m2vrH"",     ""acq_id"": ""417101"",     ""terminal_id"": ""88121702"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""3333"",     ""network_code"": ""V"",     ""local_amt"": ""000000001500"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""f2e57001-6fa7-432a-8bef-cb7a9473d80b""  },  ""system_timestamp"": ""2022-11-17 17:05:00"",  ""rtoken"": ""6f20af30-d5d6-4c3b-9229-c3404269486d"" } Third preauthorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount10associationvisamerchantNameEastern Ridesharemcc4121originalAuthIdauth_id from the previous responsetransType3 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.746,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 9999  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""d0ef973c-bd22-46c9-a1d0-0321d5fd61dc""  },  ""system_timestamp"": ""2022-11-17 17:06:49"",  ""rtoken"": ""47c10810-0130-4b72-b0d6-66c4a2231534"" } Capture the auth_id for later use. View the preauthorization Call Get Authorization History to see the preauthorization. When Galileo received this second incremental preauthorization, it backed out the previous preauthorization and replaced it with this one. The amount field shows the cumulative amount of the three requests plus upcharges, whereas local_amt shows only the amount from this third preauthorization without upcharges. The original_auth_id contains the auth_id of the previous preauthorization. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.48,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""9999"",     ""details"": ""Eastern Rideshare  LT LAKE CITY UTUS"",     ""details_formatted"": ""EASTERN RIDESHARE, LT LAKE CITY, UT"",     ""amount"": ""-60"",     ""timestamp"": ""2022-11-17 17:06:49"",     ""type"": ""L"",     ""mcc"": ""4121"",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""acq_id"": ""417101"",     ""terminal_id"": ""82323231"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""6666"",     ""network_code"": ""V"",     ""local_amt"": ""000000001000"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""0edb3dd4-8769-4739-8ada-5666d38ec2ac""  },  ""system_timestamp"": ""2022-11-17 17:07:46"",  ""rtoken"": ""30984952-a77f-4db5-b22b-7f8712d0a4b4"" } Completion Call Create Simulated Card Authorization with these parameters to simulate the completion, because a completion comes to Galileo through the authorization stream. The amount is the cumulative amount shown in the third preauthorization. ParameterValueaccountNoPAN, PRN or CADamount60associationvisamerchantNameEastern Ridesharemcc4121originalAuthIdauth_id from the previous responsetransType4 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.533,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 1212  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""265048e1-e8e7-490d-bc14-a08753c346fb""  },  ""system_timestamp"": ""2022-11-17 17:14:49"",  ""rtoken"": ""799fa6ed-6322-42d6-8abf-6236d32b9f8f"" } View the completion Call Get Authorization History to see the completion. The amount and local_amt are the same value. In Production, it is possible that the completion would be for less than this amount, for example, if a tip were not included in the total. The original_auth_id contains the auth_id of the previous preauthorization. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.056,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""1212"",     ""details"": ""Eastern Rideshare  LT LAKE CITY UTUS"",     ""details_formatted"": ""EASTERN RIDESHARE, LT LAKE CITY, UT"",     ""amount"": ""-60"",     ""timestamp"": ""2022-11-17 17:14:49"",     ""type"": ""C"",     ""mcc"": ""4121"",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""acq_id"": ""417101"",     ""terminal_id"": ""82323231"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""9999"",     ""network_code"": ""V"",     ""local_amt"": ""000000006000"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""ffc6c434-a7c5-4be5-80f4-ef8564c4c9b1""  },  ""system_timestamp"": ""2022-11-17 17:15:48"",  ""rtoken"": ""e93a0e6b-746f-47d8-8418-cb009292e543"" } Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id of the completionaccountNoPAN, PRN or CADassociationvisaamount60 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 5.847,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 1502  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""36de8069-7442-477c-8578-0c2f3ad25daf""  },  ""system_timestamp"": ""2022-11-17 17:17:24"",  ""rtoken"": ""198d5809-be6f-4e40-8ad5-bdcfc47c7ef7"" } The settle_dtl (settlement detail) value can be used for troubleshooting with Galileo. Transactions created Call Get All Transaction History to see the ledger entries, in reverse chronological order. For this endpoint response, the prior_id contains the auth_id of the previous transaction in the sequence. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-11-17 17:17:22"",     ""amt"": -60,     ""source_id"": ""1212"",     ""type"": ""C"",     ""type_description"": """",     ""trans_code"": ""VSC"",     ""arn"": ""14171012321929362293627"",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""external_trans_id"": """",     ""calculated_balance"": 940,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:06:49"",     ""prior_id"": ""9999"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""1212"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-11-17 17:17:22"",     ""amt"": 60,     ""source_id"": ""1212"",     ""type"": ""C"",     ""type_description"": """",     ""trans_code"": ""BVC"",     ""arn"": ""14171012321929362293627"",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:06:49"",     ""prior_id"": ""9999"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""1212"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-11-17 17:14:49"",     ""amt"": -60,     ""source_id"": ""1212"",     ""type"": ""C"",     ""type_description"": """",     ""trans_code"": ""VIC"",     ""arn"": """",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""external_trans_id"": """",     ""calculated_balance"": 940,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:06:49"",     ""prior_id"": ""9999"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""1212"",     ""local_amt"": 60,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""PV"",     ""act_type_description"": ""Visa Pre-auth Backout"",     ""post_ts"": ""2022-11-17 17:14:48"",     ""amt"": 60,     ""source_id"": ""9999"",     ""type"": ""PV"",     ""type_description"": """",     ""trans_code"": ""PVPV"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": ""5670"",     ""formatted_merchant_desc"": """",     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-11-17 17:06:49"",     ""amt"": -60,     ""source_id"": ""9999"",     ""type"": ""L"",     ""type_description"": """",     ""trans_code"": ""VIL"",     ""arn"": """",     ""merchant_id"": ""8dTUYluaYwf9mtY"",     ""external_trans_id"": """",     ""calculated_balance"": 940,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:04:09"",     ""prior_id"": ""6666"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""9999"",     ""local_amt"": 10,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""PV"",     ""act_type_description"": ""Visa Pre-auth Backout"",     ""post_ts"": ""2022-11-17 17:06:49"",     ""amt"": 48,     ""source_id"": ""6666"",     ""type"": ""PV"",     ""type_description"": """",     ""trans_code"": ""PVPV"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": ""5670"",     ""formatted_merchant_desc"": """",     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-11-17 17:04:09"",     ""amt"": -48,     ""source_id"": ""6666"",     ""type"": ""L"",     ""type_description"": """",     ""trans_code"": ""VIL"",     ""arn"": """",     ""merchant_id"": ""xUuamfF2K9m2vrH"",     ""external_trans_id"": """",     ""calculated_balance"": 952,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:02:18"",     ""prior_id"": ""3333"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""6666"",     ""local_amt"": 15,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""PV"",     ""act_type_description"": ""Visa Pre-auth Backout"",     ""post_ts"": ""2022-11-17 17:04:09"",     ""amt"": 30,     ""source_id"": ""3333"",     ""type"": ""PV"",     ""type_description"": """",     ""trans_code"": ""PVPV"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": ""5670"",     ""formatted_merchant_desc"": """",     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Eastern Rideshare, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-11-17 17:02:18"",     ""amt"": -30,     ""source_id"": ""3333"",     ""type"": ""L"",     ""type_description"": """",     ""trans_code"": ""VIL"",     ""arn"": """",     ""merchant_id"": ""ZUFgglkEhRtnUER"",     ""external_trans_id"": """",     ""calculated_balance"": 970,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-11-17 17:02:18"",     ""prior_id"": ""0"",     ""card_id"": ""5670"",     ""formatted_merchant_desc"": ""EASTERN RIDESHARE, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""3333"",     ""local_amt"": 25,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102207137"",     ""mcc_code"": ""4121"",     ""credit_ind"": ""Y""    } Updated 4 months ago Table of Contents First preauthorization View the preauthorization Second preauthorization View the preauthorization Third preauthorization View the preauthorization Completion View the completion Settlement Transactions created "
180,docs.galileo-ft.com/pro/docs/galileo-ach-workflows,"Galileo ACH Workflows The workflow for ACH processing at Galileo depends on whether the transaction is incoming or outgoing and whether it debits or credits the receiver’s account. 📘NoteIf an ACH transaction is denied after the RDFI receives the transaction, then the return workflow starts. Outgoing ACH debit workflow This flowchart illustrates an outgoing ACH transaction that moves funds out of an external account. The steps are described below. In this example, product settings specify four hold days. Your customer makes an ACH debit request on Monday at 13:30 and you pass the request in a Create ACH Transaction call. Galileo prepares a Nacha file at the next scheduled time, Monday at 13:45 in this example. The file contains the transaction data, and Galileo sends the file to the ODFI via SFTP. The timer for hold days starts, with Monday being day one. The ODFI sends the Nacha file to the ACH operator. The ACH operator sends a Nacha file to the RDFI that contains the transaction request. The RDFI verifies that funds are available and debits the amount from the receiver’s account. On Friday at 00:00, the hold days expire and Galileo credits your customer's account. The funds are now available. The ACH operator moves funds between the ODFI and RDFI during settlement. Outgoing ACH credit workflow This flowchart illustrates an outgoing ACH request that moves funds into an external account. The steps are described below. Your customer makes an ACH credit request and you pass the data to the Create ACH Transaction endpoint. Galileo adjusts the amount for the transaction from your customer’s account and transfers the funds to the ODFI. Galileo prepares a Nacha file and sends it to the ODFI via SFTP. The ODFI sends the Nacha file to the ACH operator. The ACH operator sends a Nacha file to the RDFI that contains the transaction. The RDFI verifies that the receiver’s account can accept the funds. The RDFI credits the receiver’s account. The ACH operator moves funds between the ODFI and RDFI during settlement. Outgoing ACH returns workflow This flowchart illustrates the process that occurs when the RDFI rejects an ACH credit or debit request from your customer in the Galileo system. The steps are described below. The RDFI receives a Nacha file that contains the customer's request. The receiver or RDFI rejects the transaction request from your customer. If necessary, the RDFI adjusts the transaction amount for the receiver’s account. The RDFI prepares a Nacha file containing information for the return and sends it to the ACH operator. The information includes a notice of change that states the problem and how to correct it. The ODFI sends the Nacha file to Galileo. Galileo processes the Nacha file and reviews the notice of change. If necessary, Galileo adjusts funds for your customer’s account. Your customer receives a notification of the return. The date of return and the return code are recorded in your customer’s account transaction history. Incoming ACH debit workflow This flowchart illustrates an incoming ACH transaction that moves funds out of your customer’s account in the Galileo system. The steps are described below. The external originator makes an ACH request to move funds out of your customer’s account. The originator sends the request to their ODFI. The ODFI prepares a Nacha file and sends it to the ACH operator. The timer for the waiting period starts. The ACH operator sends a Nacha file to the RDFI that contains the request. The RDFI sends the Nacha file to Galileo. Galileo validates the Nacha file and verifies that funds are available. Galileo adjusts the amount from your customer’s account and transfers them to the RDFI. The ODFI moves the funds into the originator’s account after the mandatory waiting period expires. The ACH operator moves funds between the ODFI and RDFI during settlement. Incoming ACH credit workflow This flowchart illustrates an incoming ACH transaction that moves funds into your customer’s account in the Galileo system. The steps are described below. The external originator makes an ACH request to move funds into your customer’s account. The originator sends the request to the ODFI. The ODFI prepares a Nacha file and sends it to the ACH operator. The ODFI debits the funds from the originator’s account. The ACH operator sends a Nacha file to the RDFI that contains the transaction. The RDFI sends the Nacha file to Galileo. Galileo validates the Nacha file and verifies that the receiver can accept the funds. The RDFI transfers the funds to Galileo. Galileo credits your customer’s account with the funds for the ACH transaction. The ACH operator moves funds between the ODFI and RDFI during settlement. Incoming ACH returns workflow This flowchart illustrates the process that occurs when you or Galileo reject an ACH credit or debit from an external originator. The steps are described below. You or Galileo reject an incoming ACH transaction and mark it for return. You can reject an incoming ACH transaction before or after the funds transfer to the receiver. If necessary, Galileo adjusts the transaction amount for your customer’s account. If necessary, Galileo transfers funds to the RDFI. Galileo prepares a Nacha file with the return and sends it to the RDFI. Galileo also sends an ACH return code and a trace code that the ODFI can use for tracking. Galileo records the date of return and the return code in your customer’s transaction history. The RDFI sends the Nacha file to the ACH operator. The ACH operator sends the Nacha file to the ODFI. The ODFI processes the Nacha file and verifies the return. If necessary, the ODFI adjusts funds back to the originator’s account. Updated about 1 year ago Table of Contents Outgoing ACH debit workflow Outgoing ACH credit workflow Outgoing ACH returns workflow Incoming ACH debit workflow Incoming ACH credit workflow Incoming ACH returns workflow "
181,docs.galileo-ft.com/pro/reference/post/verifyaccount,"Verify Account This endpoint returns: Current account balance — Both posted and authorized transactions are factored into the balance amount Current maximum amount that can be loaded into the account, according to product parameters External account ID Account PRN Galileo account number (balance ID) See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
182,docs.galileo-ft.com/pro/reference/dispute/post/addtransactions,Add Transactions Use the Add Transactions endpoint to attach the transactions that the account holder selects. Specify the transactionId as returned by Get Transactions (which is not the transactionId that you pass to identify a unique endpoint request). This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1505-4Invalid caseId or caseId returned no result1505-5Invalid Request:1505-6Error saving case1505-9Unable to resume flow:1505-13caseId references a case that is currently locked1505-14Invalid request message1505-15This case is already resolved with status:1505-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! 
183,docs.galileo-ft.com/pro/reference/api-reference-events-api-single-use-secondary-transaction,"single_use_secondary_transaction Code — SUVM Event trigger — Galileo chooses to decline the transaction because a transaction has already been performed on the single use virtual card. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" de39 See Authorization Response Codes for possible values. Example: ""00"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amt Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" merchant_postal_code The postal code for the merchant. Example: ""10021"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SUVM"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_requester Name of the entity that is requesting a tokenized version of the card. Example: ""Apple Inc."" token_requester_id Identifier for ""token_requester"". Example: ""40010030273"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""single_use_secondary_transaction"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# single_use_secondary_transaction example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""de39"": ""00"", ""domestic"": ""Y"", ""fee_amt"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant"": ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""merchant_postal_code"": ""10021"", ""msg_event_id"": ""243693"", ""msg_id"": ""SUVM"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_requester"": ""Apple Inc."", ""token_requester_id"": ""40010030273"", ""token_type"": ""Apple Inc."", ""type"": ""single_use_secondary_transaction"" } Table of Contents Fields Example "
184,docs.galileo-ft.com/pro/reference/post/getivrcallidentifier,Get IVR Call Identifier The table below lists status codes that apply to this specific endpoint. Status CodeCode Description591-01No call request found related to the phoneNo(CallID)LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
185,docs.galileo-ft.com/pro/reference/post/createaccounttransfer,"Create Account Transfer Pass the sending account in the accountNo parameter and the receiving account in the transferToAccountNo parameter. The receiving account should be in status: N (active) and the active flag set to Y. To permit this endpoint to drive the sending account negative, set the ALWNB parameter on the sending product. Consult the Creating an Internal Transfer guide for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description445-01The transfer-to account could not be found445-02Invalid transfer-to account--the account is in an incorrect status. The account active column value !=Y or account status is not in N, S, or L states.445-03The transfer-to account product is not authorized445-04Sender velocity check failure445-05Recipient velocity check failure445-06Sender insufficient balance445-07Invalid/unconfigured cross program transfer. When transferring from an account under one program ID to an account with a different program_id, a configuration must be in place to allow such a transfer.445-08Previous attempt found in process. Did not process current request.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
186,docs.galileo-ft.com/pro/docs/creating-real-time-funding-accounts,"Creating Real-Time Funding Accounts This guide explains how to use the Create Account endpoint to set up RTF funding and RTF spending accounts. Read About Real-Time Funding for an explanation of these account types. Related documentation: About Real-Time Funding — Explanation of what real-time funding is, with use cases. Testing Real-Time Funding in CV — How to run tests for RTF accounts Real-Time Funding Transaction Examples — How various RTF transaction types look in the ledger. Create an RTF funding account To create an RTF funding account, use one of these options: Use the account-creation functionality in the CST. Call the Create Account endpoint. Do not use any other endpoint. Go to Creating an Account for general instructions on populating the call and consult the table below for RTF funding–specific information. ParameterValueName fieldsOptional. You can provide a user-friendly name for the account. Galileo will not validate these values.Address fieldsOptional. You can provide an address for your own accounting purposes. Galileo will not validate these values.prodIdRequired. ID of an RTF funding productloadAmountOptional. Amount to load into the account. Only populate if you have already set up a master funding account that will supply funds to RTF funding accounts. If you do not load funds at this time, you can later load funds into the funding account using Create ACH Transaction or Create Payment.loadTypeOptional. Consult the curated list of otypes provided to you by Galileo Finance. Required when loadAmount is populated.loadFromAccountNoOptional. PRN of a source account for the funds. Required when loadAmount is populated.externalAccountIdOptional. A user-provided, alternative identifier for this account. Galileo will not validate this value. An RTF funding account must be in status: N to fund RTF spending accounts. Any other status prevents the automated funds transfer between funding and spending accounts. However, these non-active statuses may permit ACH transfers and manual adjustments into or out of the RTF funding account. Consult Account Statuses to see what each status permits. Create an RTF spending account You have these options for creating a spending account: In the CST, go to the RDF funding account's page. At the bottom of the left navigation, expand the Real Time Funding tab and select Create Spending Account. Begin enrollment with the Start Enrollment endpoint, then create the account and card with the Complete Enrollment endpoint. Use this method when you do not want to create an account until after the cardholder's identity has been verified. Call the Create Account endpoint. Use this method for most cases. Go to Creating an Account for general instructions on populating the call, especially if using Galileo CIP, and consult the table below for RTF spending-specific information. ParameterValueName parametersRequired. Provide the name of the person to whom the card will be issued. This name will be printed on the card.prodIdRequired. ID of an RTF spending product.externalAccountIdOptional. A user-provided, alternative identifier for the account.embossLine2Optional. Text to be printed under the cardholder name, such as the company name.fundingAccountNoRequired. The PRN of the RTF funding account. This value cannot be changed after it is set. Managing Real-Time Funding Although RTF accounts have many similarities with conventional accounts, there are some differences, as shown in the sections below. Viewing RTF accounts When you create an RTF funding account or an RTF spending account, that account will be included in the Customer Master RDF and the Account Card RDF (RTF spending account only). However, there is no field in the RDFs to link the spending and funding accounts. To see which RTF funding account is associated with an RTF spending account, you have these options: Retrieve the PRN with the Get RTF Account Relationship endpoint. Capture the PRN of the RTF funding account in the fund_pmt_ref_no field in Events API webhook messages. Go to the landing page for the spending account in the CST. To see which RTF spending accounts are associated with an RTF funding account, you can either: Use the Get RTF Account Relationship endpoint. In the CST, on the RTF funding account page, at the bottom of the left navigation, expand the Real Time Funding tab and select the list of spending accounts. To check the balance of an RTF funding account, you can: Capture the fund_pastotb value in the Events API webhook messages. View the balance on the RTF funding account's landing page in the CST. On the landing page for a spending account you can also see the RTF funding account's balance. Call the Get Balance endpoint with the PRN of the RTF funding account as the accountNo. Viewing RTF transactions To identify the transfers between the RTF funding account and RTF spending accounts, Galileo has created these otypes (transaction types). All transfers are adjustments (act_type: AD). FY — RTF funding account transfer to RTF spending account at the time of authorization. SY — RTF spending account transfer from RTF funding account at the time of authorization. FZ — RTF funding account transfer to RTF spending account at a time other than authorization. This code may indicate either a credit or a debit to the spending account. SZ — RTF spending account transfer from RTF funding account at a time other than authorization. This code may indicate either a credit or a debit to the spending account. The funding transactions are visible as follows: Program API response — Get All Transaction History returns all funding transfers as well as authorizations and settlements. Other endpoints that return transactions (Get Transaction History, Get Authorization History, Get Account Overview) return the authorizations and settlements for RTF spending accounts but not the funding transactions. CST — The All Transactions screen has a control to show or hide the funding transactions. Posted Transactions RDF gAnalytics 📘NoteSee Real-Time Funding Transaction Examples to see how the funding transactions interact with various transaction types. Setting limits on RTF accounts When you set up your RTF spending product, you set velocity limits for the product (amount per transaction, amount per week) as well as MCC and merchant ID limits. To set these same limits on a per-account basis, use Galileo's Account-Level Authorization Controls. On the RTF funding product you can set up limits for ACH and Program API transfers. Events API The same Authorization Events and Settlement Event webhooks are sent for the RTF spending account transactions as for conventional transactions, such as BAUT: auth, DAUT: denied_auth, and SETL: setl. However, you will have new fields enabled for those messages: fund_pastotb — The available balance in the funding account, after the current transaction has taken place. This value is not available for denied authorizations. fund_pmt_ref_no — The PRN of the RTF funding account associated with the RTF spending account. No event webhooks are sent for transfers between the RTF funding account and the RTF spending accounts. Closing an RTF spending account You can close an RTF spending account the same way that you close a conventional card account, using Modify Status. If you select a type that closes related accounts, the RTF funding account is not affected. Closing an RTF funding account When you close an RTF funding account, all of the associated RTF spending accounts become unusable—all authorization requests are denied because the available balance for the cards is 0.00 but no funds can be added to the accounts at authorization time. 🚧WarningYou cannot migrate RTF spending accounts to a different RTF funding account. To close an RTF funding account, call Modify Status with the desired type: 2 — Change status to D (deactivated) 13 — Change status to C (canceled) 16 or 20 — Change status to Z (canceled without refund) RTF accounts and other Program API endpoints The behavior of some other Program API endpoints is slightly different with RTF accounts: Get Related Accounts — Cannot be used to show the relationships between RTF funding and RTF spending accounts; instead, use Get RTF Account Relationship. Add Account — Cannot be used to create an RTF funding account. Can be used to create an RTF spending account or to add accounts to an RTF spending account, but the balance cannot be shared. Switch Product — Cannot be used on RTF funding accounts. For RTF spending accounts, the prodId must be another RTF spending product. If an invalid switch is attempted, the endpoint returns status code 590-02 (Product cannot be switched to an unauthorized product). Add Card — Cannot be used to add cards to an RTF funding account. Can be used to add a card to an RTF spending account. Modify Status — Some of the values of type have different behavior with RTF accounts: A type such as 2, 13, 16 and 20 cancels a card and/or its account, plus related accounts. When an RTF spending account is canceled in this manner, the RTF funding account is not affected. A type that affect cards, such as reissue, freeze/unfreeze or lost/stolen, cannot be used on RTF funding accounts. Get Account Overview, Get Transaction History — For an RTF spending account, only the authorizations and settlements are returned, as well as conventional payments and adjustments. The RTF funding transactions are not returned. For an RTF funding account, all of the funding transfers (FY, FZ) are returned as well as other payments and adjustments. Get All Transaction History — For an RTF funding account all funding transfers (FY, FZ) are returned as well as other payments and adjustments. For an RTF spending account, all transactions including the funding transfers (SY, SZ) are returned. To all three transaction-retrieval endpoints there will be a new field added in the response, depending on whether the accountNo is an RTF funding or RTF spending account: spending_account_prn — Contains the PRN of the associated RTF spending account for FY and FZ transactions. funding_account_prn — Contains the PRN of the associated RTF funding account for SY and SZ transactions. Updated 2 months ago Table of Contents Create an RTF funding account Create an RTF spending account Managing Real-Time Funding Viewing RTF accounts Viewing RTF transactions Setting limits on RTF accounts Events API Closing an RTF spending account Closing an RTF funding account RTF accounts and other Program API endpoints "
187,docs.galileo-ft.com/pro/reference/api-reference-events-api-direct-deposit-switch-status,"direct_deposit_switch_status Code — DDSE Event trigger — The status of a direct deposit switch changes. Process — This process contains the event trigger: Account holder initiates a direct deposit switch. Fields All fields are strings. Your field names may vary. Field Required Description distribution_amount X The amount of the direct deposit switch. Example: ""100"" distribution_type X The type of amount in distribution_amount: amount or percent. Example: ""percent"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DDSE"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" status X The new status of the direct deposit switch: PROCESSING, COMPLETED, FAILURE, TOKEN_REQUESTED. Example: ""COMPLETED"" status_reason X The reason for the new status when status: FAILURE. See Direct Deposit Switch Failure Status Reasons for valid values. timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""direct_deposit_switch_status"" Example JSON# direct_deposit_switch_status example: { ""distribution_amount"": ""100"", ""distribution_type"": ""percent"", ""msg_event_id"": ""243693"", ""msg_id"": ""DSCT"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""status"": ""COMPLETED"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""direct_deposit_switch_status"" } Table of Contents Fields Example "
192,docs.galileo-ft.com/instant/reference/id-type,ID Type TypeDescriptionssnSocial security numberitinIndividual taxpayer identification number 
193,docs.galileo-ft.com/pro/docs/card-transaction-scenarios-index,"Card Transaction Scenarios Index These scenarios show how various types of card transactions are represented by the Galileo system. These pages were formerly in the Card Transaction Scenarios PDF. Before consulting these scenarios you should be familiar with the concepts in these guides: About Transactions — General explanation of how Galileo represents transactions across it system. About Card Transactions — Explanation of how card transactions work from the authorization request to settlement About the Events API — How Galileo notifies you in real-time about system events RDF Reference — Contents of the standard suite of RDFs Scenarios Scenario 1: Authorization with Settlement — Cardholder adds a tip to a bill at a restaurant. One authorization with one settlement Scenario 2: Preauthorization with Completion — Cardholder pumps gas. One preauthorization and one completion Scenario 3: Incremental Authorizations — Multiple authorizations and one settlement Scenario 4: Reversal on Authorization Before Clearing (Mastercard) — Mobile wallet purchase with full reversal. Authorization and its reversal before clearing Scenario 5: Reversal on Preauthorization Before Clearing (Visa) — Attempted gas purchase with full reversal. Preauthorization and its reversal before clearing Scenario 6: Refund After Clearing (Visa) — Home improvement store purchase with partial refund. Authorization and its refund after clearing Scenario 7: Refund After Clearing (Mastercard Banknet) — Cash-app transfer with full refund. Authorization and settlement with merchant credit Scenario 8: Partial Reversal on Preauthorization — Car-rental agency. Preauthorization and partial reversal Scenario 9: Merchant Credit (Mastercard Banknet) — Return of a gift. Merchant credit Scenario 10: Merchant Credit (Visa) — Home improvement store purchase with merchant credit. Preauthorization over Mastercard Banknet with merchant credit over Visa Interlink Scenario 11: ATM Withdrawal — Balance inquiry plus withdrawal plus program fee Scenario 12: ATM Reversal — Reversal of a duplicate authorization Scenario 13: International Authorization — Retail purchase in Brazil. Authorization plus settlement Scenario 14: International Reversal — Retail purchase in Spain. Authorization plus partial reversal Scenario 15: Tokenization Authorization — Cardholder installs a meal-delivery app and the app validates the card in the cardholder's mobile wallet Scenario 16: Settlement Without Authorization — The merchant does not clear a transaction until after it has expired in the Galileo system Scenario 17: Card Load (Maestro) — Drive-share worker receiving payment as a Maestro load Scenario 18: Real-Time Funding — A cardholder with a corporate spend card makes a purchase, and the funds are transferred real-time into the account before authorization Scenario 19: Force Post — A merchant does not obtain authorization for a purchase and then force-posts the transaction. Updated about 1 month ago Table of Contents Scenarios "
194,docs.galileo-ft.com/pro/reference/post/createsimulatedcardauth,Create Simulated Card Authorization For instructions on using this endpoint see Simulating Card Transactions. To use the following input parameters you must make special arrangements with Galileo. settleAmount settleCurrencyCode cardBillingAmount cardBillingCurrencyCode mcc originalAuthId specialFunctions posEntryMode requesterId walletId latitudeAndLongitude partialAmount partialForeignAmount cashbackAmount cashAdvanceAmount pin transType 🚧WarningDo not use this endpoint in Production.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description525-01Method not available in the production environmentLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
195,docs.galileo-ft.com/pro/reference/post/createlocation,"Create Location The table below lists status codes that apply to this specific endpoint. Status CodeCode Description506-01Invalid location ID506-02Invalid invoice value. (The number passed in cycleInvoice did not work with the chosen cycleType).506-03Invalid cycleStart value. (The number passed in cycleStart did not work with the chosen cycleType).506-04creditLimit, cycleType, cycleStart are required params when setting centralBillFlagLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
197,docs.galileo-ft.com/pro/page/scenario-1-authorization-with-settlement,"Scenario 1: Authorization with Settlement << Back to the index A debit cardholder goes to a restaurant and the meal totals $45. The cardholder adds a $10 tip to the receipt. The following are true: The initial available balance is $1000. The merchant uses a signature to validate the debit card. The network is Mastercard Banknet. Sequence of events Events in the same step have the same timestamp. Mastercard sends a preauthorization request for –45.00. Galileo approves the request and places a 45.00 hold on the account. The available balance is now 955.00. Galileo sends a BAUT: auth webhook. Mastercard sends a batch file with the –55.00 transaction. Galileo backs out the 45.00 hold and posts –55.00 to the account. The available balance is now 945.00. Galileo sends a SETL: setl webhook. 📘NoteBecause the settlement amount is higher than the preauthorization amount, there is a risk that the tip could drive the account negative. See Upcharges in the Authorization guide for a way to mitigate this risk. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthPreauth45.00887701000.0020210411:000435MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth45887709552021-04-11 00:04:35 MSTSETLsetl55887709452021-04-12 10:32:04 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME45.00-88775004112021 00:04:35 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE55.00-8877SE5887704112021 00:04:3504122021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. amtauth_idoriginal_auth_idtypelocal_amttimestamp-4588770L0000000045002021-04-11 00:04:35 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-5588770SE52021-04-11 00:04:352021-04-12 10:32:04 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-4588770AUL8877955Y2021-04-11 00:04:352021-04-11 00:04:3545NoneNoneBO588771000NoneNone2021-04-12 10:32:04-5588770SE58877945Y2021-04-11 00:04:352021-04-12 10:32:04 "
198,docs.galileo-ft.com/pro/reference/post/updatepayment,Update Payment Consult the Creating a Payment guide for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description533-01Payment record not found533-02Payment record status is invalid -- must be in ready to process status (R)LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
199,docs.galileo-ft.com/instant/reference/account-status,Account Status StatusDescriptionneeds_cipThe Account has been created but can't be used until the Cardholder passes CIPactiveThe Account is activeinactiveThe Account is disabledremovedUsed to remove an ACH Accountfailed_cipThe Cardholder has failed CIP 
200,docs.galileo-ft.com/pro/docs/about-account-level-auth-controls,"About Account-Level Authorization Controls This guide explains what account-level authorization controls are and how to use them. You may also want to consult these documents: Designing Authorization Controls — Instructions on deciding which product-level controls to set by default and what kinds of account-level controls to set. Setting Account-Level Auth Controls — Instructions on how to implement ALCs using the Program API. Why authorization limits? When you set up a product that has a card, you also set up authorization restrictions such as velocity limits—amount per transaction or per day, for example, or number of transactions per day—as well as limits on which merchants are valid. These product-level restrictions apply to all accounts with that product ID. For a particular card product you might limit the number of ATM withdrawals per day to 3 and limit the amount per withdrawal to $200. You might also exclude certain merchant types by MCC or merchant ID. These limits are set in cooperation with your bank to help mitigate fraud or to manage corporate spending for businesses. Issuers commonly set up different limits for different cardholders, such as providing higher per-transaction limits for cardholders who meet certain criteria. Issuers create multiple tiers to address use cases such as these: Rewarding the best customers — The higher limits help increase cardholder engagement by removing negative experiences of hitting a limit. It also encourages cardholders to qualify for the higher limits by engaging in behavior that benefits the issuer. Limiting teen accounts more than parent accounts — When offering products that pair an account for parents with accounts for teens, the issuer can provide lower velocity limits for the teens while keeping more advanced limits for the parents. Providing different limits for different employees — Creating different tiers is also useful for business-to-business issuers who create cards for specific uses, such as gas cards for fleet drivers or cards issued to employees with different levels of purchasing authority. Restricting cards to certain merchant types — A business that issues cards to its employees may want to specify that one card be used only to buy office supplies, whereas another be used only for transportation-related expenses such as gasoline and auto repairs. One way to provide the different tiers is to create one or more products that are similar to each other except that they have different authorization limits, and then switch the cardholder's account to the product to change the authorization limits (as described in Switching Products). This method is viable when you have only a few combinations of limits to set and do not wish to customize limits any further, or when the different product levels represent more benefits than different authorization limits. With account-level authorization controls (ALCs) you can impose authorization limits on a per-account basis. In this way, you can create only one product and then set customized velocity limits or merchant restrictions per cardholder. By using ALCs you can: Expend fewer resources on creating and maintaining multiple products Easily create multiple tiers for the same product Instantly apply customized limits per cardholder account Set temporary limits Instantly remove customized limits Set lower limits than the default Provide one-time limit increases Provide one-time permission for a particular merchant or merchant type 📘NoteIf you create multiple products for multiple tiers, you can still use ALCs. Prerequisites You can set ALCs for any account that has a card, regardless of network. Contact Galileo to request access to ALCs so that they can be set up in the system and the ALC-related API endpoints enabled. You will need to work with your bank to specify which velocity limits or merchant restrictions to set at both the product and account levels. See Designing Authorization Controls for instructions of creating these authorization controls. Use cases These use cases provide examples of ways to use ALCs. To see how to implement these use cases with the Program API, see Use cases in Setting Account-Level Auth Controls. Use case 1: Reward qualifying cardholders with higher velocity limits You and your bank have set your default product controls to limits that are suitable for the average cardholder. However, you and your bank also agree that cardholders who maintain a balance above a certain amount for six months should be rewarded with higher velocity limits. You also create a third tier for cardholders who maintain an even higher balance. When a particular cardholder meets a requirement, you call an API to create ALCs for that account. The ALCs start at the time the ALCs are created and do not expire. Use case 2: Set special limits during a cardholder's vacation To your cardholders you offer a vacation service wherein the cardholder indicates that they will be making international purchases during a certain period in the future. Because the cardholder anticipates spending more than usual, you call an API to create an ALC that increases limits for international transactions during the vacation time. Use case 3: Reduce velocity limits for a cardholder Some cardholders' spending behavior could indicate that fraud is taking place. Rather than cancel the card and anger an innocent cardholder, you call an API to set ALCs that are lower than the defaults to reduce risk. If the cardholder contacts you and demonstrates that the behavior is legitimate, you can instantly call an API to remove the ALCs to restore the defaults. Use case 4: One-time increase to a limit A cardholder attempts to withdraw cash from an ATM, but the withdrawal violates the transaction-count limit. You offer a service whereby the cardholder can request a one-time override of a limit. The cardholder contacts you, and because the cardholder has been a reliable customer, you create an ALC to override the transaction count limit. The ALC expires after 30 minutes. (You could also create an ALC to provide a temporary increase to the withdrawal amount.) Use case 5: Fleet cards A business has a fleet of vehicles and issues cards to its drivers. By default, these cards can be used at gas stations as well as auto parts and auto repair stores but not at any other type of merchant. However, a subset of the drivers perform long-distance deliveries, and so you permit those cards to be used at hotels as well. You set up the default merchant restrictions for the product, and then call an API to permit the hotel usage for each cardholder that needs hotels. See Fleet Cards for more information. Use case 6: Food-delivery cards A business that contracts with drivers to deliver food issues a card to each driver to pay for the customer's order at the restaurant. To prevent misuse of the card, the default setting denies all merchants, and then when an order comes in from a restaurant, you call an API to authorize transactions for that merchant only for the next hour.Updated 5 months ago Table of Contents Why authorization limits? Prerequisites Use cases Use case 1: Reward qualifying cardholders with higher velocity limits Use case 2: Set special limits during a cardholder's vacation Use case 3: Reduce velocity limits for a cardholder Use case 4: One-time increase to a limit Use case 5: Fleet cards Use case 6: Food-delivery cards "
201,docs.galileo-ft.com/pro/reference/post/getenrollmentinfo,Get Enrollment Info Pass the transactionId from the original Start Enrollment or Create Account call. No other parameters except the base form parameters are required.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
202,docs.galileo-ft.com/pro/reference/api-reference-events-api-pmt,"pmt Code — BPMT Event trigger — The specified amount is credited to the account. Processes — These processes contain the event trigger: Program API endpoints: Create Payment Create Account Transfer Create ACH Transaction ACH transactions Galileo-hosted cardholder website Customer Service Tool Internal administrative processes that move funds into customer accounts Fields All fields are strings. Your field names may vary. Field Required Description account_status See Account Statuses for possible values. Example: ""N"" ach_acct_id The ACH account to which the payment was posted. Example: ""212101392821"" ach_source_trace Trace ID for an ACH transaction, generated by the originator. 15 digits. Example: ""034294619573021"" ach_trans_id X Unique Galileo-generated identifier for an ACH transaction. Example: ""7971383"" act_type X For all payments the activity type is ""PM"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" bai Visa loads only. See Business Application Identifier for possible values. Example: ""AA"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" card_status See Card Statuses for possible values. Example: ""N"" client_id ID for the customer record. Example: ""264539"" company_entry_desc Company descriptor found in the batch header of the Nacha file. Example: ""RESTAURANT"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" description X ""Description of the payment. Example: ""Transfer from Savings"" effective_dt X For an ACH transaction, this is the effective date when the ACH payment should post. Usually set by the bank to the actual date when the payment is posted, in case we post the payment early. Format: MM/DD/YYYY. Example: ""03/10/2019"" ext_trans_id External transaction ID. Example: ""1234-abcdefg"" extid External account ID. Example: ""da4-f26-212"" hold_days X Number of days that a payment was held before posting. Example: ""1"" incoming_ach_days_early X The number of days before settle_standard_date that the ACH transaction posted. This field is available only if ACH early access is enabled with the FBEEA parameter. Example: ""2"" mcc Merchant category code (DE018). Example: ""5712"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPMT"" odfi_routing_number Routing number for the originating depository financial institution of an ACH transaction. Nine digits. Example: ""325491456"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" orig_acct_number ACH originator account number. Example: ""265493042"" orig_name ACH originator name. Example: ""ABC Bank"" otype X See Transaction Types for possible values. Example: ""W"" pmt_id X Galileo-generated identifier for this payment. Example: ""7971383"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" pmt_source_id Identifier for the transaction that triggered this payment. Example: ""3029584"" post_date Date that the transaction posted to the cardholder account. Format: MM/DD/YYYY Example: ""03/18/2023"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" receiver_name Name on the recipient account. Example: `""Jamal Williams"" retail_chain The name of the retail chain where the load occurred. Example: “Kroger” sec_code Standard entry class code such as PPD for direct deposits and WEB for P2P transactions. Example: ""PPD"" settle_julian_date The date the transaction settled in Julian format: YYDDD Example: ""23005"" settle_standard_date X Settlement date from the ACH file. This is when funds from incoming ACH transactions would post if early access for direct deposits were disregarded. Format: MM/DD/YYYY. Example: ""05/01/2020"" source_inst_name For ACH transactions, the name of the originator. timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X Name of this event: ""pmt"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# pmt example: { ""account_status"": ""N"", ""ach_acct_id"": ""212101392821"", ""ach_source_trace"": ""034294619573021"", ""ach_trans_id"": ""7971383"", ""act_type"": ""PM"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""bai"": ""AA"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""card_status"": ""N"", ""client_id"": ""264539"", ""company_entry_desc"": ""RESTAURANT"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""description"": ""Transfer from Savings"", ""effective_dt"": ""03/10/2019"", ""ext_trans_id"": ""1234-abcdefg"", ""extid"": ""da4-f26-212"", ""hold_days"": ""1"", ""incoming_ach_days_early"": ""2"", ""mcc"": ""5712"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPMT"", ""odfi_routing_number"": ""325491456"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""orig_acct_number"": ""265493042"", ""orig_name"": ""ABC Bank"", ""otype"": ""W"", ""pmt_id"": ""7971383"", ""pmt_ref_no"": ""155101003022"", ""pmt_source_id"": ""3029584"", ""post_date"": ""03/18/2023"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""receiver_name"": ""Jamal Williams"", ""sec_code"": ""PPD"", ""settle_julian_date"": ""23005"", ""settle_standard_date"": ""05/01/2020"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""pmt"" } Table of Contents Fields Example "
203,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-rdp,"mobile_activation RDP The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — ARDP, GRDP, SRDP Event trigger — Provisioning a card to a mobile wallet (tokenization) fails and enters the red path. Processes — These processes contain the event trigger: Galileo performs checks in response to an authorization request over the card network's rails. The card network and the wallet provider perform checks and notify Galileo when the checks fail. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SRDP"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation RDP"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ARDP) ""Google"" (event code GRDP) ""Samsung"" (event code SRDP) Example JSON# mobile_activation RDP example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""SRDP"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation RDP"", ""wallet_type"": ""Google"" } Table of Contents Fields Example "
204,docs.galileo-ft.com/pro/docs/creating-a-payment,"Creating a Payment This guide describes the procedure to move funds into a customer account, make payment reversals, and update payment hold days using the Create Payment and Update Payment endpoints. 📘NoteGalileo uses the term ""payment"" to refer to funds that are deposited into a customer account by the Create Payment endpoint and by other internal processes. Follow this procedure to: Move funds into a customer account at a time other than account creation. Test whether funds can be deposited into a customer account. Reverse a payment and check for any reversal fees. Update the hold days for a pending payment. Do not follow this procedure to: Remove funds from an account; instead, consult Creating an Adjustment. Transfer funds from one account to another in the same program; instead, use the Creating an Internal Transfer procedure. Also see Payments vs. adjustments in the Creating an Adjustment guide. Result of calling Create Payment The specified amount is credited to the receiving account. If configured, a fee is assessed to the sending (or sometimes receiving) account. The transaction types for deposits using the Create Payment endpoint depend on the value in the type parameter. For example, if a $100.00 retail load is made to the receiving account PRN 77777, and the system is configured to assess a 15-cent fee for retail loads (otype RL), calling Create Payment would produce these transactions: pmt_ref_notrans_codeamtexternal_trans_id77777PMRL100.0039e5-14a277777FE0210-0.1539e5-14a2 Result of calling Update Payment The hold days for the original Create Payment call are updated, meaning that: Previously configured hold days for the product are replaced with the specified number. If the number of hold days is changed to zero, the hold is removed. Creating a payment Prior to creating a payment, you can call the Verify Account endpoint and pass the intended payment otype in the loadType parameter. The endpoint returns these values: max_load_amount — The maximum amount configured for the payment type. balance — The available balance (open to buy) on the account. account_status — The current account status. Only some statuses permit payments. Using these values you can determine whether to call Create Payment or whether to notify the account holder that the payment cannot be made at this time. Create Payment parameters This table explains parameters for the Create Payment endpoint. ParameterUsageaccountNoThe receiving account number.amountThe amount to transfer, as a decimal or whole number.typeYou determine valid values in cooperation with Galileo.descriptionYour description of the transaction, if you provide one.locationUnique identifier for the location where the payment occurs.locationTypeIf the location type is 0 or 1, the payment will be allowed or disallowed based on the location. Location types are: 0 — Galileo1 — Provider2 — Don't validate loadverifyOnlyPass 1 to verify parameter values in your API call without creating a payment.providerAssessedFeeIf a fee is assessed, pass the amount of the fee for informational purposes. To assess the actual fee, use the Assess Fee endpoint.Merchant and store parametersUsed by some retail locations that load funds onto cards.holdAmountAmount of the payment to hold.holdExpirationDateTimeWhen to expire the hold.holdDescriptionA description for the hold.holdExternalIdAn alternate ID for the hold. When you populate the hold-related parameters, Galileo returns a hold_id that you can retrieve using the Get Hold History endpoint. To manually expire a hold created in this way, use the Expire Hold endpoint. Create Payment workflow This flowchart shows the logical progression of the Create Payment endpoint. The actual sequence of events in the Galileo system may vary. You send the Create Payment request. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo verifies that the payment is within load limits for the receiving account. If it is not, Galileo returns status: 408-01. Galileo sends the response status: 0. If the holdDays parameter was populated, Galileo waits until the hold days expire. Galileo creates the transaction by crediting the receiving account. If a load limit was violated, Galileo creates a payment for a partial amount. Galileo sends Transaction Events webhook BPMT: pmt for the receiving account. 📘NoteWhen initiating a transaction with the Program API, the transactionId from the API request is copied to the external transaction ID field of all transactions that result from the request. The external transaction ID is available in the responses to transaction-retrieval Program API requests as external_trans_id, in the Posted Transactions RDF as EXTERNAL TRANSACTION ID, and in the Events API webhook messages as ext_trans_id. Updating a payment You can update the hold days on a payment that has not been processed. The payment must be in status: R (ready to process) to be updated. Update Payment parameters This table explains parameters for the Update Payment endpoint. ParameterUsageaccountNoThe receiving account number in the original API call.pmtIdThe payment ID for the payment to be updated. This value is returned as payment_trans_id by the Create Payment endpoint or as pmt_id by the Get Payment History endpoint.holdDaysNumber of days to hold the payment. Pass 0 to post the payment to the receiving account the next time payments are posted. Update Payment workflow The logical progression of the Update Payment endpoint is as follows: Galileo looks for the payment ID. If it cannot find it, Galileo returns status: 533-01. Galileo verifies that the payment is in status: R. If it is not, Galileo returns status: 533-02. Galileo updates the number of days to hold the payment. If the updated value is 0, Galileo posts the payment immediately. Reversing a Payment Although the Program API has a Reverse Payment endpoint, Galileo recommends that you not use it to reverse a payment, because of the way that endpoint handles transaction codes. If you use the Reverse Payment endpoint, the reversed transaction will not have a transaction code that indicates that it is the reversal of a previous transaction. Instead, when you design your funds-flow schema with Galileo, make sure that you have an otype that designates a reversal for each type of payment. Using the Create Adjustment endpoint, reverse the original payment by using the corresponding reversal otype for type. Viewing payments You can view a record of payments deposited to a customer account using any endpoint that returns posted transactions: Get Account Overview Get Transaction History Get All Transaction History 📘NoteThere is a delay of several seconds before a payment appears in a customer’s transaction history and account overview. Sample endpoint request and response Consult the Create Payment and Update Payment endpoints to see how to build the API request and to see the response schema. Status codes These status codes are specific to each respective endpoints. Create Payment status codes Status codeDescriptionNext steps408-01The value in amount exceeds the maximum account load and will only be partially applied.Inform the customer that the payment only partially loaded to the account. Update Payment status codes Status codeDescriptionNext steps533-01The value in pmtId does not match any payment record.Retry with a valid payment ID.533-02The payment is not in status: R (ready to process).Verify that the payment is in status: R. If it is not, the payment cannot be updated.Updated 21 days ago Table of Contents Result of calling Create Payment Result of calling Update Payment Creating a payment Create Payment parameters Create Payment workflow Updating a payment Update Payment parameters Update Payment workflow Reversing a Payment Viewing payments Sample endpoint request and response Status codes Create Payment status codes Update Payment status codes "
205,docs.galileo-ft.com/pro/reference/post/getgrouphierarchy,"Get Group Hierarchy Use the Get Group Hierarchy endpoint to retrieve a group's hierarchy, either a root group or a non-root group. This endpoint returns only the groups, not the associated accounts. By default, the endpoint returns all of the subgroups that are downstream of the specified group. Pass a value for subGroupLevel to specify how many subgroup levels to retrieve. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description617-01Invalid group ID. The groupId does not exist in the core. Verify that groupId is correct by calling Get Group Hierarchy for the root group.617-02Invalid subGroupLevel. The value in subGroupLevel exceeds the group's maximum level or has an invalid value.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
206,docs.galileo-ft.com/pro/page/scenario-10-merchant-credit-visa,"Scenario 10: Merchant Credit (Visa) << Back to the index A debit cardholder is unhappy with services received from a merchant. The merchant credits $100 to the cardholder as compensation. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network Visa. Sequence of events Events in the same step have the same timestamp. Visa sends a merchant credit authorization request for 100.00. Galileo approves the request but does not credit the account yet. Visa sends a clearing file that contains the 100.00 credit. Galileo creates authorization and backout transactions for the ledger and then credits 100.00 to the account. The available balance is now 1100.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthMerchant Credit100.0077330100020210616:092815MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampSETLsetl1007733011002021-06-18 05:58:02 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME100.00+77336006162021 09:28:15 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE100.00+7733VSZ773306162021 09:28:1506182021 Get Authorization History response This transaction is not returned by this endpoint. Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts10077330ISZ2021-06-16 09:28:152021-06-18 05:58:02 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts10077330VIZ77331100Y2021-06-16 09:28:152021-06-16 09:28:15-10077330BVZ77331000YNone2021-06-18 05:58:0210077330VSZ77331100Y2021-06-16 09:28:152021-06-18 05:58:02 "
207,docs.galileo-ft.com/pro/docs/events-api-scenarios,"Events API Scenarios There are four event categories in the Events API. Each category corresponds to a set of Events API webhooks. This guide describes each category and provides example scenarios that could trigger common events. Account events Authorization events Settlement events Transaction events Account events An account event is triggered when an event occurs on a customer account, for example, when an account is created or updated, or when a card is activated. When an account event is triggered, Galileo sends you the event message using the Account Events Webhook. The following sections describe some common scenarios that trigger account events. Account creation This scenario describes an Events API webhook sequence that may occur when a new account is created. You send the Create Account endpoint populated with customer data and account enrollment is successful. Galileo sends the CAPP: app_completed event to indicate that the enrollment application was completed. Events API webhook CodetypeCAPPapp_completed See Creating an Account for the complete account creation procedure. Account creation with failed CIP (when Galileo performs CIP) This scenario describes an Events API webhook sequence that may occur when the customer fails Galileo’s internal CIP verification but later provides additional documentation and passes CIP. A customer attempts to enroll in your program, but fails Galileo’s integrated CIP process. Galileo sends the BFID: failed_id event to indicate that the customer failed the integrated CIP process and the account was not created. Your customer provides additional documentation and you pass the customer for enrollment via the Program API or the CST. The account changes to status: N and active: Y. Galileo sends the PTID: pass_id event to indicate that the customer passed the integrated CIP process and the new account was created. Events API webhooks CodetypeBFIDfailed_idPTIDpass_id 📘NoteIf TIDST is set and the customer fails Galileo’s integrated CIP, Galileo sends the FTID: fail_id event and the account changes to the status in TIDST. Updating account information This scenario describes an Events API webhook sequence that may occur when account information is updated in the Customer Service Tool. You update the customer’s first name, address, phone number, and email address in the CST Account Info screen. Galileo sends the following events: PCHG: profile_changed ADRC: addr_chg ECHG: email_addr_change PHCH: phone_changed Events API webhooks CodetypeOld valuesNew valuesPCHGprofile_changedOld values are not sentfirstname: Lawrencelastname: TarverADRCaddr_chgold_addr1: 936 Marshall St.old_city: Hanoverold_state: MDold_zip: 21076addr1: 3949 Fidler Dr.city: San Antoniostate: TXzip: 78238ECHGemail_addr_changeOld value is not sentemail: [email protected]PHCHphone_changedold_home_phone: 410-555-5637home_phone: 210-555-9472 📘NoteIf ADRC: addr_chg, ECHG: email_addr_change, and PHCH: phone_changed are not configured, Galileo sends PCHG: profile_changed for address, email, and phone number changes. Card activation and PIN setting This scenario describes an Events API webhook sequence that may occur when a card is activated and the PIN is set. You activate a card for a cardholder. The card status changes to status: N. Galileo sends the BACT: card_activated event. The cardholder requests a PIN change and enters a valid PIN in the PIN-change form. Galileo sends the AFPS: agserv_PIN_change_success event to indicate that the PIN change was successfully staged. You validate and commit the PIN change. Galileo sends the PNCH: system_pin_change event to indicate that the PIN change completed successfully. Events API webhooks CodetypeBACTcard_activatedAFPSagserv_PIN_change_successPNCHsystem_pin_change See Activating a Card and PIN Set Procedures for more information on these processes. Card status changes During product setup, you can configure the CDMSG parameter to specify which card status changes will trigger the CSNT: card_status_change event. For example, you might set CDMSG to trigger this event message when the card status changes to lost (status: L) or stolen (status: S). In that case, the following Events API webhook sequence may occur. The cardholder reports that the card was lost. You send the Modify Status endpoint with type: 3 and the card status changed to status: L. Galileo sends the CSNT: card_status_change event to indicate that the card status has changed. Events API webhook Codetypenew_statusCSNTcard_status_changeL Freezing and unfreezing a card This scenario describes an Events API webhook sequence that may occur when a card is frozen and then unfrozen. You send the Modify Status endpoint with type: 17 to set the card to freeze_info: frozen (this does not change the card status). Galileo sends you the FRZN: frozen event. Later, you unfreeze the card by sending the Modify Status endpoint with type: 18 to set the card to freeze_info: unfrozen. Galileo sends you the UFRZ: unfrozen event. Events API webhook Codetypenew_statusFRZNfrozenN (freezing does not change the card’s status so this field matches the card status at the time it was frozen)UFRZunfrozenN (unfreezing does not change the card’s status so this field matches the new_status field in the FRZN: frozen event) Overdraft accounts There are two event messages that can be triggered when an account gains or loses overdraft functionality. ODIN: overdraft_opt_in indicates that the account became eligible for overdraft or that an overdraft account was created. ODOT: overdraft_opt_out indicates that the account lost overdraft functionality. The ODIN: overdraft_opt_in event is usually triggered during account creation by the Create Account endpoint (if ODELG is set), or by the Add Account endpoint when the overdraft account is added. It can also be triggered during enrollment via the CST or Galileo-hosted cardholder website. The ODOT: overdraft_opt_out event can be triggered by the Set Account Feature endpoint or through the CST. You can restore overdraft functionality and trigger ODIN: overdraft_opt_in via the CST. See Creating an Overdraft Account for more information on this process. Overdraft opt-in: This scenario describes an Events API webhook sequence that may occur when an overdraft account is added to an existing core account. You send the Add Account endpoint to create the overdraft account. Galileo sends you the ODIN: overdraft_opt_in event. Events API webhooks Codetypepmt_ref_noODINoverdraft_opt_in1111 (PRN for the core account) Overdraft opt-out: This scenario describes an Events API webhook sequence that may occur when an account with overdraft functionality becomes ineligible for the overdraft account. You send the Set Account Feature endpoint with featureType: 17 and featureValue: I. Galileo sends you the ODOT: overdraft_opt_out event. Events API webhooks Codetypepmt_ref_noODOToverdraft_opt_out1212 (PRN for the overdraft account) Authorization events An authorization event is triggered when a cardholder makes a transaction over card-network rails and the transaction is authorized or the authorization is denied. When an authorization event is triggered, Galileo sends you the event message using the Authorization Events Webhook. The following sections describe some common scenarios that trigger authorization events. See also About Card Transactions for more information on card authorization. Basic authorization and settlement For basic authorization and settlement, Galileo sends two events: one for authorization and one for settlement. This scenario describes an Events API webhook sequence that may occur when a transaction is authorized and then settled. Your customer has an account balance of $500. The customer makes a retail purchase for $25.00 over card-network rails. The card network sends an authorization request for -25.00. Galileo approves the request and places a 25.00 hold on the account. Galileo sends you the BAUT: auth event. The account balance is now 475.00 The card network sends a batch file with the -25.00 transaction. Galileo backs out the 25.00 hold and posts -25.00 to the account. Galileo sends you the SETL: setl event. Events API webhooks Codetypeamountauth_idoriginal_auth_idopen_to_buyBAUTauth2522220475SETLsetl2522220475 Authorization denied This scenario describes an Events API webhook sequence that may occur when an authorization request is denied. Your customer has an account balance of $500. The customer attempts to make a retail purchase for $10 over card-network rails. The card network sends an authorization request for -10.00. Galileo denies the authorization but the denial is not covered by a specific event message. Galileo sends you the DAUT: denied_auth event. The account balance does not change. Events API webhooks Codetypeamountauth_idopen_to_buyDAUTdenied_auth105858500 📘NoteSpecific events for denied authorization are: PUMP: denied_auth_gas NACT: denied_auth_inactive_card IPIN: denied_auth_invalid_pin BNSF: denied_auth_nsf STPD: denied_auth_stip BPAN: bad_pan Authorization with reversal and expiry This scenario describes an Events API webhook sequence that may occur when an authorization is reversed and then expires. Your customer has an account balance of $500. The customer makes a retail purchase for $40 over card-network rails. The card network sends an authorization request for -40.00. Galileo approves the request and places a 40.00 hold on the account. Galileo sends you the BAUT: auth event. The account balance is now 460.00 The cardholder cancels the transaction before it clears. The card network sends an authorization request for 40.00, reversing the previous authorization. Galileo reverses the 40.00 hold on the account. Galileo sends you the AAAU: auth event. The account balance is now 500.00. The authorization and reversal expire after a few days. Galileo sends you the BEXP: auth_exp and BEXR: auth_exp_reversal events. Events API webhooks Codetypeamountauth_idoriginal_auth_idopen_to_buyBAUTauth4066110460AAAUauth4055556611500BEXPauth_exp4055556611500BEXRauth_exp_reversal4066110500 📘NoteGalileo sends the BAUT event for an initial authorization request and the AAAU event for an authorization reversal. Preauthorization with completion A card network can send a preauthorization request with an upcharge that covers the expected amount of a purchase. Then, when the total amount is known, the card network can send a completion advice message with the total amount. This scenario describes an Events API webhook sequence that may occur when a transaction results in preauthorization with completion. A debit cardholder goes to a gas station and begins pumping gas. The cardholder has an account balance of $500. The issuer has configured an upcharge of $100 for gas pumps. The gas merchant sends a preauthorization request for -1.00. Galileo replaces the 1.00 request with a 100.00 preauthorization, approves the request and places a 100.00 hold on the account. The account balance is now 400.00. Galileo sends you the BAUT: auth event. The cardholder finishes pumping gas and the total amount is $20.00. The card network sends a completion advice for -20.00. Galileo backs out the 100.00 hold and replaces it with a 20.00 hold. The account balance is now 480.00. Galileo sends you the AAAU: auth event. The card network sends a settlement file with the -20.00 transaction. Galileo backs out the 20.00 hold and posts -20.00 to the account. Galileo sends you the SETL: setl event. Events API webhooks Codetypeamountauth_idoriginal_auth_idopen_to_buyBAUTauth10048480400AAAUauth2099994848480SETLsetl2099994848480 Settlement events A settlement event is triggered when a transaction made over card-network rails is settled on an account. Galileo receives daily batch files from the card networks that contain clearing information for each transaction. Galileo compares the transactions in the batch file with the authorizations it has on record. When Galileo finds a match, it posts the amount to the cardholder account and sends you the SETL: setl event message using the Settlement Events Webhook. You can ask Galileo to send you settlement events in a secondary queue (see Events prioritization in Events Setup and Configuration for more information). 📘NoteFor SETL: setl events, you can request the signed_amount field to be added to your message template to help you distinguish between credit and debit settlements. The following sections describe some common scenarios that trigger settlement events. Basic settlement A basic settlement occurs when a transaction is authorized and then settled. See Basic authorization and settlement for an example. Force posting If Galileo cannot match a transaction in the settlement file to an authorization, Galileo is obligated to post the settlement anyway. Depending on the reason that the transaction is unmatched, Galileo or the cardholder can dispute the transaction. See Reconciliation and settlement in the About Card Transactions guide for an explanation of unmatched settlement types. This scenario describes an Events API webhook sequence that may occur when a transaction is force-posted without authorization. Your customer has an account balance of $50. The customer makes a $10 purchase at a fast food restaurant over card-network rails. To keep the line moving quickly, the restaurant does not make an authorization request, but instead sends a batch force-post request to the card network.. The card network sends a clearing message advising that the merchant intends to settle on the amount. Galileo posts -10.00 to the account and sends you the SETL: setl event. The account balance is now 40.00. Events API webhook Codetypeamountauth_idoriginal_auth_idopen_to_buySETLsetl106868040 Transaction events A transaction event is triggered when a transaction that does not go over card-network rails is made on an account. Examples include bill payments, fees, adjustments, and ACH transactions. When a transaction event is triggered, Galileo sends you the event message using the Transaction Events Webhook. The following sections describe some common scenarios that trigger transaction events. Basic bill pay request This scenario describes an Events API webhook sequence that may occur when a bill payment is made. Your customer has an account balance of $500. The customer requests to make a bill payment for $50 through an RPPS biller that has already been added to the account. You send the Create Bill Payment endpoint, initiating the bill pay request. Galileo creates the transaction and sends the BPCQ: billpay_request_made event message. The billpay process adjusts the funds out of the account. The account balance is now 450.00. Galileo sends you the BPAY: billpay event message. The RPPS biller receives the payment (depending on the cutoff time, this is often the next day). Galileo is not notified when the transaction is successful. If the payment is rejected, Galileo sends the BRRJ: billpay_rejected event message. Events API webhooks Codetypeamountbillpay_idopen_to_buyBPCQbillpay_request_made504646450BPAYbillpay504646450 Scheduled bill payment with paper check This scenario describes an Events API webhook sequence that may occur when a bill payment is scheduled and the payment is sent as a paper check. Your customer requests a monthly bill payment for $35 to be made with a paper check. You send the Create Bill Payment endpoint and set the proccessDate field to the date that the amount should be adjusted from the account. Galileo sends the BPCQ: billpay_request_made event message On the date that the bill payment is scheduled, Galileo adjusts the amount from the account and sends the BPAY: billpay event message. There is now 465.00 in the account. On the next business day, Galileo prints and mails the paper check. Galileo sends you the BPCM: billpay_check_mailed event. Some days later, the recipient deposits the check and the payment clears. Galileo sends you the BPCC: billpay_check_cleared event. Outgoing ACH debit with return This scenario describes an Events API webhook sequence that may occur when your customer sends an outgoing ACH debit request to move money out of an external account and the external receiver denies the request. Your customer has an account balance of $500. The customer creates an ACH debit request to move $100 out of an external account and into the cardholder account. You send the Create ACH Transaction endpoint. After the configured number of ACH hold days has elapsed, Galileo posts a payment (pmt_type: AC) of 100.00 into your customer’s account. The account balance is now 600.00. The external receiver denies the ACH transaction and an ACH return is initiated. Galileo sends you the ACRT: ach_return event (the NTSAA parameter must be set to enable this event). Galileo adjusts the cardholder account by -100.00. The account balance is now 500.00. Galileo sends you the BADJ: adj event. Events API webhooks Codetypeamountopen_to_buyach_trans_idACRTach_returnN/AN/A3131BADJadj-1005003131 See the About ACH guide for general information on ACH transactions. Holds and lifting holds 📘NoteThis scenario applies to holds placed on non-card network transactions. A hold placed on a transaction over card network rails is a separate and automatic process. See Authorization events in this guide for information on events that apply to card network transactions. This scenario describes an Events API webhook sequence that may occur when a customer sends a check via remote deposit capture (RDC), you place a hold on the funds in the customer account and then later lift the hold. Your customer has an account balance of $500. The customer sends a check to a recipient for $50 using RDC. The funds must be held until the recipient processes the payment. You send the Create Hold endpoint. Galileo places a hold on 50.00 in the account and sends you the CRHD: create_hold event. The account balance is now 450.00. The recipient does not process the payment and the hold expires. You send the Expire Hold endpoint. Galileo releases the hold on the funds and sends you the EXHD: expire_hold event. The account balance is now 500.00. Events API webhooks Codetypehold_idopen_to_buyCRHDcreate_hold5544450EXHDexpire_hold5544500Updated 11 days ago Table of Contents Account events Account creation Account creation with failed CIP (when Galileo performs CIP) Updating account information Card activation and PIN setting Card status changes Freezing and unfreezing a card Overdraft accounts Authorization events Basic authorization and settlement Authorization denied Authorization with reversal and expiry Preauthorization with completion Settlement events Basic settlement Force posting Transaction events Basic bill pay request Scheduled bill payment with paper check Outgoing ACH debit with return Holds and lifting holds "
208,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-ylp,"mobile_activation YLP The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — AYLP, GYLP, SYLP Event trigger — Provisioning a card to a mobile wallet fails and enters the yellow path. Processes — These processes contain the event trigger: Galileo performs checks in response to an authorization request over the card network rails. The network and the wallet provider perform checks and notify Galileo when the checks fail. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SYLP"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation YLP"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code AYLP) ""Google"" (event code GYLP) ""Samsung"" (event code SYLP) Example JSON# mobile_activation YLP example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""SYLP"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation YLP"", ""wallet_type"": ""Apple"" } Table of Contents Fields Example "
209,docs.galileo-ft.com/pro/reference/api-reference-modify-status-codes,"Modify Status Types 📘NoteA dash (—) means no change in status. typeDescriptionAccount or card changedCard statusAccount status1Initiate activate-account process.Account—N2Cancel account. If ACTYP is set to R, all accounts belonging to the same account holder are also deactivated.Account—C3Initiate lost-card process; create replacement card.CardL—4Initiate stolen-card process; create replacement card.CardS—5Update card status to Canceled.CardC—6Initiate card-activation process.Account & CardNN7Update card status to Active.CardN—8Update card status to Lost; no replacement card.CardL—9Update card status to Stolen; no replacement card.CardS—10Account disabled through IVR.Account—D11Update account status to Active.Account—N12Reissue card. Galileo recommends using the Reissue Card endpoint for card reissue.n/a——13Deactivate account and cancel card(s).Account & CardCC14Freeze overdraft account.n/a——15Unfreeze overdraft account.n/a——16Deactivate specified account and cancel card(s).Account & CardZZ17Freeze card. Set startDate and endDate as desired. Default is 24 hours from current date-time.Card——18Unfreeze card immediately. startDate and endDate are ignored.Card——19Reissue with new PAN. The RECNP product parameter must be set to use this type. Galileo recommends using the Reissue Card endpoint for card replacement.Card——20Cancel without refund all accounts and cards belonging to a customer. Use a PAN for accountNo if multiple cards are associated with the account.Account & CardZZ21Update card status to Waiting for payment.CardW—22Update card status to Emboss.CardX—23Disable single card.CardD—24Suspend account.Account—K25Customer filed for bankruptcy.Account—f26Bankruptcy discharged.Account—d27Bankruptcy dismissed.Account—e "
210,docs.galileo-ft.com/pro/docs/direct-post-pin-set-procedure,"Direct POST PIN-Set Procedure This guide describes the direct POST procedure for setting PINs using the Get Card PIN Change Key and Commit Card PIN Change endpoints. This procedure involves transferring PCI-sensitive information directly from the cardholder's device to Galileo's system using an HTML PIN-set form that you host. Go to PIN-Set Procedures for other methods. 📘NoteYou must complete PCI-DSS Self-Assessment Questionnaire A-EP (191 of 250 PCI requirements) to use this procedure. See Prior setup for details. Use this procedure to: Set a cardholder’s PIN for a new card Reset a cardholder's PIN for an existing card The direct-POST PIN-set process transfers PIN data from the cardholder directly to Galileo without the data passing through your system, thereby satisfying information security requirements. The process involves the following high-level steps: You call the Galileo Program API to get a PIN-set access key. You present the cardholder with an HTML PIN-set form that you host, including fields for the new PIN value and hidden fields that include the access key. The HTML form is targeted at Galileo servers. The cardholder submits the form POST and Galileo processes the data. An HTTP 302 redirect sends the cardholder's browser to a pre-configured page that you host, for success or failure. You parse the response information in the HTTP query string to get the result. If successful, you make a call to the Galileo Program API to commit the PIN change. Options You will need to decide among these options before using this procedure. Token/key validity: Amount of time — Default is five minutes. Number of attempts — Default is five attempts. Whether to use one or two results pages for success and failure. Prior setup After you have been approved to use the direct POST method, you must coordinate with Galileo to get set up. You need to provide: Issuing bank approval AOC, to be reviewed by Galileo Information Security Team The URLs for your success and failure pages, which Galileo will use in the HTTP 302 redirects. If the success redirect URL is https://pin.foo.com/pin-success, Galileo must register https://pin.foo.com in the system to allow the redirect. If you are using a failure redirect URL and it shares the same base URL (e.g. https://pin.foo.com/pin-failure), no additional base URLs need to be registered. From Galileo you need: Submitter ID Workflow Review this flowchart for the workflow: 1. Cardholder accesses the PIN-change form Either on your web page or mobile app, the cardholder indicates the desire to set or change a PIN. 2. Send the Get Card PIN Change Key call Galileo recommends that you pass the CAD (card_id) for accountNo in the Get Card PIN Change Key call. You can retrieve the CAD with the Get Card endpoint. In the response, Galileo sends a 50-character key in the token field. This key is valid for a limited time and for a specified number of uses, which are configured in your provider parameters. Defaults are five minutes and five attempts. The key cannot be reused after a success. Consult the Get Card PIN Change Key status codes table for an explanation of what each status code means and which next steps to take, if any. 3. Generate the HTML interface Present an HTML form to the cardholder that is targeted (via the action attribute) at a Galileo endpoint. The form must contain these elements: ElementDescriptionpinThe cardholder's desired PINpin_reentryThe re-entered PIN, for validation purposespin_change_key50-character key (token) that was returned by the Get Card PIN Change Key endpointsubmitter_idAn identifier that Galileo has provided to you, with the format [provider_id]-9999submit_uniqueOptional. Unique identifier that you provide, similar to transactionId in the Program APIsubmit_dtOptional. Timestamp formatted as YYYY-MM-DD hh:ii:ss Sample HTTP form The URL in the example is an AWS instance that Galileo sets up for each client. Request an AWS URL from Galileo if you do not already have one. This sample form is for the CV environment. For Production change cv in the URL to pd. HTML<form enctype=\""application/x-www-form-urlencoded\"" action=\""https://agserv-[clientname].cv.gpsrv.com/agserv/pin"" method=\""post\""> <input type=\""hidden\"" name=\""submitter_id\"" value=\""222-2222\"" id=\""submitter_id\""> <input type=\""hidden\"" name=\""submit_unique\"" value=\""3333-3333-3333\"" id=\""submit_unique\""> <input type=\""hidden\"" name=\""submit_dt\"" value=\""2020-11-23 17:03:12\"" id=\""submit_dt\""> <input type=\""hidden\"" name=\""pin_change_key\"" id=\""pin_change_key\"" value=\""888tOkEn777777AaaaaaAtOkEn999999999999999999999999\""> <input type=\""text\"" name=\""pin\"" id=\""pin\"" value=\""\""> <input type=\""text\"" name=\""pin_reentry\"" id=\""pin_reentry\"" value=\""\""> </form> 4. Cardholder submits the form The cardholder enters and re-enters the PIN and submits the data via a form POST directly to Galileo, without traversing your system. If submitting the form times out, Galileo sends a failure message. If submitting the form is otherwise unsuccessful, such as the form being incorrectly formatted, Galileo sends a failure message. If the form submission is successful, Galileo performs two verification checks: The PINs have four digits each The PINs match If the verification checks are successful, Galileo stages the PIN change. 5. Galileo sends the redirect Galileo processes the PIN-set form POST and responds via an HTTP 302 redirect to your pre-defined URLs: either the success or failure page. According to your arrangements with Galileo, you will also receive the ADPE: agserv_PIN_change_fail or ADPS: agserv_PIN_change_success Account Events webhooks. 6. Send the Commit Card PIN Change call The HTTP 302 redirect contains two query string elements that indicate success or failure conditions: r — The response code element contains the success or failure state of the cardholder form POST, in URL encoding. See the HTTP 302 redirect codes table for a description of these response codes. e — The error element is populated only when there is a data-validation error. For example: if pin or pin_reentry are not populated, the e element contains a JSON string that communicates the data validation errors, as shown below. HTTP 302 redirect examples These are examples of the redirect messages that Galileo will send in response to the direct POST: success or failure. Notice that in the second example the e element provides text for each of three fields that might have failed. HTMLSuccess:yourdomain.com/r=0 HTMLFailure:yourdomain.com?r=-2&e={""pin"":{""isEmpty"":""Value%20is%20required%20and%20can%27t%20be%20empty""},""pin_reentry"":{""isEmpty"":""Value%20is%20required%20and%20can%27t%20be%20empty""},""pin_change_key"":{""isEmpty"":""%27pin_change_key%27%20is%20required%20and%20cannot%20be%20empty""}} 6. Send the Commit Card PIN Change call If you receive a Success message in the HTTP 302 redirect, send the Commit Card PIN Change call to commit the change. Use the same accountNo that you used for the Get Card PIN Change Key call. Consult the Commit Card PIN Change status codes table to see an explanation of what each status code means and which next steps to take, if any. When the PIN change is successful, Galileo sends the PNCH: system_pin_change event. At this point, the cardholder can use the PIN, and you can retrieve the PIN via the PIN Retrieval Service if you are subscribed to that service. Galileo setup These internal, provider-level parameters must be set at Galileo. ParameterDescriptionGGDPAEnable direct POST accessGGHDR(optional)A set of key/value pairs for additional response headers when using no-redirect modeGGKEH(optional)Number of times a PIN-set token can be used. Default: 5GGKEX(optional)Seconds before token expiry. Default: 300GGRDRFull redirect URL when using a single results pageGGRBUBase redirect URL when using both success and failure redirect pages Get Card PIN Change Key status codes Consult this table to see an explanation of what each status code means for the Get Card PIN Change Key endpoint and which next steps to take, if any. Status codeDescriptionNext steps0SuccessContinue the procedure2Your API call contained one or more values that were not valid for the parameter.Retry with valid parameters4System exceptionContact Galileo for troubleshooting12The value in accountNo is not a valid account number.Retry with valid account number47Multiple active cards were found for the account.Retry with the CAD (card_id) in accountNo.-1System failure. Possibly a network or database issue.Consult the response message to see which steps to take. HTTP 302 redirect codes These statuses are returned in the HTTP 302 redirect in the r response code element. CodeDescriptionNext steps0SuccessContinue the procedure.-1System errorContact Galileo for troubleshooting.-2Malformed or missing dataRetry with valid data.-5Invalid providerRetry with a valid provider ID.-6Configuration errorContact Galileo for troubleshooting.-7Invalid submitter IDRetry with a valid submitter ID.-11Cardholder submitted a form with a token that is no longer valid, because Get Card PIN Change Key was called again, invalidating the previous key.Verify that the form is using the correct key before calling Get Card PIN Change Key again.-100Token not valid or expiredRetry with a valid token. You may need to call Get Card PIN Change Key again.-101Entered and re-entered PIN values do not matchInform the cardholder that the PIN values must match.-102PIN change request not in correct statusVerify that the PIN change request has been staged but not committed. Commit Card PIN Change status codes Consult this table to see an explanation of what each status code means for the Commit Card PIN Change endpoint and which next steps to take, if any. Status codeDescriptionNext steps0SuccessNone2Your API call contained one or more values that were not valid for the parameter.Retry with valid parameters.4System exceptionContact Galileo for troubleshooting.12The value in accountNo is not a valid account number.Retry with valid account number.47Multiple active cards were found for the account.Retry with the CAD (card_id) in accountNo.537-01No staged PIN change found.Verify that the HTML POST was successful.537-02No cards in status: N were found for the account.Verify that the card is in active status, or inform the cardholder that no PIN can be set for this card.537-03PIN change has not been started.Restart the process, beginning with calling Get Card PIN Change Key.-1System failure. Possibly a network or database issue.Consult the response message to see which steps to take.Updated about 2 months ago Table of Contents Options Prior setup Workflow 1. Cardholder accesses the PIN-change form 2. Send the Get Card PIN Change Key call 3. Generate the HTML interface 4. Cardholder submits the form 5. Galileo sends the redirect 6. Send the Commit Card PIN Change call 6. Send the Commit Card PIN Change call Galileo setup Get Card PIN Change Key status codes HTTP 302 redirect codes Commit Card PIN Change status codes "
211,docs.galileo-ft.com/pro/docs/managing-billpay-transactions,"Managing Billpay Transactions 👍NoticeThis guide is in a preliminary state. Some of the details may be incorrect, and we will be updating them as needed. Contact Galileo to report any errors or omissions. This guide contains instructions for managing billpay transactions that have been initiated as well as how to manage billers. This guide also contains information about the External Trans API. Along with this guide you may want to read these other guides: About Bill Pay — General information about bill pay at Galileo Creating a Billpay Transaction — Instructions for creating billpay transactions, including adding billers and creating scheduled transactions Displaying billpay transactions Call Get Scheduled Bill Payments to retrieve transactions with process dates that are equal to or later than the current date. Call Get Bill Payment History to retrieve all billpay transactions between the start and end dates, both past and future. Call any transaction-retrieval endpoint that returns posted transactions to display billpay transactions in a full transaction list: Get Account Overview Get Transaction History Get All Transaction History Canceling billpay transactions To cancel a billpay transaction, follow one of these procedures: Cancel an electronic transaction Cancel a paper check transaction Cancel one scheduled billpay transaction Cancel a scheduled billpay series Cancel an electronic transaction Because of the small interval between electronic transaction creation and processing, you cannot cancel electronic transactions after the transaction has been created. Do not attempt to use the Cancel Transaction endpoint to cancel an electronic transaction, or you could set up a race condition with undesirable results. However, you can cancel an electronic transaction with the Program API that is scheduled for the future. Cancel a paper check transaction You can cancel a paper check transaction using the Program API or CST when it is in status: N (not processed), status: W (waiting to be printed) or status: P (printed). (Sometimes, it's too late to cancel a check after it's been printed.) You can also cancel paper transactions that are scheduled for the future. The account holder launches a ""cancel transaction"" control on your interface for a paper biller. Do one of the following: Call Get Bill Payment History and check the status on the transaction: N, W or P — The transaction can be canceled. Call Cancel Bill Payment. Other — The transaction cannot be canceled. Call Cancel Bill Payment. If the transaction can be canceled, the endpoint returns success. If the transaction cannot be canceled, the endpoint returns status_code: 435-02. If the amount has already been adjusted out of the account, Galileo returns the amount to the account, sends the BADJ: adj event message, and writes the adjustment to the Posted Transactions RDF. It takes approximately two days to return the funds to the account. Cancel one scheduled billpay transaction To cancel the next transaction in a recurring series without canceling the series, follow these steps: Call Get Scheduled Bill Payments. The endpoint returns a billpay_transaction_id under future_scheduled_payments for all scheduled transactions. Call Cancel Bill Payment and populate the billpayTransactionId with the ID that you retrieved in the previous step. Cancel a scheduled billpay series If an account holder has set up recurring billpay transactions and wants to cancel the whole series, follow these steps: Call Get Billers to retrieve the biller_id and type: type: E — Call Modify RPPS Biller. type: P — Call Modify Paper Biller. Do one of these things: Set the endDate to today's date. Pass Null for these parameters: frequencyType, nextDate, endDate. 📘NoteYou cannot cancel future transactions by removing the biller. Deleting a biller 📘NoteWhen you delete a biller, any scheduled transactions for that biller are not deleted. If you also want to deactivate the scheduled transactions, first follow the procedure in Cancel a scheduled billpay series, and then afterwards remove the biller using the steps below. To remove a biller, follow these steps: Call Get Billers to retrieve the biller_id of the biller to delete. Call Remove Biller and populate billerId with the ID you retrieved in the previous step. Fees You can configure these fees for your product, as desired: Fee codeDescriptionTransaction codeBPYBillpay fee (electronic)FE0301CHKBillpay fee (paper check)FE0302CHCBillpay fee (check cancelation)FE0303 The fee is assessed at the time that the billpay amount is adjusted out of the account. If there are insufficient funds for the billpay amount plus the fee, Galileo denies the transaction. However, you can choose to defer the fee if there are insufficient funds for it by setting the BPPPF parameter. With that parameter set, the transaction is approved if there are sufficient funds for the billpay amount but not the fee. The fee remains in a pending state until sufficient funds are deposited in the account, at which time the fee is assessed. In the Posted Transactions RDF, the fee is a separate transaction from the billpay adjustment, with the transaction code as shown in the table above. See Processing fees for the workflow. External Trans API If you are the system of record for your accounts, you can implement the Billpay Webhook of the External Trans API. Galileo sends you a webhook for each scheduled billpay transaction before it is adjusted out of the account, which you approve or deny for insufficient funds. Set the BPOTB parameter so that Galileo does not check for limit violations or for sufficient funds before sending you the webhook. When using the Billpay Webhook, you can also determine whether transactions that you approve can drive the account negative, by setting the AAIGB parameter. If you are the system of record for your program, perform your own balance check before calling the Create Bill Payment endpoint. External Trans API workflow This flowchart shows the verifications that a transaction must pass (""happy path"") before it is sent via a billpay webhook for your approval. To see a complete picture of the billpay checks and their error messages, refer to the Scheduled transaction workflow in Creating a Billpay Transaction. The transaction is created by the scheduler, and Galileo runs through the same series of checks as in the Scheduled transaction workflow. Galileo creates the transaction in status: N and sends the BPCQ: billpay_request_made event message. Galileo sends you a billpay webhook for the transaction. You check the account balance and send back a response code: 99 (error; retry) or no response — If retry is set up for your program, Galileo sends the BPAR: billpay_retry event message, waits for a configured interval, and then resends the webhook. 01 (insufficient funds) or 98 (error; no retry) — Transaction is changed to status: E and Galileo sends the BRRJ: billpay_rejected event message for electronic transactions only. 00 — The adjustment is posted to the account. Galileo sends the BPAY: billpay event message. The billpay process checks for a fee. If there is a fee, the Processing fees process is followed. If there is no fee, the process continues. Galileo changes the transaction to one of these statuses: status: O — Electronic transaction. See Processing an electronic transaction for next steps. status: W — Paper check transaction. See Processing a paper billpay transaction for next steps. Billpay transaction codes These are some of the transaction codes that are associated with bill pay. To see exactly which transaction codes your program uses, consult the curated list of transaction codes that you received from Galileo. Transaction typeact_typeotypeElectronic postedADRElectronic reversalADrPaper check posted or reversedADZElectronic feeFE0301Paper check feeFE0302Check cancellation feeFE0303 Events API Arrange with Galileo to have some or all of these events sent to you to alert you of billpay-related events in real time. CodeNameDescriptionBPCQbillpay_request_madeA billpay request was initiated. The billpay transaction has been created and is in status: N.BPAYbillpayA billpay transaction was adjusted out of the account. This event is sent instead of BADJ: adj.BPCMbillpay_check_mailedA billpay check order was created.BPCCbillpay_check_clearedA billpay check was cashed and the payment has cleared.BPARbillpay_retryThe billpay process must retry a transaction that was sent to the External Trans API. Either a timeout occurred, or you indicated that Galileo should try again later.BRRJbillpay_rejectedAn electronic transaction has been returned by Mastercard.BSPFsched_billpay_failA scheduled bill payment has failed because of insufficient funds or some other problem in the process.BPCRbillpay_request_returnedA recipient of a bill payment returned the checkBPEXbillpay_expiredA billpay check did not clear six months after the check's date, and the check is no longer valid.BLVFbillpay_limit_violationA billpay transaction violated the velocity limit in LIMPB Galileo setup Galileo will configure these parameters according to your use case. ParameterDescriptionAAIGBControls whether to allow a billpay transaction to drive the account negative when using the External Trans API.BPOTBControls whether to check the maximum limit and balance before creating a billpay transaction. Set this parameter only if you maintain the ledger for your accounts instead of Galileo and you are using the External Trans API.BPPPFControls whether a billpay transaction fails if the available balance is insufficient to cover fees. When this parameter is set, the fee is deferred until later when the current balance is sufficient for the billpay transaction but not the fee.LIMBPSpecifies the maximum amount of an individual billpay transaction. When this parameter is not set, the maximum is $25,000.RPPSCContains the RPPS payment ID and check digit.Updated 2 days ago Table of Contents Displaying billpay transactions Canceling billpay transactions Cancel an electronic transaction Cancel a paper check transaction Cancel one scheduled billpay transaction Cancel a scheduled billpay series Deleting a biller Fees External Trans API External Trans API workflow Billpay transaction codes Events API Galileo setup "
212,docs.galileo-ft.com/pro/docs/force-post-simulation,"Force-Post Simulation A merchant does not obtain authorization for a $30 transaction but sends the clearing message anyway. Galileo is obligated to post all settlements, even if they do not have a matching authorization. This is similar to the transaction shown in Settlement of an Expired Authorization in Card Transaction Examples. To simulate a force-post, do not create an authorization first and then expire it. In CV, you simulate a settlement, and then the simulator creates and backs out an authorization before posting the settlement. This type of transaction is a true force-post, which is transaction type (otype) M. Also see: Driving an Account Negative in the Settlement guide — Explains other transactions that are similar to force-postings Scenario 19: Force Post — A detailed example of a force-post Scenario 16: Settlement Without Authorization — A settlement arrives after the authorization has expired Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdLeave blankaccountNoPAN, PRN or CADamount30associationvisa or mc_authmerchantNameCentral Restaurantmcc5812 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.589,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 2121  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""10ce5d15-7faa-4560-a488-9d0af0b8e151""  },  ""system_timestamp"": ""2022-10-11 14:30:57"",  ""rtoken"": ""8bf6cf3e-6d37-45fc-b3f3-3ebf62f630c0"" } Transactions created Call Get All Transaction History to see the three ledger entries. When you see an authorization, backout, and settlement with the same timestamp, you know that the transaction was force-posted. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Central Restaurant, ,"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-10-11 15:00:34"",     ""amt"": -30,     ""source_id"": ""2121"",     ""type"": ""M"",     ""type_description"": """",     ""trans_code"": ""VSM"",     ""arn"": ""15279902284576545765455"",     ""merchant_id"": ""D87WE11WXPQWLNW"",     ""external_trans_id"": """",     ""calculated_balance"": 470,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:00:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL RESTAURANT, , "",     ""network_code"": ""V"",     ""auth_id"": ""2121"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""4776"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Restaurant, ,"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-10-11 15:00:34"",     ""amt"": 30,     ""source_id"": ""10702"",     ""type"": ""M"",     ""type_description"": """",     ""trans_code"": ""BVM"",     ""arn"": ""15279902284576545765455"",     ""merchant_id"": ""D87WE11WXPQWLNW"",     ""external_trans_id"": """",     ""calculated_balance"": 500,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:00:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL RESTAURANT, , "",     ""network_code"": ""V"",     ""auth_id"": ""10702"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""4776"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Restaurant, ,"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-11 15:00:33"",     ""amt"": -30,     ""source_id"": ""10702"",     ""type"": ""M"",     ""type_description"": """",     ""trans_code"": ""VIM"",     ""arn"": """",     ""merchant_id"": ""D87WE11WXPQWLNW"",     ""external_trans_id"": """",     ""calculated_balance"": 470,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:00:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL RESTAURANT, , "",     ""network_code"": ""V"",     ""auth_id"": ""10702"",     ""local_amt"": null,     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""4776"",     ""credit_ind"": ""Y""    } } Updated 3 months ago Table of Contents Settlement Transactions created "
213,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-payment,"auth_payment Code — AAPM Event trigger — You or Galileo approve a request to load funds onto a card. Process — This process contains the event trigger: Galileo receives an authorization request for a card load from a card network. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description act_type X See Activity Type for possible values. Example: ""VI"" amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" local_surcharge_amt X The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""AAPM"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" original_auth_id X The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" otype X See Transaction Types for possible values. Example: ""W"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""auth_payment"" Example JSON# auth_payment example: { ""act_type"": ""VI"", ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""AAPM"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""original_auth_id"": ""12303085"", ""otype"": ""W"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""auth_payment"" } Table of Contents Fields Example "
214,docs.galileo-ft.com/pro/docs/switching-products-with-different-bins,"Switching Products with Different BINs This guide explains how to switch card products when the old and new products have the same program ID but different BINs. If the old and new card products have the same BIN, see Using the Switch Product endpoint in the Switching Products guide for instructions. Result of following this procedure When this procedure is completed successfully, a new card account with the new product ID is created, and it shares a balance with the old card account. The new card has a new PAN, CAD, expiry, and CVV. The new card and account are active and the old card and account are canceled. Program parameters These program parameters are related to card-activation behavior. ParameterDescriptionCANCSUsed in conjunction with CANOC, it specifies the status that a card must be in to be canceled when a new card is activated. Default: N,X,Y,WCANOCWhen this parameter is set to Y and a new PAN is generated, cards that have the same program ID and cardholder as the newly activated card—and that have statuses specified in CANCS—are changed to status C (canceled) when the new card is activated. When this parameter is not set, other active cards are not canceled. This parameter must be set at the program level to cancel cards with different product IDs. Procedure This procedure shows how to switch from product ID 3333 to product ID 4444. For details on using the Add Account endpoint, see the Adding an Account guide. Call Add Account with these parameters: accountNo; <PRN or PAN of product 3333> prodId: 4444 sharedBalance: 1 Galileo returns the new PRN, PAN, expiry, and CVV, The emboss process creates a new emboss record in status: Y. When the new card is included in the batch file to send to the embosser, Galileo sends the SHIP: card_shipped event message. The embosser mails the new card to the cardholder. When the cardholder activates the card, you receive the BACT: card_activated event message. During the activation process, Galileo checks CANOC at the program level: If CANOC is Y, the old card is canceled. If CANOC is not set, the old card and account are still active. Call Modify Status with these parameters: accountNo: <PRN or PAN of product 3333> type: 2 📘NoteModify Status with type: 2 cancels the old account but does not change the status of the cards associated with the account; however, with the account in status: C the cards cannot be used. See Closing accounts in the About Accounts guide for other ways to cancel an account, such as type: 16 (change both account and cards to status: Z) and type: 23 (change both account and cards to status: D). Make sure your chosen method does not cancel related accounts that you want to keep open, such as savings accounts.Updated about 1 year ago Table of Contents Result of following this procedure Program parameters Procedure "
216,docs.galileo-ft.com/pro/docs/setup-for-installment-loans,"Setup for Installment Loans Galileo is developing a new installment loans product to offer your customers loans for purchases as part of the Buy Now, Pay Later service. When you set up an installment loans product, you work with Galileo to configure loan subproducts that have varying terms, interest rates, fees, payments, and other settings, according to your business requirements. This guide describes the requirements for standing up a lending program, as well as the configuration options for loan subproducts. Acquire a lending license You and/or your partner bank must be appropriately licensed for each state where you intend to loan funds. You should also be familiar with lending regulations and consumer protection, such as Regulation Z, state lending laws, and the Fair Credit Reporting Act. If you don’t have a lending license, your partner bank typically will. Handle debt facility You will need a debt facility to supply the capital for the loans. This may or may not be your bank partner. Manage customer records You are responsible for ensuring that any customer that you wish to create loans for has a DDA account with Galileo. If the customer does not have a DDA, they will need to create one. In addition, you must ensure that the customer records that exist on Galileo include first name, last name, and date of birth. When you create a loan, we will use these attributes on the loans, so they cannot be empty. Establish fees and repayment schedule You are responsible for handling all aspects of the loan, including approval, interest rates, term length, and fee collection. This is set by configuring the loan subproducts for your installment loan product. See the Assign installment loan subproducts for more details on subproducts. Establish money movement rules You are responsible for determining the money movement rules. This includes: Recording disbursements to move money from the lending bank to the DDA bank. Processing payments from an external account. Design logic for handling outstanding loans in case of merchant credits, returns, etc. Assign installment loan subproducts You can configure installment loan subproducts to customize your Buy Now, Pay Later offerings. Each subproduct is assigned a unique subproduct ID that you will send to Galileo when you create a loan. You work with Galileo directly to set up the subproducts for your BNPL offering. This table lists configuration options for loan subproducts, including a description and possible values for each option. ConfigurationValueDescriptionInterest ratePercentageSpecifies the interest rate for the loan, between 0% and 35%. There is a separate calculated Military APR (MAPR) that may be higher than the APR. If the MAPR exceeds 36%, the loan simulation will be rejected.Loan amountMinimum and maximum dollar amount for the loanSpecifies the range of valid dollar amounts for the loan.Has origination feeYes or NoControls whether the subproduct has an origination fee. An origination fee is charged at the creation of the loan. The origination fee is added to the total loan amount and is financed instead of charged separately.Origination fee typeFixed or PercentageSpecifies whether the origination fee is a fixed dollar amount or a percentage of the loan. This setting is only valid when there is an origination fee.Has late feeYes or NoControls whether a late fee is applied to the loan balance when a payment is missed. You can specify a grace period during which a late fee is not charged. When this is set to No, a late fee is never applied.Late feeDollar amountSpecifies the dollar amount for the late fee applied to the loan balance when a payment is missed. States have different rules about the maximum late fee that may be applied. Therefore, the late fee for the subproduct should not exceed the lowest maximum late fee for the group of states where you intend to offer loans.Grace periodNumber of daysControls the number of days in the grace period. When a payment is missed, a late fee is applied to the loan only after the grace period ends. If the grace period is 0 days, the late fee is applied to the loan immediately after a payment is missed.TermMinimum and maximum term lengthSpecifies the range of valid term lengths for the loan. Use in conjunction with the Term product subproduct to indicate whether this number is years, months, weeks, or days.Term productYears, Months, Weeks, or DaysSpecifies whether the term unit for the loan is years, months, weeks, or days. Use in conjunction with the Term subproduct to specify the minimum and maximum term length.Subproduct nameFull name of the subproductContains a description of the subproduct.Subproduct short nameDescription of the subproductContains the name of the subproduct.Accrual methodActual/365 or Actual/360Specifies the number of days in the year for calculating actual interest accrual. Default is Actual/365.First payment due dateNumber of daysSpecifies the number of days after loan creation that the payment is due. This is typically set to 30 days to align with the customer’s billing cycle.Number of paymentsMinimum and maximum payment countSpecifies the number of days after loan creation that the payment is due. Specifies the minimum and maximum number of payments that the customer will make during the term of the loan.Updated 3 months ago What’s NextReports for Installment LoansTable of Contents Acquire a lending license Handle debt facility Manage customer records Establish fees and repayment schedule Establish money movement rules Assign installment loan subproducts "
217,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-nsf,"denied_auth_nsf Code — BNSF Event trigger — You or Galileo deny a transaction because of insufficient funds. Processes — This process precedes the event trigger: Galileo receives one of these messages from a card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amt Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BNSF"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_Score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""denied_auth_nsf"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# denied_auth_nsf example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""fee_amt"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BNSF"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_Score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""denied_auth_nsf"" } Table of Contents Fields Example "
219,docs.galileo-ft.com/pro/reference/post/getcallstatus,Get Call Status The table below lists status codes that apply to this specific endpoint. Status CodeCode Description583-01The request method name does not exist583-02No records found using the given informationLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
220,docs.galileo-ft.com/pro/reference/api-reference-events-api-fee,"fee Code — BFEE Event trigger — A fee is assessed to the account. Processes — These processes contain the event trigger: Program API endpoints: Create Fee Create Account Transfer, when type includes a fee Customer Service Tool Internal fee-assessment processes Fields All fields are strings. Your field names may vary. Field Required Description act_type X For all fees the activity type is ""FE"". amount X Amount of the fee. Example: ""2.50"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X Description for the fee. Example: ""Out of network ATM"" ext_trans_id X External transaction ID. Example: ""1234-abcdefg"" fee_auth The network code and auth_id of the transaction that triggered the fee, separated by a pipe. Example: ""M|123546"" fee_event_id X Fee event identifier. Example: ""30294"" fee_id X Unique identifier for the fee. Example: ""124365"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BFEE"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" otype X See the curated list of otypes for your program from Galileo. Example: ""0013"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fee"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# fee example: { ""amount"": ""2.50"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""description"": ""Out of network ATM"", ""ext_trans_id"": ""1234-abcdefg"", ""fee_auth"": ""M|123546"", ""fee_event_id"": ""30294"", ""fee_id"": ""124365"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BFEE"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""otype"": ""0013"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fee"" } Table of Contents Fields Example "
221,docs.galileo-ft.com/pro/docs/secondary-rdf-reference,"Secondary RDF Reference 👍NoticeThese new RDFs are in an introductory state, and so this guide contains preliminary information that will be updated as the RDFs are further refined. This page contains details about each of the secondary RDFs, which contain all of the possible fields for each of the standard RDFs instead of a curated subset. Unlike the standard RDFs, the secondary RDFs are CSV (comma-separated-value) files. If you are already receiving the standard RDFs you can switch to the secondary RDFs by request. Keep in mind that you would have to refactor your RDF intake process to account for the comma separation, the additional number of fields, and in some cases the new field order. Customer Master RDF Account Card RDF Authorized Transactions RDF Posted Transactions RDF Lookup file 📘NoteNew fields will be appended to these files as the need arises. For new data elements (DEs), Galileo will add them periodically as the networks provide them and will communicate these additions prior to their implementation. You can also request additional fields, subject to approval, by submitting a client request. Customer Master RDF The Customer Master RDF is a list of all of your primary account holders. The first Customer Master RDF that you receive contains all of your account records. The RDFs after that contain only the new records and the changed records from the previous day. This table contains all possible fields for the Customer Master RDF. The primary key for this file is GALILEO ACCOUNT ID + UNIQUE PROGRAM ID. All DATETIME fields have the format MMDDYYYY hh24:mm:ss. ""Signed"" amounts have a + (credit) or - (debit) sign after the amount to indicate which way the funds moved relative to the account, for example: 30.25- for a debit or 23.67+ for a credit. RDF fieldData typeDescriptionUNIQUE PROGRAM IDNUMBER (18)The identifier that Galileo has assigned to your program.ISSUED DATEDATETIMEThe date-time when the customer account was activated: MMDDYYYY hh24:mm:ssIDVARCHAR2 (100)The customer's ID that was used for KYC/CIP, usually the SSN. You can see an SSN only if you are PCI compliant; otherwise, you get blank spaces. See the Customer ID Types enumeration for the possible values.ID TYPENUMBER (18)The type of identifier in the ID field, such as SSN or driver license. See the Customer ID Types enumeration or the Lookup file for the possible values.PRIMARY CARDHOLDER'S FIRST NAMEVARCHAR2 (32)The customer's first namePRIMARY CARDHOLDER'S LAST NAMEVARCHAR2 (32)The customer's last nameADDRESS LINE 1VARCHAR2 (48)Customer's address line 1ADDRESS LINE 2VARCHAR2 (48)Customer's address line 2CITYVARCHAR2 (48)The city of the customer's primary addressSTATEVARCHAR2 (16)The state or province of the customer's primary addressZIP CODEVARCHAR2 (10)The postal code of the customer's primary addressPRIMARY PHONE NUMBERVARCHAR2 (53)The phone number that the customer gave as the primary numberSECONDARY PHONE NUMBERVARCHAR2 (29)Encrypted phone number that the customer gave as the secondary (other) number. Decrypted for PCI-compliant clientsSTATUSCHAR (1)The status of the account.CURRENT BALANCENUMBER (10,2)Signed. The balance of the account as of 23:59:59 on the previous day. This is the ledger balance, which is the total of all posted transactions. Pending transactions such as authorization holds are not subtracted out.CREATED DATEDATETIMEThe date-time when a customer first applied for an account, regardless of whether the application is approved or denied: MMDDYYYY hh24:mm:ssNEGATIVE BALANCE DATEDATETIMEDate-time on which the available balance was driven negative: MMDDYYYY hh24:mm:ssNEGATIVE BALANCE FEE AMOUNTNUMBER (9,2)Fee assessed to the account when it was driven negativeRELOADABLE INDICATORCHAR (1)Whether the card is reloadable: 0 (not reloadable) or 1 (reloadable)GALILEO ACCOUNT IDNUMBER (18)The balance ID, which is different from the PRN. It is possible for multiple PRNs to share the same balance ID.TYPE OF ACCOUNTNUMBER (18)The ID of the account type; see the Lookup file to interpret the values.AVAILABLE BALANCENUMBER (9,2)Signed. The available balance (OTB) as of 23:59:59 on the previous day. This is the CURRENT BALANCE with pending transactions subtracted out.EXTERNAL ACCOUNT NUMBERCHAR (53)An identifier that you provide for your own tracking purposes; you pass this value in the externalAccountId parameter of the Create Account or Update Account endpoint.LAST TRANSACTION DATEDATETIMEThe date-time of the last posted transaction on this account as of 23:59:59 on the previous day, including payments, settlements, adjustments, and fees. This value does not include unsettled authorizations or pending transactions: MMDDYYYY hh24:mm:ssDATE OF BIRTHVARCHAR2 (29)Account holder date of birth, encrypted. Decrypted only for PCI compliant clients: MMDDYYYYBILL CYCLE DAYNUMBER (18)Day of the month for the billing cycle.LOCATION IDNUMBER (18)Location at which the account was created, if applicable. Value can be provided by you or by Galileo.AGENT USER IDVARCHAR2 (30)ID of the CST agent who submitted the account applicationID 2VARCHAR2 (100)Secondary identity number, if provided, such as driver license or SSN. See the Customer ID Types enumeration for the possible values.ID TYPE 2NUMBER (18)The type of identifier in ID 2, such as SSN or driver license. See the Customer ID Types enumeration or the Lookup file for the possible values.PRNCHAR (12)The payment reference number, a unique Galileo-generated identifier for an accountPRODUCT IDNUMBER (18)Identifier for the account's product in the Galileo system.ACCOUNT STATUS CHANGE DATEDATETIMEDate-time when the account status was last changed: MMDDYYYY hh24:mm:ssAFFILIATE HIT IDVARCHAR2 (50)The contents of the userData parameter in the account-enrollment endpoint requestAPPLICATION IDNUMBER (18)Identifier (appId) as returned by the account-enrollment endpointsWATCH FLAGCHAR (1)Account-level watch flag: F (fraudulent), S (suspicious) or N (normal, default)BUSINESS NAMEVARCHAR2 (150)Name of the business that owns the business accountCIP APPLICATION IDNUMBER (18)Galileo-generated identifier for the call to the CIP system.CIP IDVARCHAR2 (50 bytes)String returned in the CIP call to GalileoCIP STATUSCHAR (1)CIP status: F (failed), R (referral), S (system issue) or P (pass)GALILEO CLIENT IDNUMBER (18)The balance ID, which is different from the PRN. It is possible for two or more PRNs to share the same balance ID.COUNTRYVARCHAR2 (3)ISO 3166-1 code for the customer's country of residenceCREDIT LIMITNUMBER (9,2)Credit limitEMAIL ADDRESSVARCHAR2 (64)Email address of the account holderSSNVARCHAR2 (29)Encrypted Social Security number; decrypted for PCI-compliant clientsIP ADDRESSVARCHAR2 (16)IP address of the user who applied for the accountBUSINESS PRODUCT INDICATORCHAR (1)Whether the account is a business product account: Y (business account) or N (not a business account)LAST FREEZE DATEDATETIMEDate-time at which the card was last frozen: MMDDYYYY hh24:mm:ssXIDNUMBER (18)Internal account identifier; has a 1:1 relationship with the PRNTHIRD PHONE NUMBERVARCHAR2 (100)Third or other phone number, often a mobile numberCIP INFORMATIONVARCHAR2 (4000)Contents of the model_results object in the enrollment endpoint responsesOCCUPATIONVARCHAR2 (60)Contents of the occupation parameter in enrollment endpoint requestsOD BAL IDNUMBERBalance ID for the overdraft account, if anyOVERDRAFT LIMITVARCHAR2 (20)Overdraft limitOPTED IN DATEDATETIMEDate-time when the account holder last opted in to overdraft: MMDDYYYY hh24:mm:ssOPTED OUT DATEDATETIMEDate-time when the account holder last opted out of overdraft MMDDYYYY hh24:mm:ssTOTAL ID OVERRIDECHAR (1)Whether ID verification was skipped for manual approval: Y (skipped) or N (not skipped)PRIMARY ACCOUNT ACTIVE FLAGCHAR (1)Specifies whether the primary account is active: Y (active) or N (not active)PRIMARY ACCOUNT STATUSCHAR (1)Status of the primary accountSAVINGS GALILEO IDNUMBERBalance ID of the savings account that is associated with the primary accountTOTAL ID PASSCHAR (1)Whether the account holder passed ID verification: Y (passed) or N (did not pass) Account Card RDF The Account Card RDF is a list of all cards that you have issued. The first Account Card RDF that you receive contains all of your card records. The RDFs after that contain only the new records and the changed records from the previous day. 📘NoteAny changes to a card record, including resetting the PIN fail count by a backend process, results in the card record being included in the differential file. Some of these changes are not reflected in the data in the RDF. This table contains all of the possible fields for the Account Card RDF. The primary key for this file is UNIQUE PROGRAM ID + CARD ID. All DATETIME fields have the format MMDDYYYY hh24:mm:ss. RDF field nameData typeDescriptionUNIQUE PROGRAM IDCHAR (12)The identifier that Galileo assigned to the programGROUP IDNUMBERSource or affiliate ID. Usually the same as LOCATION ID in the Customer Master RDF.PRODUCT IDNUMBER (18)Identifier for the account's product in the Galileo system.GALILEO ACCOUNT IDNUMBERThe balance ID, which is different from the PRN. It is possible for multiple PRNs to share the same balance ID.PRNNUMBERThe payment reference number, a Galileo-generated ID for the card's accountEXPIRATION DATEDATETIMEThe card's expiration date-time. If you are not PCI compliant you will receive empty spaces for this value: MMDDYYYY hh24:mm:ssCARD STATUSCHAR (1)The card status.CARD IDENTIFIERNUMBERSometimes called the CAD, this identifier is given to each unique card that is issued to an account. There is a 1:1 relationship between a card ID and a PAN. If you are not PCI compliant, you can use this identifier instead of the PAN.CARD NUMBERVARCHAR2 (53)The card's PAN. If you are not PCI compliant you will get empty spaces for this value.TYPE OF CARDNUMBERThe branded network to which the card belongs, such as Mastercard or Visa, as well as the type of card, such as personalized or instant issue. See the Lookup file to interpret the values.ACCOUNT TYPECHAR (1)Account typeACTIVATION DATEDATETIMEDate-time at which the card was activated: MMDDYYYY hh24:mm:ssCARD STATUS CHANGE DATEDATETIMEDate-time on which the card status last changed MMDDYYYY hh24:mm:ssGALILEO CLIENT IDNUMBERIdentifier that Galileo assigned to the cardholderEMBOSS DATEDATETIMEDate-time at which the card was last embossed: MMDDYYYY hh24:mm:ssEMBOSS EXPIRY DATEDATETIMEExpiry date-time of the latest embossed card: MMDDYYYY hh24:mm:ssFROZENCHAR (1)Whether the card is currently frozen: Y (frozen) or N (unfrozen)LAST 4 PANVARCHAR2 (4)Last 4 digits of the PANLOCK END DATEDATETIMEDate-time when the card was last frozen: MMDDYYYY hh24:mm:ssLOCK START DATEDATETIMEDate-time when the card was last unfrozen: MMDDYYYY hh24:mm:ssSEMI ENCRYPTED PANVARCHAR2 (32)16-digit masked PAN: first 6 and last 4 digits visible and middle 6 digits encryptedPRIMARY ACCOUNT STATUSCHAR (1)Status of the primary accountSHIP TYPECHAR (1)Shipment type: 1 (standard) or 2 (express)XIDNUMBERInternal account identifier; has a 1:1 correspondence with the PRNZIPVARCHAR2 (10)Ship-to postal codeACTIVATION CHANNELVARCHAR2 (20)Method by which the card was activated: CST, Web or IVR (automated phone system)EADDR1VARCHAR2 (73)Ship-to address, line 1EADDR2VARCHAR2 (73)Ship-to address, line 2ECITYVARCHAR2 (93)Ship-to cityESHIPTO_NAMEVARCHAR2 (136)Ship-to nameESTATEVARCHAR2 (26)Ship-to stateIS ACCOUNT ACTIVECHAR (1)Whether the card is active: Y (active) or N (not active)UPDATE TSDATETIMEDate-time of the last card status update: MMDDYYYY hh24:mm:ss Authorized Transactions RDF The Authorized Transactions RDF contains transactions that passed through the authorization stream during the previous day. These transactions include authorization requests, AVS-only checks, reversal advices and completion advices. This RDF does not include these authorization events: Mastercard Banknet merchant credits (adjustments) Visa Money Transfer and ReadyLink card loads (payments) Only a subset of the transactions in this RDF will also be included in a Posted Transactions RDF. For example, authorization reversals, AVS-only checks, and denied transactions are not in the Posted Transactions RDF because they do not settle. Foreign authorizations When a transaction takes place in a country that is foreign relative to the account's country, the AUTHORIZATION AMOUNT is in the currency of the account. For example, if an account is located in the United States and the cardholder makes a purchase in Canada, the AUTHORIZATION AMOUNT is in U.S. dollars and the TRANSACTION CURRENCY CODE is 124 (Canadian dollar). The currency conversion is performed by the card network, and it reflects the conversion rate at the time of the authorization. Keep in mind that some online merchants conduct business in the currency of the customer instead of the location of the merchant, depending on where the customer is located. For example, a website that is based in the U.K. could have a U.S. version of its website, and so transactions on that version would be conducted in U.S. dollars. For examples of foreign transactions see International transaction in Card Transaction Examples and these scenarios: Scenario 13: International Authorization Scenario 14: International Reversal Authorized Transactions RDF fields This table contains the default fields for the Authorized Transactions RDF. The primary key for this file is UNIQUE PROGRAM ID + AUTHORIZATION CODE + NETWORK CODE. The Source column indicates where the value came from: Galileo-provided or a data element (DE) in the ISO 8583 message from the network. The actual DE number for a field may vary by network, and not all DEs are present for all networks. ""Signed"" amounts have a + (credit) or - (debit) sign after the amount to indicate which way the funds moved relative to the account, for example: 30.25- for a debit or 23.67+ for a credit. RDF fieldSourceData typeDescriptionUNIQUE PROGRAM IDGalileoNUMBERThe identifier that Galileo has assigned to your programGALILEO ACCOUNT IDGalileoNUMBERThe balance ID, which is different from the PRN. It is possible for two or more PRNs to share the same balance ID.CARD IDENTIFIERGalileoNUMBERSometimes called the CAD, this identifier is given to each unique card that is issued to an account. There is a 1:1 relationship between a card ID and a PAN. If you are not PCI compliant, you can use this identifier instead of the PAN.TRANSACTION DATE/TIMEGalileoDATETIMEThe time that Galileo responded to the authorization request. MMDDYYYY hh24:mm:ssTRANSACTION CURRENCY CODEDE049CHAR (3)The currency code at the point of saleADDRESS VERIFICATION RESPONSEGalileoCHAR (1)The single-character result of the AVS check that Galileo passed to the network. See AVS-only checks in the Authorization guide.AUTHORIZATION RESPONSEDE039CHAR (2)The response code that you or Galileo returned to the network. See the Authorization Response Codes enumeration for possible values.TRANSACTION AMOUNTDE004NUMBERSigned. The amount that you or Galileo authorized for the transaction, in the currency of the account. This amount may be different from the authorization request in the case of a partial authorization. If AUTHORIZATION RESPONSE is 10 or 87, the amount is a partial authorization.AUTHORIZATION CODEGalileoNUMBER (18)A Galileo-generated identifier (auth_id). This ID is unique only per subnetwork, so there could be an ID collision between an authorization from Mastercard Banknet and an authorization from Visa Interlink, for example. However, there is no collision among identifiers for the Visa networks (Visa credit, Interlink, Plus) or STAR networks (STAR, MoneyPass, Presto). See Mapping Transactions Within Your System for more information.NETWORK CODEGalileoCHAR (1)A single-letter identifier to specify the subnetwork over which the authorization request arrived. See Network Codes for possible values.MERCHANT NUMBERDE042CHAR (15)An identifier that each network assigns to a merchant locationMERCHANT DESCRIPTIONDE043CHAR (40)Descriptive text provided by the merchant to identify the merchant name, location and sometimes the transaction typeMERCHANT CATEGORY CODEDE018NUMBERThe ISO 18245 four-digit identifier that specifies the type of merchant, such as ATM, gas pump, bookseller, airline, hotel, and so onTRANSACTION CODEGalileoCHAR (2)A numeric value that corresponds to the type of transaction that is being attemptedMERCHANT COUNTRY CODEDE049VARCHAR2 (3)The ISO 3166-1 three-digit code for the country where the merchant is officially locatedPRNGalileoCHAR (12)The payment reference number, a unique Galileo-generated identifier for an accountPRODUCT IDGalileoNUMBERIdentifier for the account's product in the Galileo systemACQUIRING IDDE032VARCHAR2 (11)Identifier for the merchant's acquirerACTIVITY IDGalileoNUMBER (18)Identifier for the transaction in the activity table, which includes anything that affects the available balanceASSOCIATION TRANS IDDE062VARCHAR2 (15)Visa only. The transaction ID provided by the networkAUTHORIZATION STATUSGalileoCHAR (1)Status of the authorizationAUTH TRANSACTION CODEGalileoVARCHAR2 (10)The transaction type (otype)BAIDE104VARCHAR2 (3)Business Application Identifier. A value provided by Visa to identify the type of Visa Money Transfer that is being performedBILLING AMOUNTDE006NUMBER (16,4)Signed. Transaction amount in the billing currency, which is the same as the account's currencyBILLING CURRENCY CODEDE051CHAR (3)Currency code for BILLING AMOUNTCASHBACK AMOUNTDE005NUMBER (9,2)Amount of the transaction to give to the cardholder as cashCONTACTLESS TRANSACTIONSDE022CHAR (1)Whether the card was authenticated using contactless technology: Y (contactless) or N (not contactless)CARD PRESENT INDICATORDE061CHAR (1)Whether this was a card-present transaction: Y (card present) or N (card not present)CREDIT INDICATORGalileoCHAR (1)Whether the transaction arrived at Galileo over credit rails: Y (credit rails) or N (debit rails)DE28DE028DE046 (Allpoint)VARCHAR2 (9)Local surcharge amount, a fee applied to the ATM withdrawal amount by the ATM's operatorRETRIEVAL_REFERENCE_NUMBERDE037VARCHAR2 (12)Retrieval reference number. Julian date plus number: YDDDxxxxxxxxEXTERNAL TRANSACTION IDDE038CHAR (6)The authorization identification response, which is a numeric code that Galileo returns to a merchant to verify that the transaction was authorized. This number is often printed on customer receipts.OTC_FLAGDE003CHAR (1)Whether the transaction included an over-the-counter cash advance. Y (cash advance) or N (no cash advance)PIN FLAGGalileoCHAR (1)Whether a PIN was used to authenticate the card: Y (PIN) or N (no PIN)LOCAL AMOUNTDE004NUMBER (16,4)Signed. Transaction amount in the currency at the point of saleLOCAL CURRENCY CODEDE049CHAR (3)Currency code for LOCAL AMOUNTLOCAL SURCHARGE AMOUNTDE028NUMBER (16,4)Local surcharge amount, a fee applied to the ATM withdrawal amount by the ATM's operatorMERCHANT POSTAL CODEVARCHAR2 (5)Postal code for the merchant's locationMOBILE TRANSACTIONSGalileoCHAR (1)Whether a token requestor ID was present: Y (mobile wallet) or N (not mobile wallet)MESSAGE TYPE FLAGGalileoCHAR (2)The otype of the authorizationMessage Type IdentifiersCHAR (3)The MTI for the authorization request, minus the first digitPIN ENTRY CAPABILITYDE022CHAR (1)Third character of DE022. Whether the card reader had PIN-entry capability. See DE022 Codes.POS ENTRY MODEDE022NUMBER (2)First two characters of DE022. How the PAN was entered, such as magnetic stripe, EMV chip, or contactless. See DE022 Codes.POS TYPEDE003CHAR (3)Type of card authentication at the point of sale: SIG (signature) or PINREVERSAL IDGalileoNUMBERContains the authorization ID of the previous authorization in a series, such as with incremental authorizations, reversals, and completions. See Linking transactions in the About Transactions guide for more information.RISK SCOREDE048VARCHAR2 (10)Risk score that was calculated by the networkSETTLE AMOUNTDE005NUMBER (16,4)Signed. Transaction amount in the settlement currencySETTLE CURRENCY CODEDE050CHAR (3)Currency code for SETTLEMENT AMOUNTSLI INDICATORDE048SE42CHAR (1)Security level indicator, included with Mastercard 3DS authentication.SOURCEGalileoNUMBERUnique number assigned to a network: 1 (Maestro), 2 (Mastercard credit), 3 (STAR), 4 (Visa), 5 (Discover), 6 (Allpoint) or 7 (Pulse)TERMINAL IDDE041CHAR (8)Identifier of the card readerTERMINAL NETWORKGalileoVARCHAR2 (50)Visa only. Network that the card reader usedTOKEN_REQUESTOR_IDVARCHAR2 (11)Identifier for the token requestor. See the Lookup file for valid values.TOKEN TYPEVARCHAR2 (30)Type of token requested: Apple Pay, Samsung Pay or Google PayXIDGalileoNUMBERInternal account identifier; has a 1:1 relationship with the PRN.AAV INDICATORDE048SE43CHAR (2)Universal cardholder authentication field (UCAF) or account holder authentication value (AAV)Conversion RateDE010VARCHAR2 (8)The conversion rate from TRANSACTION AMOUNT to BILLING AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%Conversion RateDE009VARCHAR2 (8)The conversion rate from TRANSACTION AMOUNT to SETTLE AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%STIP ResponseDE039CHAR (2)The response code that the network returned to the merchant during stand-in processing (STIP)SLIVARCHAR2 (19)Security level indicatorSTIP STATUSGalileoVARCHAR2 (20)Whether the STIP transaction was an approval or denial: STIP (transaction approved) or STIP Decline (transaction denied)Authorizing Agent ID CodeDE121CHAR (11)The actual processing facility that approved or declined an authorization request messageAUTHORIZATION IDENTIFICATION RESPONSEDE038Authorization identification responseAdvice Reason CodeDE060VARCHAR2 (61)Indicates the specific reason for an advice.Banknet Reference NumberDE063VARCHAR2 (9)Value received for Maestro updatesTRANSACTION LIFECYCLE IDDE063VARCHAR2 (16)Mastercard only. ID that allows tracking throughout a transaction's lifecycleIAC_TAXNUMBERMastercard only. Impuesto al valor agregado. Value-added tax. Colombia only.IVA_TAXNUMBERMastercard only. Impuesto al consumo. Consumption tax. Colombia only.POS CARDHOLDER PRESENCECHAR(1)Indicates whether cardholder is present at point of sale: 0 (present) or 1 (not present) Posted Transactions RDF The Posted Transactions RDF contains every transaction that has posted to a customer account during a 24-hour period: settlements, payments, adjustments and fees. To match a settlement with its corresponding authorization, use the AUTHORIZATION CODE or SOURCE ID (which are identical for card transactions). These types of transactions do not have corresponding entries in the Authorized Transactions RDF: Adjustments Most payments, except for Mastercard and Maestro loads (PMML, PMMX) Visa, Green Dot, and MoneyGram card loads Account transfers Mastercard Banknet merchant credits Most fees. The authorization request amount from an ATM includes all fees. ATM fees that you assess are broken out separately in the Posted Transactions RDF. The ORIGINAL AUTH CODE for the fee contains the AUTHORIZATION CODE of the original ATM authorization. ACH transactions Direct deposit Bill pay Chargebacks, second presentments, provisional credit, and arbitration Charge offs Force-posted settlements Roundups Post time for completions The timestamp for a posted transaction usually corresponds to the time Galileo posts the transaction to the cardholder account. However, in the case of completions (transaction type C), the completion time in the Posted Transactions RDF is the time of the completion, whereas the amount is settled later, after Galileo receives the batch settlement file. For example, a cardholder gets a preauthorization at a gas pump for 75.00 at 09:00:01 and Galileo places a 75.00 hold on the account. The completion for 35.00 arrives through the authorization stream at 09:04:30. Galileo backs out the 75.00 and places a 35.00 hold on the account. The timestamp for the completion in the Authorized Transactions RDF and the Posted Transactions RDF is 09:04:30, but the actual settlement will be a day or so later. This later settlement is visible in the CST and Program API responses but not in the Posted Transactions RDF. For an example of a completion at a gas pump see Five-step sequence in Card Transaction Examples and Scenario 2: Preauthorization with Completion. Foreign settlements When a foreign transaction is settled, TRANSACTION AMOUNT is in the currency of the account rather than the currency of the merchant. The currency conversion is performed by the card network, and it reflects the conversion rate at the time the transaction cleared, which may be a different rate than when the transaction was authorized. See Foreign authorizations for more information. Posted Transactions RDF fields This table contains the default fields for the Posted Transactions RDF. The primary key for this file is UNIQUE PROGRAM ID + AUTHORIZATION CODE + TRANSACTION CODE/TYPE. The Source column indicates where the value came from: Galileo, a Nacha file or a data element (DE) in the ISO 8583 message from the network. The actual DE number for a field may vary by network, and not all DEs are present for all networks. ""Signed"" amounts have a + (credit) or - (debit) sign to indicate which way the funds moved relative to the account, for example: 30.25- for a debit or 23.67+ for a credit. RDF fieldSourceData typeDescriptionUNIQUE PROGRAM IDGalileoNUMBER (18)The identifier that Galileo has assigned your programGALILEO ACCOUNT IDGalileoNUMBER (18)The balance ID, which is different from the account ID (PRN). It is possible for two or more accounts to share the same balance ID.CARD IDENTIFIERGalileoNUMBER (18)Sometimes called the CAD, this identifier is given to each unique card that is issued to an account. If you are not PCI compliant, you can use this identifier instead of the PAN.TRANSACTION DATE/TIMEGalileoDATETIMEThe time that Galileo responded to the authorization request, or when a non-card transaction posted to the account: MMDDYYYY hh24:mm:ssTRANSACTION CODE/TYPEGalileoCHAR (6)The concatenation of the activity type (act_type) and the transaction type (otype). For an explanation of transaction codes see Classifying transactions in the About Transactions guide.TRANSACTION AMOUNTGalileoNUMBER (9,2)Signed. The amount that was posted to the account, in the currency of the account. In the case of a settlement, the amount may be different from its corresponding authorization amount.TRANSACTION CURRENCY CODEDE049CHAR (3)The currency code at the point of sale, for card transactionsAUTHORIZATION CODEGalileoNUMBER (18)A Galileo-generated identifier for an authorization, called auth_id in other contexts. For non-network transactions, this field contains the ID for the payment, adjustment, or fee. This ID is unique only per subnetwork or transaction type (payment, adjustment, fee), so there could be an ID collision between an authorization from Mastercard Banknet and a payment, for example. See Mapping Transactions Within Your System for more information.POST DATEGalileoDATEThe date when Galileo posted the transaction to the customer account: MMDDYYYYNETWORK CODEGalileoVARCHAR2 (1)A single letter to specify the subnetwork over which the authorization request arrived. This field is populated only for card transactions. See Network Codes for possible values.MERCHANT NUMBERDE042CHAR (25)An identifier that each network assigns to a merchant location. For non-card transactions, this may be a location ID provided by you or Galileo.MERCHANT DESCRIPTIONDE043CHAR (40)Descriptive text provided by the merchant to identify the merchant name and location and sometimes the transaction typeMERCHANT CATEGORY CODEDE018NUMBER (18)The ISO 18245 four-digit identifier that specifies the type of merchant, such as ATM, gas pump, bookseller, airline, hotel, and so onMERCHANT COUNTRY CODEDE049VARCHAR2 (3)The ISO 3166-1 three-digit code for the country where the merchant is officially locatedINTERCHANGE FEE AMOUNTNUMBER (9,2)Signed. The amount of interchange or fee associated with this transaction. ATM fees and interchange reversals are negative; interchange earned is positive. This field is populated only for card transactions.This value is rounded to 2 decimal places; for the full amount without rounding, see IC FEE AMT.EXTERNAL TRANSACTION IDDE038VARCHAR2 (60)For network transactions, the authorization identification response in DE038, which is a numeric code that Galileo returns to a merchant to verify that the transaction was authorized. This number is often printed on customer receipts. For other transactions initiated by the Program API, this is the transactionId of the API request. This field may be populated in other ways according to your setup and the transaction type.PRNGalileoCHAR (12)The payment reference number, a unique Galileo-generated identifier for an accountPRODUCT IDGalileoNUMBER (18)Identifier for the account's product in the Galileo system.SETTLE DTL IDGalileoNUMBER (18)The identifier for the transaction in the settlement table. This field is populated only for card transactions.Actual Post DateGalileoDATETIMEDate-time when the ACH credit was posted to the account: MMDDYYYY hh24:mm:ssOriginal Settlement DateNacha fileDATETIMEDate-time when the ACH credit was originally to be posted: MMDDYYYY hh24:mm:ssACH RETURN CODENacha fileCHAR (3)Code that indicates why an ACH request was returnedACQUIRING IDDE032VARCHAR2 (11)Identifier for the merchant's acquirerACTIVITY IDGalileoNUMBERIdentifier for the transaction in the activity table, which includes anything that affects the available balance; ID is unique per coreCST AGENT NAMEGalileoVARCHAR2 (125)Name of the CST agent that initiated the transactionARNVARCHAR2 (23)Mastercard only. Acquirer reference numberASSOCIATIONGalileoCHAR (3)Three-letter abbreviation for the card network: DEB (Maestro), MAS (Mastercard credit), STA (STAR), VIS (Visa), DIS (Discover), ALL (Allpoint) or PLS (Pulse)ASSOCIATION TRANS IDDE062VARCHAR2 (15)Visa only. Transaction identifier that was assigned by the networkAUTH AMOUNTNUMBER (9,2)Signed. Amount that was authorized.AUTHORIZATION RESPONSEDE039CHAR (2)Response code that was returned to the merchantAUTHORIZATION STATUSGalileoCHAR (1)Status of the authorizationAUTH TRANSACTION CODEGalileoVARCHAR2 (10)Transaction code for the original authorizationBAIDE104VARCHAR2 (3)Visa only. Business Application Identifier, which identifies the type of Visa card loadBATCH HEADERNacha fileVARCHAR2 (94)Record header for incoming ACH creditsBILLING AMOUNTDE006NUMBER (16,4)Signed. Transaction amount in the billing currency, which is the cardholder account currencyBILLING CURRENCY CODEDE051CHAR (3)Currency code for BILLING AMOUNTCASE SENSITIVE FLAGGalileoVARCHAR2 (1)Which case the otype in TRANSACTION CODE/TYPE is: Y(uppercase) , N (lowercase) or blank (not specified)CASHBACK AMOUNTDE054NUMBER (9,2)Amount of the transaction that was given to the cardholder as cashCCA FEEDE111NUMBER (9,2)Currency conversion assessment (CCA) feeCCA FEE AMOUNT SETTLEDE111NUMBER (9,2)Amount of the settlement on which the CCA fee was assessedCCA FEE CURRENCY CODEDE111VARCHAR2 (3)Currency code for CCA FEECCA FEE SIGNGalileoVARCHAR2 (1)CCA fee sign: C (credit) or D (debit)CHECK NUMBERGalileoNUMBER (19)Number of the check that was cashedcompany_descNacha fileVARCHAR2 (15)Company description for incoming ACH transactionscompany_nameNacha fileVARCHAR2 (20)Company name for incoming ACH transactionsCONTACTLESS TRANSACTIONSDE022CHAR (1)Whether the card was authenticated using contactless technology: Y (contactless) or N (not contactless)Conversion Rate - BillingDE010VARCHAR2 (9)The currency conversion rate when converting TRANSACTION AMOUNT to BILLING AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%Conversion Rate - ReconciliationDE009VARCHAR2 (8)The currency conversion rate when converting TRANSACTION AMOUNT to SETTLE AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%CARD PRESENT INDICATORDE061CHAR (1)Whether it was a card-present transaction: Y (card present) or N (card not present)CREDIT INDICATORGalileoCHAR (1)Whether the transaction arrived at Galileo over credit rails: Y (credit rails) or N (debit rails)Settlement DateDE015CHAR (4)Date on which the card transaction settled: MMDDYYYYDE28DE028VARCHAR2 (9)Local surcharge amount, a fee applied to the ATM withdrawal amount by the ATM's operatorRETRIEVAL_REFERENCE_NUMBERDE037VARCHAR2 (12)Retrieval reference number. Julian date plus number YDDDxxxxxxxxRESPONSE SOURCE/REASON CODESDE044VARCHAR2 (25)Visa only. Identifies the source of the DE039 authorization response decisionAVS CHECKDE063VARCHAR2 (50)AVS check informationICAVARCHAR2 (6)Mastercard only. Interbank Card Association number, assigned by Mastercard to a financial institutionDrawdown Settlement DateDATETIMEDate-time when the amount was taken from the issuing bank account: MMDDYYYY hh24:mm:ssEFFECTIVE_DTNacha fileDATETIMEFor an ACH transaction, the effective date-time when the ACH payment should post. Usually set by the bank to the actual date when the payment is posted, in case Galileo posts the payment early: MMDDYYYY hh24:mm:ssEXPIRED AUTH CODEGalileoNUMBER (10)AUTHORIZATION CODE of the expired authorization that corresponds to this force-posted transaction. This field is populated only for card transactions.FEE PROGRAM INDICATORDE063SE19VARCHAR2 (3)Visa only. Interchange reimbursement fee program indicator, applied to select ATM transactionsFULL MERCHANT DESCRIPTIONDE043VARCHAR2Merchant name and full address and store number if provided by the network at the time of settlementIC FEE AMOUNTFLOAT (126)Signed. Interchange fee amountINTERCHANGE RATE DESIGNATORDE063SE2VARCHAR2 (2 bytes)Identifies the transaction as domestic or international: 0 (U.S. region) 1 (Canada, Asia Pacific, Europe, Latin America, Middle East/Africa regions) or 2 (Intra-country)IS AFT TRANSACTIONDE003CHAR (1)Whether this is an account funding transaction: Y (AFT) or N (not AFT)FOREIGN TRANSACTION INDICATORGalileoCHAR (1)Whether the transaction is foreign relative to the account's country: Y (foreign) or N or null (domestic). This field is populated only for card transactions.OTC_FLAGDE003CHAR (1)Whether the transaction included an over-the-counter cash advance. Y (cash advance) or N (no cash advance)PIN FLAGGalileoCHAR (1)Whether a PIN was used to authenticate the card: Y (PIN) or N (no PIN)LOAD_DTNacha fileDATETIMEACH load date (the date-time the incoming ACH was loaded) MMDDYYYY hh24:mm:ssLOCAL AMOUNTDE004NUMBER (16,4)Signed. Transaction amount in the currency at the point of saleLOCAL CURRENCY CODEDE049CHAR (3)Currency code for LOCAL AMOUNTLOCAL SURCHARGE AMOUNTDE028NUMBER (16,4)Signed. Local surcharge amount, a fee applied to the ATM withdrawal amount by the ATM's operatorMC_SEQ_CNTSettlement fileNUMBER (2)Multi-clearing sequence count. Total number of clearings in this sequenceMC_SEQ_NOSettlement fileNUMBER (2)Multi-clearing sequence number. Position of this clearing in the sequenceMOBILE TRANSACTIONSGalileoCHAR (1)Whether a token requestor ID was present: Y (mobile wallet) or N (not mobile wallet)MESSAGE TYPE FLAGGalileoCHAR (2)The otype of the authorizationNAMENacha fileVARCHAR2Payee name for direct depositFILE IDSettlement fileVARCHAR2 (25)Visa only. Identifier for the settlement fileON_USVARCHAR2Number of the remote-deposit checkROLLING BALANCEGalileoNUMBER (9,2)Signed. Available balance after this transaction took place. If you are the system of record instead of Galileo, this value may be inaccurate.ORIGINAL AUTH CODEGalileoNUMBERSource ID for the transaction that this fee was assessed toSECURE CODESettlement fileVARCHAR2Mastercard only. Secure code from the settlement filePOS CONDITION CODEDE025VARCHAR2 (2)The conditions under which the transaction took place at the point of sale. See DE025 Codes.POS ENTRY MODEDE022NUMBER (2)First two characters of DE022. How the PAN was entered, such as magnetic stripe, EMV chip, or contactless. See DE022 Codes.POS TYPEGalileoCHAR (3)Type of card authentication at the point of sale: SIG (signature) or PINPOSTED_EARLYNacha fileCHAR (1)Whether the ACH transaction was posted early: Y (early) or N (not early)ENDORSEMENT DATEDATETIMEPresentment date-time for a paper check: MMDDYYYY hh24:mm:ssPRIOR IDGalileoNUMBER (12)The ID of a transaction that is linked to this transaction, such as the transaction that triggered this transactionRECURRING TRANSACTION FLAGDE061CHAR (1)Whether this is a recurring transaction: Y (recurring) or N (not recurring)RECEIVE_DTNacha fileDATETIMEDate-time that the Nacha file arrived at Galileo. MMDDYYYY hh24:mm:ssCHECK RETURN CODECHAR (3)Code to indicate why a paper check was returnedREVERSAL IDGalileoNUMBERContains the authorization ID of the previous authorization in a series, such as with incremental authorizations, reversals, and completions. This field is populated only for card transactions. See Linking transactions in the About Transactions guide for more information.SETTLE AMOUNTDE005NUMBER (16,4)Signed. Transaction amount in the settlement currencySETTLE CURRENCY CODEDE050CHAR (3)Currency code for SETTLEMENT AMOUNTSETTLE SERVICE IDSettlement fileVARCHAR2 (10)Identifier for the transaction within the settlement serviceSETTLE DATESettlement fileDATETIMEDate and time when the transaction was settled: MMDDYYYY hh24:mm:ssSETTLEMENT SERVICE CODESettlement fileCHAR (1)Uniquely identifies the settlement serviceSETTLEMENT SERVICE IDSettlement fileCHAR (10)Settlement service IDSLI INDICATORDE048SE42CHAR (1)Security level indicator, included with Mastercard 3DS authentication.SOURCEGalileoNUMBER (1)Number assigned to a network: 1 (Maestro), 2 (Mastercard credit), 3 (STAR), 4 (Visa), 5 (Discover), 6 (Allpoint) or 7 (Pulse)SOURCE IDGalileoNUMBER (18)For card transactions, the source ID is the same as the authorization ID. For other types of transactions, the source ID maps back to the original transaction, such as payment ID, adjustment ID or ACH transaction ID. The ID field in the CST corresponds to the source ID.Keep in mind that the source ID is unique only to the transaction type or the subnetwork, so there could be a collision between a source ID for a payment and a source ID for an authorization, for example. You will need to devise a way to mark source IDs with their respective activity types. See Mapping Transactions Within Your System for more information.SOURCE INSTITUTION NAMENacha fileVARCHAR2 (35 bytes)The source institution name for the incoming ACH creditSOURCE_TRACENacha fileVARCHAR2 (20 bytes)ACH trace number assigned by the external originating institution to incoming ACH transactionsSOURCE TYPECHAR (1)Type of source: S (settlements) or A (activity)TERMINAL IDDE041CHAR (8)Identifier of the card readerTERMINAL NETWORKGalileoVARCHAR2 (50)Network that the card reader usedTOKEN_REQUESTOR_IDVARCHAR2 (11)Identifier for the token requestor. See the Lookup file for valid values.TRACE NUMBERDE011Nacha fileVARCHAR2 (20)For a card transaction, an identifier from the merchant that is included with all messages related to that transaction. For an ACH transaction the trace number assigned by Galileo to outgoing ACH transactions.TRANSACTION DESCRIPTIONVARCHAR2 (100)Description for certain transactionsXIDGalileoNUMBERInternal account identifier; has a 1:1 relationship with the PRNLOADS AUTH IDGalileoNUMBEROriginal authorization ID for card loadsPDS1002Settlement fileVARCHAR2 (13)Custom fieldPDS1018Settlement fileVARCHAR2 (13)Custom fieldRESPONSE SOURCE/REASON CODESVARCHAR2 (1)Response source/reason codes, if provided by the networkach_trace_numberVARCHAR2 (20)ACH trace numberIVA_TAXNUMBERMastercard only. Impuesto al valor agregado. Value-added tax. Colombia only.IAC_TAXNUMBERMastercard only. Impuesto al consumo. Consumption tax. Colombia only.ipm_auth_codeSettlement fileCHAR (6)Authorization ID response from the issuer that authorized the transactionMessage Reason CodeSettlement fileCHAR (4)Mastercard only. Indicates why a transaction was initiatedMERCHANT POSTAL CODEVARCHAR2 (5)Postal code for the merchant's location.Conversion Rate DE9DE009VARCHAR2 (8)The currency conversion rate when converting TRANSACTION AMOUNT to SETTLE AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%Conversion Rate DE10DE010VARCHAR2 (8)The currency conversion rate when converting TRANSACTION AMOUNT to BILLING AMOUNT. The string has the pattern <shift digit><exchange rate digits>. The first digit specifies how many places from the right the decimal is moved. For example, 69985022 translates to an exchange rate of 9.985022%TRANSACTION LIFECYCLE IDSettlement fileVARCHAR2 (16)Mastercard only. Transaction lifecycle identifier, which allows tracking throughout a transaction's lifecycleTRANSACTION LIFECYCLE ID/ ASSOCIATION TRANSACTION ID FOR ALL NETWORKSVARCHAR2 (15)Transaction lifecycle ID/ association transaction ID for all networksPDS0185Settlement fileVARCHAR2 (33)Accountholder authentication value (AAV) (Mastercard) or cardholder authentication verification value (CAAV) (Visa), returned for 3DS transactions.PIN_ENTRY_CAPABILITYDE022CHAR (1)Indicates methods available at the terminal for PIN entry. See PIN entry capability.Advice Reason CodeDE060VARCHAR2 (61)Indicates the specific reason for an adviceAuthorizing Agent ID CodeDE121CHAR (11)The actual processing facility that approved or declined an authorization request messageBanknet Reference NumberDE063VARCHAR2 (9)Value received for Maestro updatesDomestic Card Acceptor Tax IDPDS 0180VARCHAR2 (20)U.S. tax ID of the card acceptor Lookup file Use the Lookup file to interpret the codes in some of the RDF fields. The Lookup file for a particular day contains only those values that are included with the other RDFs on that day, so this file will include some values on one day that it does not include on other days. The DESCRIPTION field contains a short description rather than a long description, because the specific meaning for some fields is different for each Galileo client according to their setup. The primary key for this table is FILE TYPE + FIELD NAME + CODE. There is no foreign key to link this file to the other RDFs. All fields are strings. FieldLengthDescriptionRECORD TYPE1The type of record. D — Detail; H — Header; T — TrailerFILE TYPE1The RDF that contains the field: A (Authorized Transactions), C (Customer Master), D (Account Card), or P (Posted Transactions)FIELD NAME30Name of the field in the RDFCODE10Possible values for the fieldDESCRIPTION50Description of the CODE valueUpdated 14 days ago Table of Contents Customer Master RDF Account Card RDF Authorized Transactions RDF Foreign authorizations Authorized Transactions RDF fields Posted Transactions RDF Post time for completions Foreign settlements Posted Transactions RDF fields Lookup file "
222,docs.galileo-ft.com/pro/reference/post/reverseadjustment,Reverse Adjustment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description447-01Adjustment amount to be reversed does not match original transaction amount.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
223,docs.galileo-ft.com/pro/docs/setup-for-mobile-wallets,"Setup for Mobile Wallets This section describes developer implementation for mobile wallets. For general information, see Mobile wallet support in the Choose a Card Strategy guide. Initial setup Each card network has its own service for mobile wallets: Mastercard Digital Enablement Services (MDES) Visa Digital Enablement Program (VDEP) This is the contact information for each wallet provider to obtain their documentation and SDK: Apple Pay — Send an email to [email protected] Google Pay — Go to the Google Pay developer portal Samsung Pay — Go to the Samsung Pay developer portal Galileo will provide you with the full list of items to provide to Galileo and actions to perform before Galileo sends all of the information to the card network for processing. Below are some of the important setup items. Manual provisioning As a first step, you must set up manual provisioning for mobile wallets in general. If you desire also to provide push-provisioning, you will perform additional steps, as described in Push provisioning. Ensure that there are contractual arrangements between the issuing bank, the wallet providers and card networks that are specific to mobile wallets. Provide these things to Galileo: Customer service number for yellow-path (partial success) verification, if Galileo is not handling yellow-path calls. BIN range to tokenize Terms and conditions documents as required by the networks and wallet providers, in TXT format. Network-specific metadata, as shown below Which mobile wallet events to set up Mastercard metadata For a Mastercard program you must provide these items to Galileo: BPMS (Business Process Management System) Guide — An Excel document that contains questions to answer for setup The card template — See Tokenized card design in Design a Card for specifications Your logo (1372 x 283 pixels) in PNG format Mobile notification elements: Smaller icon (100 x 100 pixels) in PNG format. Should be the primary brand associated with the card A short card description (max 32 characters) Visa metadata For a Visa program you must provide these items to Galileo: The card template — See Tokenized card design in Design a Card for specifications Mobile notification elements: Smaller icon (100 x 100 pixels) in PNG format. Should be the primary brand associated with the card A short card description (max 32 characters) Contact information to put on the back of the card: Contact name Customer service phone number Email address Contact website Manual provisioning workflow The manual provisioning process involves these entities: The cardholder's mobile wallet The card network The mobile wallet provider Galileo (or you, if you are using the Auth API) This is the workflow when cardholders provision their cards manually: The cardholder obtains a card from you. The cardholder manually inputs the PAN, CVV, and expiry in the mobile wallet interface, as well as other identifying information that the wallet requests. The wallet provider performs some initial checks. If the checks do not pass, the wallet provider informs the cardholder that the provisioning has failed. If the initial checks pass, the wallet provider sends an authorization request to the card network. The request contains a one-time password (OTP), depending on how your program is set up. The card network forwards the authorization request to Galileo. Galileo performs the following checks. If any of these checks fail, code 46 (Visa) or 05 (all other networks): CVV2 verification Card or account in wrong status Card not instant issue Galileo performs further checks. If any of these checks fail, Galileo returns response code 85 along with either the cardholder's mobile number or email or a customer service number, depending on your setup. AVS for address and zip Last 4 digits of mobile If all checks pass Galileo returns response code 00 along with the AVS result. Based on Galileo's response and its own algorithms, the wallet provider determines whether the provisioning attempt should be on the red, yellow, or green path. Red path means hard fail. The wallet provider presents a message to the cardholder, depending on how you are set up with the network. The message may tell the cardholder to contact the card issuer or it may contain a customer-service number to call. Yellow path means partial verification success. The wallet provider may send an OTP by the method that you have set up (email or text), or it may send a customer-service number. If the additional verification is not successful, the provisioning attempt fails. If the additional verification is successful, the provisioning request moves onto the green path. Green path means that all verification checks are passed. The provider forwards the provisioning request to the card network. The network creates the card token and sends it to the wallet provider. The wallet provider activates the token to provision the card to the wallet. Push provisioning If you will be push-provisioning cards to mobile wallets, you must perform all of the steps in the manual provisioning section, and then you must obtain the SDKs and in-app provisioning documentation from each wallet provider. Push provisioning workflow The push-provisioning process involves these entities: The cardholder's mobile wallet The card network The mobile wallet provider Your mobile app interface Galileo (and you, if you are using the Auth API) This is the workflow when you push-provision cards to mobile wallets: The cardholder requests a tokenized card in your mobile app. You send a provisioning request to the mobile wallet provider. The wallet provider returns certificates, keys, and other data. You send a Create Provisioning Request call to Galileo with the data supplied by the wallet provider. Follow the instructions in the Creating a Provisioning Request guide. Galileo encrypts the payload and returns the response to you. You create a tokenization request with the encrypted payload and send it to the wallet provider via its SDK. The wallet provider decrypts the payload and verifies whether the tokenization request is valid. Because the cardholder's identity has already been verified in your app, there are no red, yellow, or green-path checks. All provisioning attempts are by-definition on the green path. The card network creates the card token and sends it to the wallet provider. The wallet provider activates the token to provision the card to the wallet. Reissuing and replacing tokenized cards When you reissue or replace a card that has been provisioned to a mobile wallet, the card in the wallet may not be automatically updated. For example, a cardholder provisions a physical card to a mobile wallet. Later, the card expires, the cardholder receives a new card (with new CVV and expiry date) in the mail, and activates it. Because the card in the wallet has the old CVV and expiry, it cannot be used for transactions until the card network updates the information for tokenized cards, which may be several hours or a day later. When you replace a Digital First card that has been provisioned to a mobile wallet, the digital card in the mobile wallet is not automatically replaced—you must either push-provision the new card to the wallet or the cardholder must enter it manually. Viewing mobile-wallet transactions To distinguish mobile-wallet transactions from other transactions, the token_type field in the Auth API and token_requester_id field in Authorization Events are populated for mobile-wallet transactions. For example, token_type: PayPal and token_requestor_id: 400100xxxxx. These values can be added to your Authorized Transactions RDF by request. Events API messages You can make arrangements with Galileo to receive these mobile wallet–related Account Events messages, which you can then relay to your customers. For these events you can arrange with Galileo to customize the message that is displayed to the cardholder, provided that you are doing the messaging instead of Galileo. The first letter of the message code indicates the wallet provider: A — Apple Pay G — Google Pay S — Samsung Pay CodesNameDescriptionATCNGTCNSTCNmobile_activation TCNA card was successfully provisioned to a mobile wallet.AYLPGYLPSYLPmobile_activation YLPAn attempt to provision a card to a mobile wallet was unsuccessful and entered the yellow path.AACNGACNSACNmobile_activation ACNMastercard sent an activation code after an activation attempt entered the yellow path.VAPImobile_activation APIVisa sent an activation code after an activation attempt entered the yellow path. The message code is VAPI for all wallet providers.ATVNGTVNSTVNmobile_activation TVNMastercard only. An activation attempt using the mobile activation code was unsuccessful.ARDPGRDPSRDPmobile_activation RDPAn attempt to provision a card to a mobile wallet has failed and entered the red path.TKUPtoken_updateMastercard only. A tokenized card was frozen, unfrozen, reissued, or cancelled, and the updated tokens have been synchronized with Mastercard. Galileo setup These internal parameters are set at Galileo according to your use case. ParameterLevelDescriptionAPPAYProgram ProductRequired. When this parameter is set, the provisioning request is approved with response code 00 (green path) only if the following conditions are true: Account is active and contains sufficient funds, AVS check matches ZIP and address, Last 4 digits of phone number match, Is not an instant-issue card, CVV2 is present and matchesCHITRProductSet for Digital First cards to be provisioned to wallets.IPCIDProductMastercard only. Specifies the product configuration ID to be used for activation code distribution (ACN) methods for mobile wallet authorization. When this parameter is not set, Mastercard mobile wallet transactions are declined with response code 05 (do not honor).PPBBIProductVisa only. Required. Specifies which encryption key was used to encrypt provisioning data when performing a key exchange with Visa. This parameter should be set only after the key exchange has taken place. Set this parameter on the product that is to be tokenized.PPNProgramVisa only. Contains the number that Visa cardholders can call to perform manual provisioning to a mobile wallet when a failed provisioning attempt is on the yellow path and Galileo is not providing yellow-path customer service.PPUPCProductTokenize this card. Required for any product with a card that is to be tokenized.TOKUPProductMastercard only. Controls whether Galileo synchronizes tokens with MDES when cards are frozen, unfrozen, reissued, or canceled. This parameter must be enabled to trigger the TKUP event.XAACTProductSet this parameter to YNN to automatically activate the account and card upon creation.Updated 2 months ago Table of Contents Initial setup Manual provisioning Mastercard metadata Visa metadata Manual provisioning workflow Push provisioning Push provisioning workflow Reissuing and replacing tokenized cards Viewing mobile-wallet transactions Events API messages Galileo setup "
224,docs.galileo-ft.com/pro/reference/api-reference-de003-codes,DE003 Codes Positions 1–2 Transaction code. CodeDescription00Goods and services or purchase (debit)01Withdrawal or cash advance (debit)10Money transfer funding (debit)11Quasi-cash (debit) or issuer only17Cashed check20Return or correction (credit)21Deposits (credit)26Money transfer credit (credit)30Available funds inquiry31Pinned account inquiry (STAR NE platform only)33Card/account verification35Account list inquiry (STAR NE platform only)39Account balance profile or PIN-less account inquiry40Transfer50Bill payment (debit) or payment to third party54Funds transfer debit55Payment from a third party (credit) or refund56Payment or funds transfer (credit)58Electronic payment (STAR NE platform only)59Payment enclosed (STAR NE platform only)70Prepaid card load72Prepaid card activation90PIN change91Statement processing Positions 3–4 and 5–6 Positions 3–4 are the sending account and positions 5–6 are the receiving account. CodeDescription00Default (FND)09Other (OTH)10Savings (SAV)20Checking (DDA)30Credit (CRD)Table of Contents Positions 1–2 Positions 3–4 and 5–6 
225,docs.galileo-ft.com/pro/docs/about-card-transactions,"About Card Transactions This guide explains the basics of how card transactions work: which entities are involved in card transactions, the sequence of events, and some examples of how different merchant types handle transactions. Along with this guide you may want to read these other documents: About Transactions — A general guide to how transactions are represented in the Galileo system. Card Transaction Scenarios — Example scenarios to show how various card transaction types appear in the Program API, Events API, Auth API, and the RDFs. Subsections in this guide: Networks — Credit and debit network types and how transactions are routed Authorization — Authorization requests and their variants such as preauthorization, incremental authorizations, and partial authorizations Settlement — Settlements, backouts, and completions Crediting Cardholder Accounts — Card transactions that move funds into cardholder accounts such as reversals, merchant credits and card loads Card Transaction Examples — Examples of the transaction types explained in the other guides A card transaction is usually initiated by a cardholder at a point of sale. The transaction is facilitated through its various phases by card networks until the transaction has completed. Prominent card networks are Visa and Mastercard for credit card transactions, whereas interbank networks such as Interlink and Maestro handle ATM and PIN-debit transactions. Galileo is integrated with most major credit card and interbank networks in the United States. See Networks for more information. Card transactions are not initiated or facilitated through the Program API; however, you may be informed of each step of the transaction in real time through the Events API, or you may subscribe to the Authorization Controller API, to participate in authorizations. These transactions are also recorded in the RDFs and can be viewed using transaction-retrieval endpoints such as Get All Transaction History. Transaction participants All card transactions have at least five participants. Card transaction participants. Double lines indicate card-network rails. Merchant A merchant is an entity that offers goods, services, or cash in exchange for a card payment. A merchant can be a physical store, an online vendor, a mobile app, an ATM, a card-loading vendor, or a money-movement app. Merchants have card-reading devices on their physical premises or card-processing software on their online sites or in their mobile apps. Acquirer Prior to accepting card transactions, a merchant must set up a business relationship with an acquirer, which is a bank or intermediary. The acquirer has physical access to the card networks and provides the merchant with card-reading hardware or software. The acquirer handles card-network messages on behalf of the merchant as well as moves funds between the merchant account and the card networks. Merchants send their transactions to their acquirers over an electronic connection. Card network A card network is an entity that has laid cable to create the network over which card transactions are processed. This physical infrastructure is called a network's ""rails,"" which transmit a standardized set of messages between acquirers and issuers. The networks also transfer funds between issuers and acquirers and assist in resolving disputes. For more information see the Networks guide. Issuer The issuer is an entity, usually a bank or an intermediary, that offers cards to customers and maintains the card accounts. Issuers determine which card types to offer, what features the account has, and which restrictions to impose. Issuers also have physical connections to the card networks and handle network messages on behalf of their cardholders. For Galileo clients, Galileo fulfills the role of issuer in payment-card transactions by partnering with issuing banks (which hold the funds for cardholder accounts), handling the messages that arrive over the network rails and by transferring funds between customer accounts and the card networks. Cardholder account The account on which a card transacts is the cardholder account. In most cases the account is a DDA, but it can be another type of account. These accounts may be held by Galileo or by you, depending on your setup. At the time that you create a card program, you decide whether to permit PIN transactions, signature transactions, or both, and you determine which networks to use for each type of transaction. Transaction phases All payment-card transactions pass through these phases: Acquisition Authorization Clearing Reconciliation and settlement 1. Acquisition In this first phase of the transaction, the cardholder presents card information at a merchant's point of sale. At physical locations the card information is acquired through a card reader. This device is provided to merchants by their acquirers. Most card readers permit cardholders to insert their cards into a slot that reads a chip, which contains sophisticated security information that is difficult to reproduce for fraudulent purposes. For cards without chips, the reader permits the magnetic stripe to be swiped. In ""contactless"" transactions, a specialized card can be ""waved"" near an NFC reader that can pick up the card information, or the cardholder can wave a mobile phone that contains a mobile wallet. Depending on how the card is set up, the cardholder may be required to enter the PIN for the card. For websites and mobile apps, merchants obtain specialized software from their acquiring banks that accepts a typed-in PAN, expiry date, and CVV, as well as the cardholder's billing address. Mobile apps also accept payments from mobile wallets. See Mobile wallet support in the Choose a Card Strategy guide for more information. Older methods of acquiring card information include making a physical imprint of the card onto paper (if the PAN is embossed), typing the PAN via keypad into a device, or writing the PAN on a paper slip to submit to the acquirer. Issuers, acquirers or card networks may no longer permit some of these acquisition methods for security reasons. With all of the electronic methods, the card's PAN, expiry date, CVV, card network, and other information are transmitted to the authorizing entity (issuer) through the network. With non-electronic methods the PAN, expiry date, and CVV are manually delivered to the acquirer, which converts the information into an electronic format and sends it to the network. For non-electronic methods where authorization is not requested prior to the transaction, the merchant assumes the risk of accepting cards that may not be not valid or that might not support the transaction. 📘NoteNeither Galileo nor its clients are involved in the acquisition phase of a payment-card transaction; however, different acquisition configurations affect how the transactions are processed and therefore affect the data that you see. Card-not-present transactions Acquisitions can be classified according to whether the physical card is used to initiate a transaction. When the cardholder is present on the merchant's premises and can produce the physical card (or a phone that contains a mobile wallet), it is a ""card present"" transaction. When the cardholder presents card information without being present at a physical site—at an e-commerce site, in a mobile app, or over the phone—it is a ""card not present"" transaction. For card-not-present transactions, issuers or card networks usually require verification information such as the expiry date and CVV, and merchants use AVS to ensure that the legitimate cardholder is initiating the transaction. Issuers may decide not to allow card-not-present transactions, or in other cases may temporarily disallow card-present transactions, such as when the physical card is in transit to the cardholder. Card validation Validating a card at a point of sale can take one of two forms, depending on how the card account is set up and on merchant decisioning: PIN — The cardholder enters a PIN on the keypad of a card-reading device. Signature — The cardholder signs a receipt, and the merchant compares the signature to the signature on the back of the card. Online transactions, cash-app transfers and any other transactions where a PIN is not input are treated as signature transactions as well. Whether a PIN is entered determines the type of network that the transaction uses. See the Networks guide for more information. At the time of acquisition, the merchant or acquirer may apply rules to determine whether they will accept the card type, based on the BIN. For example, a merchant might have a policy to not accept prepaid cards. In that case, the card is rejected at the merchant site and no authorization request is sent. 2. Authorization Authorization is an anti-fraud and risk-mitigation measure to verify the card and cardholder's authenticity as well as the card's ability to support the transaction. After the card information and purchase amount are acquired, the merchant sends an authorization request with the transaction amount to its acquirer, who routes the request to the appropriate network. The network performs some preliminary fraud-detection checks and sends a risk score, along with the authorization request, to the issuer. The issuer verifies that the card passes validation checks, then ensures that the card account can support the transaction. In the case of a debit or prepaid account, the issuer checks for sufficient funds, and in the case of a credit account, verifies that the credit limit has not been exceeded. The issuer also checks for violations of velocity limits and other restrictions such as location or merchant type. Further fraud-detection checks may also take place at this point. 📘NoteFor authorization requests Galileo fulfills the role of issuer. Galileo clients may also participate in the authorization process by using the Authorization Controller API. If the card and transaction pass all verification checks, the issuer returns an ""authorization approved"" message and the merchant completes the transaction; otherwise, the issuer returns an ""authorization denied"" message, along with the reason for the denial, and the merchant cancels the transaction. After approving an authorization request, Galileo places a hold on the cardholder account for the amount of the transaction. This hold changes the available balance amount such that it is not taken into consideration for the next authorization request. For example, if a cardholder has $200 in their account and Galileo approves an authorization for $50, the cardholder then has only $150 in available funds. If the cardholder attempts to make another purchase for $151, the authorization will be denied for insufficient funds, even though the first $50 has not yet been debited from the account. 📘NoteSee the Authorization guide for further details about authorization, including preauthorization, upcharges, partial authorizations, AVS-only checks, balance inquiries, provisioning requests, authorization linkage, and incremental authorizations. 3. Clearing Merchants regularly compile a list of completed transactions during a particular period, usually the current day, although some high-volume merchants may compile these lists multiple times per day and low-volume merchants may send them every few days. These lists include adjusted amounts that were added to the transaction after initial authorization was granted, such as a tip added at a restaurant, or a transaction may end up being less than the authorized amount. The merchants then send the clearing messages to their acquirers. The acquirers sort through the transactions, and then route batch files to the various card networks. The networks sort through the transactions and compile batch files to send to each issuer. 4. Reconciliation and settlement The issuer receives a batch file from each network at least once per day. The issuer compares the transactions to the authorizations that it has on file, and when the transaction matches, the hold is backed out, the transaction is changed from an outstanding authorization to a settled transaction, and the amount is posted to the cardholder account. Matching the clearings with authorizations is called reconciliation, and posting the amount to the account is called settlement. 📘NoteSee the Settlement guide for details on settlement, including backouts, completions, force posting and incremental clearings. As the final step in a transaction, the network calculates the debits and credits for each issuer and presents the net amount owed to the issuers. In separate processes, the networks settle with acquirers and the acquirers settle with their merchants. Example transaction workflow This diagram shows the stages of a typical transaction. Most card transactions have two distinct phases. Returning funds to cardholder accounts Although most transactions move funds from the cardholder account to the merchant, some transactions move funds in the opposite direction: Reversals Merchant credits Card loads Disputes For information on these types of transactions, see the Crediting Cardholder Accounts guide. Transactions by merchant type The majority of cardholder transactions will be at retail outlets, either online or on premises, with the typical three-transaction sequence (authorization, backout, settlement). This section explains what kinds of variations you can expect with transactions from particular merchant types. Restaurants and bars Gas pumps ATMs E-commerce Hotels Car rental Ride-share services Peer-to-peer cash transfers Card loads Gig-economy workers Mobile wallets International merchants Restaurants and bars In many establishments that serve food or alcohol, customers are permitted to add a tip to the bill when paying with a card. The tip-adding can take one of two forms: Signature-based At the table the customer is presented with a bill, and the customer gives the server the card. The server obtains authorization or preauthorization for the amount of the bill and prints out a receipt. The customer writes in a tip and signs the receipt. The merchant sends a clearing amount for the bill amount plus the tip. The settlement and preauthorization amounts are therefore different. Galileo is obligated to post the full amount to the cardholder account even if the cardholder's account is driven negative by the tip amount. See Upcharges in the Authorization guide for a way to mitigate this risk. PIN-based The server gives the bill to the customer. The customer goes to the cashier and uses the card reader to input a PIN. The card reader is programmed to ask if the customer wants to add a tip, and then accepts manual input. The card reader sends the bill amount plus the tip as a single authorization request. With this method there is no risk of the tip amount driving the account negative, because the full amount is authorized. Fast food Most fast food restaurants do not use PIN verification, especially at a drive-through window. To improve their customer experience, some restaurants do not wait for authorization before completing a transaction, and so when they clear the transaction it results in a force-post. Restaurants therefore assume the risk of the transaction being charged back. Gas pumps Transactions at gas pumps follow a five-step sequence (preauthorization, backout, completion, backout, settlement) instead of the usual three-step sequence (authorization, backout, settlement). Because the total sale amount is not known until after the gas is already in the tank, a gas pump gets preauthorization before dispensing the gas, and then when the sale amount is known, sends a notification over the authorization rails of the final amount. Later, the gas station owner sends a clearing message for the final amount, which arrives at Galileo in the settlement batch file. See Five-step sequence and Scenario 2: Preauthorization with Completion for examples. Also see Upcharges in the Authorization guide, because setting an upcharge for gas pumps is a common use case. It's also not unusual for a customer who pumps gas to make a purchase at the corresponding convenience store. In that case you will see two sets of transactions within a few minutes of each other: one for the pump (often MCC 5542, automated pumps) and one for the convenience store (MCC 5541, service stations). See Gas pump plus convenience store in Card Transaction Examples. ATMs ATMs typically use MCC 6011. ATM fees may be assessed by the ATM operator, by the network, or by you. An authorization request for an ATM includes the withdrawal amount plus all fees in one request. With the settlement, the fees from the ATM operator and network are included with the cash amount, whereas any fees assessed by you are broken out in a separate transaction. ATMs are programmed to send reversals when there is an error, such as a duplicate authorization or an amount dispensed that is different from the authorized amount. For more information see ATMs in the Authorization guide and ATM networks in the Networks guide. For examples see ATM withdrawal in Card Transaction Examples or these other scenarios: Scenario 11: ATM withdrawal Scenario 12: ATM reversal E-commerce When a cardholder makes a purchase on an e-commerce site, the merchant usually performs an AVS-only check, which has an authorization amount of 0.00. Galileo returns response code 85 (valid test, non-financial transaction) along with the AVS results when the card and account are active. If the card or account are not active, Galileo returns 05, or if other conditions apply such as a lost or stolen card, Galileo responds with the appropriate code. (See the Authorization Response Codes enumeration.) Because web sites and apps cannot ask for PIN input, all e-commerce transactions are signature transactions. See AVS-only checks in the Authorization guide for more information. Amazon When a cardholder initiates a transaction, Amazon usually performs an AVS check. Some hours later, Amazon sends out preauthorization requests in a batch file and later sends a conventional clearing or completion. When an order includes items from a third-party vendor, the vendor usually gets its own preauthorization for that portion of the order and clears or completes it separately. There is no identifier to tie the transactions to the AVS check or to the various parts of a single order. The timing of when portions of an Amazon order are authorized varies widely depending on how the third-party vendors are integrated with Amazon as well as a number of other factors internal to Amazon. Keep in mind that the merchant IDs for the various parts of an Amazon order might be different from the original AVS check, depending on who fulfills the order. A third-party vendor usually has something like ""AMZN Mktp"" (Amazon Marketplace) in the transaction description and a different merchant ID than the AVS check. For an example see Amazon transaction in Card Transaction Examples. Also see Incremental clearing in the Settlement guide for another way that e-commerce merchants might clear orders that ship separately. Hotels When a hotel accepts a reservation, it typically preauthorizes the guest's card for $50 or so as a reservation fee. When the guest checks in, the hotel often reverses the reservation fee and preauthorizes the card for the anticipated amount of the stay. When the guest checks out, the hotel sends a clearing for the total amount of the stay, including minibar and other charges. Sometimes a hotel does not reverse the reservation fee but rather deducts it from the settlement at the end of the stay. In the case of an extended stay, a hotel might get preauthorizations for the next two days only, for example, and then send a clearing message for those two days before preauthorizing the next two days. Car rental Car rental agencies typically obtain a preauthorization for an amount that is considerably higher than the anticipated final amount, often for several hundred dollars. When the car is returned the agency sends a partial reversal to release the excess funds from the hold. They then send a conventional clearing message a few days later. For a detailed example of a car rental transaction, see Scenario 8: Partial Reversal on Preauthorization. Ride-share services The ride-share apps tend to send a high number of preauthorizations that are later backed out or reversed because of these factors: The apps get preauthorizations at the beginning of the ride for the estimated amount, and then may get separate authorizations when the ride is finished and the ride total is known. Many cardholders have two ride-share apps, so they create ride requests on both apps at once to see which service can provide a ride the soonest. Then they cancel one request in favor of the other. Ride-share app users often make and then cancel ride requests soon after, for whatever reason. When a rider is picked up the app sends a preauthorization request for the estimated amount. This transaction often has ""pending"" or ""temp auth hold"" in the transaction description. The next steps vary depending on what the app is configured to do. Any of these scenarios may play out: When the ride is completed, the app sends another preauthorization request for the actual amount. The description for this second preauthorization may contain ""trip"" or ""charges."" Galileo backs out the first preauthorization soon after. When the ride is completed, the app sends a reversal for the difference between the preauthorization and the final amount, if the final amount is less. Galileo expires the reversal when it receives the clearing message. When the ride is completed, the app sends a conventional clearing message for the actual amount, which may be less than the preauthorized amount. The preauthorized amount is held until Galileo gets the clearing message. When the rider provides a tip after the ride transaction has completed, the app gets another preauthorization for that amount, and the clearing for the tip may be included with the clearing for the original ride or it may be cleared separately. For examples see Incremental authorization and Partial reversal and expiry in Card Transaction Examples as well as Scenario 3: Incremental Authorizations. Peer-to-peer cash transfers Services such as Venmo, Cash App, Zelle and PayPal perform peer-to-peer cash transfers and typically use MCC 4829 (wire transfers) or 6012 (financial institutions). When your customers send funds to a peer, the transaction is authorized and settled in the usual manner as a debit from the account. The name of the peer who receives the funds is in the transaction description. When your customers receive funds from a peer, the transaction is a card load, which is a payment activity type. The name of the peer who sent the funds is in the transaction description. The load will be either a Mastercard or Visa load, depending on the card's branding. See Card loads, below, for more information. For a detailed example of a peer-to-peer cash transfer, see Scenario 7: Refund after Clearing (Mastercard Banknet) Card loads According to your settings, cardholders can directly load cash onto their cards at selected merchant sites, or companies can electronically load funds onto cards. When a cardholder receives funds from a cash-transfer app, such as a Venmo cashout, or payments from a gig-economy company such as Uber, the load type depends on the card's branding: Mastercard or Visa. For more information see Card loads in the Crediting Cardholder Accounts guide. For an example see Uber payment in Card Transaction Examples and for a detailed example see Scenario 17: Card Load (Maestro). Gig-economy workers Drivers for ride-share and food-delivery services often receive payments to their accounts as card loads, such as a Maestro load or Visa Money Transfer. For an example see Uber payment in Card Transaction Examples and Scenario 17: Card Load (Maestro). Mobile wallets When a cardholder adds a mobile wallet card as a payment method in a mobile app, the app typically sends an AVS request to verify that the card is valid. After a successful AVS check, the app sends a conventional authorization request for the sale amount with a conventional settlement afterwards. See Mobile wallet support in the Choose a Card Strategy guide for more information. Also see AVS-only checks in the Authorization guide. International merchants When a merchant obtains an authorization, the amount in the authorization request is the amount in the cardholder account's local currency. For example, if a cardholder who resides in Alabama goes to a gift shop in Rome, and the sale total is 50 Euros, the authorization amount will be expressed in the equivalent number of dollars. When the settlement arrives, the settlement amount is usually different from the authorization amount, because it reflects fluctuations in the currency conversion rate between the authorization time and the clearing time. Networks charge currency-conversion fees for international transactions. These fees are billed in a separate invoice rather than being included in the authorization amount. Issuing banks may also charge international transaction fees. Both fee rates may vary based on the card type. The networks usually provide an indicator in authorization requests for domestic transactions. When a network determines whether a transaction is domestic, it can be as simple as comparing the country code of the issuing bank to the country code of the acquirer, and if they are the same, the transaction is domestic. In the case of U.S. territories, the determination is based on whether the issuing bank is in the same territory or region as the acquiring bank. Transactions that cross regional boundaries may not be considered domestic. For Visa cards issued in Puerto Rico, there may be special issuer reimbursement fees applied for non-domestic transactions. Consult the documentation for each card network for more information about how they determine whether a transaction is international or domestic. When Galileo determines whether a transaction is international for the purpose of assessing issuer fees, it first consults the indicator in the authorization request. If a valid value cannot be obtained in that way, Galileo compares the merchant's country code to the card's country code. You can also use the DOMCC parameter to specify which countries should be considered domestic. For examples see International transaction in Card Transaction Examples and these other scenarios: Scenario 13: International Authorization Scenario 14: International Reversal Updated 4 months ago Table of Contents Transaction participants Merchant Acquirer Card network Issuer Cardholder account Transaction phases 1. Acquisition 2. Authorization 3. Clearing 4. Reconciliation and settlement Example transaction workflow Returning funds to cardholder accounts Transactions by merchant type Restaurants and bars Gas pumps ATMs E-commerce Hotels Car rental Ride-share services Peer-to-peer cash transfers Card loads Gig-economy workers Mobile wallets International merchants "
226,docs.galileo-ft.com/pro/reference/post/getivrcallstatus,Get IVR Call Status The table below lists status codes that apply to this specific endpoint. Status CodeCode Description466-01No call request found related to the callId and accountLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
227,docs.galileo-ft.com/pro/docs/about-cards,"About Cards The About Cards guide has been deprecated. Use these links to navigate to the new location of the information that was on this page. Choose a Card Strategy — Explanation of card types and use cases Physical cards Digital cards Setting Up a Card Program — Card lifecycle and other general card information Card identifiers See Retrieving Card Information or Setting Up a Card Program Card statuses See Card Statuses. Card networks See Networks. Card activation See Activating a Card. Card embossing See Card embossing in Setting Up a Card Program. Card art See Design a Card. Card shipment See Card shipment in Setting Up a Card Program. Viewing card information See Retrieving Card Information. Freezing cards See Freezing cards in Card Statuses. Lost or stolen cards See Lost, Stolen, or Damaged Cards. Reissuing cards See Reissuing Cards. Card expiry See Card expires in Setting Up a Card Program. Cancelling cards See Card cancelation in Setting Up a Card Program.Updated 8 months ago Table of Contents Card identifiers Card statuses Card networks Card activation Card embossing Card art Card shipment Viewing card information Freezing cards Lost or stolen cards Reissuing cards Card expiry Cancelling cards "
229,docs.galileo-ft.com/pro/page/authorization-status-codes,"Authorization Status Codes These authorization status codes are visible in the AUTHORIZATION STATUS field of the Secondary Posted Transactions RDF. CodeDescriptionAAuthorized, not settled; available balance updatedBBacked outCMastercard only. Canceled completionDDeniedEExpiredIBalance inquiryJExpired merchant credit, AVS only check, transfer, or unmatched auth reversalPSettled and postedTPayment approved, posted to payments tableVPending merchant credit, approved, available balance not updatedXLoad reversal, approvedZAdvice, approved, available balance not updated "
230,docs.galileo-ft.com/pro/page/scenario-15-tokenization-authorization,"Scenario 15: Tokenization Authorization << Back to the index A debit cardholder installs a meal-delivery service app and specifies a card in a mobile wallet as the payment method. The app validates the card before approving it for use. The following are true: The initial available balance is $1000. The network is Visa. Sequence of events Events in the same step have the same timestamp. Visa sends an authorization and AVS check request for 0.00. The Merchant Description field contains ""Visa Provisioning Service."" Galileo performs an AVS check and the check passes. Galileo returns Y for the AVS check (address and zip code match) and response code 85, which is approval for a non-financial transaction. Galileo sends the AAAU: auth webhook. The app accepts the card as payment. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthTokenization0.0044550100020210617:074449MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampAAAUauth0.004455010002021-06-17 07:44:49 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME0.00+44555006172021 07:44:49 Posted Transactions RDF This transaction does not appear in this RDF. Get Authorization History response This transaction is not returned by this endpoint. Get Transaction History response This transaction is not returned by this endpoint. Get All Transaction History response This transaction is not returned by this endpoint or the CST. "
231,docs.galileo-ft.com/pro/reference/dispute/post/submitcase,"Submit Case Use the Submit Case endpoint to finalize a dispute case when the account holder presses a ""submit"" button on your user interface. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1511-4Invalid caseId or caseId returned no result1511-5Invalid Request:1511-6Error saving case1511-13caseId references a case that is currently locked1511-14Invalid request message1511-15This case is already resolved with status:1511-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
232,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-inactive-card,"denied_auth_inactive_card Code — NACT Event trigger — You or Galileo deny an authorization request on an inactive card. Process — This process contains the event trigger: Galileo receives one of these messages from a card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amount Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""NACT"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_Score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""denied_auth_inactive_card"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# denied_auth_inactive_card example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""fee_amount"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""NACT"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_Score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""denied_auth_inactive_card"" } Table of Contents Fields Example "
233,docs.galileo-ft.com/pro/reference/post/createachtransaction,Create ACH Transaction For more information on this endpoint see Creating an ACH transaction in the ACH Endpoints guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description429-01ACH account not found429-02Insufficient balance429-03Limit violation429-04Insufficient funds for debit transaction429-05Plaid returned an error. Find the error in the status field and handle with Plaid accordingly.429-06Failure occurred while processing debit transaction429-06Failure occurred while processing credit transactionLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
234,docs.galileo-ft.com/pro/reference/post/voidaddcard,Void Add Card The table below lists status codes that apply to this specific endpoint. Status CodeCode Description500-01Card not foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
235,docs.galileo-ft.com/pro/reference/post/addachaccount,Add ACH Account The table below lists status codes that apply to this specific endpoint. Status CodeCode Description423-01Identity validation failed423-02Failed to retrieve ach account details423-03Plaid returned an error. Find the error in the status field and handle with Plaid accordingly.423-04ACH account already existsLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
237,docs.galileo-ft.com/pro/changelog,"Changelog Click March 2023 to see the details.February 2023Posted by Bonnie May about 1 month ago In February we began to offer a secondary RDF suite, created a new guide to help you get started with fraud rules in PRP, and made some updates to content about the Sandbox experience. Click February 2023 to see the details.January 2023Posted by Bonnie May 3 months ago In January we updated mobile wallet info, added an event message, updated overdraft event descriptions, removed endpoint parameters and an account status, fixed some parameter descriptions, clarified an Auth API field, changed some Visa response codes, added a guide, updated a card transaction scenario and added a new one. Click January 2023 to see the details.December 2022Posted by Bonnie May 4 months ago In December we fixed some data types, removed an event, added timestamps to the Card Transaction Scenarios. We also introduced Galileo Buy Now, Pay Later, our newest product offering. Click December 2022 to see the details.November 2022Posted by Amanda Zourzouvilys 5 months ago In November we fixed some response field definitions, changed the dispute verdicts, added a new card transaction simulation, moved the card transaction scenarios online, added a product parameter, corrected some guides and updated another, removed a product and added new and preliminary guides. Click November 2022 to see the details.October 2022Posted by Bonnie May 6 months ago In October we added a new response code, added a couple of new guides and corrected a Recipe. Click October 2022 to see the details.September 2022Posted by Caro Martin 7 months ago In September we added Real-Time Funding guides, added new simulated auth parameters, indicated how to skip U.S. address validation, added a new field for ACRT, explained how to subsidize transactions, added support for international characters, removed a table, added info on subsidizing transactions, added a new guide on account holder refunds and clarified the use of the id parameter. Click September 2022 to see the details.August 2022Posted by Bonnie May 8 months ago In August 2022 we added Allpoint cash loads, added a suggestion, added a new endpoint, added IIAS fields, fixed a SETL field, clarified ACH identifiers, added a new event, added recovery info and announced a new status-code format. Click August 2022 to see the details.July 2022Posted by Bonnie May 8 months ago In July 2022 we added more network examples, added a disputes guide, reorganized the cards docs, added information on Galileo Secured Credit with Dynamic Funding, removed a parameter, clarified some descriptions, added Event API fields, added ALC documentation, added Auth API information and removed a Create Location parameter. Click July 2022 to see the details.June 2022Posted by Bonnie May 10 months ago In June 2022 we added an optional field to FREV, an instant-issue guide, changed overdraft behavior, added secured credit charge-off info, support for international addresses and phone numbers, introduced multiple card images for mobile wallets, updated the Networks guide, added parameters to Create Payment, and clarified how to switch products with Digital First products. Click June 2022 to see the details.1 of 4 "
238,docs.galileo-ft.com/pro/reference/post/resetcardpinfailcount,Reset Card PIN-Fail Count The table below lists status codes that apply to this specific endpoint. Status CodeCode Description545-01PIN fail count already 0LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
239,docs.galileo-ft.com/pro/reference/api-reference-events-api-cardholder-info-changed,"cardholder_info_changed If the customer address is changed via the Program API or Galileo-hosted cardholder website, the ADRC: addr_chg event is sent instead. Code — CHPC Event trigger — One or more of these fields change in the Customer Service Tool: first name, middle name, last name date of birth addr1, addr2, addr3, addr4, addr5 city, state, zip home_phone, mobile_phone, other_phone email Process — This process contains the event trigger: Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description addr1 X Current first address line. Example: ""564 Elm St."" addr2 X Current second address line. Example: ""Apt 41"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" city X Current city. Example: ""Eden Prairie"" country X Current country code. Example: ""840"" dob X Account holder's date of birth. Format: MM/DD/YYYY Example: ""03/16/1981"" email X New email address. Example: ""[email protected]"" fname X Cardholder's first name. Example: ""Mirela"" home_phone X New home phone number. Example: ""8015553234"" lname X Cardholder's last name. Example: ""Arroyo"" mname X Cardholder's middle name. Example: ""W"" mobile_phone X New mobile phone number. Example: ""8015553768"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CHPC"" other_phone X New other (secondary) phone number. Example: ""8015553222"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" state X Current state abbreviation. Example: ""MN"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""cardholder_info_changed"" zip X New postal code. Example: ""84101"" Example JSON# cardholder_info_changed example: { ""addr1"": ""564 Elm St."", ""addr2"": ""Apt 41"", ""balance_id"": ""20211"", ""city"": ""Eden Prairie"", ""country"": ""840"", ""dob"": ""03/16/1981"", ""email"": ""[email protected]"", ""fname"": ""Mirela"", ""home_phone"": ""8015553234"", ""lname"": ""Arroyo"", ""mname"": ""W"", ""mobile_phone"": ""8015553768"", ""msg_event_id"": ""243693"", ""msg_id"": ""CHPC"", ""other_phone"": ""8015553222"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""state"": ""MN"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""cardholder_info_changed"", ""zip"": ""84101"" } Table of Contents Fields Example "
241,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth,"auth Event code AAAU is for completions (advice), reversal notifications, AVS-only checks, and yellow-path tokenization requests. Event code BAUT is for all other authorization requests except ATM balance inquiries (AABI: bal) and card loads (AAPM: auth_payment). Codes — AAAU, BAUT Event trigger — You or Galileo approve an authorization request. Processes — These processes contain the event trigger: AAAU Galileo receives one of these messages from the card network: Preauthorization completion Preauthorization reversal Reversal notification AVS-only request A tokenization request that entered the yellow path Advice notification of an approved STIP transaction BAUT Galileo receives one of these messages from the card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description act_type X See Activity Type for possible values. Example: ""VI"" amount X BAUT only. The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" amti AAAU only. Amount of the transaction in cents. The amount is signed: - to debit the account and + to credit the account. Example: ""26100"" auth_api_request BAUT only. Contents of the Auth API webhook for this transaction. Stringified JSON. auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billing_amt Amount to be billed in the currency of the cardholder account (DE006). Example: ""24.35"" billing_curr_code Currency code for billing_amt (DE051). Example: ""840"" cad X Galileo-generated card ID. Example: ""12534"" card_not_present AAAU only. Whether this is a card-not-present transaction. Y is card-not-present; N is card-present. Example: ""Y"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" de25 AAAU only. Raw contents of DE025, POS condition. See DE025 Codes for possible values. Example: ""00"" domesticis_domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amount Program transaction fee. Example: ""2.00"" fleet_card_driver_number Driver ID. Fleet cards only. Example: ""06123456"" fleet_card_vehicle_number Vehicle ID. Fleet cards only. Example: ""03123"" fund_pastotb The available balance of the real-time funding account after this transaction takes place. Example: ""24365.90"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amtlocal_atm_surcharge The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant AAAU only. Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" merchant_postal_code The postal code for the merchant. Example: ""10021"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""AAAU"" mti BAUT only. ISO 8583 message-type indicator. 4 digits. Example: ""0200"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts BAUT only. The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example:""2023-03-17 14:06:50.243654""` original_auth_id X The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" otype X See Transaction Types for possible values. Example: ""W"" pastotb BAUT only. The available balance immediately after the authorized amount was applied to the cardholder account. pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rrn Retrieval reference number (DE037). Format: Julian date YDDDxxxxxxxx Example: ""314293027549"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_requester BAUT only. Name of the entity that is requesting a tokenized version of the card. Example: ""Apple Inc."" token_requester_id BAUT only. Identifier for ""token_requester"". Example: ""40010030273"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""auth"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# auth example: { ""act_type"": ""AU"", ""amount"": ""-77.00"", ""auth_id"": ""12303090"", ""balance_id"": ""20211"", ""billing_amt"": ""77"", ""billing_curr_code"": ""840"", ""cad"": ""12534"", ""card_not_present"": ""N"", ""client_id"": ""264539"", ""currency"": ""840"", ""local_currency"": ""840"", ""mcc"": ""4814"", ""merchant_location"": ""PERRY, GA"", ""merchant_name"": ""AT&T RNCP 136300"", ""merchant_number"": ""000844017654881"", ""mti"": ""110"", ""network"": ""M"", ""open_to_buy"": ""-7.58"", ""original_auth_id"": ""0"", ""otype"": ""A"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""00"", ""sign_amount"": ""-"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_requester_id"": ""50110030273"", ""token_type"": ""Apple Inc."", ""type"": ""auth"" } Table of Contents Fields Example "
242,docs.galileo-ft.com/pro/reference/api-reference-events-api-about-events-api-security,"Security Based on the Content-Type of the request, which is configured according to your request, validation involves either a JWT (JSON web token) or a computed HMAC signature. Both involve use of a shared-secret key but have a number of differences that should be considered. Similarities Both HMAC and JWT require that you configure a shared secret with Galileo. Both use the non-standard Encryption-Type header, which specifies the underlying algorithm used. Both have a value of galileo for the standard UserID header. Differences HMAC is used for Content-Type: application/x-www-form-urlencoded requests, whereas JWT is used for Content-Type: application/json. Validation for requests that use HMAC is done using the non-standard Signature header, whereas those that use JWT use the standard Authorization header. JWT Validation The alternative approach (as shown in the Differences section) is to validate the JWT. For example, the request might look something like this: HTTPPOST /Authorization HTTP/1.1 Host: localhost:3150 X-Request-ID: 92c341e2-8b50-45bb-805c-8d0aa76124b8 Encryption-Type: JWT-HS256 Accept-Encoding: gzip, deflate Content-Length: 380 Accept: */* User-Agent: python-requests/2.9.1 Connection: keep-alive Date: 20201110:163953UTC User-ID: galileo Content-Type: application/json Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnYWxpbGVvIiwiaWF0IjoxNjA1MDUxNTkzLCJleHAiOjE2MDUwNTE1OTZ9.jjHsPgAOZc13EGAGeqVHVHH0Nu_ajE5XpDcbDYmS1GI {  ""balance"": ""195.70"",  ""merch_name"": ""Target 2400 South 200 West"",  ""network"": ""M"",  ""timestamp"": ""20101108:201512UTC"",  ""cur_code"": ""840"",  ""tran_type"": 5,  ""prn"": ""155174792582"",  ""prod_id"": 5042,  ""amount"": -8.95,  ""blank"": null,  ""mcc"": ""4678"",  ""merch_num"": ""321654321654"",  ""prog_id"": 511,  ""type"": ""auth"",  ""id"": ""M.auth.2994428"",  ""tran_id"": ""2994428"",  ""merch_loc"": ""Salt Lake City, UT"" } Again, the implementation is language/library dependent, but it might look something like this if you use Python: Pythonimport jwt # Shared with Galileo secret_key = 'wow_i_should_encrypt_this' # This library wants us to ignore the 'Bearer' part, as we should token = request.headers['Authorization'].split(' ')[1] try:  jwt.decode(   token,   secret_key,   issuer=request.headers['User-ID'],   algorithms=['HS256'] # Won't change for JWT  ) except jwt.ExpiredSignatureError:  print('Oh no, the JWT is expired!')  raise except jwt.DecodeError:  print(""Oh no, this request probably isn't from Galileo!"")  raise HMAC validation For example, a request that looks similar to the following: HTTPPOST /Authorization HTTP/1.1 Host: localhost:3150 X-Request-ID: 234dd0dc-8e44-4311-b334-961b1e058b72 Encryption-Type: HMAC-SHA256 Accept-Encoding: gzip, deflate Content-Length: 424 Accept: */* User-Agent: python-requests/2.9.1 Connection: keep-alive Signature: b0+KPPtDyvuWdx55QJ+5YQq0K0UkXPurk9cRMHFXLSc= Date: 20201110:161601UTC User-ID: galileo Content-Type: application/x-www-form-urlencoded token_type=Apple+Inc.&settle_amt=20.00&auth_id=18056167&auth_network=M&local_surcharge_amt=2.00&merch_name=Arbys+1532&merchant=Arbys+1532+Rochester+MN&de39=00&billing_amt=30.00&original_auth_id=5&mcc=5814&settle_surcharge_amt=2.50&billing_curr_code=666&merch_num=945000153210000&auth_tran_type=5&settle_curr_code=555&local_curr_code=444&merch_loc=Rochester%2C+MN&card_not_present=N&amount=30.00&local_amt=10.00&sign_amount=- Create a dictionary/hash map using the header field of the request: Pythonsignature_data = {  'Content-Length': request['Content-Length'],  'Encryption-Type': request['Encryption-Type'],  'User-ID': request['User-ID'],  'Content-Type': request['Content-Type'],  'Date': request['date'] } Add the values from the form data in the request body to the hash map based on their key. With a properly parsed body, you might be able to do something like this: Pythonfor field_key, field_value in request_body.items():  signature_data[field_key] = field_value or more explicitly: Pythonsignature_data['token_type'] = 'Apple Inc.' signature_data['settle_amt'] = '20.00' ... for this simple case, assuming that you've parsed the form data into some sort of dictionary/hashmap, Sort the hashmap, by key, alphabetically. For example, your map contains something like this: Pythonsignature_data = {  'Content-Type': 'application/x-www-form-urlencoded',  'Encryption-Type': 'HMAC-SHA256',  'billing_amt': '30.00',  'token_type': 'Apple Inc.'  } Notice that billing_amt comes after Content-Type, even though b comes before c in the English alphabet. In short, the set of upper-case letters comes before the set of lower-case letters. Compute the string: Pythonsignature_string = '' for key in signature_data:  signature_string += key + '|' + base64encode(signature_data[key]) Compute the HMAC-SHA256 signature over this string, using the shared secret key. The specifics of this are language dependent based on the library used, among other considerations, but in Python it might look something like this: Pythonimport base64 import hashlib import hmac # Shared with Galileo secret_key = 'wow_i_should_encrypt_this' signature = base64.b64encode(  hmac.new(   secret_key,   signature_string,   hashlib.sha256  ).digest(), ) if signature != request.headers['Signature']:  print('Oh no!') If you are having problems with this verification, ensure that all capitalization, whitespace, and other factors are maintained when computing the signature. Additionally, some HTTP libraries change the D in User-ID to look like User-Id, for instance. The easiest way to validate these things is to obtain a raw version of the request and ensure that nothing has changed from the time it was received over the network socket to the time it made it into your code. "
244,docs.galileo-ft.com/pro/docs/international-transaction-visa-simulation,"International Transaction, Visa Simulation A cardholder with a U.S. account makes an international purchase for $23.50. When simulating an international transaction, the simulator adds an international transaction fee to the authorization amount, if the ITC fee is configured. However, that fee is not included in the settlement by the simulator. Likewise, the simulator cannot settle for a different amount than the authorization, as is often the case with international transactions. For examples from Production, see Scenario 13: International Authorization and Scenario 14: International Reversal. The simulator also cannot accept a value for currencyCode that is different from the currency of the account. For example, if the account is based in the United States, you can leave currencyCode blank, because it defaults to 840 (U.S. dollar). On the other hand, if you are simulating transactions for Mexican accounts, you must pass currencyCode: 484 (Mexican peso). In all cases, if you specify a code that is different from the account's currency code, you will get an error. If you populate settleAmount, settleCurrencyCode, cardBillingAmt, or cardBillingCurrencyCode, those values will be passed through in the authorization request but they do not affect the amount for authorizations or settlements. The simulator cannot convert amounts from one currency to another. Authorization Call Create Simulated Card Authorization with these parameters. ParameterValueaccountNoPRN, PAN or CADamount23.50associationvisamerchantNameMercado Las Americasmcc5411transType10 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.517,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 9999  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""20371789-d323-4a08-b601-bd8ee0d45e27""  },  ""system_timestamp"": ""2022-10-20 16:41:09"",  ""rtoken"": ""2f035169-4afc-425e-8fba-ec0b7aa6b6fe"" } Capture the auth_id for later use. View the authorization Call Get Authorization History to see the authorization. The amount includes the international fee, whereas local_amt does not. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.058,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""9999"",     ""details"": ""Mercado Las Americas LT LAKE CITY UTUS"",     ""details_formatted"": ""MERCADO LAS AMERICAS, LT LAKE CITY, UT"",     ""amount"": ""-24.21"",     ""timestamp"": ""2022-10-20 16:41:09"",     ""type"": ""A"",     ""mcc"": ""5411"",     ""merchant_id"": ""4tJAtqkbhEE8h8u"",     ""acq_id"": ""838547"",     ""terminal_id"": ""62578819"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""V"",     ""local_amt"": ""000000002350"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""7e9c2ace-7520-4b81-ba71-934ec80d603a""  },  ""system_timestamp"": ""2022-10-20 16:41:52"",  ""rtoken"": ""b382febf-1747-4fb1-8ba2-8288248d6780"" } Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id from the authorization responseaccountNoPRN, PAN or CADassociationvisaamountblank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 5.882,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 1007  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""b93b15f2-52ce-4d66-ae9e-ec3803c8883a""  },  ""system_timestamp"": ""2022-10-21 09:24:06"",  ""rtoken"": ""fc884d21-7774-4386-9ec4-b266f204dd06"" } Transactions created Call Get All Transaction History to see the ledger entries in reverse chronological order. The settlement does not include the international fee. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Mercado Las Americas, LT LAKE CITY, UTUS"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-10-20 16:45:30"",     ""amt"": -23.5,     ""source_id"": ""9999"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VSA"",     ""arn"": ""18385472293893683936836"",     ""merchant_id"": ""4tJAtqkbhEE8h8u"",     ""external_trans_id"": """",     ""calculated_balance"": 976.50,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-20 16:41:09"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""MERCADO LAS AMERICAS, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""9999"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Mercado Las Americas, LT LAKE CITY, UTUS"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-10-20 16:45:30"",     ""amt"": 24.21,     ""source_id"": ""9999"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""BVA"",     ""arn"": ""18385472293893683936836"",     ""merchant_id"": ""4tJAtqkbhEE8h8u"",     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-20 16:41:09"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""MERCADO LAS AMERICAS, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""9999"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Mercado Las Americas, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-20 16:41:09"",     ""amt"": -24.21,     ""source_id"": ""9999"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VIA"",     ""arn"": """",     ""merchant_id"": ""4tJAtqkbhEE8h8u"",     ""external_trans_id"": """",     ""calculated_balance"": 976.50,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-20 16:41:09"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""MERCADO LAS AMERICAS, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""9999"",     ""local_amt"": 23.5,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": 999102163165"",     ""mcc_code"": ""5411"",     ""credit_ind"": ""Y""    } ] Updated 4 months ago Table of Contents Authorization View the authorization Settlement Transactions created "
245,docs.galileo-ft.com/pro/reference/post/getbillpayhistory,Get Bill Payment History See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
246,docs.galileo-ft.com/pro/reference/api-reference-events-api-note,"note Code — NOTE Event trigger — A note is added to the account. Processes — These processes contain the event trigger: Program API endpoints: Add Customer Note Add Account for an overdraft account Modify Status Get Ingo Customer ID errors Charge Off Account success Expire Authorization success Reset Card PIN Fail Count with notate: 1 Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id The balance ID, also called the galileo_account_number. Example: ""20211"" date X Effective date-time for the note. Format: YYYY-MM-DD hh:mm:ss Example: ""2023-03-22 19:34:55"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""NOTE"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id The product ID of the account. Example: ""1701"" prog_id The program ID of the account. Example: ""305"" text X Text of the note. Example: ""Cardholder cancels dispute."" type X The name of this event: ""note"" user X Name of the user who created the note. Example: ""Jane Richards"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# note example: { ""balance_id"": ""20211"", ""date"": ""2023-03-22 19:34:55"", ""msg_event_id"": ""243693"", ""msg_id"": ""NOTE"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""text"": ""Cardholder cancels dispute."", ""type"": ""note"", ""user"": ""Jane Richards"" } Table of Contents Fields Example "
247,docs.galileo-ft.com/pro/reference/lending/post/createloanpayment,"Create Loan Payment Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1203-01The subProductId is invalid or does not exist.1203-02The loanId is invalid or does not exist.1203-03The paymentSource value is invalid. Please refer to Galileo API documentation.1203-04The payment amount exceeds the total payoff amount of the loan.1203-05This loan is not active currently, and does not allow payments.LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
248,docs.galileo-ft.com/pro/reference/post/removebiller,Remove Biller The table below lists status codes that apply to this specific endpoint. Status CodeCode Description486-01Biller not foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
249,docs.galileo-ft.com/pro/reference/api-reference-events-api-sched-billpay-fail,"sched_billpay_fail Code — BSPF Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" ext_trans_id External transaction ID. Example: ""1234-abcdefg"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BSPF"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""sched_billpay_fail"" Example JSON# sched_billpay_fail example: { ""act_type"": ""AD"", ""amount"": ""63.21"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""ext_trans_id"": ""1234-abcdefg"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BSPF"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""sched_billpay_fail"" } Table of Contents Fields Example "
250,docs.galileo-ft.com/pro/reference/record-set-paging,"Record-Set Pagination Set the MXRPG provider parameter to increase the maximum number of entries per page or set NOPGE to retrieve all records in one page, irrespective of MXRPG. Each response includes: total_record_count — Total number of records found within the search parameters number_of_pages — Number of pages available page — Current page being returned. To request different pages, pass the desired page number in the page parameter. "
251,docs.galileo-ft.com/pro/reference/post/createpayment,"Create Payment Load limit and velocity response If the payment violates load or velocity limits, this endpoint returns status: 26 with limit_error, limit_id, and limit_response_code values. Use the limit_id for troubleshooting the load and velocity configuration. The limit_response_code values are enumerated in the Limit Response Codes table. Consult the Creating a Payment guide for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description408-01Success -- partial limit violationLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
252,docs.galileo-ft.com/pro/reference/post/createbulkcardorder,Create Bulk Card Order The table below lists status codes that apply to this specific endpoint. Status CodeCode Description427-01Invalid or unrecognized location ID427-02Invalid or unauthorized product IDLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
253,docs.galileo-ft.com/pro/reference/api-reference-de022-codes,"DE022 Codes Positions 1–2 In the RDFs these codes are in the POS ENTRY MODE field. CodeDescription00Unspecified01Manual02Contactless transaction originated using a mobile device emulating a magnetic-stripe read (magnetic-stripe emulation). Transaction may or may not be tokenized.03Bar code04OCR05Contact-chip transaction originated using chip-data rules.06Manual (key-entered)07Contactless chip transaction originated using chip-data rules. Transaction may or may not be tokenized.08Reserved for ISO use09PAN entry via electronic commerce, including remote chip (for chip-secured remote-payment transactions).10Credentials on file11–60Reserved for ISO use61–78Reserved for national use79Chip card or chip-capable terminal was unable to process the transaction using the data on the chip or magnetic stripe; the PAN was entered manually or the acquirer is not certified to process the value 80.80Chip card or chip-capable terminal was unable to process the transaction using the data on the chip; the PAN was entered via magnetic stripe. The full track data was read from the data encoded on the card and transmitted within the authorization request on Track 2 data (DE035) or Track 1 data (DE045) without alteration or truncation.81Manual PAN entry via electronic commerce.82Auto PAN entry via server (issuer, acquirer, or third-party vendor system).83–89Reserved for private use90Full magnetic stripe read and exact content of Track 1 and Track 2 is included (CVV check is possible). The Common AID must be present on the chip, which may reside in a mobile device or a card, and full chip data will be present in the transaction. Transaction may or may not be tokenized.91Contactless chip transaction originated using magnetic stripe data (MSD). Transaction may or may not be tokenized.92–94Reserved for private use95Integrated circuit card, CVV data may be unreliable due to absence of track data or failure to meet other requirements.96Stored value from pre-registered checkout service97–99Reserved for private use. Position 3 In the RDFs this code is in the PIN ENTRY CAPABILITY field. CodeDescription0Unspecified1PIN entry capability2No PIN entry capability6PIN pad inoperative8Terminal has PIN entry capability but PIN pad is out of service9PIN verified by terminal deviceTable of Contents Positions 1–2 Position 3 "
254,docs.galileo-ft.com/pro/docs/authorization-expiry-simulation,"Authorization Expiry Simulation A cardholder makes a $35 purchase, but the merchant never settles the transaction. In Production, the authorization would expire after the configured number of days. In CV, you must use the Expire Authorization endpoint to achieve the same result. Authorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount35associationvisa or mc_authmerchantNameCentral Clothiermcc5651transType1 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.882,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 9595  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""68fffcfe-33a6-44e8-b40b-f36ac2ff22e2""  },  ""system_timestamp"": ""2022-10-11 15:28:28"",  ""rtoken"": ""58fce0db-d300-46e7-a974-330401ef6ede"" } Capture the auth_id for later use. Expiry Call Expire Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADauthIdauth_id from the previous authorization JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.56,  ""response_data"": {},  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""3a61ae1a-a01b-485c-90f1-c74fab4d7ba3""  },  ""system_timestamp"": ""2022-10-11 15:29:59"",  ""rtoken"": ""67128c07-624f-4bc0-8b02-90831dcd5414"" } Transactions created Call Get All Transaction History to see the two ledger entries: JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""VX"",     ""act_type_description"": ""Visa Expired Auth"",     ""post_ts"": ""2022-10-11 15:29:59"",     ""amt"": 35,     ""source_id"": ""9595"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VXA"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": null,     ""formatted_merchant_desc"": """",     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Clothier, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-11 15:28:28"",     ""amt"": -35,     ""source_id"": ""9595"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VIA"",     ""arn"": """",     ""merchant_id"": ""XWVaBZHQBw6bdje"",     ""external_trans_id"": """",     ""calculated_balance"": 965,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:28:28"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL CLOTHIER, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""9595"",     ""local_amt"": 35,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5651"",     ""credit_ind"": ""Y""    } ] Updated 4 months ago Table of Contents Authorization Expiry Transactions created "
255,docs.galileo-ft.com/pro/reference/api-reference-events-api-greendot-auth-commit,"greendot_auth_commit Code — GDAC Event trigger — Galileo commits a Green Dot transaction. Processes — These processes contain the event trigger: Galileo receives a Green Dot card load after it was authorized. Galileo receives a Green Dot direct deposit. Fields All fields are strings. Your field names may vary. Field Required Description act_type X For all card loads the activity type is ""PM"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" confirmation_id X A confirmation ID for the Green Dot transaction. Example: ""460839-0147-POST"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X A description for the transaction. Example: ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"" ext_payment_type X Green Dot payment type. Example: ""1"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDAC"" open_to_buy X The available balance to spend. Example: ""500.00"" otype X See Transaction Types for possible values. Example: ""W"" partner X Green Dot partner name. Example: ""InComm"" pmt_id X Galileo-generated identifier for this payment. Example: ""7971383"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" retail_chain X Retail chain name. Example: ""7-Eleven"" retail_sale_transaction_key X Transaction ID for the retail sale. Example: ""1028340657"" store_address1 X Store address line 1. Example: ""3130 Gulf Bay Blvd"" store_address2 X Store address line 2. Example: ""Ste 2"" store_city X Store city. Example: ""Clearwater"" store_county X Store county. Example: ""Pinellas"" store_latitude X Store latitude: Example: ""27.96103000"" store_longitude X Store longitude. Example: ""-82.70717000"" store_name X Store name. Example: ""7-Eleven"" store_number X Store number. Example: ""40333"" store_state X Store state. Example: ""FL"" store_transaction_date X Store transaction date-time. Format: MM/DD/YYYY hh:mm:ss Example: ""11/23/2020 18:04:05"" store_zipcode X Store postal code. Example: ""33759"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""greendot_auth_commit"" Example JSON# greendot_auth_commit example: { ""act_type"": ""PM"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""confirmation_id"": ""460839-0147-POST"", ""credit_balance"": ""325.00"", ""description"": ""POSCash Swipe Reload - Rite Aid 731 Wilmington DE"", ""ext_payment_type"": ""1"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDAC"", ""open_to_buy"": ""500.00"", ""otype"": ""W"", ""partner"": ""InComm"", ""pmt_id"": ""7971383"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""retail_chain"": ""7-Eleven"", ""retail_sale_transaction_key"": ""1028340657"", ""store_address1"": ""3130 Gulf To Bay Blvd"", ""store_address2"": ""Ste 2"", ""store_city"": ""Clearwater"", ""store_county"": ""Pinellas"", ""store_latitude"": ""27.96103000"", ""store_longitude"": ""-82.70717000"", ""store_name"": ""7-Eleven"", ""store_number"": ""40333"", ""store_state"": ""FL"", ""store_transaction_date"": ""11/23/2020 18:04:05"", ""store_zipcode"": ""33759"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""greendot_auth_commit"" } Table of Contents Fields Example "
256,docs.galileo-ft.com/pro/changelog/september-2022,"September 2022 Real-Time Funding documentation Galileo offers a new product, Real-Time Funding (RTF), which is a simple way to set up a central account that supplies funds to cards at the time of authorization. About Real-Time Funding — Explanation of the benefits and the underlying processes of Real-Time Funding Creating Real-Time Funding Accounts — How to set up and create RTF funding and RTF spending accounts Testing Real-Time Funding in CV — How to test RTF funding and RTF spending accounts in CV Real-Time Funding Transaction Examples — Examples of how RTF transactions appear in the ledger New simulated transaction parameters The Create Simulated Card Authorization endpoint has new input parameters to help you simulate a variety of card transactions such as preauths, completions and reversals. You will need to contact Galileo for setup before you can use these new parameters. Skipping U.S. address validation When using an enrollment endpoint to enroll a user with a non-U.S. address, you can prevent U.S. address validation by passing a non _US value such as es_MX, es_CO, or en_CA for locale. New optional field for ACRT To the ACRT: ach_return event message you can now add ach_trans_id to help tie the event back to the original ACH transaction. Subsidized transactions To the Authorization Controller API guide we added a note about one use case for real-time transfers: subsidized transactions. International characters We now support the Latin-9 ISO-8859-15 character set in name and address input parameters for the Program API. See International characters in Special Characters for details. Removed parameters From the Disputes at Galileo guide we removed the table of product parameters at the end of the guide because those parameters are used only for legacy setups. Subsidized transactions In the Authorization Controller API guide we added a note about using real-time transfers to subsidize (partially pay) authorization amounts from selected merchants. New guide We’ve published a guide about Galileo’s Account Holder Refund product which explains how to automatically issue a paper check to return remaining funds to an account holder once the account is canceled. Clarification on the id parameter In the Customer ID Verification (KYC/CIP) guide, we clarified that when using Galileo's integrated ID verification process, the SSN or SIN must be passed in the id parameter instead of the id2 parameter. Galileo does not check for duplicates in the id2 parameter, and id2 values are not masked in the RDFs. We have also deprecated the SSNLV product parameter: VLDLV should be set instead. "
257,docs.galileo-ft.com/pro/reference/api-reference-events-api-account-closed,"account_closed Code — ACCL Event trigger — The account status is changed to one of these statuses: C — Closed Z — Closed without refund Processes — These processes contain the event trigger: Account closure on the Account Info page in the Customer Service Tool Some charge-offs in the Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description account_status X See Account Statuses for possible values. Example: ""N"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ACCL"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""account_closed"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# account_closed example: { ""account_status"": ""N"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""ACCL"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""account_closed"" } Table of Contents Fields Example "
258,docs.galileo-ft.com/instant/docs/updating-cardholder-information,"Updating Cardholder Information While some cardholder information, such as id, is immutable and may not be changed, the following cardholder information may be updated: address email mobile shipping_address How to update cardholder information Step 1: OTP Updating cardholder information presents significant fraud risks. To address these risks, Galileo requires all cardholder updates to be preceded by a one-time password (OTP) to verify that the change is initiated by the customer and not a fraudster. For example, before the shipping_address may be updated, an OTP must be sent to the cardholder via SMS or email to ensure that the customer is aware of the change. Galileo does not offer an OTP solution. You must build this solution yourself or use a third party. Step 2: API request After you have collected the information to be updated, use the API to update the cardholder. Keep in mind that none of the parameters is required, i.e., you may update a single property and exclude the others. A 204 response means the update was successful.Updated over 2 years ago Table of Contents How to update cardholder information Step 1: OTP Step 2: API request "
259,docs.galileo-ft.com/pro/docs/maximizing-customer-activation-rates,"Maximizing Customer Activation Rates To give your customers a fast and easy onboarding experience, and to help you meet your business goals, Galileo offers products and features that minimize the friction between creating the account, issuing the card, funding the account, and spending. Activation is the complete account setup process that goes beyond just activating the card. Successful activation results in an engaged customer with a virtual or physical card and funds in their account. Customer engagement after account creation You already know that maximizing customer card activation and funding also maximizes spending rates. The typical steps to take a customer from account creation to spending are: You create the account. The customer activates the card. The customer deposits funds into the account. The customer uses the card to make purchases. It is no surprise that the biggest losses in customer engagement occur: Between account creation and card activation Between card activation and depositing funds into the account With these engagement points in mind, Galileo has developed products and features to guide your customers through the process so that they can activate, fund, and start spending from a new account as quickly as possible. Your activation strategy To support your customer activation goals, Galileo can help you minimize barriers between account creation and spending with: Immediate card activation Funding at account creation Spending and engagement incentives The following sections describe how you can build a product that your customers can fund and start spending from right away. Immediate card activation For immediate card activation, you can offer your customers a virtual card product. With a virtual card product, a customer has access to the card at account creation, and can start spending as soon as the account is funded. Strategies for virtual card products with immediate activation are listed below. For details, you can review these with a solutions architect at Galileo. Digital First — Issue a physical card and immediately provide access to a digital version of the physical card. The customer can start using the digital card to make purchases and later receives a physical card in the mail. Setting up a Digital First product in conjunction with funding at account creation ensures that you only send a physical card to customers who have funded their account. See Digital First cards in the Choose a Card Strategy guide for more information. Virtual Only — Issue a virtual card at account creation without offering a physical card. Virtual First — Issue a virtual card at account creation, and give your customers the option to earn a physical card. If the customer meets your requirements for a physical card, you perform a product switch and a physical card is issued. For more information, see Virtual cards in the Choose a Card Strategy guide, and see the Switching Products guide. If physical cards are a better fit for your business, you may consider offering instant-issue cards. Instant-issue cards are bulk-order physical cards that can be preloaded with funds so that customers can have a card and start spending right away, without waiting for a card in the mail. See Instant-issue cards in the Choose a Card Strategy guide, and in particular, see Encourage potential customers to try your product for details about how this works as an activation strategy. Funding at account creation To maximize account funding rates, you can give your customers the opportunity or requirement to fund a new account at account creation. Some options are: Direct deposit from a card — You can employ a third-party service that lets customers deposit funds using a debit card. Direct deposit from paychecks — You can also encourage your customers to set up direct deposit from paychecks into their account. ACH float — Send an outgoing ACH debit request to an external account and make a portion of the funds available immediately. There are risks associated with this option, but with the right risk management strategies in place, it can drive user activation. Spending and engagement incentives To incentivize spending after the card is activated and funded, you may consider offering rewards for spending and engagement. Some examples are: Cashback bonus — You can offer cash bonuses for account milestones, such as setting up direct deposit or spending a certain amount over a specified period. Customized card art — When customers meet your requirements for a physical card, you can offer card art as an additional perk. You may present your customers with different backgrounds or images. Upgrade to metal cards — Depending on your emboss vendor you can offer metal cards to your most engaged customers to encourage continual usage. You can also offer other novel materials such as bamboo or wood. Gamified incentives — Gamified bonuses, like rewards points, cash back and card upgrade milestones can motivate your customers to keep coming back to your product. Referral incentives — You may incentivize referrals by offering a bonus to both your existing customer and a referred friend. A cash bonus or stock encourages the referred customer to start engaging with your product. You can talk to your Galileo representative for more information about spending and engagement incentives.Updated 7 months ago Table of Contents Customer engagement after account creation Your activation strategy Immediate card activation Funding at account creation Spending and engagement incentives "
260,docs.galileo-ft.com/pro/reference/post/modifyondemandalertstatus,Modify On-Demand Alert Status The table below lists status codes that apply to this specific endpoint. Status CodeCode Description476-01Invalid verification PIN476-02Account not enrolled for on demand alerts476-03Account is already registered for on demand alerts476-04Current verification PIN is expired476-05Verification PIN does not match the PIN on file476-06Account has no mobile phone on file476-07Mobile phone does not match the number on file476-08Unknown action type or action is not currently supportedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
261,docs.galileo-ft.com/pro/docs/digital-first-program,"Setup for Digital First This guide describes developer implementation for the Digital First product. For general information, see Digital First cards in the Choose a Card Strategy guide. Prior setup You must provide a digital card template to Galileo, as shown in the Design a Card guide: For cards that are provisioned to mobile wallets, see Tokenized card design. For other cards, see Digital card design. Creating the card account For new customers, use the Create Account endpoint. For existing customers, use the Add Account endpoint. The sequence of events for card creation is slightly different for Digital First cards than for conventional cards. You must also arrange with Galileo to receive the event webhooks: You call Create Account or Add Account. Galileo creates the account and card records. Because the card is active upon creation, Galileo sends the BACT: card_activated event webhook. The emboss process places an emboss record in a file to send to the embosser. This process runs once per day. When the emboss record is placed in the file, Galileo sends the SHIP: card_shipped event webhook. 📘NoteWhen using the Create Account endpoint for a Digital First product, the CAPP: app_completed event webhook is not sent. Protecting the physical card Because the card is in an active state upon creation, there is a risk of the physical card being intercepted and used while in transit to the cardholder. To prevent the physical card from being used before it reaches the cardholder, set a block when the account is created, and then when the cardholder sets the PIN for the physical card, remove the block. (This type of block does not prevent the account from receiving deposits.) At the time of account creation, call the Set Account Feature endpoint. According to your use case, choose one of two types of block: If you do not provide your cardholders with the PAN immediately, set Feature 20 so that the physical card cannot be used online or at physical points of sale. However, push-provisioning a card to a mobile wallet and mobile wallet transactions are permitted, as well as card loads. featureType: 20 featureValue: Y If you provide the PAN to your cardholders to use immediately, set Feature 21, which prevents the physical card from being used at physical points of sale but does not block card loads. This setting permits card-not-present and mobile wallet transactions. featureType: 21 featureValue: Y 📘NoteAccount Features 20 and 21 are mutually exclusive—only one can be set to Y at a time. Your next steps depend on how the PIN was set: If your cardholders use the IVR to set the PIN, Feature 20 or 21 will be automatically set to N, and you will receive the PINC: PIN_changed event. Your IVR process must specifically be configured for Digital First for this automation to work. If your cardholders use another method besides the IVR to set the PIN, you will receive notification of the PIN set through the Account Events webhook, by arrangement with Galileo. When you receive notification that the PIN has been set, call the Set Account Feature endpoint again with these parameters, depending on which one you set previously: featureType: 20 or featureType: 21 featureValue: N Pausing the emboss Depending on your business requirements, you may want to delay embossing a card until you know that the cardholder intends to continue with the account. For example, you can prevent a card from being embossed in the case that the cardholder cancels the account shortly after signing up for it. Immediately after creating the account with the Create Account endpoint, call Set Account Feature with these parameters: featureType: 30 featureValue: Y startDate: as desired; default is current date-time endDate: as desired; default is 3000-01-01 You can set the end date to a predetermined number of hours from the current time, or you can accept the default of the year 3000 (which is ""never""). To resume the emboss process for the card, you can let the feature expire, or you can call Set Account Feature again to set feature type 30 to N. Presenting the digital card Choose one of these options: To provision the digital card to a mobile wallet, follow the Setup for Mobile Wallets guide. To retrieve a digital image of the physical card, see Digital card image procedure in the Retrieving Card Information guide. Lost or stolen Digital First cards With cards in the Digital First program, the lost/stolen process is the same as with other cards, with one variation—the physical replacement card is activated at the same time it is created, and then it is sent to the embosser. The digital version of the card is created at the same time, which can be used until the physical card arrives. When the lost or stolen card is in a mobile wallet, the replacement card is not automatically updated in the wallet—the cardholder must input it manually or you can push-provision it. See the Lost, Stolen, or Damaged Cards guide for the default lost/stolen processes. When you report a physical card as lost or stolen, call the Set Account Feature endpoint and set feature 20 or 21, as you did at the time of account creation. When the cardholder sets the PIN for the physical card, remove the block. If a cardholder reports a mobile wallet as lost or stolen, you can call Set Account Feature to set feature 22 to Y, which blocks all mobile wallet transactions but permits card-present and card-not-present transactions. Reissuing Digital First cards When a cardholder reports the physical card as damaged, you can reissue the card using the same reissue process as for other card types: Reissue Card endpoint Modify Status endpoint with type: 12 or type: 19 A reissued Digital First card is not activated upon creation, and so there is no need to set account features to protect the reissued card in transit. No digital version of the reissued card is created, because the existing card is usable in mobile wallets and online until the reissued card is activated. See Activating a Card for more information. When a Digital First card is about to expire, Galileo automatically reissues the card. The number of days before expiration is configurable, with a default of 30 days. There is no need to protect the physical card while in transit and no digital version of the card is created. Galileo setup These internal product parameters must be set at Galileo. ParameterValueDescriptionFEMBOYForces cards to be embossed regardless of card status after account creation.CHITRYSet when the Digital First card is to be provisioned to a mobile wallet.NNEXPYPrevents a new expiration date from being generated by the card-emboss process, so that the digital and physical cards have the same expiry.XAACTYNNActivates both the card and the account immediately after calling the Create Account endpoint. Bypasses the standard account/card setup processes to create a digital card that is active and ready to use immediately.Updated 22 days ago Table of Contents Prior setup Creating the card account Protecting the physical card Pausing the emboss Presenting the digital card Lost or stolen Digital First cards Reissuing Digital First cards Galileo setup "
262,docs.galileo-ft.com/instant/docs/lost-stolen-or-damaged-cards,"Lost, Stolen, or Damaged Cards This section provides instructions to update the status of your cardholders' cards in a variety of situations, including when a card is lost, damaged or stolen. Card statuses While some card statuses are read-only, others may be updated by sending a PUT request. Any PUT requests that attempt to change the status to a read-only value will fail. Available from PUT and GET active inactive lost stolen damaged frozen Only available from GET (read-only) waiting_for_funds embossing shipped expired Final statuses Some statuses put the card into a final state and can no longer be updated. These include the following: lost stolen damaged inactive Use cases for updating a card's status Lost card In the event of a lost card, update the card status to lost. The card is deactivated immediately and a replacement card is shipped. The new card has a new PAN. If the lost card is found, it may not be reactivated, as lost is a final status. Stolen card In the event of a stolen card, update the card status to stolen. The card is deactivated immediately and a new card is shipped. The new card has a new PAN. If the stolen card is recovered, it may not be reactivated, as stolen is a final status. Damaged card In the event of a damaged card, update the card status to damaged. A replacement card is shipped, but the damaged card is not deactivated immediately. The damaged card is deactivated only after the new card is activated. The new card has the same PAN as the damaged card. This allows subscriptions and other recurring expenses to continue uninterrupted by the card replacement. Once a card has been declared damaged, the replacement process can't be stopped, as damaged is a final status. Freeze a card If your cardholder wishes to freeze their card, update the card status to frozen. This action will render the card useless. All transactions will fail as long as the card is frozen. The card may be unfrozen by updating the card status to active. Deactivate a card without a replacement If your cardholder wishes to deactivate their card without receiving a replacement, update the card status to inactive. This action will render the card useless. The card may not be reactivated, as inactive is a final status.Updated over 2 years ago Table of Contents Card statuses Final statuses Use cases for updating a card's status "
263,docs.galileo-ft.com/pro/docs/atm-withdrawal-visa-simulation,"ATM Withdrawal, Visa Simulation A cardholder withdraws $60 from a domestic ATM. The ATM operator charges a $3 fee and the issuer charges $2.50. When simulating ATM fees, you must first set up the fee in your product settings: ATD for domestic and ATI for international. In the authorization request, add the operator fee to amount but do not include your own fee—the simulator will add it automatically. You must also include the PIN for the card. This example is similar to ATM withdrawal in Card Transaction Examples, except that these network codes correspond to the Visa credit network. In Production, an ATM transaction is almost never routed over credit (signature) rails but instead goes over interbank (PIN) or dedicated ATM rails. See Scenario 11: ATM Withdrawal and Scenario 12: ATM Reversal for examples from Production. Authorization Call Create Simulated Card Authorization with these parameters. ParameterValueaccountNoPRN, PAN or CADamount63associationvisamerchantNameNorthern ATMmcc6011specialFunctionsadd_pinpinCard PINtransType11 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.887,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 2222  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""dac933fb-4ef2-4996-9cb1-78e46b5964c5""  },  ""system_timestamp"": ""2022-10-21 08:02:34"",  ""rtoken"": ""2157bc33-9f08-49c4-9e65-47dc195b0c60"" } Capture the auth_id for later use. View the authorization Call Get Authorization History to view the authorization. The amount field contains the original $63 plus the issuer's $2.50 domestic ATM fee, whereas local_amt does not include issuer fees. JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.427,  ""response_data"": {   ""authorizations"": [    {     ""auth_id"": ""2222"",     ""details"": ""NORTHERN ATM    LT LAKE CITY UTUS"",     ""details_formatted"": ""Northern ATM, LT LAKE CITY, UT"",     ""amount"": ""-65.5"",     ""timestamp"": ""2022-10-21 08:02:33"",     ""type"": ""W"",     ""mcc"": ""6011"",     ""merchant_id"": ""XqLDWeYStQw65dQ"",     ""acq_id"": ""826081"",     ""terminal_id"": ""11294228"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""V"",     ""local_amt"": ""000000006300"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ]  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""a841449a-04ec-41a4-a035-b55dc7eedcaf""  },  ""system_timestamp"": ""2022-10-21 08:04:08"",  ""rtoken"": ""443c00e4-3053-48c4-b871-70df19991709"" } Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id from the authorization responseaccountNoPRN, PAN or CADassociationvisaamountblank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 5.546,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 1004  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""032f41dd-677e-41dd-8a2e-0674045ee1e9""  },  ""system_timestamp"": ""2022-10-21 08:07:06"",  ""rtoken"": ""b1c26b71-1d81-4731-8891-2351be6a2651"" } Transactions created Call Get All Transaction History to see the ledger entries in reverse chronological order. When the settlement is posted, the issuer fee is posted separately as an FE (fee) transaction. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Northern ATM, LT LAKE CITY, UTUS"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-10-21 08:07:04"",     ""amt"": -63,     ""source_id"": ""2222"",     ""type"": ""W"",     ""type_description"": """",     ""trans_code"": ""VSW"",     ""arn"": ""08260812294771103711038"",     ""merchant_id"": ""XqLDWeYStQw65dQ"",     ""external_trans_id"": """",     ""calculated_balance"": 934.50,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-21 08:02:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""NORTHERN ATM, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2222"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""6011"",     ""credit_ind"": ""N""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""ATM Domestic Fee"",     ""act_type"": ""FE"",     ""act_type_description"": ""Fee"",     ""post_ts"": ""2022-10-21 08:07:04"",     ""amt"": -2.5,     ""source_id"": ""8888"",     ""type"": ""0013"",     ""type_description"": ""ATM Domestic Fee"",     ""trans_code"": ""FE0013"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 997.50,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-21 08:07:04"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": null,     ""network_code"": ""?"",     ""auth_id"": ""2222"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Northern ATM, LT LAKE CITY, UTUS"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-10-21 08:07:04"",     ""amt"": 65.5,     ""source_id"": ""2222"",     ""type"": ""W"",     ""type_description"": """",     ""trans_code"": ""BVW"",     ""arn"": ""08260812294771103711038"",     ""merchant_id"": ""XqLDWeYStQw65dQ"",     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-21 08:02:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""NORTHERN ATM, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2222"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""6011"",     ""credit_ind"": ""N""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Northern ATM, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-21 08:02:33"",     ""amt"": -65.5,     ""source_id"": ""2222"",     ""type"": ""W"",     ""type_description"": """",     ""trans_code"": ""VIW"",     ""arn"": """",     ""merchant_id"": ""XqLDWeYStQw65dQ"",     ""external_trans_id"": """",     ""calculated_balance"": 934.50,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-21 08:02:33"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""NORTHERN ATM, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2222"",     ""local_amt"": 63,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""6011"",     ""credit_ind"": ""N""    } Updated 4 months ago Table of Contents Authorization View the authorization Settlement Transactions created "
265,docs.galileo-ft.com/pro/changelog/september-2020,September 2020 New account status You can pass type: 24 in the Modify Status endpoint to move the account to status: K (Suspended). New status code for Create ACH Transaction For Create ACH Transaction we removed status code 26 and replaced it with 429-03. 
266,docs.galileo-ft.com/pro/reference/post/voidcreateaccount,"Void Create Account 📘NoteUse Void Create Account only for instant-issue (prepaid) card accounts. To reverse an account creation for other account types, use the CST.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description412-01Transaction not found412-02Method not allowed according to product configuration412-03Secondary or related cards have been added to account; account cannot be voided412-04Transactions have been performed against the account; account cannot be voided412-05Void not allowed after product changed412-06Void not allowed on accounts with multiple paymentsLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
267,docs.galileo-ft.com/pro/docs/fleet-cards,"Fleet Cards Companies that maintain fleets of vehicles need a reliable way to track and control expenses for their vehicles, such as fuel and repairs. Mastercard offers specialized fleet-card BINs that provide enhanced authorization, clearing and reporting capabilities. Fleet-card issuers can receive data such as driver ID or vehicle ID both at the time of authorization and at settlement. Galileo parses the fleet data that Mastercard provides and then passes it to you so that you can perform detailed expense analysis. There are two kinds of fleet cards: Driver-issued cards — Your customer is a delivery service with a fleet of trucks. They would like to issue fleet cards to individual drivers to buy fuel and maintenance. Depending on the driver's profile, the card can be used for some purchases but not others. For example, some drivers can use their cards at all fuel merchants, repair shops, and parts stores. Other drivers can additionally use their cards for travel expenses such as lodging and meals. Different spending controls can be imposed so that some drivers can spend more than others, depending on their responsibilities. Your customer needs detailed reporting on how funds are spent, such as knowing exactly what portion of a gas-station purchase went toward fuel and how much was spent on accessories. With this data, your customer can better manage their costs and plan for future expansion. Vehicle-issued cards — You are a private security firm with a fleet of armored vehicles and highly trained personnel. You need to bill your clients for fuel and maintenance costs based on mileage. The fleet card remains with the vehicle rather than being issued to individual drivers so that you can track the vehicle's lifecycle and expenses and then bill your clients accordingly. Fleet card data The fleet-card information is divided into levels 2 and 3. Level 2 data Provided at authorization and settlement. Vehicle ID Driver ID To receive level 2 data at the time of authorization, you must consume the Auth API. Level 3 data Provided at settlement. Oil company brand name Purchase time Motor fuel service type Product code Item description Item quantity Item unit of measure Extended item amount Debit or credit indicator Motor fuel information Odometer reading Vehicle number Driver ID Product type code Card acceptor type Card acceptor tax ID Viewing fleet data You get level 2 and level 3 data through these means: Auth API fleet_info object fleet_card_driver_number fleet_card_vehicle_number BAUT: auth / AAAU: auth event messages fleet_card_driver_number fleet_card_vehicle_number Fleet Data CDF, which is expanded settlement data that includes level 2 and 3 data MCC restrictions When you set up your fleet card product, you will determine which MCCs to block and allow. You can determine whether to allow only the fuel-related MCCs or whether to include maintenance MCCs as well. For vehicle-assigned cards, only fuel and maintenance MCCs are allowed. For example, the default product-level settings for a driver-assigned card could include fuel and maintenance, as well as impose per-week spending limits. Then for selected drivers you could add support for lodging and food plus higher spending limits on a per-account basis. See About Account-Level Authorization Controls for more information. Fuel 4468 — Marinas, marine service/supplies 5499 — Miscellaneous food stores: convenience stores, markets, and specialty stores 5541 — Service stations, with or without ancillary services 5542 — Fuel dispenser, automated 5983 — Fuel dealers: coal, fuel oil, liquefied petroleum, wood Maintenance 5013 — Motor vehicle supplies and new parts 5511 — Automobile and truck dealers: sales, service, repairs, parts and leasing 5531 — Auto store, home supply stores 5532 — Automotive tire stores 5533 — Automotive parts, accessories stores 5599 — Miscellaneous automotive, aircraft, and farm equipment dealers, not elsewhere classified 7531 — Automotive body repair shops 7534 — Tire retreading and repair shops 7535 — Automotive paint shops 7538 — Automotive service shops 7542 — Car washes 7549 — Towing services 7692 — Welding repair 7699 — Miscellaneous repair shops and related services Updated 4 months ago Table of Contents Fleet card data Level 2 data Level 3 data Viewing fleet data MCC restrictions "
268,docs.galileo-ft.com/pro/reference/api-reference-events-api-profile-changed,"profile_changed This event is triggered by address, phone, and email changes only when ADRC: addr_chg, PHCH: phone_changed, and ECHG: email_addr_change are not set up. Code — PCHG Event trigger — One of these fields changes: First name, middle name, last name Date of birth Address fields (unless ADRC is set up) Home phone, mobile phone, other phone (unless PHCH is set up) Email (unless ECHG is set up) Process — This process contains the event trigger: Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" firstname X Current first name of the account holder. Example: ""Mary"" lastname X Current last name of the account holder. Example: ""Jones"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PCHG"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""profile_changed"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# profile_changed example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""firstname"": ""Mary"", ""lastname"": ""Jones"", ""msg_event_id"": ""243693"", ""msg_id"": ""PCHG"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""profile_changed"" } Table of Contents Fields Example "
269,docs.galileo-ft.com/pro/reference/dispute/post/createcase,"Create Case Use the Create Case endpoint to initiate a dispute claim. A single claim may contain multiple disputed transactions. Call this endpoint when the account holder initiates a claim by clicking a ""dispute a transaction"" control on your interface. This endpoint returns a case number (caseId) that you pass with all subsequent endpoint calls that are related to this dispute. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1502-1Invalid customerId1502-2customerId or accountNumber returned no cases1502-3Error creating case1502-5Invalid Request:1502-13caseId references a case that is currently locked1502-14Invalid request message-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
270,docs.galileo-ft.com/pro/reference/post/getpendingmerchantcredits,Get Pending Merchant Credits See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
271,docs.galileo-ft.com/pro/reference/api-reference-documents-subfields,"documents Subfields documentStreamrequired string The completed PDF, base64-encoded. Pattern: Base64-encoded string Example: ""JVBERi0xLjQKJcfl9OXwCjEgMCBvYmoKPDwKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL0xlbmd0aCAxMjU4Cj4+CnN0cmVhbQp42s1YW3PTOBR+r+"" identifierrequired string The value from identifierin the Get Doc Requirements response. Pattern: String Example: ""StatementOfDispute"" attachmentCategoryrequired string A category in the validAttachmentCategoryList that was returned by Get Doc Requirements. Pattern: String Example: ""Supporting Documentation"" fileName required string The file name of the PDF. Pattern: String Example: ""StatementOfDispute.pdf"" attachmentLabel required string User-friendly name for the file. Pattern: String Example: ""Statement of Dispute"" Example string for documents ""[{documentStream"":""JVBERi0xLjQKJcfl9OXwCjEgMCBvYmoKPDwKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL0xlbmd0aCAxMjU4Cj4+CnN0cmVhbQp42s1YW3PTOBR+r+"", ""identifier"": ""StatementOfDispute"", ""attachmentCategory"": ""Supporting Documentation"", ""fileName"": ""StatementOfDispute.pdf"", ""attachmentLabel"": ""Statement of Dispute""}] Table of Contents Example string for documents "
272,docs.galileo-ft.com/pro/reference/lending/post/updateloanstatus,"Update Loan Status Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1205-01The loanId is invalid or does not exist1205-02The subProductId is invalid or does not exist1205-03This loan is closed. Transaction is not allowed.1205-04The loan status reason code value is invalidLanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
273,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-status-change,"overdraft_status_change If the new status is frozen or K (suspended), then the ODSK: overdraft_suspended event is also triggered. This event is also triggered when: The number of days in ODPSQ is reached and the account status is changed to Q (delinquent). The status changes from K or Q to N (normal, active) because eligibility requirements have been met. Code — ODSC Event trigger — The overdraft status changes to any new value. Processes — These processes contain the event trigger: Automated process that changes the overdraft status Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODSC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_status_change"" Example JSON# overdraft_status_change example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODSC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_status_change"" } Table of Contents Fields Example "
274,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-buy-now-pay-later,"denied_auth_buy_now_pay_later Code — BNPD Event trigger — Galileo receives advice from Mastercard to notify that the transaction was denied by Mastercard on Galileo’s behalf, because the merchant has opted out of the program. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BNPD"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""denied_auth_buy_now_pay_later"" Example JSON# denied_auth_buy_now_pay_later example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BNPD"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""denied_auth_buy_now_pay_later"" } Table of Contents Fields Example "
276,docs.galileo-ft.com/pro/docs/pin-retrieval-service,"PIN Retrieval Service Follow this procedure to securely retrieve a PIN and present it to a cardholder as a CAPTCHA image. The actual value of the PIN is not exposed to you—only to the cardholder. For compliance reasons, you must not cache the image in any way on the device or browser, nor can you use a proxy server to retrieve the image for the device or browser. The CAPTCHA image will resemble this example: Using the PRS consists of these steps: Galileo sets the PRSEN parameter for the product or program. Galileo configures a provider name for the config parameter and gives it to you. You call the Get Access Token endpoint to retrieve a token for the card. With the token, the browser or mobile app makes an HTTP call to retrieve the CAPTCHA image of the PIN. The CAPTCHA image is presented to the cardholder. Get Access Token call These parameters are required for the Get Access Token call: accountNo — Galileo recommends using the CAD (card_id) or PAN, but the PRN is valid as long as only one card has ever been associated with the account. type — Pass 0 to retrieve a card-related token. The response will contain these fields: token — A case-sensitive alphanumeric string, for example, hpSVyayQScHmhJS6_MVXT1WlsFRQoDJrRu_fi_JlX2Jo2dgg5p expires — The date/time the token expires, formatted as YYYY-MM-DD hh:mm:ss The token has two properties: the expiration (default: 300 seconds) and the maximum times an access token can be used (default: 3). You can change the defaults in your product parameters, as shown in Galileo setup. HTTP request for the CAPTCHA With the token, assemble an HTTP request to retrieve the CAPTCHA, as shown in the example. The URL is an AWS instance that Galileo sets up for each client. Request an AWS URL from Galileo if you do not already have one. These examples are for the CV environment. For Production change the cv in the URL to pd. Texthttps://asset-[clientname].cv.gpsrv.com/asset/pin?token=[token]&config=[config] where: token — The token you retrieved with the Get Access Token call config — Your provider name, as configured by Galileo clientname — Your Galileo system name The asset application retrieves the CAPTCHA image in response to the HTTP call. If the image is not found, a standard HTTP 404 response is returned. For all other errors, such as an expired token, an HTTP 401 response is returned. Presenting the CAPTCHA Embed the URL within a web or mobile app as an HTML image reference, offer the URL as a direct customer-exposed link, or use it in other appropriate contexts. The URL is an AWS instance that Galileo sets up for each client. Request an AWS URL from Galileo if you do not already have one. This example is for the CV environment. For Production change the cv in the URL to pd. HTML<image src=""https://asset-[clientname].cv.gpsrv.com/asset/pin?token=[token]&config=[config]"" alt=""PIN Image"" width=""160"" height=""80"" /> The width and height parameters are currently fixed at 160 and 80 pixels. Galileo setup These internal parameters are set at Galileo, according to your use case. ParameterLevelDescriptionPRSENProgram or productSet to Y to enroll the cardholders of the program or product in PRS.TSECVProgram or productMaximum seconds of access-token validity (default: 300).TUSECProgram or productMaximum times an access token can be used (default: 3).Updated 4 months ago Table of Contents Get Access Token call HTTP request for the CAPTCHA Presenting the CAPTCHA Galileo setup "
277,docs.galileo-ft.com/pro/page/scenario-13-international-authorization,"Scenario 13: International Authorization << Back to the index A debit cardholder purchases $300 worth of goods in a gift shop in Salvador, Brazil. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network is Mastercard Banknet. The authorization and settlement amounts are in dollars, converted from the foreign currency. Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –300.00. Galileo approves the request and places a 300.00 hold on the cardholder account. The available balance is now 700.00. Galileo sends a BAUT: auth webhook. Mastercard sends a batch file with –303.00 as the settlement amount, which is different from the authorization amount because of fluctuations in the currency conversion rate. Galileo backs out the 300.00 hold and posts –303.00 to the account. The available balance is now 697.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampauthauth300.0044440100020210413:115944MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth300444407002021-04-13 11:59:44 MSTSETLsetl303444406972021-04-14 09:11:13 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME300.00-44445004132021 11:59:44 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE303.00-4444SE5444404132021 11:59:4404142021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. The local_amt field contains the sale amount in Brazilian Reals. amtauth_idoriginal_auth_idtypelocal_amttimestamp-30044440A0000001567712021-04-13 11:59:44 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-30344440SE52021-04-13 11:59:442021-04-14 09:11:13 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-30044440AUA4444700Y2021-04-13 11:59:442021-04-13 11:59:44300None0BO544441000NoneNone2021-04-14 09:11:13-30344440SE54444697Y2021-04-13 11:59:442021-04-14 09:11:13 "
278,docs.galileo-ft.com/pro/page/scenario-14-international-reversal,"Scenario 14: International Reversal << Back to the index A debit cardholder purchases $250 worth of goods at a gift shop in Barcelona, Spain. A little while later the cardholder returns one $50 item to the shop. The shop refunds $50 to the cardholder on the card that was used to make the purchase. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network is Mastercard Banknet. The cardholder returned the item before the transaction cleared. The authorization and settlement amounts are in dollars, converted from the foreign currency. Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –250.00. Galileo approves the request and places a 250.00 hold on the cardholder account. The available balance is now 750.00. Galileo sends a BAUT: auth webhook. The merchant sends an authorization reversal for 50.00. Galileo removes 50.00 from the hold. The available balance is now 800.00. Galileo sends an AAAU: auth webhook. Mastercard sends a batch file with –202.00 as the settlement amount, after applying currency conversion to the remaining 200.00. Galileo expires the 50.00 reversal and sends a BEXR: auth_exp_reversal webhook. Galileo backs out the 250.00 hold and posts –202.00 to the account. The available balance is now 798.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth250.0022550100020210414:041846MSTReversalAuth50.004400075020210414:045716MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth250225507502021-04-14 04:18:46 MSTAAAUauth50440008002021-04-14 04:57:16 MSTBEXRauth_exp_reversal50440007502021-04-14 09:06:23 MSTSETLsetl202225507982021-04-14 09:09:57 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME250.00-22555004142021 04:18:4650.00+44005225504142021 04:57:16 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE202.00-2255SE5225504142021 09:09:5704142021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. This table shows both the authorization and the reversal; however, in Production only the most recent transaction is returned. The local_amt field contains the sale amount in Euros. amtauth_idoriginal_auth_idtypelocal_amttimestamp-25022550A0000000237232021-04-14 04:18:465044000R0000000047452021-04-14 04:57:16 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-20222550SE52021-04-14 04:18:462021-04-14 09:09:57 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-25022550AUA2255750Y2021-04-14 04:18:462021-04-14 04:18:465044000AUR4400800Y2021-04-14 04:57:162021-04-14 04:57:16-50NoneNoneEXR4400750NoneNone2021-04-14 09:06:23250NoneNoneBO522551000NoneNone2021-04-14 09:09:57-20222550SE52255798Y2021-04-14 04:18:462021-04-14 09:09:57 "
279,docs.galileo-ft.com/pro/reference/api-reference-events-api-card-expiring,"card_expiring Code — RBEX Event trigger — Today is the expiration date minus the configured number of days. Process — This process contains the event trigger: Internal process that detects which cards will expire. Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" exp_date X The expiration date of the card. Format: MM/DD/YYYY. Example: ""03/14/2023"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""RBEX"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""card_expiring"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# card_expiring example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""exp_date"": ""03/14/2023"", ""msg_event_id"": ""243693"", ""msg_id"": ""RBEX"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""card_expiring"" } Table of Contents Fields Example "
280,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-fallback,"auth_fallback Code — AUFB Event trigger — Galileo processes a transaction after you do not respond to an Auth API webhook within the timeout interval. Process — This process contains the event trigger: Galileo sends an authorization request to your Auth API webhook. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description act_type See Activity Type for possible values. Example: ""VI"" amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_api_request Contents of the Auth API webhook for this transaction. Stringified JSON. auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" fund_pastotb The available balance of the real-time funding account after this transaction takes place. Example: ""24365.90"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""AUFB"" mti ISO 8583 message-type indicator. 4 digits. Example: ""0200"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" otype See Transaction Types for possible values. Example: ""W"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" rules_results Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""auth_fallback"" Example JSON# auth_fallback example: { ""act_type"": ""VI"", ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""AUFB"", ""mti"": ""0200"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""original_auth_id"": ""12303085"", ""otype"": ""W"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""auth_fallback"" } Table of Contents Fields Example "
281,docs.galileo-ft.com/pro/page/scenario-12-atm-reversal,"Scenario 12: ATM Reversal << Back to the index A debit cardholder goes to an ATM and inputs $100 as the withdrawal amount. A bug in the ATM's software causes the authorization to be sent twice but only $100 to be dispensed. The ATM's software detects the duplicate authorization and sends a reversal for $100. The following are true: The initial available balance is $1000. The ATM validates the debit card with a PIN. The network is Allpoint. Sequence of events Events in the same step have the same timestamp. Allpoint sends two authorization requests for –100.00 each. Galileo approves the requests and places two –100.00 holds on the account. The available balance is now 800.00. Galileo sends two BAUT: auth webhooks. Allpoint sends a reversal for 100.00. Galileo posts 100.00 to the account. The available balance is now 900.00. Galileo sends an AAAU: auth webhook. Allpoint sends a batch file that contains both –100.00 withdrawals plus the 100.00 reversal. Galileo backs out both of the 100.00 holds and posts –100.00 to the account twice, and then reverses out the 100.00 credit and posts 100.00 to the account again. The available balance is still 900.00. Galileo sends three SETL: setl webhooks. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthATM100.0055220100020210414:132615MSTAuthATM100.007777090020210414:132619MSTReversalATM100.009966777780020210414:132659MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth100552209002021-04-14 13:26:15 MSTBAUTauth100777708002021-04-14 13:26:19 MSTAAAUauth100996677779002021-04-14 13:26:59 MSTSETLsetl100552209002021-04-15 07:08:28 MSTSETLsetl100777708002021-04-15 07:08:28 MSTSETLsetl100996677779002021-04-15 07:08:29 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME100.00-5522190004142021 13:26:15100.00-77779004142021 13:26:19100.00+99669777704142021 13:26:59 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE100.00-5522ASW552204142021 13:26:1504152021100.00-7777ASW777704142021 13:26:1904152021100.00+9966ASR996604142021 13:26:5904152021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. amtauth_idoriginal_auth_idtypelocal_amttimestamp-10055220W0000000100002021-04-14 13:26:15-10077770W0000000100002021-04-14 13:26:1910099660R0000000100002021-04-14 13:26:59 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-10055220APW2021-04-14 13:26:152021-04-15 07:08:28-10077770APW2021-04-14 13:26:192021-04-15 07:08:2810099660APR2021-04-14 13:26:592021-04-15 07:08:29 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-10055220APW5522900N2021-04-14 13:26:152021-04-14 13:26:15-10077770APW7777800N2021-04-14 13:26:192021-04-14 13:26:1910099667777APR9966900N2021-04-14 13:26:592021-04-14 13:26:59100NoneNoneABW55221000NoneNone2021-04-15 07:08:28100NoneNoneABW77771100NoneNone2021-04-15 07:08:28-10055220ASW55221000N2021-04-14 13:26:152021-04-15 07:08:28-10077770ASW7777900N2021-04-14 13:26:152021-04-15 07:08:28-100NoneNoneABR9966800NoneNone2021-04-15 07:08:2910099667777ASR9966900N2021-04-14 13:26:192021-04-15 07:08:29 "
282,docs.galileo-ft.com/pro/docs/authorization,"Authorization This guide explains authorization in depth. Before reading this guide you should be familiar with the concepts in these guides: About Transactions — A general guide to how transactions are represented in the Galileo system. About Card Transactions — A general overview of how card transactions work, including the phases that a card transaction passes through. For information on the Auth API, see the Authorization Controller API guide. 📘NoteTo see detailed examples of transaction sequences as they appear in the Program API, Events API, Auth API, and RDFs, consult the Card Transaction Scenarios. Authorization and preauthorization An authorization request may be one of two types: authorization or preauthorization. Authorization and preauthorization are similar in that they both request that the issuer approve a transaction amount. They are different in that merchants request authorization when the total sale amount is known and preauthorization when the sale amount is estimated. Because the preauthorization is an estimate, the difference between the preauthorized amount and the final sale amount can vary widely. Some merchants preauthorize an amount that is far higher than the probable sale amount so that they can be guaranteed payment no matter what the total turns out to be. Other merchants preauthorize the known sale amount but anticipate adding costs later. Preauthorizations are typically requested under these circumstances: A gas pump doesn't have the total sale amount until after the gas is dispensed. A car rental agency wants to cover the cost of a delayed return of the car, plus other unforeseeable costs. A hotel knows the cost of the room but doesn't know whether the minibar or other features will be accessed until checkout. A restaurant assumes that a tip will be added to the receipt. An online retailer knows the sale amount of the goods but does not know the shipment amount until after the order is processed at the warehouse. An online retailer preauthorizes $1 to check if the card is valid, and then immediately reverses the preauthorization. Identifying preauthorizations Galileo identifies preauthorizations based on information in the authorization request, and each network uses a different method to identify a preauthorization. Preauthorizations are not differentiated from authorizations in the Authorized Transactions RDF. However, a preauthorization is transaction type L in the Program API and Events API and authorizations are transaction type A, so a preauthorization over Mastercard Banknet rails has the transaction code AUL, over Maestro rails it is DBL and over Visa and Interlink rails it is VIL. For authorizations the codes would be AUA, DBA, and VIA, respectively. See the Transaction Types enumeration for all authorization-related transaction codes. When the purchase amount is known, the merchant sends one of two message types: Completion — Using an advice message type, the merchant informs the issuer of the actual purchase amount. Completions arrive directly through the authorization stream, and then later are followed by a clearing message in the batch file from the network. See Completion in the Settlement guide for more information. Clearing/settlement — The merchant sends a conventional clearing message after a preauthorization instead of a completion. See the Settlement guide for more information. Authorization checks When Galileo receives an authorization or a preauthorization request, it performs checks on the card and its account. According to the results of those checks, Galileo returns a response code to the merchant, indicating either that the request has been approved or denied, and if denied, the reason for the denial. The full list of response codes are in the Authorization Response Codes enumeration. Also consult the Auth API Validation Checks guide for a detailed description of the checks. You can see the response code that Galileo returns in the these places: The response_code field in Authorization Events API webhooks Get All Transaction History endpoint response (deny_code field, for denials only) The AUTHORIZATION RESPONSE field in the Authorized Transactions RDF 📘NoteYou can be involved in the authorization process by using the Authorization Controller API (Auth API), which gives you the ability to override some response codes after Galileo has performed its checks. Contact Galileo for information on implementing the Auth API. Authorization variants Besides authorizations and preauthorizations, you will encounter these variants on authorizations: Upcharges, below Partial authorizations AVS-only checks Bulk authorization Provisioning requests ATMs Balance inquiries Upcharges For some merchant types there is a high likelihood that the clearing amount will be higher than the preauthorization amount, such as with gas pumps and merchants that add a tip after getting preauthorization. For these merchant types an issuer can decide to preauthorize only the requested amount plus a fixed percentage as an upcharge. For example, if a restaurant submits a preauthorization request for $50, the issuer can decide to approve the transaction only if the cardholder account contains the authorization amount plus 20%, or $60. Using this method carries some risk of a negative cardholder experience if, for example, the transaction is declined when the cardholder has $10 cash for the tip and knows there is $50 in the account to cover the bill. In the case of gas stations, some pumps send a preauthorization request for a high anticipated sale amount, whereas others request only $1 to verify that the card is active. An issuer can decide to add a significant upcharge to $1 gas-pump requests; an upcharge of $75 or $100 is not unusual. In the case that both the pump and the issuer have assigned upcharges to the transaction, the upcharge that is highest is used. Partial authorizations Some merchants permit partial authorizations, which means that the issuer can authorize an amount that is less than the amount in an authorization request, and the merchant completes the transaction for only that amount. For example, a cardholder inserts a card into a gas-pump reader. The merchant has configured the pump to request a $75 preauthorization and to accept partial authorizations. The cardholder has $30 in available funds. Rather than deny the preauthorization request for insufficient funds, the issuer authorizes a $30 purchase. The gas pump permits the cardholder to dispense exactly $30 worth of gasoline, then shuts off. Partial authorizations also permit a cardholder to use multiple payment methods at the point of sale. For example, for a $50 purchase a cardholder might first present a $20 gift card, which is authorized for part of the sale price, and then present another card or cash for the remainder. Merchants determine whether they accept partial authorizations, and this decision is communicated in the authorization request. Galileo then indicates the amount of the partial authorization in the authorization approval message and responds with code 10. AVS-only checks Online merchants, both on web sites and in phone apps, often perform an AVS-only check at checkout time to verify that the card is valid and active, and then if the check passes, authorize the full sale amount afterwards. Other AVS-only checks happen when a cardholder adds a card in a mobile wallet as a payment method in an app. The cardholder typically enters an address during checkout, or the information is obtained from the mobile wallet, and the merchant passes the first address line and/or zip code in the request, which is for 0.00. Galileo verifies that the information matches its records and returns a single-letter code to indicate what matched, if anything, along with a response code that indicates whether the card is valid and active. AVS check responses CodeDescriptionYAddress and zip code matchAOnly the address matchesZOnly the zip code matchesNNeither address or zip code matchMGift cardUUnsupportedBAVS not usedCUnrecognized AVS return valueDNo dataRRetry AVS When an AVS-only check is successful, Galileo returns response code 85, which means it was a successful non-financial transaction. This response should not be confused with an 85 that is returned for provisioning requests that enter the yellow path. The AVS score is independent of the response code. It is possible for Galileo to return an N for the AVS check with 85 as the response code, which means that none of the address information matched but the card is otherwise valid. Merchants can decide whether to proceed with the transaction in this case. With small amounts a merchant may decide to continue with the sale. It is also possible for Galileo to return a Y with 05, meaning that the address information matched but the transaction is denied for another reason. After a successful AVS-only check for 0.00, a merchant sends an authorization request for the actual sale amount. There is no identifier to tie the AVS-only check with the subsequent sale-amount authorization. Merchants can also request AVS checks when authorizing a non-zero sale amount: in that case, a successful AVS check is Y and the response code is 00, assuming that the transaction is otherwise valid. When Galileo returns 85 or 00, the transaction is visible in the Authorized Transactions RDF and an auth event webhook is sent, but the approved transaction is not visible in the CST or Program API. Denied AVS checks (05 or other), however, are available in the CST and Program API, and a deny-type event webhook is sent, depending on the reason for the denial. If you do not want AVS checks for your product, such as for gift cards, set the NOAVS product parameter. Bulk authorization Some high-volume online merchants first perform an AVS-only check at purchase time to verify that the card is active. The merchant then sends authorization requests for sale amounts to the networks in bulk, which means that there can be a several-hour delay between the AVS check and the authorization for the sale amount. From the cardholder's perspective the purchase is successful; however, the AVS check was for 0.00, and so the merchant has not yet received an authorization for the actual sale amount. If the merchant attempts to authorize the sale amount and the authorization is denied for insufficient funds, the merchant will likely cancel the transaction. Provisioning requests When a cardholder manually provisions a card to a mobile wallet, the wallet sends an authorization request to Galileo to verify that the card is valid. (With push-provisioning the cardholder is already validated.) These requests are for 0.00 and may or may not have an AVS check with them. Galileo responds with one of these codes: 00 — Green path. Provisioning is approved. 85 — Yellow path. Cardholder must provide additional verification. 05 — Red path. Card cannot be provisioned. These requests are visible in the Authorized Transactions RDF, and Galileo sends the AAAU: auth webhook, by request. For more information on these checks see the Manual provisioning workflow in the Setup for Mobile Wallets guide. ATMs When an ATM sends an authorization request, the request includes all of the fees that are assessed by the ATM operator, the network, and by your program. If, for example, the ATM operator charges $2 per withdrawal and you assess a $3 fee, an authorization request for a $60 withdrawal would be for 65.00. ATM withdrawal requests have transaction type W for both the authorization and the settlement. For example, the transaction code for an ATM withdrawal authorization over Maestro rails is DBW and its settlement is SDW. Balance inquiries With ATMs and with some other purchases, a cardholder can make a balance inquiry so that the current balance is displayed on the ATM screen or is printed on a receipt. These inquiries are visible in the Authorized Transactions RDF, and you can also request that the AABI: bal event be sent. The transaction type for a balance inquiry at an ATM is B (or 10 in the Authorized Transactions RDF) and the amount is 0.00. You can determine how to respond to balance inquiries on a per-MCC basis. For examples see ATM withdrawal in Card Transaction Examples and these other scenarios: Scenario 11. ATM withdrawal Scenario 12: ATM reversal Authorization linkage Some authorization requests need to reference a previous authorization. The previous authorization is linked to the current authorization by a linking identifier. See Linking transactions in the About Transactions guide for an explanation of these identifiers. Linking to a previous authorization is typically done in these scenarios: Reversals — When a merchant reverses out a transaction before it clears, the reversal message contains the ID of the authorization to reverse, whether a full or partial reversal. See Reversals in the Crediting Cardholder Accounts guide for more information. Completions — When a merchant sends a completion, the completion contains the ID of the preauthorization. See Completion in the Settlement guide for more information. Incremental authorizations — The merchant wants to add an amount (or more than one amount) to a previous authorization, so that the amounts are all part of the same authorization. Each incremental authorization contains the authorization ID of the previous increment. See Incremental authorizations, below, for details. Incremental authorizations In some cases the merchant knows part of the sale amount at the time of authorization but must add charges after the original authorization is obtained. If the amount of the additional charge exceeds a certain threshold, the merchant must obtain another authorization. The threshold amount is determined by acquirers and networks and reflects the amount of risk they want to assume for unauthorized amounts. For example, a cardholder may use a ride-share company for a ride that has multiple legs: after arriving at each destination, the cardholder asks to go to another destination. The ride-share app sends incremental authorizations for each leg of the ride, and Galileo replaces the previous hold with a new one for the cumulative amount. The app then sends a single clearing message for all of the rides together. In other cases a merchant knows the sale amount for an item but does not know the shipping charges until a time later than the initial authorization. The merchant then adds a second authorization to the first and clears both authorizations with the same message. For each incremental authorization, Galileo sends a BAUT: auth webhook that contains the auth_id of the previous authorization in the sequence in the original_auth_id field. For examples see the Incremental authorization example in Card Transactions Examples and Scenario 3: Incremental authorizations Authorization expiry A new authorization record in Galileo's databases is considered pending until one of two events happens: settlement/completion or expiry. Settlement and completion are described in the Settlement guide. When you set up your program, you determine how long an authorization remains pending until it expires. You can specify different expiry intervals depending on the authorization amount or the merchant type. For example, you could specify that an authorization at a hotel expires after 30 days, authorizations for small amounts after two days, and general authorizations after seven. Galileo has automated processes that expire an authorization after the specified time. After an authorization is expired in this way, the authorization can no longer be matched with a settlement (which arrives through a settlement batch file) or with a completion (which arrives through the authorization stream). For example, a merchant might get an authorization on the 10th of the month, and that type of authorization is set to expire after seven days. If the merchant or acquirer does not send clearing information to the network before the 17th, the authorization expires in Galileo's database and the purchase amount is returned to the cardholder's available balance. Galileo sends a BEXP: auth_exp webhook. Then, if the merchant tries to clear the transaction after the expiry, Galileo creates a new authorization entry that is immediately backed out and settled. (Because the authorization amount was returned back to the cardholder's available balance, there is a risk that a late-arriving settlement/completion could drive the account negative.) For this type of event you would receive only the SETL: setl webhook. When an authorization is reversed before clearing, both the authorization and reversal are pending until the expiry time elapses. See Reversals in the Crediting Cardholder Accounts guide for more information. International merchants When a merchant obtains an authorization, the amount in the authorization request is the amount in the cardholder account's local currency. For example, if a cardholder who resides in Alabama goes to a gift shop in Rome, and the sale total is 50 Euros, the authorization amount will be expressed in the equivalent number of dollars, according to the exchange rate at the time of the authorization. The amount in the merchant's local currency is communicated in the local_amt field in the Program API and local_currency_amount in the Auth API. You can also request to have this information included in the Authorized Transactions and Posted Transactions RDFs. Card networks typically charge extra for international transactions, and the amount is billed in a separate invoice instead of being included with the authorization amount. Authorizations in the Program API When Galileo sends an authorization response, a record is created that you can retrieve using the Program API. These endpoints return authorization information: Get Authorization History — Returns only unsettled, uncompleted, and unexpired authorizations Get Account Overview — Returns unsettled, uncompleted, and unexpired authorizations in the authorizations object of the response. Get All Transaction History — Returns all transactions: settled, unsettled, unexpired, uncompleted, and completed as well as backouts See Obtaining transaction history via API in the Transaction History guide for the use cases for each endpoint. Authorized Transactions RDF The Authorized Transactions RDF contains activity in the authorization stream during a 24-hour period. You can also request that Galileo send you the Expired Auth CDF. For more information see About RDFs and CDFs. Authorization example To see an authorization in a Program API response and an explanation of the fields, open this Recipe: Get Authorization History responseOpen Recipe Authorization Events messages Authorization-related webhooks are sent to the Authorization Events endpoint. Consult the Authorization Events Index for the list and About the Events API for general information. There are two types of auth event, known by the codes BAUT and AAAU. These codes are visible primarily in the Customer Service Tool (CST) in the Alerts log. The webhook itself does not contain the four-letter code except by request (msg_id). AAAU is sent at the same time as the response to these authorization messages: Completions (advice) Reversal notifications AVS-only checks Yellow-path tokenization requests BAUT is sent for all other authorization requests except these AABI: bal — Balance inquiries. This event is sent to the Account Events endpoint because it does not affect the available balance. AAPM: auth_payment — Card loads To see examples of transaction sequences with Events API webhooks, see Authorization events in the Events API Scenarios guide. Galileo setup These are some of the product parameters that affect authorization behavior. Galileo sets up these and other parameters for you during program setup according to your use case, and they can also be updated later. Card verification These parameters affect card verification. ParameterDescriptionAAVPVControls whether Galileo uses the 3-D Secure validation results that it receives from a third-party access control server or a network's on-behalf services when deciding whether to approve a transaction. Set this value to Y for Galileo to use the validation results. When this parameter is not set, Galileo does not use the validation results for decisioning.ATCDFSpecifies the application transaction counter (ATC) tolerance for contactless transactions. This parameter is required for contactless products. Contactless chips maintain an ATC that increments each time the card is used. For added security, Galileo keeps an independent count and compares it to the ATC. If the ATC is outside of the tolerance in this parameter, the contactless transaction is denied.CVV1FSpecifies the number of failed attempts to enter CVV1 within a period before transactions are declined.CVV2FSpecifies the number of failed attempts to enter CVV2 within a period before transactions are declined.CVVDYSpecifies the number of days to look back when counting failed attempts to input CVV1 or CVV2.NOAVSControls whether to disable AVS checks for authorization requests. When this parameter is set to 1, an AVS check is not performed but instead a ""gift"" response is returned, which the merchant can interpret as success or failure and then act on according to merchant policy. Do not set this parameter for products that support Apple Pay — it causes tokenization to fail.BRSGEBRSMCBRSPUThe threshold for authorization based on the network-provided risk score (DE062). Can be set for Visa, Mastercard and Pulse. PINs These parameters affect PIN validation. ParameterDescriptionEMVOPControls whether offline PIN functionality is enabled.PBACTSpecifies which action to take after the maximum number of PIN validation failures is reached.PBLOKSpecifies which types of PIN transactions are blocked: all PIN transactions, only ATM transactions, or only point-of-sale transactions.PBSUCControls whether to reset the failed-PIN count to zero after a PIN entry is successful.PBTIMSpecifies the number of hours after the last failed PIN attempt that the PIN-fail count is reset to zero. For example, if the value for this parameter is 3, then the PIN-fail counter is reset to zero three hours after the last failed PIN attempt.FTPDYSpecifies the number of days after a PIN change that transactions are authorized for a card with offline PIN functionality.FTPAMSpecifies the threshold amount for offline PIN authorization. Accounts These parameters affect account characteristics related to authorization. ParameterDescriptionAAIGBControls whether an authorization can drive an account balance negative. When this parameter is set to Y, response codes 00 and 10 are allowed to drive a balance negative. When this parameter is not set, all authorization requests that result in a negative balance are declined.NOVACControls whether an authorization is allowed on a cancelled account.ODATMControls whether ATM and cash-back transactions can use overdraft.PAPPRControls whether the account permits partial approvals for authorization requests when the request amount is larger than the available balance. When this parameter is not set, partial approvals are permitted. Card loads These parameters affect card loads. ParameterDescriptionBLKLDSpecifies account statuses that block loads from load vendors.DCLDControls whether Discover card loads are allowed.MCLDControls whether Mastercard rePower loading is enabled.VSALDControls whether Visa ReadyLink loading and Visa Money Transfers are allowed. Balance inquiries These parameters affect balance inquiries. ParameterDescriptionADDODControls whether to subtract the overdraft balance when returning a balance query on a reloadable card account.MCBLCSpecifies which Canadian MCCs can receive the account balance in the response to a Mastercard signature or debit authorization request or balance inquiry that originates in Canada.MCBLSSpecifies which MCCs can receive the account balance in the response to a Mastercard signature or debit authorization request or balance inquiry.MCBLUSpecifies which United States MCCs can receive the account balance in the response to a Mastercard signature or debit authorization request or balance inquiry when the transaction originates in the United States.VSBLASpecifies whether Visa balance inquiries can receive a response. Balance inquiries can come from ATMs only. International transactions These parameters affect international transactions. ParameterDescriptionBLKTMSpecifies the start and end time to block cash withdrawals in countries with country blocks.CCINDControls which data elements determine if a transaction is foreign or domestic. When this parameter is set to Y, the determining fields depend on the card network.DOMCCSpecifies foreign countries to treat as domestic.NOBLKSpecifies blocked countries where BLKTM does not apply. When a blocked country also has a block on cash withdrawals, and that country code is listed in NOBLK, then cash withdrawals are blocked in that country at all times, rather than during the times specified in BLKTM. Recurring transactions These parameters affect recurring transactions. ParameterDescriptionBLKRIControls whether to block recurring and installment transactions for non-reloadable prepaid Visa products. When this parameter is set to Y, recurring and installment transactions are blocked for non-reloadable prepaid Visa products.BRIODControls whether to block recurring transactions from using overdraft account funds. Miscellaneous These parameters affect various aspects of authorization. ParameterDescriptionCADGRSpecifies the number of days until a cash advance begins accruing interest.CASHBControls whether a cardholder can request cash back when making a purchase.ODATMControls whether ATM and cash-back transactions can use overdraft.Updated 15 days ago Table of Contents Authorization and preauthorization Identifying preauthorizations Authorization checks Authorization variants Upcharges Partial authorizations AVS-only checks Bulk authorization Provisioning requests ATMs Authorization linkage Incremental authorizations Authorization expiry International merchants Authorizations in the Program API Authorized Transactions RDF Authorization example Authorization Events messages Galileo setup Card verification PINs Accounts Card loads Balance inquiries International transactions "
283,docs.galileo-ft.com/pro/reference/api-reference-events-api-card-status-change,"card_status_change Code — CSNT Event trigger — The card status is changed to one of the values in CDMSG. Processes — These processes contain the event trigger: Modify Status endpoint Customer Service Tool Galileo's integrated CIP process Galileo's fraud-detection process Internal process that changes card status Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" exp_date The expiration date of the card. Format: MM/DD/YYYY. Example: ""03/14/2023"" mobile_number Cardholder's mobile phone number. Example: ""8015553235"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CSNT"" new_status X See Card Statuses for possible values. Example: ""C"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""card_status_change"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# card_status_change example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""exp_date"": ""03/14/2023"", ""mobile_number"": ""8015553235"", ""msg_event_id"": ""243693"", ""msg_id"": ""CSNT"", ""new_status"": ""C"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""card_status_change"" } Table of Contents Fields Example "
284,docs.galileo-ft.com/pro/reference/api-reference-events-api-bulk-frozen,"bulk_frozen Code — CDFR Event trigger — The status value in the freeze_info object is changed to frozen. Process — This process contains the event trigger: Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CDFR"" new_status X Card status code. See Card Statuses for possible values. Because freezing a card does not change its status, this status is the same as before the freeze. Example: ""N"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""bulk_frozen"" Example JSON# bulk_frozen example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""CDFR"", ""new_status"": ""N"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""bulk_frozen"" } Table of Contents Fields Example "
285,docs.galileo-ft.com/pro/changelog/september-2021,"September 2021 Reversing payments and adjustments We updated Reversing payments and adjustments in the About Adjustments guide to indicate that the Create Adjustment endpoint is the preferred method for payment and adjustment reversals. We also updated Reverse adjustment endpoint in the About Adjustments guide and Result of calling Reverse Payment in the Creating a Payment guide to reflect this. New Secured Credit guide We added the Secured Credit guide in the Use Cases section. The Secured Credit guide provides an overview of secured credit, describes considerations for setting up secured credit products, and includes operational workflows for creating and managing secured credit accounts. Procedure fix We reversed the two steps for the Reversing an account creation procedure in the About Accounts guide, because once an account has been canceled you cannot update it. Using special characters in business names For the businessName parameter in the Create Account, Update Account and Start Enrollment endpoints, you can add an ampersand or other special character as long as it's URL encoded. For an ampersand (&) use %26. New transaction types data To the Transaction Types enumeration we added columns to the first table for Discover, Pulse, and Presto, plus added a new table that shows the card transactions that Galileo classifies as payments and adjustments. Corrected damaged-card process The Damaged cards section of the Lost, Stolen, and Damaged Cards guide erroneously stated that the card-reissue operation set the card to status: X. That sentence has been removed. Updated KYC/CIP requirements for the Digital First program When you create new accounts for a Digital First program, you use your own CIP process instead of Galileo's integrated KYC/CIP. We added this information under Creating the card account in the Digital First guide, and we removed the multi-step onboarding process that was specific to Galileo's integrated CIP. In the Customer ID Verification (KYC/CIP) guide, we added a note stating that the Digital First program requires your own CIP process, and we removed information about using Galileo's integrated KYC/CIP for Digital First. UPDATE Nov 2021: It is now possible to use Galileo's integrated KYC/CIP for Digital First. "
286,docs.galileo-ft.com/pro/reference/api-reference-events-api-system-pin-change,"system_pin_change Code — PNCH Event trigger — The PIN change is successful. Processes — These processes contain the event trigger: IVR (automated phone system) Galileo-hosted cardholder website Customer Service Tool Direct render PIN-change method Direct POST PIN-change method Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PNCH"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""system_pin_change"" Example JSON# system_pin_change example: { ""balance_id"": ""20211"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""PNCH"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""system_pin_change"" } Table of Contents Fields Example "
287,docs.galileo-ft.com/pro/reference/api-reference-attachments-subfields,"attachments Subfields fileNamerequired string The filename of the attachment. Pattern: String Example: ""WalMart_receipt.gif"" categoryrequired string The category for the attachment: Accountholder, Association, Internal, Supporting Documentation Pattern: String Example: ""Supporting Documentation"" labelrequired string User-provided string to describe the attachment. Pattern: String Example: ""Receipt from 3/24"" documentStreamrequired string Base64-encoded file. Pattern: Base 64-encoded string Example: ""PHRhYmxlIGNsYXNzPSJxdm9Cb2R5Q29udGVudCI+PHRyPjx0ZD4gPCEtLXF2b0JvZHlDb250ZW50"" Example string for attachments [{""fileName"": ""filename1.png"", ""category"": ""Supporting Documentation"", ""label"": ""receipt1"", ""documentStream"": ""PHRhYmxlIGNsYXNzPSJxdm9Cb2R5Q29udGVudCI+PHRyPjx0ZD4gPCEtLXF2b0JvZHlDb250ZW50""}, {""fileName"": ""filename2.png"", ""category"": ""Supporting Documentation"", ""label"": ""receipt2"", ""documentStream"": ""XNzPSJxdm9Cb2R5Q29PHRhYmxlIGNsYudGVEtLXF2b0JvZHlDudCI+PHRyPjx0ZD4gPCb250ZW50""}] Table of Contents Example string for attachments "
288,docs.galileo-ft.com/pro/docs/three-step-sequence-simulation,"Three-Step Sequence Simulation A debit cardholder makes a $30 purchase at a retail establishment without inputting a PIN. The transaction is later settled for the full amount. This is the same transaction shown in Three-step sequence in Card Transaction Examples. Also see Scenario 1: Authorization with Settlement. Authorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount30associationmc_auth or visamerchantNameCentral Marketmcc5399transType1 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.681,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 2233  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""9f3aa0db-06f8-4e0d-a202-e31d349c77aa""  },  ""system_timestamp"": ""2022-10-10 08:32:14"",  ""rtoken"": ""fb599ae2-b0ee-4255-b2f1-6fdef1266462"" } Capture the auth_id for later use. View the authorization Call Get Authorization History to see the authorization: JSON""authorizations"": [    {     ""auth_id"": ""2233"",     ""details"": ""Central Market   LT LAKE CITY UTUS"",     ""details_formatted"": ""CENTRAL MARKET, LT LAKE CITY, UT"",     ""amount"": ""-30"",     ""timestamp"": ""2022-10-10 08:32:14"",     ""type"": ""A"",     ""mcc"": ""5399"",     ""merchant_id"": ""tqJWttRLcDH2xG8"",     ""acq_id"": ""646235"",     ""terminal_id"": ""84556025"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""V"",     ""local_amt"": ""000000003000"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ] Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id from the authorization responseaccountNoPAN, PRN or CADassociationvisa or mc_authamount30 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 6.505,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 701  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""a811457f-e0a3-4485-abb5-ab09bd3aca35""  },  ""system_timestamp"": ""2022-10-10 08:38:59"",  ""rtoken"": ""9f6f90f0-a85d-4594-86fd-bf1d1b3ec51c"" } The settle_dtl (settlement detail) value can be used for troubleshooting with Galileo. Transactions created Call Get All Transaction History to see the three ledger entries, in reverse chronological order. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Central Market, LT LAKE CITY, UTUS"",     ""act_type"": ""VS"",     ""act_type_description"": ""Visa Settlement"",     ""post_ts"": ""2022-10-10 08:38:57"",     ""amt"": -30,     ""source_id"": ""2233"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VSA"",     ""arn"": ""06462352283422745227458"",     ""merchant_id"": ""tqJWttRLcDH2xG8"",     ""external_trans_id"": """",     ""calculated_balance"": 970,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-10 08:32:14"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL MARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2233"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5399"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Market, LT LAKE CITY, UTUS"",     ""act_type"": ""BV"",     ""act_type_description"": ""Visa Authorization Backout"",     ""post_ts"": ""2022-10-10 08:38:57"",     ""amt"": 30,     ""source_id"": ""2233"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""BVA"",     ""arn"": ""06462352283422745227458"",     ""merchant_id"": ""tqJWttRLcDH2xG8"",     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-10 08:32:14"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL MARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2233"",     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5399"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Market, LT LAKE CITY, UTUS"",     ""act_type"": ""VI"",     ""act_type_description"": ""Visa Authorization"",     ""post_ts"": ""2022-10-10 08:32:14"",     ""amt"": -30,     ""source_id"": ""2233"",     ""type"": ""A"",     ""type_description"": """",     ""trans_code"": ""VIA"",     ""arn"": """",     ""merchant_id"": ""tqJWttRLcDH2xG8"",     ""external_trans_id"": """",     ""calculated_balance"": 970,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-10 08:32:14"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL MARKET, LT LAKE CITY, UTUS"",     ""network_code"": ""V"",     ""auth_id"": ""2233"",     ""local_amt"": 30,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5399"",     ""credit_ind"": ""Y""    }   ] Updated 4 months ago Table of Contents Authorization View the authorization Settlement Transactions created "
289,docs.galileo-ft.com/instant/docs/card-activation-and-pin,"Card Activation and PIN After your cardholder's card arrives in the mail, they activate the card by calling Galileo's customer service hotline and providing the requested information to the interactive voice recording (IVR). The customer service hotline number (1-833-316-6043) is printed on a sticker attached to the card. You also may wish to provide the number and/or additional instruction within your app or website to make sure there's no confusion about what your cardholder should do once the card arrives. Instructions Step 1: Cardholder calls Galileo's customer service hotline The cardholder dials the number and the IVR answers saying, ""Thank you for calling Card Services."" Step 2: Cardholder provides the requested information The IVR requests your cardholder's 16-digit card number, three-digit security code, last four digits of SSN and four-digit PIN. The card is now active. To enable spending, transfer money to the cardholder's Account from your Master Funds Account, invite your cardholders to set up direct deposit or have them add an external bank account as an ACH Account and transfer money from that account.Updated over 2 years ago Table of Contents Instructions Step 1: Cardholder calls Galileo's customer service hotline Step 2: Cardholder provides the requested information "
290,docs.galileo-ft.com/pro/reference/api-reference-card-statuses,"Card Statuses Card status is independent of account status. It is possible for one account to have multiple cards in different statuses. Both the account and card must be in status: N (normal, active) to perform card transactions. See the Card Statuses guide for information on how card statuses change. This table indicates whether a card status permits different types of transactions or account updates. X means that the transaction is permitted. See Account Statuses for more information. StatusDescriptionNetworkLoadAdjACH debitACH creditUpdateALost card waiting for sufficient funds*X*XXBBlocked. May be an un-issued instant issue card that is used at a point of sale before the card has been sold, the card reached the maximum number of PIN retries, or the bounce-mail flag is set to Yes.*X*XXCCanceled§*X*XXDDisabled. May indicate that a card has been reissued or replaced.§*X*XXLLost Card. If reported lost with Modify Status type 3, a replacement card is issued with a new PAN. See the Lost, Stolen, or Damaged Cards guide for more information.*X*XXNActive (normal). A card and its account must be in this status for a card transaction to be authorized. The exception is an advice or force post, which must be accepted regardless of account status.XXXXXXOOperations Hold. May indicate that the embosser has run out of plastic to emboss cards.*X*XXQDelinquent*X*XXRCharged Off*X*XXSStolen Card. If reported stolen with Modify Status 4, a replacement card is issued with a new PAN. See the Lost, Stolen, or Damaged Cards guide for more information.*X*XXVVoided*X*XXWWaiting for Payment. The default status of a newly created card, or a replacement card that does not have sufficient funds to cover a replacement fee.*X*XXXSet to Emboss. The card will be picked up by an automated process and sent to the embosser.*X*XXYShipped/Ready to Activate. The card order has been sent to the embosser.*X*XXZCanceled without Refund.§*X*XX § Merchant credits only, except for Mastercard credit merchant credits, which are adjustments (trans_code: ADC). * Depends on account status and account-status parameters. You can affect how the Galileo system treats card statuses by setting these product parameters. ParameterDescriptionCANCSWhen CANOC is set, this parameter contains the card statuses that are canceled when a new card is activated.CDMSGThe CSNT: card_status_change event message is sent when the card changes to one of the statuses in this list.RISCSList of card statuses that permit card reissue. Default: N,C,ZTOKCSContains a list of card statuses that are eligible for tokenization. Default: N "
292,docs.galileo-ft.com/pro/reference/api-reference-event-codes,Event Codes 4-character codeEventAAAUauthAABIbalAACNmobile_activation ACNAAPMauth_paymentACCLaccount_closedACHCach_credit_failACHRach_debit_failACRTach_returnACSTaccount_status_changeADPEagserv_PIN_change_failADPSagserv_PIN_change_successADRCaddr_chgAFPEagserv_PIN_change_failAFPSagserv_PIN_change_successARDPmobile_activation RDPATCNmobile_activation TCNATKCmobile_activation TKCATVDmobile_activation TVDATVNmobile_activation TVNATVRmobile_activation TVRAUFBauth_fallbackAUMDauth_metadataAYLPmobile_activation YLPBACTcard_activatedBADJadjBAUTauthBBALbalBDPMpmt_delayedBEXPauth_expBEXRauth_exp_reversalBFEEfeeBFIDfailed_idBLVFbillpay_limit_violationBMONbalBNEGneg_balBNPDdenied_auth_buy_now_pay_laterBNSFdenied_auth_nsfBPANdenied_auth_bad_panBPARbillpay_retryBPAYbillpayBPCCbillpay_check_clearedBPCLbillpay_cancelledBPCMbillpay_check_mailedBPCQbillpay_request_madeBPCRbillpay_request_returnedBPEXbillpay_expiredBPMTpmtBSPFsched_billpay_failBSPMpmt_splitCAPPapp_completedCDFRbulk_frozenCHPCcardholder_info_changedCLIMcredit_limit_changeCRCAready_to_activateCRHDcreate_holdCSNTcard_status_changeDAUTdenied_authDDSEdirect_deposit_switch_statusDSCTdispute_createdDSFNdispute_final_no_pcDSFPdispute_final_pcDSPCdispute_pcECHGemail_addr_changeEXHDexpire_holdFACHach_credit_returnFBSCfed_benefits_status_confirmedFBSDfed_benefits_status_depositFBSMfed_benefits_status_resubmitFBSRfed_benefits_status_returnedFBSSfed_benefits_status_submittedFBSUfed_benefits_status_updatedFREVfee_reversalFRZNfrozenFTIDfail_idGACNmobile_activation ACNGDACgreendot_auth_commitGDAUgreendot_authGDBFext_trans_debit_failGDBRext_trans_debit_retryGDFAgreendot_auth_failureGDFCgreendot_auth_commit_failGRDPmobile_activation RDPGTCNmobile_activation TCNGTKCmobile_activation TKCGTVDmobile_activation TVDGTVNmobile_activation TVNGTVRmobile_activation TVRGYLPmobile_activation YLPIPINdenied_auth_invalid_pinISFEinsufficient_funds_to_embossLBLClow_balance_notifyLSCNlost/stolen card no replacementLSCRlost/stolen card with replacementNACTdenied_auth_inactive_cardNOTEnoteOATOAuth_API_timeoutODAAoverdraft_authorizationODCLoverdraft_credit_limit_changeODGPoverdraft_start_grace_periodODINoverdraft_opt_inODNBoverdraft_negative_balanceODOToverdraft_opt_outODSCoverdraft_status_changeODSKoverdraft_suspendedODSNoverdraft_limit_changePCHGprofile_changedPHCHphone_changedPINCPIN_changedPNCHsystem_pin_changePSUCcard_returnedPSWCproduct_switchedPTIDpass_idPUMPdenied_auth_gasRBEXcard_expiringSACNmobile_activation ACNSETLsetlSHIPcard_shippedSRDPmobile_activation RDPSTCNmobile_activation TCNSTKCmobile_activation TKCSTPAauth_stip_adviceSTPDdenied_auth_stipSTVDmobile_activation TVDSTVNmobile_activation TVNSTVRmobile_activation TVRSUVAsingle_use_invalid_amountSUVMsingle_use_secondary_transactionSYLPmobile_activation YLPTKUPtoken_updateUFRZunfrozenVAPImobile_activation APIVTKCmobile_activation TKC 
293,docs.galileo-ft.com/pro/page/card-transaction-scenarios-index,"Card Transaction Scenarios Index These scenarios show how various types of card transactions are represented by the Galileo system. These pages were formerly in the Card Transaction Scenarios PDF. Before consulting these scenarios you should be familiar with the concepts in these guides: About Transactions — General explanation of how Galileo represents transactions across it system. About Card Transactions — Explanation of how card transactions work from the authorization request to settlement About the Events API — How Galileo notifies you in real-time about system events RDF Reference — Contents of the standard suite of RDFs Scenarios Scenario 1: Authorization with Settlement — Cardholder adds a tip to a bill at a restaurant. One authorization with one settlement Scenario 2: Preauthorization with Completion — Cardholder pumps gas. One preauthorization and one completion Scenario 3: Incremental Authorizations — Multiple authorizations and one settlement Scenario 4: Reversal on Authorization Before Clearing (Mastercard) — Mobile wallet purchase with full reversal. Authorization and its reversal before clearing Scenario 5: Reversal on Preauthorization Before Clearing (Visa) — Attempted gas purchase with full reversal. Preauthorization and its reversal before clearing Scenario 6: Refund After Clearing (Visa) — Home improvement store purchase with partial refund. Authorization and its refund after clearing Scenario 7: Refund After Clearing (Mastercard Banknet) — Cash-app transfer with full refund. Authorization and settlement with merchant credit Scenario 8: Partial Reversal on Preauthorization — Car-rental agency. Preauthorization and partial reversal Scenario 9: Merchant Credit (Mastercard Banknet) — Return of a gift. Merchant credit Scenario 10: Merchant Credit (Visa) — Home improvement store purchase with merchant credit. Preauthorization over Mastercard Banknet with merchant credit over Visa Interlink Scenario 11: ATM Withdrawal — Balance inquiry plus withdrawal plus program fee Scenario 12: ATM Reversal — Reversal of a duplicate authorization Scenario 13: International Authorization — Retail purchase in Brazil. Authorization plus settlement Scenario 14: International Reversal — Retail purchase in Spain. Authorization plus partial reversal Scenario 15: Tokenization Authorization — Cardholder installs a meal-delivery app and the app validates the card in the cardholder's mobile wallet Scenario 16: Settlement Without Authorization — The merchant does not clear a transaction until after it has expired in the Galileo system Scenario 17: Card Load (Maestro) — Drive-share worker receiving payment as a Maestro load Scenario 18: Real-Time Funding — A cardholder with a corporate spend card makes a purchase, and the funds are transferred real-time into the account before authorization Scenario 19: Force Post — A merchant does not obtain authorization for a purchase and then force-posts the transaction. "
294,docs.galileo-ft.com/pro/changelog/august-2020,August 2020 Auth API 3.0 released We released a new version of the Auth API. One parameter was added to Auth API Webhook 3.0: response_code_objects. 
295,docs.galileo-ft.com/pro/page/scenario-16-settlement-without-authorization,"Scenario 16: Settlement Without Authorization << Back to the index A debit cardholder purchases $35 worth of goods from a retail outlet. The merchant clears the transaction 10 days later, but authorizations for this merchant type and amount expire after seven days. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network is Visa. Sequence of events Events in the same step have the same timestamp. Visa sends an authorization request for –35.00. Galileo approves the request and places a 35.00 hold on the account. The available balance is now 965.00. Galileo sends a BAUT: auth webhook. After seven days the authorization expires. Galileo sends a BEXP: auth_exp webhook and releases the 35.00 hold. The available balance is now 1000.00. Three days later, Visa sends a clearing file that contains the –35.00 transaction. Galileo adds new authorization and backout entries to the ledger and then posts –35.00 to the account. The available balance is now 965.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth35.00226601000.0020210610:101354MST Authorization/Settlement Events webhooks By request you can have the expired_auth_id field added to SETL:setl webhooks. msg_idtypeamountauth_idoriginal_auth_idexpired_auth_idopen_to_buytimestampBAUTauth352266009652021-06-10 10:13:54 MSTBEXPauth_exp3522660010002021-06-17 04:22:02 MSTSETLsetl359911022669652021-06-20 15:14:45 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME35.00-22665006102021 10:13:5435.00-99115006202021 15:14:45 Posted Transactions RDF By request you can have the EXPIRED AUTH CODE field added to your Posted Transactions RDF. TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDEXPIRED AUTH CODETRANSACTION DATE/TIMEPOST DATE35.00-9911VSM9911226606202021 15:14:4506202021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. amtauth_idoriginal_auth_idtypelocal_amttimestamp-3522660A0000000035002021-06-10 10:13:54 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-3599110VSM2021-06-20 15:14:452021-06-20 15:14:45 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-3522660VIA2266965Y2021-06-10 10:13:542021-06-10 10:13:5435NoneNoneVXA22661000NoneNone2021-06-17 04:22:02-3599110VIM9911965Y2021-06-20 15:14:452021-06-20 15:14:453599110BVM99111000YNone2021-06-20 15:14:45-3599110VSM9911965Y2021-06-20 15:14:452021-06-20 15:14:45 "
296,docs.galileo-ft.com/instant/docs/quick-start,"Quick Start This guide teaches you how to: Create cardholders Fund cardholders' accounts Simulate card transactions Check transaction history and account balance Before you get started You must have an environment set up to send HTTP requests, such as Postman, cURL, or a script. Click the button below to download our Postman collection. You must create a new product using the Dashboard. You must obtain API keys from the Dashboard. Environments There are two environments: Sandbox and Production. Sandbox is a test environment that simulates the Production environment without dealing with real money or sensitive personal data. This guide assumes you're using Sandbox. When you have received approval to start validating your program in Production, simply swap out the URL and API keys. SandboxProductionhttps://sandbox.galileo-ft.com/instant/v1/ https://production.galileo-ft.com/instant/v1 Instructions Step 1: Authenticate Your first step is to exchange your API keys for an access token. Send a POST request to the /login endpoint , passing in the username and password, which can be found in your API key file. A successful response includes an access_token. All subsequent API requests require an Authorization header with the value ""Bearer {{access-token}}"" Step 2: Create a cardholder Now that you have an access token, you're ready to create your first cardholder. In Production, you first need to collect the cardholder's personal information and have the cardholder accept the Cardholder Agreements. The cardholder information and the agreement_id of each accepted agreement are required in the request body to create a cardholder. In Sandbox, faux cardholder information may be used with a couple of exceptions, e.g. the zip code must match the specified state and the agreement_ids must match the agreements associated with your product. You can obtain the agreements by sending a GET request to the /businesses/:id/products/:id/agreements endpoint . The business_id path parameter can be found in the Dashboard by clicking ""Settings"" > ""Account Information."" The product_id path parameter is the product ID of the product you created in the Dashboard. Next, create the cardholder by sending a POST request to the /cardholders endpoint with the following arguments in the request body: product_id: The product ID from your product. cardholder: A dictionary with cardholder information. This information may be fictional while in Sandbox but must be legitimate in Production to pass Customer Identification Program (CIP) requirements. If the request is successful, the response includes the new cardholder's cardholder_id. Save this value, as you will use it frequently. 📘More about cardholdersWhen you create a new cardholder, an associated account and an associated card are created. In Production, the new card is embossed and shipped to the cardholder; in Sandbox, the card is an instantly available virtual card. Step 3: Get the cardholder's account In Galileo's object hierarchy, a cardholder has accounts, and an account has transactions and cards. You can get a list of the cardholder's accounts (there should only be one right now) by sending a GET request to the cardholder/:id/accounts endpoint. Use the cardholder_id obtained in Step 2 above for the path parameter. A successful response includes an account_id, Galileo's unique identifier for the account. Step 4: Fund the account The next step is to put money on the new account. Your Master Funds Account, accessible from the Dashboard, may be used to fund the new account. Send a POST request to the /transfers endpoint with the following arguments to fund your cardholder's account with $100: amount: 100 destination_account_id: The account_id obtained in Step 3 above. source_account_id: The ID of the Master Funds Account found in the Dashboard when you click ""View Account Details"" in the Master Funds Account section. Step 5: Check the account balance Let's verify that the money made it to the cardholder's account. You may check the balance of the account by repeating Step 3 above, or by sending a GET request to the /cardholders/:id/accounts/:id endpoint, including the cardholder_id and account_id, respectively, as path parameters If your request is successful, you should see that the account now has a balance of 100. Step 6: Simulate a card transaction Now that there is money on the account, we can make a purchase. In Production, a card authorization (i.e., pending card transaction) occurs when the card associated with an account is used to make a purchase from a merchant. In Sandbox (which uses virtual cards and faux money), you can only simulate card authorizations. Simulate an authorization by sending a POST request to the /cardholders/:id/accounts/:id/transactions endpoint with the appropriate path parameters and the following arguments in the request body: amount: The purchase amount, e.g., 10. merchant_name: The name of the merchant, e.g., ""Chipotle."" Step 7: View transaction history Your recent purchase is now available in the Transaction History (allow a couple seconds for processing). To view the record of this simulated authorization along with the full transaction history for this account, send a GET request to the /cardholders/:id/accounts/:id/transactions endpoint with the appropriate path parameters. If the response is successful, it contains a paginated list of all transactions for the account. In the list, you should see the $100 transfer from the Master Funds Account as well as the $10 authorization at Chipotle.Updated over 1 year ago Table of Contents Before you get started Environments Instructions Step 1: Authenticate Step 2: Create a cardholder Step 3: Get the cardholder's account Step 4: Fund the account Step 5: Check the account balance Step 6: Simulate a card transaction Step 7: View transaction history "
297,docs.galileo-ft.com/pro/reference/api-reference-direct-deposit-switch-failure-status-reasons,"Direct Deposit Switch Failure Status Reasons ReasonDescriptionaccount-lockoutThe account is locked out; most likely there are too many failed attempts.account-setup-incompleteThe account holder's account setup is not complete and will require additional information from the user.account-unusableThe account holder's bank account is unusable for the selected product.bad-credentialsEither the username or password was incorrect.connection-errorA network error occurred.distribution-not-supportedThe account did not support the distribution, for example, the account holder requested to add an account for a percentage of their paycheck, but can only do fixed amounts and remainder/net balance.enrolled-in-paycardThe account holder is enrolled in a paycard program instead of direct deposit via their bank.expiredThe account holder's password has expired and they must create a new one.product-not-supportedThe account did not support the product.routing-number-not-supportedThe account did not support the routing number entered.session-timeoutThe session timed out.system-unavailableThe system was unavailable, for example, the site is undergoing maintenance or it is outside the window of scheduled availability for the site.transaction-pendingThere is a transaction in progress. Only one transaction may be run at a time.unknown-failureUnexpected error.user-abandonThe account holder was asked a multi-factor authentication question but did not answer the question.work-status-terminatedThe task could not be completed because the account holder's employment has been terminated. "
298,docs.galileo-ft.com/pro/page/mcc-and-merchant-id-alc-examples,"MCC and Merchant ID ALC Examples MCC — Merchant category code MID — Merchant ID Also see Invalid configurations. Examples 1–5 Example 1Example 2Example 3Example 4Example 5TransactionMCC 7995MCC 5550MCC 5650MCC 5750MCC 5750MCC blocklistMCC 7995MCC 7995MCC 7995MCC 7995MCC 7995Product-level MCCany value5500–5600 ALLOW5500–5600 ALLOW5500–5600 DENY5500–5600 ALLOWOnline only (product)any valueNNNNAccount-level MCCany value——5750 DENY5700 ALLOWOnline only (account)any value——NNProduct-level MIDany value————Account-level MIDany value————ResultDENYALLOWDENYDENYDENYReasonProgram blocklist overrides all other controlsMCC 5550 falls inside the ALLOW rangeMCC 5650 falls outside the ALLOW rangeMCC 5750 is denied at the account levelMCC 5750 falls outside the ALLOW range Examples 6–10 Example 6Example 7Example 8Example 9Example 10TransactionMCC 5560MCC 1111MCC 1112MCC 5800MID 1234MCC 5800MID 1234MCC blocklistMCC 7995MCC 7995MCC 7995MCC 7995MCC 7995Product-level MCC5500–5600 ALLOW0000–0000 ALLOW0000–0000 ALLOWany valueany valueOnline only (product)NNNNany valueAccount-level MCC5700 ALLOW1111 ALLOW1111 ALLOWany valueany valueOnline only (account)NNNNany valueProduct-level MID———1234 DENYany valueAccount-level MID————1234 ALLOWResultALLOWALLOWDENYDENYALLOWReasonMCC 5560 is included in the product-level control0000–0000 ALLOW = deny all, but 1111 is allowed at the account level0000–0000 ALLOW = deny all, and 1112 is not allowed at the account levelThe product-level merchant ID overrides MCC controlsThe account-level merchant ID overrides all other controls Examples 11–15 Example 11Example 12Example 13Example 14Example 15TransactionMCC 5800MID 1234MCC 5750MID 1234onlineMCC 5550MID 1234not onlineMCC 5750MID 1234onlineMCC 5750MID 1234onlineMCC blocklistMCC 7995MCC 7995MCC 7995MCC 7995MCC 7995Product-level MCCany value5500–5600 ALLOW5500–5600 ALLOW5500–5600 DENY5500–5600 DENYOnline only (product)any valueYYNNAccount-level MCCany value——5750 DENY5750 DENYOnline only (account)any value——YYProduct-level MIDany value————Account-level MID1234 DENY———1234 ALLOWResultDENYDENYDENYDENYALLOWReasonThe account-level merchant ID overrides all other controlsMCC 5750 is outside the ALLOW range, and the control applies to online transactions.MCC 5550 is allowed only for online transactions.MCC 5750 is denied at the account level, and the control applies to online transactions.MCC 5750 is denied at the account level, but the account-level merchant ID overrides it. Examples 16–20 Example 16Example 17Example 18Example 19Example 20TransactionMCC 5750MID 1234onlineMCC 5750MID 1234not onlineMCC 5750MID 1234onlineMCC 5750MID 1234not onlineMCC 5750MID 1234not onlineMCC blocklistMCC 7995MCC 7995MCC 7995MCC 7995MCC 7995Product-level MCC5500–5600 DENY5500–5600 DENY5500–5600 DENY5500–5600 DENY5500–5600 ALLOWOnline only (product)NNNYYAccount-level MCC5750 DENY5750 DENY5750 DENY5750 DENY5750 ALLOWOnline only (account)NYYYYProduct-level MID—————Account-level MID—————ResultDENYALLOWDENYALLOWDENYReasonMCC 5750 is denied at the account level, and the control applies to all transactions.MCC 5750 is denied at the account level, but only for online transactions.MCC 5750 is denied at the account level, and the control applies to online transactions.All of the existing controls apply only to online transactions.MCC 5750 is allowed at an account level, but only for online transactions. Invalid configurations Attempting to configure any of these MCC control combinations will return an error. Example 21Example 22Example 23Example 24Example 25MCC blocklistMCC 7995MCC 7800–7802MCC 7995MCC 7800–7802MCC 7995MCC 7800–7802MCC 7995MCC 7800–7802MCC 7995MCC 7800–7802Product-level MCC5500–5600 ALLOW5500–5600 DENY5500–5600 ALLOW5500–5600 DENYMCC 7500–7550 ALLOWAccount-level MCC5000 DENY5500 ALLOW5550–5700 ALLOW5550–5560 DENYMCC 7990–8000 ALLOWReasonProduct level is ALLOW, so the account level must also be ALLOW.Product level is DENY and account level cannot contradict or overlap the product level.Account-level range overlaps the product-level range.Account-level range is inside the product-level range.Both ranges overlap MCC blocklist "
299,docs.galileo-ft.com/pro/docs/about-ach,"About ACH ACH is an electronic funds transfer system that enables the bulk transfer of funds between banks, usually within the U.S. An ACH transaction can move funds into the receiver’s account or move funds out of the receiver’s account at the request of the originator and at the authorization of the receiver. ACH transactions are batch-processed and are usually less costly for a bank than paper checks or real-time card transactions. Because processing happens at designated times in batches, an ACH transaction usually takes a few days to settle. This guide is an overview of general ACH use cases, terminology, standards, and the movement of funds in a typical ACH transaction. ACH use cases You can use ACH to transfer funds electronically between banks. Some common use cases are: Direct deposit — An employer obtains account information from an employee and when a paycheck is scheduled, funds move out of the employer’s account and are credited to the employee’s account via ACH. Electronic payment — Instead of mailing a paper check, a customer provides account information to a business and, when the customer makes a payment, funds for the payment move out of the customer’s account and into the business’s account via ACH. This is a common payment method for things like gym memberships or mortgage payments. Transfer between personal accounts — Your customer has an account at an external bank and wants to transfer funds between the account on your system and the external account. The customer provides you with the external account and routing numbers so that when the customer makes a transfer, funds move out of one account and into the other via ACH. Tax refunds and Federal benefits — The U.S. government often pays tax refunds and Federal benefits via ACH. The governmental entity obtains account information from the payee and can make a direct deposit into the account. ACH terminology Galileo uses the following terminology to describe ACH transactions. Originator — Entity that initiates the ACH request. The originator can be a bank, business, government institution, or individual account holder. Receiver — Entity that receives the ACH request. The receiver can be a bank, business, government institution, or individual account holder. ODFI — Originating depository financial institution. The originator’s financial institution. RDFI — Receiving depository financial institution. The receiver’s financial institution. ACH credit — ACH transaction that moves funds into the receiver’s account. ACH debit — ACH transaction that moves funds out of the receiver’s account. Incoming ACH transaction — ACH transaction that originates outside of Galileo. Outgoing ACH transaction — ACH transaction that originates inside of Galileo. Sometimes called ACH origination. ACH operator — The entity that routes ACH transactions between DFIs and facilitates settlement between them. Nacha file — A file containing bulk ACH transaction instructions in a standardized format. The file is transferred between banks by the ACH operator. ACH transactions always happen between banks, but “originator” and “receiver” can refer to the account holders involved in the transaction. ACH transaction overview The following steps outline the general process for an ACH credit. The originator makes an ACH credit request to move funds into the receiver’s account and provides the receiver's bank account and routing numbers. The ODFI debits the funds from the originator’s account. The ODFI sends a Nacha file with the transaction request to the ACH operator. The ACH operator processes the Nacha file and sends the transaction to the RDFI. The RDFI receives the Nacha file. The RDFI transfers funds to the receiver’s account according to instructions in the Nacha file. An ACH debit is similar, but the funds move out of the receiver’s account. The originator makes an ACH debit request to move funds out of the receiver’s account and provides the receiver’s bank account number and routing number. The ODFI generates a Nacha file with the transaction request and sends it to the ACH operator. The ACH operator processes the Nacha file and sends the transaction to the RDFI. The RDFI debits the receiver’s account according to instructions in the Nacha file. The ODFI credits the originator account with the funds. Summary of ACH funds movement This table summarizes the movement of funds in ACH transactions. ACH transactionDescriptionOutgoing ACH debitYour customer in the Galileo system requests to move funds out of an external account.Outgoing ACH creditYour customer in the Galileo system requests to move funds into an external account.Incoming ACH debitAn external entity requests to move funds out of your customer’s account in the Galileo system.Incoming ACH creditAn external entity requests to move funds into your customer’s account in the Galileo system.Updated 2 months ago Table of Contents ACH use cases ACH terminology ACH transaction overview Summary of ACH funds movement "
300,docs.galileo-ft.com/pro/changelog/december-2021,"December 2021 Secured Credit guide updates We clarified the Secured Credit guide to indicate that an existing debit card linked to the DDA can be maintained after a secured credit account is set up and a charge card is activated. We also updated Secured credit authorization and settlement to say that authorization is based on the account holder’s secured account balance. New guide We have created a new client-only PDF, Reconciliation, that you can request from Galileo. It explains how to use gAnalytics and the RDFs to reconcile the network's draw-down amount with Galileo's records. Expired authorization identifiers We updated two documents to show the new optional expired_auth_id field (SETL event) and EXPIRED AUTH CODE field (Posted Transactions RDF) that link expired authorizations to their force-posted settlements. You must request that these fields be enabled for your program. Settlement of an expired authorization in Card Transaction Examples ""Scenario 16: Settlement Without Authorization"" in the Card Transaction Scenarios PDF. Ask your Galileo representative for the updated Card Transaction Scenarios PDF version 1.1. International transaction information We added information to the International merchants section of the About Card Transactions guide to explain how international transactions are determined. Reissuing Digital First cards We explained the process for reissuing and expiring cards in the Digital First Program guide. "
301,docs.galileo-ft.com/pro/docs/switching-products,"Switching Products When you create an account on the Galileo system you input a product ID, which specifies the type of account (spending, savings, overdraft) as well as specific characteristics of the account such as velocity limits or card type. At a later time you may want to change an account to a different product. When to switch products Switching to a new product is a good solution in these circumstances, among others: You have existing virtual-card customers who want a physical version instead. You want to switch your virtual-card customers to a Digital First product. You want to reward customers who fulfill certain requirements with better account features such as higher velocity limits, better fees, or fewer hold days. You are phasing out an old product and want to move customers to a new product. You are switching a customer from an instant-issue card to a personalized card. Whether to reissue or replace At the time that you switch to a new card product you might also want to reissue or replace the card. (See Reissuing vs. replacing in the Reissuing Cards guide to understand the difference.) When to reissue Reissuing a card with a product switch is desirable when: You are switching from a virtual-only product to a Digital First product so that you can continue to provide the virtual card while the physical card is being embossed. You are switching from a virtual-only card product to a physical-only card product, and you want to retain the same PAN and expiry for the physical card. (In this scenario, the virtual card is cancelled after the physical card is activated.) Any time you want to retain the PAN for the new card but generate a new expiry date. When to replace Replacing a card with a product switch is desirable when you want to issue a net-new card with a new PAN and expiry, and you want the old PAN to be deactivated. Prerequisites for switching products To switch products successfully, the following must be true: Both products must have the same program ID. The new and old products must be of the same general type. For example, a spending product should be changed to another spending product and a savings product to another savings product. Although it is technically possible, if you switch to an incompatible product type—such as a spending product to a savings product—you will get unexpected and undesirable results. If both the new and old products have cards, both cards must have the same BIN. If they do not, follow the Switching Products with Different BINs procedure. How to switch products Galileo offers several methods to switch products (with or without reissue/replacement). For most use cases, Galileo strongly recommends that you use the Switch Product endpoint—it is the newer, more flexible choice that does not involve complicated product parameter setup. Switch Product endpoint — Use the endpoint variables in Switch Product to control whether to reissue or replace the card, as well as whether to generate a new PAN and expiry. If you already have product parameters such as NOISS and STOCK set up, you can still use this endpoint to override those settings. Go to Using the Switch Product endpoint for instructions. Add Account endpoint — This method should be used only when switching from one card product to another card product with a different BIN. This method results in a new account with a new PRN, PAN, and expiry. See Switching Products with Different BINs for instructions. Set Account Feature endpoint — Set product parameters to control whether a product switch triggers a reissue and whether a new expiry should be generated. The old PAN is always retained. This method is used by legacy Galileo clients and can be used to set up a predictable product-switch sequence of events where variation is not desired. If you are not already using this method, Galileo strongly recommends using the Switch Product endpoint instead. This method is also not supported for Digital First products. For instructions on using this method, ask Galileo for the Switching Products with Set Account Feature PDF. Batch processing — This method is similar to using Set Account Feature in that it uses the same product parameters that control reissue behavior. To see how to set the product parameters for reissue (or to prevent reissue), ask Galileo for the Switching Products with Set Account Feature PDF. Also contact Galileo for information on batch-file formatting. Using the Switch Product endpoint This section explains how to change an account's product to a new product using the Switch Product endpoint, and optionally to reissue (same PAN) or replace (new PAN) the card. With this method there are no product parameters to set to affect product-reissue behavior. If you have already set product parameters such as STOCK and NOISS, this process will not be affected by those parameter settings. Result of calling Switch Product When Switch Product has been called successfully, the following are true: The account has a new product ID. If you have specified that the card be reissued, the card is flagged for reissue. If you have specified a net-new card, the new-card flag is set. Galileo sends the PSWC: product_switched event message. After Switch Product has finished running, automated processes complete these tasks when reissue or replacement has been requested: If the card is flagged to be created new, the emboss process creates a new card record with a new CAD and PAN. If oldCardStatus is set, the emboss process changes the old card status to C or D. The emboss process creates a new emboss record for the card and assigns it a new expiry date and CVV. All emboss records are included in a batch file to send to the embosser. For each emboss record in the file, Galileo sends the SHIP: card_shipped event message. The emboss process runs every 15 minutes in CV but only once per day in Production (unless you specify another interval). Because it is the emboss process that generates new PANs, expiry dates, and CVVs—not the Switch Product endpoint—you do not receive the new card data in the Switch Product response. To get the new card data, wait until after the emboss process has run (the SHIP: card_shipped event is sent) and then call Get Account Cards. According to your arrangements with Galileo, Galileo sends event webhooks to notify when the emboss record is created, when the fee is assessed (if any) and when the card is activated. There is no event webhook for card reissue or replacement. 📘NoteA reissue is represented in the CST on the Card Info screen under Reissued Card History and Emboss History. Program parameters These program parameters are related to card-activation behavior when using the Switch Product endpoint. ParameterDescriptionCANCSUsed in conjunction with CANOC, it specifies the status that a card must be in to be canceled when a new card is activated. Default: N,X,Y,WCANOCWhen this parameter is set to Y and a new PAN is generated, cards that have the same program ID and cardholder as the newly activated card—and that have statuses specified in CANCS—are changed to status C (canceled) when the new card is activated. When this parameter is not set, other active cards are not canceled. This parameter must be set at the program level to cancel cards with different product IDs. If you set oldCardStatus to C or D, this parameter is not checked. Endpoint parameters This table explains the parameters that are specific to the Switch Product endpoint. See the Switch Product endpoint reference for details. ParameterDescriptionprodIdRequired. The product ID of the product to switch to.doReissuePass Y to reissue the card. When this value is Y then emboss: Y is required.newPanPass Y to generate a new card with a new PAN. When this value is Y then newExpiryDate: Y is required.newExpiryDatePass Y to generate a new expiry date for the card.embossPass Y to emboss a physical card for the new product. When this value is Y then doReissue: Y is required.oldCardStatusSpecify the status for the card that is being replaced. This should be populated only when newPan: Y. The new status is applied when the emboss process runs. Use D (disabled) or C (canceled). If you want the old card to be usable until the new card is activated, leave this parameter blank. Default: Blank Valid parameter combinations Only these emboss-related parameter combinations are permitted. See the Use cases for how to use these combinations. Use casedoReissuenewPannewExpiryDateembossoldCardStatus1: Product switch onlyN or blankN or blankN or blankN or blankblank2: Reissue, same PAN and expiryYN or blankN or blankYblank3: Reissue, new expiryYN or blankYYblank4: Replace cardYYYYC, D or blank 📘NoteIn many cases, if you pass incorrect parameters, the product switch will be successful but the reissue will not. To recover, call Reissue Card with the proper parameters. See Status codes for more information. Switch Product workflow Galileo receives the Switch Product endpoint request. Galileo performs these checks: The current product ID and the new product ID (prodId) must be different. If they are not, Galileo returns 590-01. The new product ID must exist. If it does not, Galileo returns 590-02. Galileo checks the value of doReissue: Y — Galileo checks the value of emboss. Y — The card is flagged for reissue and emboss. N or blank — Galileo returns 590-08. N or blank — Galileo checks the rest of the parameters. One or more is populated — Galileo returns 590-08. All are N or blank and oldCardStatus: blank — Galileo changes the product ID to the value of prodId, returns status: 0 (success), sends the PSWC: product_switched event webhook, and the process ends. Galileo checks the value of newPan: Y — Galileo checks the value of newExpiryDate: Y — Galileo sets a flag for a new PAN for a net-new card. N or blank — Galileo returns 590-11 N or blank — Galileo assigns the old PAN to the reissued card. Galileo checks the value of newExpiryDate: Y — Galileo sets a flag for a new expiry date for the reissued card. This value is valid only when doReissue: Y and emboss: Y. N or blank— Galileo assigns the old expiry date to the reissued card. This value is valid only when newPan is not Y. Galileo checks the value of oldCardStatus. C or D — Galileo checks the value of newPan: Y — Galileo sets a flag for the old card status to change N — Galileo returns 590-04 Blank — The old card is not flagged for a status change. If the reissue fee (REI) is configured, Galileo attempts to assess the fee. If there are insufficient funds in the cardholder account, Galileo returns 590-09. If there is another problem with assessing the fee, Galileo returns 590-10. Galileo changes the product ID to the value of prodId, returns status: 0, and sends the PSWC: product_switched event webhook. 📘NoteThe expiry_date and card_security_code (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process, as shown in the next section. After the endpoint response You may need to protect the physical card while it is in transit, but only when all of these conditions are true: The PAN and expiry are the same as the old card. The new card is a physical card. The old card is a virtual card. Right after calling Switch Product, call the Set Account Feature endpoint with these values, according to your use case. Both of these options permit mobile-wallet and AVS transactions: Block card-present and card-not-present transactions: featureType: 20 featureValue: Y Block card-present transactions only: featureType: 21 featureValue: Y These next steps are performed only when doReissue: Y and emboss: Y. The emboss process: Generates a new card record with a new CAD and PAN if newPan: Y. Generates a new expiry date and CVV if newExpiryDate: Y. Creates a new emboss record in status: Y. Includes the emboss record in a batch file to send to the embosser. Sends the SHIP: card_shipped event webhook. If newPan: Y and oldCardStatus is C or D, changes the old card to that status. If the reissue fee (REI) is configured, assesses the fee and sends the BFEE: fee event webhook. The emboss vendor creates the card and mails it to the cardholder. The cardholder activates the new card in one of these ways, according to your setup: IVR Activate Card endpoint CST If the card has a new PAN, then the PIN must also be reset using your preferred method. When you receive notification that the card has been activated (BACT: card_activated event webhook), perform these tasks, as needed: If you put restrictions on the card using Set Account Feature, call Set Account Feature again to remove the restrictions. If newPan: Y, oldCardStatus: blank, and CANOC is not Y, the old card is still active. Call Modify Status with these parameters: accountNo: CAD or PAN of old card; do not use PRN type: 5 Sample endpoint request and response Consult the Switch Product endpoint reference to see how to build the API request and to see the response schema. Go to Switch Product status codes at the end of this guide to see how to respond to different statuses. View the new product ID The Switch Product endpoint returns the new prod_id in the response. You can also retrieve the prod_id with the Get Account Cards endpoint immediately after Switch Product responds. View the new card information Because the emboss process generates new PANs, CADs, expiry dates and CVVs after the Switch Product endpoint is called, the Switch Product endpoint cannot return that data. After you receive the SHIP: card_shipped event webhook, you can retrieve the new information using Get Account Cards or Get Card. You can see the new PAN, CVV and expiry only if you are PCI compliant. Use cases Use the Switch Product endpoint for these use cases: Use case 1: Product switch without reissue — Use this method for a simple product switch without producing a new card. Also use this method when the products being switched do not have cards, such as savings accounts. Use case 2: Product switch and reissue with same PAN and expiry — Use this method to switch a virtual card to a physical card with the same PAN and new expiry or to switch to a Digital First product. Can also be used when both products are virtual. Use case 3: Product switch and reissue with same PAN and new expiry — Use this method when you want to reissue the card with the new product but do not want a new PAN. This method is best when both cards are physical. Use case 4: Product switch and issue and new PAN and expiry — Use this method to issue a new card for the new product with a new PAN and then deactivate the old PAN. Use case 1: Product switch without reissue The cardholder has a virtual card (product ID 5555) and wants to upgrade the card to another virtual card (product ID 6666). Because the new card is a virtual card, it cannot be reissued. Use this method for any product switch—physical card, virtual card, or non-card account—when a new card is not possible or not desired. Call Switch Product with these parameters: prodId: 6666 doReissue: N or blank newPan: N or blank newExpiryDate: N or blank emboss: N or blank oldCardStatus: blank Galileo returns prod_id: 6666 and sends the PSWC: product_switched event webhook. End result The account has product ID 6666. No card or emboss records were created or modified. Use case 2: Product switch with reissue and same PAN and expiry If you want to offer a virtual version of a card that cardholders can use until the physical version of the card is shipped, use Digital First cards. You can switch to a Digital First product using this example. You can also switch existing virtual-only card holders to a physical-only card using this process. 🚧WarningGalileo strongly recommends that you do not switch from one physical card to another physical card while retaining both the PAN and expiry, because the new physical card would be unprotected in transit—to protect it, you would have to set account feature 20 or 21, and that would affect the existing card, making it mostly unusable. Instead, go to Use case 3 to set a new expiry date for the new card. The cardholder has a virtual card (product ID 3333) and wants to upgrade to a physical card (product ID 4444). The physical card will have the same PAN and expiry date as the virtual card. The virtual card will be usable until the physical card is activated. Call Switch Product with these parameters: prodId: 4444 doReissue: Y newPan: N or blank newExpiryDate: N or blank emboss: Y oldCardStatus: blank Galileo returns prod_id: 4444 and sends the PSWC: product_switched event webhook. You need to protect the physical card in transit. (If the old card is physical, this step will block card-present transactions for the existing card.) You call Set Account Feature with these parameters: accountNo: PRN, PAN, or CAD. Use PAN or CAD if there are multiple active cards associated with the account. featureType: 20 or 21 featureValue: Y The emboss process: Creates an emboss record with prod_id: 4444 and status: Y (ready to emboss). Assigns the old PAN, CAD, expiry date, and CVV to the new card. Includes the emboss record in the batch file to be sent to the embosser. Sends the SHIP: card_shipped event webhook. The physical card is embossed and mailed to the cardholder. The cardholder activates the card using your preferred method and Galileo sends the BACT: card_activated event webhook. Because the PAN is the same, the cardholder does not need to reset the PIN. If you protected the physical card in transit, you need to lift the restrictions. Call Set Account Feature with these parameters: accountNo: PRN, PAN, or CAD featureType: 20 or 21 featureValue: N End result The account has product ID 4444. The new emboss record with prod_id: 4444 is in status: N (active). The physical card with the same PAN as the virtual card is active. Use case 3: Product switch with reissue and new expiry date The cardholder has a physical card (product ID 7777) and wants to switch to another physical-card product with better features (product ID 8888). The card will be reissued with the same PAN but new expiry date. The old card will be usable until the new card is activated, and then it is canceled. Call Switch Product with these parameters: prodId: 8888 doReissue: Y newPan: N or blank newExpiryDate: Y emboss: Y oldCardStatus: blank Galileo returns prod_id: 8888 and sends the PSWC: product_switched event webhook. Because the new card has a different expiry date, you do not need to protect it in transit. The emboss process performs these steps: Creates an emboss record with prod_id: 8888 and status: Y (ready to emboss) Assigns the same PAN to the new card. Generates a new expiry date and CVV. Includes the emboss record in the batch file to be sent to the embosser. Sends the SHIP: card_shipped event webhook. The physical card is embossed and mailed to the cardholder. The cardholder activates the card using your preferred method, and Galileo sends the BACT: card_activated event webhook. Because the card has the same PAN, the cardholder does not need to reset the PIN. End result The account has product ID 8888. The new emboss record is in status: N (active). The new card with the same PAN but new expiry as the old card is active. Use case 4: Product switch with new PAN and expiry The cardholder has a physical card (product ID 1111) and wants to upgrade to a product with improved features (product ID 2222). A new card will be issued for the new product with a new PAN and new expiry date. This scenario has two methods for canceling the old card, depending on the timing that you desire: Cancel shortly after switching the product — Set oldCardStatus to C or D. Cancel when the new card is activated — Leave oldCardStatus blank. Call Switch Product with these parameters: prodId: 2222 doReissue: Y newPan: Y newExpiryDate: Y emboss: Y oldCardStatus: C, D or blank Galileo returns prod_id: 2222 and sends the PSWC: product_switched event webhook. Because the new card has a different PAN, you do not need to protect it in transit. The emboss process: Creates a new card record with a new CAD. Generates a new PAN, expiry date and CVV. Creates an emboss record with prod_id: 2222 and status: Y (ready to emboss). Includes the emboss record in the batch file to be sent to the embosser. Changes the old card status to the value in oldCardStatus. If oldCardStatus is blank, no change is made. Sends the SHIP: card_shipped event webhook. The new card is embossed and mailed to the cardholder. The cardholder activates the card using your preferred method, and Galileo sends the BACT: card_activated event webhook. Because the PAN is new, the cardholder must reset the PIN using your preferred method. If oldCardStatus was blank and CANOC is not Y, then the old card is still active. Call Modify Status with these parameters: accountNo: PAN or CAD of old card; do not use the PRN type: 5 End result The account has product ID 8888. There is a new card record in status: N (active) with a new emboss record in status: N. The old card record is in status: C or status: D. Status codes Some of these status codes indicate that the product was successfully switched but that the reissue failed. In most cases, it is because you did not pass Valid parameter combinations. In such a case, you cannot fix the problem by calling Switch Product again with the correct parameters, because you cannot switch to the same product. Instead, call Reissue Card with the proper reissue parameters set. Status codeDescriptionNext steps590-01Product cannot be switched to same productVerify that prodId is different from the account's current product ID.590-02Product cannot be switched to an invalid productVerify that prodId is a valid product ID.590-03Product has been successfully switched but card reissue failed: The valid values for newPanFlag and newExpiryDate include Y/NCall Reissue Card and verify that newPanFlag and newExpiryDate are set to Y, N or blank590-04Product has not been successfully switched and card reissue failed: Trying to update card status without requesting new PANIf newPan is N or blank then oldCardStatus must be blank.590-05Product has been successfully switched but card reissue failed: The valid values for oldCardStatus include D/CCall Reissue Card and verify that oldCardStatus is set to C, D or blank.590-06Product has been successfully switched but card reissue failed: Trying to update card status without requesting new PANCall Reissue Card. If newPan is N or blank then oldCardStatus must be blank.590-07Product has been successfully switched but card reissue failed: Failure getting data associated with account/card. (Cannot retrieve CAD, ENP or product ID.)Call Reissue Card or contact Galileo for troubleshooting.590-08Product has been successfully switched but card reissue failed: Failure getting data associated with account/card. (CAD or XID is null.)Contact Galileo for troubleshooting.590-09Product has been successfully switched but card reissue failed: Insufficient funds to cover reissue feeFollow your business process for this use case.590-10Product has been successfully switched but card reissue failed: Failure, generic error processing reissue fee.Contact Galileo for troubleshooting.590-11If new_pan='Y' then new_expiry_date needs to be 'Y' tooProduct did not switch. Verify that newExpiryDate: Y when newPan: Y.590-12Product has been successfully switched but card reissue failed: card has pending reissue records. There is an emboss record in status: Y with the same product ID as the new product ID.This is a common status during testing when switching the same account repeatedly between products.If the existing emboss record is the desired emboss record, take no action. That card will be sent to the cardholder. If you are testing, call Activate Card to activate the existing emboss record and then call Reissue Card.Updated 2 months ago Table of Contents When to switch products Whether to reissue or replace Prerequisites for switching products How to switch products Using the Switch Product endpoint Result of calling Switch Product Program parameters Endpoint parameters Valid parameter combinations Switch Product workflow After the endpoint response Sample endpoint request and response Use cases Use case 1: Product switch without reissue Use case 2: Product switch with reissue and same PAN and expiry Use case 3: Product switch with reissue and new expiry date Use case 4: Product switch with new PAN and expiry Status codes "
302,docs.galileo-ft.com/pro/reference/post/gettranshistory,"Get Transaction History As desired, use the act_type field in the response to filter the responses by transaction type. See Record-Set Pagination for instructions on using the paging parameters. Open the Recipe below to see a response example.RecipesGet Transaction History responseOpen RecipeGet Transaction History response, primary and secondary accountsOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
303,docs.galileo-ft.com/pro/reference/api-reference-events-api-expire-hold,"expire_hold Code — EXHD Event trigger — A hold on an account expires. Processes — These processes contain the event trigger: Expire Hold endpoint Reverse Payment, if any payment holds exist Customer Service Tool Internal process that expires holds Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for hold_amount. Example: ""840"" description Description for the hold. Example: ""Manual hold"" expiry_dt Date-time when the hold will expire. Format: YYYY-MM-DD hh:mm:ss Example: ""2023-12-02 14:10:17"" hold_amount Amount of the hold. Example: ""25.00"" hold_id X Unique identifier for the hold. Example: ""234567"" hold_source The table that hold_source_id comes from. Example: ""pmt_info"" hold_type The transaction type (otype) of the hold. See the curated list of hold types for your program. Example: ""OR"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""EXHD"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""expire_hold"" Example JSON# expire_hold example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""description"": ""Manual hold"", ""expiry_dt"": ""2023-12-02 14:10:17"", ""hold_amount"": ""25.00"", ""hold_id"": ""234567"", ""hold_source"": ""pmt_info"", ""hold_type"": ""OR"", ""msg_event_id"": ""243693"", ""msg_id"": ""EXHD"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""expire_hold"" } Table of Contents Fields Example "
304,docs.galileo-ft.com/pro/reference/dispute/post/getquestionnaire,"Get Questionnaire Use the Get Questionnaire endpoint to retrieve the follow-up questions for a dispute, based on the answer returned by Add Case Reasons. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide.The contents of the response are customized according to the response submitted by Add Case Reasons. Status CodeCode Description0Success1506-4Invalid caseId or caseId returned no result1506-5Invalid Request:1506-6Error saving case1506-13caseId references a case that is currently locked1506-14Invalid request message1506-15This case is already resolved with status:1506-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
305,docs.galileo-ft.com/pro/reference/api-reference-activity-type,Activity Type act_typeDescriptionABAllpoint backoutADAdjustmentAPAllpoint authorizationASAllpoint settlementAUMastercard credit authorizationAXAllpoint authorization expirationBAAllpoint preauthorization backoutBCDiscover backoutBDMaestro/Cirrus backoutBKMastercard Banknet preauthorization backoutBOMastercard credit backoutBPPulse backoutBSStar authorization backoutBVVisa authorization backoutCXDiscover expired authorizationDADenied authorization (credit rails)DBMaestro/Cirrus authorizationDCDiscover authorizationDDDenied authorization (debit rails)DXMaestro/Cirrus expired authorizationEXMastercard credit expired authorizationFEFeeISVisa Interlink settlementMPStar MoneyPass settlementOBUmbrella reserve release/backoutOEUmbrella reserve release/expirationORUmbrella reserveOTUmbrella takePBMastercard credit preauthorization backoutPEPending paymentPLVisa Plus settlementPMPaymentPRStar Presto settlementPSStar preauthorization backoutPUPulse authorizationPVVisa preauthorization backoutPXPulse expired authorizationSCDiscover settlementSDMaestro/Cirrus settlementSEMastercard credit settlementSPPulse settlementSSStar settlementSTStar authorizationSXStar expired authorizationTETransaction expiredTHTransaction holdVIVisa authorizationVSVisa settlementVXVisa expired authorization 
306,docs.galileo-ft.com/pro/docs/rdf-reference,"RDF Reference This document contains details about each of the standard RDFs, including field descriptions: Customer Master Account Card Authorized Transactions Posted Transactions Lookup file Customer Master RDF The Customer Master RDF is a list of all of your primary account holders. The first Customer Master RDF that you receive contains all of your account records. The RDFs after that contain only the new records and the changed records from the previous day. This table contains the default fields for the Customer Master RDF. The primary key for this file is GALILEO ACCOUNT ID + UNIQUE PROGRAM ID. Also see Customizing the RDFs to see fields to add. All fields are strings unless otherwise specified. RDF field nameLengthDescriptionRECORD TYPE1The type of record. D — Detail; H — Header; T — TrailerUNIQUE PROGRAM ID15Numeric. The identifier that Galileo has assigned to your program.ISSUED DATE8The date/time when the customer account was activated.ID50The customer's ID that was used for KYC/CIP, usually the SSN. You can see an SSN only if you are PCI compliant; otherwise, you get blank spaces. See the Customer ID Types enumeration for the possible values.ID TYPE5The type of identifier in the ID field, such as SSN or driver license. See the Customer ID Types enumeration for the possible values.PRIMARY CARDHOLDER'S FIRST NAME20The customer's first namePRIMARY CARDHOLDER'S LAST NAME20The customer's last nameADDRESS LINE 140The first line of the customer's primary addressADDRESS LINE 240The second line of the customer's primary address, if any.CITY20The city of the customer's primary addressSTATE2The state or province of the customer's primary addressZIP CODE9The postal code of the customer's primary addressPRIMARY PHONE NUMBER10The phone number that the customer gave as their primary number.SECONDARY PHONE NUMBER10The phone number that the customer gave as their secondary number, if anySTATUS5The status of the account.CURRENT BALANCE13The balance of the account as of 23:59:59 on the previous day. This is the ledger balance, which is the total of all posted transactions. Pending transactions such as authorization holds are not subtracted out.CURRENT BALANCE SIGN1A + or - sign to indicate whether the account balance is positive or negative.CREATED DATE8The date/time when a customer first applies for an account. A record with this value is created regardless of whether the customer application is approved or denied.NEGATIVE BALANCE DATE8Date on which the available balance was driven negative.NEGATIVE BALANCE FEE AMOUNT13Fee assessed to an account that was driven negative.RELOADABLE INDICATOR1Numeric. Boolean (0 or 1) to indicate whether the card is reloadable. 1 means reloadable.GALILEO ACCOUNT ID30Numeric. The balance ID, which is different from the account ID (PRN). It is possible for two or more accounts to share the same balance ID.TYPE OF ACCOUNT5The name given to the product, such as ""Mastercard Debit"" or ""Visa Instant Issue.""AVAILABLE BALANCE13The available balance as of 23:59:59 on the previous day. This is the CURRENT BALANCE minus pending transactions such as authorization holds.AVAILABLE BALANCE SIGN1A + or - sign to indicate whether the available balance is positive or negative.EXTERNAL ACCOUNT NUMBER30An identifier that you provide for your own tracking purposes. You pass this value in the externalAccountId parameter of the Create Account or Update Account endpoint.LAST TRANS DATE8The date of the last posted transaction on this account as of 23:59:59 on the previous day, including payments, settlements, adjustments, and fees. This value does not include unsettled authorizations or pending transactions.DATE OF BIRTH8Account holder date of birth.BILL CYCLE DAY2Numeric. Day of the month for the billing cycle.LOCATION ID20Location at which the account was created, if applicable. Value can be provided by you or by Galileo.AGENT USER ID2ID of the agent who created the account.ID 250Secondary identity number, if provided, such as driver license or SSN. See the Customer ID Types enumeration for the possible values.ID TYPE 25The type of identifier in the ID 2 field, such as SSN or driver license. See the Customer ID Types enumeration for the possible values.PRN12The payment reference number, a unique Galileo-generated identifier for an account. Account Card RDF The Account Card RDF is a list of all cards that you have issued. The first Account Card RDF that you receive contains all of your card records. The RDFs after that contain only the new records and the changed records from the previous day. 📘NoteAny changes to a card record, including resetting the PIN fail count by a backend process, results in the card record being included in the differential file. Some of these changes are not reflected in the data in the RDF. This table contains the default fields for the Account Card RDF. The primary key for this file is UNIQUE PROGRAM ID + CARD ID. Also see Customizing the RDFs to see fields to add. All fields are strings unless otherwise specified. RDF field nameLengthDescriptionRECORD TYPE1The type of record. D — Detail; H — Header; T — TrailerUNIQUE PROGRAM ID15Numeric. The identifier that Galileo has assigned to your program.GROUP ID15Source or affiliate ID. Usually the same as LOCATION ID in the Customer Master RDF.PRODUCT ID15Numeric. The code that is assigned to the product the card belongs to.GALILEO ACCOUNT ID30Numeric. The balance ID, which is different from the account ID (PRN). It is possible for multiple accounts to share the same balance ID.PRN12The payment reference number, a Galileo-generated ID for the card's account.EXPIRATION DATE8The card's expiration date. If you are not PCI compliant you will receive empty spaces for this value.CARD STATUS5The card status, such as N (active), S (stolen) or C (canceled)CARD IDENTIFIER30Numeric. Sometimes called the CAD, this identifier is given to each unique card that is issued to an account. There is a one-to-one relationship between a card ID and a PAN. If you are not PCI compliant, you can use this identifier instead of the PAN.CARD NUMBER16The card's PAN. If you are not PCI compliant you will get empty spaces for this value.TYPE OF CARD10The branded network to which the card belongs, such as Mastercard or Visa, as well as the type of card, such as personalized or instant issue. Authorized Transactions RDF The Authorized Transactions RDF contains transactions that passed through the authorization stream during the previous day. These transactions include authorization requests, AVS-only checks, reversal advices and completion advices. This RDF does not include these authorization events: Mastercard Banknet merchant credits (adjustments) Visa Money Transfer and ReadyLink card loads (payments) Only a subset of the transactions in this RDF will also be included in a Posted Transactions RDF. For example, authorization reversals, AVS-only checks, and denied transactions are not in the Posted Transactions RDF because they do not settle. Foreign authorizations When a transaction takes place in a country that is foreign relative to the account's country, the AUTHORIZATION AMOUNT is in the currency of the account. For example, if an account is located in the United States and the cardholder makes a purchase in Canada, the AUTHORIZATION AMOUNT is in U.S. dollars and the TRANSACTION CURRENCY CODE is 124 (Canadian dollar). The currency conversion is performed by the card network, and it reflects the conversion rate at the time of the authorization. Keep in mind that some online merchants conduct business in the currency of the customer instead of the location of the merchant, depending on where the customer is located. For example, a website that is based in the U.K. could have a U.S. version of its website, and so transactions on that version would be conducted in U.S. dollars. For examples of foreign transactions see International transaction in Card Transaction Examples and these scenarios: Scenario 13: International Authorization Scenario 14: International Reversal Authorized Transactions RDF fields This table contains the default fields for the Authorized Transactions RDF. The primary key for this file is UNIQUE PROGRAM ID + AUTHORIZATION CODE + NETWORK CODE. Also see Customizing the RDFs to see fields to add. The Source column indicates where the value came from: Galileo-provided or a data element (DE) in the ISO 8583 message from the network. The actual DE number for a field may vary by network, and not all DEs are present for all networks. All fields are strings unless otherwise specified. RDF field nameSourceLengthDescriptionRECORD TYPEGalileo1The type of record. D — Detail; H — Header; T — TrailerUNIQUE PROGRAM IDGalileo15Numeric. The identifier that Galileo has assigned to your program.GALILEO ACCOUNT IDGalileo30Numeric. The balance ID, which is different from the account ID (PRN). It is possible for two or more accounts to share the same balance ID.CARD IDENTIFIERGalileo30Numeric. Sometimes called the CAD, this identifier is given to each unique card that is issued to an account. If you are not PCI compliant, you can use this identifier instead of the PAN.TRANSACTION DATE/TIMEGalileo17This date/time stamp identifies the time that Galileo responds to the authorization request. MMDDYYYY HH24:MM:SSTRANSACTION CURRENCY CODEDE0493The currency code at the point of sale.ADDRESS VERIFICATION RESPONSEGalileo1The single-character result of the AVS check that Galileo passed to the network. For more information see AVS-only checks in the Authorization guide.AUTHORIZATION RESPONSEDE0392The response code that you or Galileo returned to the network. See the Authorization Response Codes enumeration for possible values.TRANSACTION AMOUNTDE004 times the conversion rate in DE00913The amount that you or Galileo authorized for the transaction. This amount may be different from the amount of the authorization request in the case of a partial authorization. If AUTHORIZATION RESPONSE is 10 or 87, the amount is a partial authorization. This amount is in the currency of the account.AUTHORIZATION AMOUNT SIGNGalileo1A + or - sign to indicate whether the amount is to be debited (-) or credited (+) to the cardholder account.AUTHORIZATION CODEGalileo10Numeric. A Galileo-generated identifier for the authorization, called auth_id in other contexts. This ID is unique only per subnetwork, so there could be an ID collision between an authorization from Mastercard Banknet and an authorization from Visa Interlink, for example. However, there is no collision among identifiers for the Visa networks (Visa credit, Interlink, Plus). See Mapping Transactions Within Your System for more information.NETWORK CODEGalileo1A single-letter identifier to specify the subnetwork over which the authorization request arrived. See Network Codes for possible values.MERCHANT NUMBERDE04230An identifier that each network assigns to a merchant location.MERCHANT DESCRIPTIONDE04350Descriptive text provided by the merchant to identify the merchant name and location and sometimes the transaction type.MERCHANT CATEGORY CODEDE0184The ISO 18245 four-digit identifier that specifies the type of merchant, such as ATM, gas pump, bookseller, airline, hotel, and so on.TRANSACTION CODE*Galileo15A numeric value that corresponds to the type of transaction that is being attempted.MERCHANT COUNTRY CODEDE0185The ISO 3166-1 three-digit code for the country where the merchant is officially located.PRNGalileo12The payment reference number, a unique Galileo-generated identifier for an account. * The TRANSACTION CODE field in the Authorized Transactions RDF does not correspond to the TRANSACTION CODE/TYPE field in the Posted Transactions RDF. The data in the TRANSACTION CODE is unique to the Authorized Transactions RDF. See the Authorization types table in the Transactions Types enumeration for the values or consult the Lookup file for the RDFs. Posted Transactions RDF The Posted Transactions RDF contains every transaction that has posted to a customer account during a 24-hour period: settlements, payments, adjustments and fees. To match a settlement with its corresponding authorization, use the AUTHORIZATION CODE or SOURCE ID (which are identical for card transactions). These types of transactions do not have corresponding entries in the Authorized Transactions RDF: Adjustments Most payments, except for Mastercard and Maestro loads (PMML, PMMX) Visa, Green Dot, and MoneyGram card loads Account transfers Mastercard Banknet merchant credits Most fees. The authorization request amount from an ATM includes all fees. ATM fees that you assess are broken out separately in the Posted Transactions RDF. The ORIGINAL AUTH CODE for the fee contains the AUTHORIZATION CODE of the original ATM authorization. ACH transactions Direct deposit Bill pay Chargebacks, second presentments, provisional credit, and arbitration Charge offs Force-posted settlements Roundups Post time for completions The timestamp for a posted transaction usually corresponds to the time Galileo posts the transaction to the cardholder account. However, in the case of completions (transaction type C), the completion time in the Posted Transactions RDF is the time of the completion, whereas the amount is settled later, after Galileo receives the batch settlement file. For example, a cardholder gets a preauthorization at a gas pump for 75.00 at 09:00:01 and Galileo places a 75.00 hold on the account. The completion for 35.00 arrives through the authorization stream at 09:04:30. Galileo backs out the 75.00 and places a 35.00 hold on the account. The timestamp for the completion in the Authorized Transactions RDF and the Posted Transactions RDF is 09:04:30, but the actual settlement will be a day or so later. This later settlement is visible in the CST and Program API responses but not in the Posted Transactions RDF. For an example of a completion at a gas pump see Five-step sequence in Card Transaction Examples and Scenario 2: Preauthorization with Completion. Foreign settlements When a foreign transaction is settled, TRANSACTION AMOUNT is in the currency of the account rather than the currency of the merchant. The currency conversion is performed by the card network, and it reflects the conversion rate at the time the transaction cleared, which may be a different rate than when the transaction was authorized. See Foreign authorizations for more information. Posted Transactions RDF fields This table contains the default fields for the Posted Transactions RDF. The primary key for this file is UNIQUE PROGRAM ID + AUTHORIZATION CODE + TRANSACTION CODE/TYPE. Also see Customizing the RDFs to see fields to add. The Source column indicates where the value came from: Galileo-provided or a data element (DE) in the ISO 8583 message from the network. The actual DE number for a field may vary by network, and not all DEs are present for all networks. All fields are strings unless otherwise specified. RDF field nameSourceLengthDescriptionRECORD TYPEGalileo1The type of record. D — Detail; H — Header; T — TrailerUNIQUE PROGRAM IDGalileo15Numeric. The identifier that Galileo has assigned your program.GALILEO ACCOUNT IDGalileo30Numeric. The balance ID, which is different from the account ID (PRN). It is possible for two or more accounts to share the same balance ID.CARD IDENTIFIERGalileo30Numeric. Sometimes called the CAD, this identifier is given to each unique card that is issued to an account. If you are not PCI compliant, you can use this identifier instead of the PAN.TRANSACTION DATE/TIMEGalileo17The time that Galileo responds to the authorization request. MMDDYYYY HH24:MM:SSTRANSACTION CODE/TYPEGalileo10The concatenation of the activity type (act_type) and the transaction type (otype). For an explanation of transaction codes see Classifying transactions in the About Transactions guide.TRANSACTION AMOUNTGalileo13The amount that was posted to the account. In the case of a settlement, the amount may be different from its corresponding authorization amount. This amount is in the currency of the account.TRANSACTION AMOUNT SIGNGalileo1A + or - sign to indicate whether the amount was debited (-) or credited (+) to the cardholder account.TRANSACTION CURRENCY CODEDE0493The currency code at the point of sale, in the case of card transactions.AUTHORIZATION CODEGalileo10Numeric. A Galileo-generated identifier for an authorization, called auth_id in other contexts. For non-network transactions, this field contains the ID for the payment, adjustment, or fee. This ID is unique only per subnetwork or transaction type (payment, adjustment, fee), so there could be an ID collision between an authorization from Mastercard Banknet and a payment, for example. See Mapping Transactions Within Your System for more information.POST DATEGalileo8The date when Galileo posted the transaction to the customer account. MMDDYYYYNETWORK CODEGalileo1A single-letter identifier to specify the subnetwork over which the authorization request arrived. This field is populated only for card transactions. See Network Codes for possible values.MERCHANT NUMBERDE04230An identifier that each network assigns to a merchant location. This field is populated only for card transactions.MERCHANT DESCRIPTIONDE04350Descriptive text provided by the merchant to identify the merchant name and location and sometimes the transaction type. This field is populated only for card transactions.MERCHANT CATEGORY CODEDE0184The ISO 18245 four-digit identifier that specifies the type of merchant, such as ATM, gas pump, bookseller, airline, hotel, and so on. This field is populated only for card transactions.MERCHANT COUNTRY CODEDE0195The ISO 3166-1 three-digit code for the country where the merchant is officially located. This field is populated only for card transactions.INTERCHANGE FEE AMOUNTGalileo9The amount of interchange or fee associated with this transaction. ATM fees and interchange reversals are negative; interchange earned is positive. This field is populated only for card transactions.EXTERNAL TRANSACTION IDvaries20For network transactions, the authorization identification response in DE038, which is a numeric code that Galileo returns to a merchant to verify that the transaction was authorized. This number is often printed on customer receipts. For other transactions initiated by the Program API, this is the transactionId of the API request. This field may be populated in other ways according to your setup and the transaction type.PRNGalileo12The payment reference number, a unique Galileo-generated identifier for an account. Lookup file Use the Lookup file to interpret the codes in some of the RDF fields. The Lookup file for a particular day contains only those values that are included with the other RDFs on that day, so this file will include some values on one day that it does not include on other days. The DESCRIPTION field contains a short description rather than a long description, because the specific meaning for some fields is different for each Galileo client according to their setup. The primary key for this table is FILE TYPE + FIELD NAME + CODE. There is no foreign key to link this file to the other RDFs. All fields are strings. FieldLengthDescriptionRECORD TYPE1The type of record. D — Detail; H — Header; T — TrailerFILE TYPE1The RDF that contains the field: A (Authorized Transactions), C (Customer Master), D (Account Card), or P (Posted Transactions)FIELD NAME30Name of the field in the RDFCODE10Possible values for the fieldDESCRIPTION50Description of the CODE value Customizing the RDFs You can customize your RDFs to meet your business needs. In general, if Galileo stores a value in its databases, it can provide the value in an RDF. Galileo recommends that you customize your RDFs during preliminary setup, although you can also add and delete fields later. 📘NoteIf you would like to include a subfield or subelement of an ISO 8583 data element, as opposed to the whole element, it will require development work to parse the subfield or subelement and include it in the RDF. This table contains a list of fields that you might want to add to the default RDF layouts. These are fields that Galileo clients commonly add. The actual DE number for a field may vary by network, and not all DEs are present for all networks. Field nameSourceDescriptionRDFPOS ENTRY MODEDE022First two characters of DE022. How the PAN was entered, such as magnetic stripe, EMV chip, or contactless. See DE022 Codes.Authorized, PostedPIN ENTRY CAPABILITYDE022Third character of DE022. Whether the card reader had PIN-entry capability. See DE022 Codes.AuthorizedSOURCE IDGalileoFor card transactions, the source ID is the same as the authorization ID. For other types of transactions, the source ID maps back to the original transaction, such as payment ID, adjustment ID and ACH transaction ID. This value is useful to track transactions across Galileo systems. The ID field in the CST corresponds to the source ID.Keep in mind that the source ID is unique only to the transaction type or the subnetwork, so there could be a collision between a source ID for a payment and a source ID for an authorization, for example. You will need to devise a way to mark source IDs with their respective activity types. See Mapping Transactions Within Your System for more information.Authorized, PostedPRODUCT IDGalileoIdentifier for the account's product in the Galileo system.Authorized, PostedLOCAL SURCHARGE AMOUNTDE028DE046 (Allpoint)Fee applied to the ATM withdrawal amount by the ATM's operator.Authorized, PostedREVERSAL IDGalileoMaps back to the original_auth_id, original_id, and prior_id in other Galileo contexts. It contains the authorization ID of the previous authorization in a series, such as with incremental authorizations, reversals, and completions. See Linking transactions in the About Transactions guide for more information.Authorized, PostedMESSAGE TYPE FLAGGalileoThe transaction type (otype).Authorized, PostedTRANSACTION DESCRIPTIONVariousThe description for the transaction as provided by various sources.PostedCREDIT INDICATORGalileoIndicates whether the transaction used credit or debit rails. N — PIN transaction (debit); Y — signature (credit)Authorized, PostedCASHBACK AMOUNTGalileoThe amount of cashback that was included in the transaction.Authorized, PostedTRACE NUMBERDE011An identifier for a transaction, generated by the message initiator (usually the merchant), that is included with all messages related to that transaction.PostedFROZENGalileoA Boolean to indicate whether the card is frozen. Accompanied by LOCK START DATE and LOCK END DATE.Account CardEXPIRED AUTH CODEGalileoThe AUTHORIZATION CODE of the expired authorization that the settlement matches.PostedIN DE39DE039The response code that the network returned to the merchant during stand-in processing (STIP).Authorized TransactionsSTIP STATUSGalileoWhether the STIP transaction was an approval or denial. STIP — Transaction approved; STIP Decline — Transaction denied.Authorized TransactionsUpdated 14 days ago Table of Contents Customer Master RDF Account Card RDF Authorized Transactions RDF Foreign authorizations Authorized Transactions RDF fields Posted Transactions RDF Post time for completions Foreign settlements Posted Transactions RDF fields Lookup file Customizing the RDFs "
307,docs.galileo-ft.com/pro/reference/api-reference-events-api-signature-example,"Events API Signature Example This page will walk you through an example of how the Signature is computed in the HTTP request. HTTP Request Example Here is an HTTP request example for an event (ACHC), that uses the form content type (application/x-www-form-urlencoded): POST /Transaction Host: some.client.domain.com Encryption-Type: HMAC-SHA256 Content-Length: 178 User-Agent: python-requests/2.9.1 Connection: keep-alive Signature: DkY7o3ynLLvNvnDHraFicMP+gK/UOAL09WsNj2mQ1ww= Accept: */* Date: 20170504:141752UTC Content-Type: application/x-www-form-urlencoded User-Id: galileo Accept-Encoding: gzip,deflate type=ach_credit_fail&account_id=2011&amount=45&prn=155200002022&prod_id=1701&prog_id=305&return_code=R01&source=Chase+Bank&source_id=6426460&timestamp=2019-10-09+11%3A20%3A33+MST The next section will explain how the Signature was computed, so that you can compute it and make sure it is correct (to authenticate the request). Signature Computation Steps First, collect the following header fields into a hash map (remember to use an upper case D on User-ID): Pythondata = {  ""Content-Length"": ""178"",  ""Encryption-Type"": ""HMAC-SHA256"",  ""User-ID"": ""galileo"",  ""Content-Type"": ""application/x-www-form-urlencoded"",  ""Date"": ""20170504:141752UTC"" } Add the form parameters, and sort by key, resulting in the following: Pythondata = {  ""Content-Length"": ""178"",  ""Content-Type"": ""application/x-www-form-urlencoded"",  ""Date"": ""20170504:141752UTC"",  ""Encryption-Type"": ""HMAC-SHA256"",  ""User-ID"": ""galileo"",  ""account_id"": ""2011"",  ""amount"": ""45"",  ""prn"": ""155200002022"",  ""prod_id"": ""1701"",  ""prog_id"": ""305"",  ""return_code"": ""R01"",  ""source"": ""Chase Bank"",  ""source_id"": ""6426460"",  ""timestamp"": ""2019-10-09 11:20:33 MST"",  ""type"": ""ach_credit_fail"" } If you are using a dictionary/hash map in your code, be aware that some languages do not sort the keys automatically, nor honor insertion order. For each value, compute the Base64 encoding of each of the values in data (using the UTF-8 encoding of the values): Pythondata = {  ""Content-Length"": ""MTc4"",  ""Content-Type"": ""YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVk"",  ""Date"": ""MjAxNzA1MDQ6MTQxNzUyVVRD"",  ""Encryption-Type"": ""SE1BQy1TSEEyNTY="",  ""User-ID"": ""Z2FsaWxlbw=="",  ""account_id"": ""MjAxMQ=="",  ""amount"": ""NDU="",  ""prn"": ""MTU1MjAwMDAyMDIy"",  ""prod_id"": ""MTcwMQ=="",  ""prog_id"": ""MzA1"",  ""return_code"": ""UjAx"",  ""source"": ""Q2hhc2UgQmFuaw=="",  ""source_id"": ""NjQyNjQ2MA=="",  ""timestamp"": ""MjAxOS0xMC0wOSAxMToyMDozMyBNU1Q="",  ""type"": ""YWNoX2NyZWRpdF9mYWls"" } Now, build the following string, concatenating key-value pairs with | and leaving no space between successive key-value pairs: Content-Length|MTc4Content-Type|YXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkDate|MjAxNzA1MDQ6MTQxNzUyVVRDEncryption-Type|SE1BQy1TSEEyNTY=User-ID|Z2FsaWxlbw==account_id|MjAxMQ==amount|NDU=prn|MTU1MjAwMDAyMDIyprod_id|MTcwMQ==prog_id|MzA1return_code|UjAxsource|Q2hhc2UgQmFuaw==source_id|NjQyNjQ2MA==timestamp|MjAxOS0xMC0wOSAxMToyMDozMyBNU1Q=type|YWNoX2NyZWRpdF9mYWls Finally, using the shared secret key you have set up with Galileo, and the hashing algorithm in the Encryption-Type header field, compute the signature of the string above, and Base64 encode the result. Assuming the shared secret key is mysecret (encoded in UTF-8) and the encryption type is HMAC-SHA256, you should get: DkY7o3ynLLvNvnDHraFicMP+gK/UOAL09WsNj2mQ1ww= Python 3 Code Snippet The code below demonstrates how to compute the signature using Python 3: Pythonimport base64 import hmac from typing import Dict import urllib.parse HEADERS_TO_SIGN = (  ""Content-Length"",  ""Content-Type"",  ""Encryption-Type"",  ""User-ID"",  ""Date"", ) def normalize_header_key(header_key: str) -> str:  """"""Normalize header key/name  @param header_key: Header key, e.g. ""Content-length"".  @return Normalized header key  """"""  if header_key.lower() == ""user-id"":   return ""User-ID""  else:   return header_key.title() def compute_signature(headers: Dict[str, str], payload: Dict[str, str], secret: str) -> str:  """"""Compute the Galileo HMAC-SHA256 signature of a request, using key.  :param headers: HTTP request headers  :param payload: HTTP request payload, parsed into a dictionary/hash map. These   are the event parameters (url decoded if the request was received as   application/x-www-form-urlencoded).  :param secret: The secret key for computing the signature  :return: HMAC, as a base64 string  """"""  # Normalize all header keys:  normalized_headers = {normalize_header_key(key): value       for key, value in headers.items()}  # Add headers to sign:  data_to_sign = {}  for header_key in HEADERS_TO_SIGN:   data_to_sign[header_key] = normalized_headers[header_key]  # Add payload parameters to sign:  for key, value in payload.items():   data_to_sign[key] = value  # Compute the string to sign, in sorted key order and using the base64  # encoding of the values:  string_to_sign = """"  for key in sorted(data_to_sign.keys()):   # Note: In Python 3, base64 returns an ASCII-encoded byte array, not a string.   # Also, the default encoding for Python 3 encode/decode is utf-8 (and ascii is   # equivalent to utf-8 for the base64 character range); so, encoding= could be   # omitted throughout, but is added for clarity.   val_b64_bytes = base64.b64encode(data_to_sign[key].encode(encoding=""utf-8""))   kv_to_sign = key + ""|"" + val_b64_bytes.decode(encoding=""ascii"")   string_to_sign += kv_to_sign  # Compute the base64-encoded signature:  secret_bytes = secret.encode(encoding=""utf-8"")  string_to_sign_bytes = string_to_sign.encode(encoding=""utf-8"")  signature_bytes = hmac.new(secret_bytes, msg=string_to_sign_bytes, digestmod=""SHA256"").digest()  signature_b64_bytes = base64.b64encode(signature_bytes)  return signature_b64_bytes.decode(encoding=""ascii"") # ============================================================================ EXAMPLE_HEADERS = {  ""Host"": ""some.client.domain.com"",  ""Encryption-Type"": ""HMAC-SHA256"",  ""Content-Length"": ""178"",  ""User-Agent"": ""python-requests/2.9.1"",  ""Connection"": ""keep-alive"",  ""Signature"": ""DkY7o3ynLLvNvnDHraFicMP+gK/UOAL09WsNj2mQ1ww="",  ""Accept"": ""*/*"",  ""Date"": ""20170504:141752UTC"",  ""Content-Type"": ""application/x-www-form-urlencoded"",  ""User-Id"": ""galileo"",  ""Accept-Encoding"": ""gzip,deflate"", } EXAMPLE_PAYLOAD = ""type=ach_credit_fail&account_id=2011&amount=45&prn=155200002022&prod_id=1701&prog_id=305&return_code=R01&source=Chase+Bank&source_id=6426460&timestamp=2019-10-09+11%3A20%3A33+MST"" EXAMPLE_SECRET = ""mysecret"" # Convert payload to a Python 3 dictionary, normalized to str -> str: parsed_payload = {key: value[0] for key, value in urllib.parse.parse_qs(EXAMPLE_PAYLOAD).items()} signature = compute_signature(EXAMPLE_HEADERS,        parsed_payload,        EXAMPLE_SECRET) assert signature == EXAMPLE_HEADERS[""Signature""] Table of Contents Overview HTTP Request Example Signature Computation Steps Python 3 Code Snippet "
308,docs.galileo-ft.com/pro/reference/lending/post/getloaninstallmentstatuses,"Get Loan Installment Statuses Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1206-01The loanId is invalid or does not exist.1206-02The subProductId is invalid or does not exist.LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
310,docs.galileo-ft.com/pro/reference/post/setalerts,Set Alerts The table below lists status codes that apply to this specific endpoint. Status CodeCode Description404-01Alert message type is not configured404-02Feature not allowed for account productLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
311,docs.galileo-ft.com/pro/page/scenario-11-atm-withdrawal,"Scenario 11: ATM Withdrawal << Back to the index A debit cardholder goes to an ATM and makes a balance inquiry, and then inputs $60 as the withdrawal amount. The ATM dispenses three $20 bills. The following are true: The initial available balance is $1000. The ATM validates the debit card with a PIN. The ATM operator charges a $2 fee. The card issuer charges a $1 fee. The network is Maestro Debit Switch. Sequence of events Events in the same step have the same timestamp. Mastercard sends a balance inquiry, and Galileo responds with the balance. Galileo sends an AABI: bal webhook. Mastercard sends an authorization request for –62.00 and Galileo adds a –1.00 fee. Galileo approves the request and places a 63.00 hold on the cardholder account. The available balance is now 937.00. Galileo sends a BAUT: auth. Mastercard sends a batch file that contains the –62.00 transaction. Galileo backs out the 63.00 hold and posts –62.00 to the account plus the –1.00 fee. The available balance is still 937.00. Galileo sends SETL: setl and BFEE:fee webhooks. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampauthBalance Inquiry0.0022110100020210413:095359MSTauthATM6322440.00100020210413:095448MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampAABIbal02211010002021-04-13 09:53:59 MSTBAUTauth63224409372021-04-13 09:54:48 MSTSETLsetl62224409382021-04-15 05:35:20 MSTBFEEfee1112209372021-04-15 05:35:20 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME0.00+221110004132021 09:53:5963.00-22449004132021 09:54:48 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE62.00-2244SDW224404132021 09:54:48041520211.00-1122FE0013112204132021 09:54:4804152021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. The local_amt does not include the issuer fee. amtauth_idoriginal_auth_idtypelocal_amttimestamp-6322440W0000000062002021-04-13 09:54:48 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-6222440SDW2021-04-13 09:54:482021-04-15 05:35:20-111220FE00132021-04-15 05:35:202021-04-15 05:35:20 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-6322440DBW2244937N2021-04-13 09:54:482021-04-13 09:54:4863NoneNoneBDW22441000NoneNone2021-04-15 05:35:20-6222440SDW2244938N2021-04-13 09:54:482021-04-15 05:35:20-122440FE00131122937None2021-04-15 05:35:202021-04-15 05:35:20 "
312,docs.galileo-ft.com/pro/reference/api-reference-events-api-setl,"setl Code — SETL Event trigger — One of the following takes place: Galileo matches the transaction in the card network's batch file with a transaction in its database and posts the settlement. Galileo receives a clearing message for a transaction for which there is no matching authorization and posts the settlement. Process — This process contains the event trigger: Galileo receives a clearing batch file from a card network, and Galileo compares the transactions in the batch file with its own authorization records. Fields All fields are strings. Your field names may vary. Field Required Description act_type X See Activity Type for possible values. Example: ""SE"" amount X Amount of the settlement. Example: ""25.33"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billing_amt Amount to be billed in the currency of the cardholder account (DE006). Example: ""24.35"" billing_curr_code Currency code for billing_amt (DE051). Example: ""840"" bookkeeping_auth_id* The auth_id of the bookkeeping authorization record that is next in the series. Example: ""108932"" cad X Galileo-generated card ID. Example: ""12534"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" expired_auth_id The auth_id of the expired authorization that matches this settlement. fund_pastotb The available balance of the real-time funding account after this transaction takes place. Example: ""24365.90"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" interchange_fee Interchange fee from the network. Example: ""0.10059836"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" mcc X Merchant category code (DE018). Example: ""5712"" merchant Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" merchant_postal_code The postal code for the merchant. Example: ""10021"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""SETL"" multi_count Total number of settlements in the sequence. Example: ""3"" multi_number Number in the sequence for this settlement. Example: ""2"" network X See Events Network Codes for possible values. Example: ""M"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" original_multiclearing_auth_id* The auth_id of the original preauthorization. Example: ""456012"" otype X See Transaction Types for possible values. Example: ""5"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" post_date Date that the transaction posted to the cardholder account. Format: MM/DD/YYYY Example: ""03/18/2023"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" remaining_amount* The amount of the preauthorization that has not been cleared yet. Example: ""6.45"" response_code See Authorization Response Codes for possible values. Example: ""00"" rrn Retrieval reference number (DE037). Format: Julian date YDDDxxxxxxxx Mastercard only. Example: ""314293027549"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" settle_detail_id X ID that maps back to the settlement record for the transaction. Example: ""13354855"" signed_amount The amount of the settlement plus a negative sign (-) when the amount debits the open_to_buy. This field is not populated in CV. Example: ""-25.34"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""setl"" user_data Populated according to your use case and needs by arrangement with Galileo. * For existing clients these multi-clearing fields must be enabled by request. The fields might have different names. Check with Galileo for the names used by your program. Example JSON# setl example: { ""act_type"": ""SE"", ""amount"": ""25.33"", ""auth_id"": ""12303090"", ""avail_cash"": ""143.11"", ""balance_id"": ""20211"", ""billing_amt"": ""24.35"", ""billing_curr_code"": ""840"", ""bookkeeping_auth_id*"": ""108932"", ""cad"": ""12534"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""interchange_fee"": ""0.10059836"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""mcc"": ""5712"", ""merchant"": ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""merchant_postal_code"": ""10021"", ""msg_event_id"": ""243693"", ""msg_id"": ""SETL"", ""multi_count"": ""3"", ""multi_number"": ""2"", ""network"": ""M"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""original_multiclearing_auth_id*"": ""456012"", ""otype"": ""5"", ""pmt_ref_no"": ""155101003022"", ""post_date"": ""03/18/2023"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""remaining_amount*"": ""6.45"", ""response_code"": ""00"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""settle_detail_id"": ""13354855"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""setl"" } Table of Contents Fields Example "
313,docs.galileo-ft.com/pro/reference/dispute/post/gettransactions,"Get Transactions Use the Get Transactions endpoint to retrieve the account holder transactions that are eligible to be disputed. You can filter the results by start date, end date, amount, and merchant name. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1504-4Invalid caseId or caseId returned no result1504-5Invalid Request:1504-6Error saving case1504-8Problem validating search criteria:1504-13caseId references a case that is currently locked1504-14Invalid request message1504-15This case is already resolved with status:1504-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
314,docs.galileo-ft.com/instant/reference/cardholder-status,"Cardholder Status StatusDescriptioninvitedThe Cardholder has been created, CIP has not been run yetfailed_cipThe Cardholder failed CIPactiveThe Cardholder is good to goinactiveThe Cardholder is disabled "
315,docs.galileo-ft.com/pro/changelog/december-2020,"December 2020 Guide updated We updated the Creating an Account guide to show the correct account status when a customer fails Galileo's integrated CIP. New guides added We added these new guides: Overview Environments — About the Production, CV, and Sandbox environments. Postman Setup — How to use Postman in the Sandbox. Cards PIN Set Procedures — Summary of the PIN-set procedures that are available, including the two procedures listed below: Direct Render PIN-Set Procedure Direct POST PIN-Set Procedure Authorization Event removed We removed the Authorization Event VPIN. It has been replaced by IPIN. Status code prefixes fixed Two Program API endpoints were returning the wrong numerical prefixes for their status codes in their responses: Create ACH Transaction was sending the 413 prefix. It is now sending 429. Create Adjustment was sending the 471 prefix. It is now sending 409. New mobile wallet events added We added events for mobile wallet enrollment and provisioning to the Account Events webhook. Apple Pay AACN — Mobile activation ARDP — Tokenization failed ATCN — Enrollment successful ATKC — Token created ATVD — Deactivated ATVN — Unsuccessful mobile activation code ATVR — Reactivated AYLP — Enrollment unsuccessful Google Pay GACN — Activation GRDP — Tokenization failed GTCN — Enrollment successful GTKC — Token created GTVD — Deactivated GTVN — Unsuccessful mobile activation code GTVR — Reactivated GYLP — Enrollment unsuccessful Samsung Pay SRDP — Tokenization failed STCN — Enrollment successful STKC — Token created STVD — Deactivated STVN — Unsuccessful mobile activation code STVR — Reactivated SYLP — Enrollment unsuccessful "
316,docs.galileo-ft.com/pro/docs/customer-id-verification,"Customer ID Verification (KYC/CIP) Before opening an account and conducting financial transactions with a customer, a bank must fulfill Know Your Customer (KYC) requirements, which verify the identity of a prospective customer. The details of KYC requirements are specific to each country. In addition, banks in the United States are required by the Patriot Act to have a customer identification program (CIP) to ensure that a prospective customer is not on a government watch list. 📘NoteBecause the endpoint code uses CIP to refer to Galileo's integrated ID verification process, which performs KYC and CIP functions, Galileo sometimes uses the term ""CIP"" to refer to the whole ID verification process. Banks fulfill ID verification requirements by: Obtaining identifying information from the prospective customer Verifying the information Choosing an ID verification solution You have these options for performing ID verification: Use Galileo's integrated ID verification process. Use a third-party ID verification provider. Combine Galileo's process with a third-party process. When deciding how to perform CIP, remember to prioritize the customer experience during this onboarding phase. When a legitimate customer does not initially pass CIP, for example, the customer might decide not to take the extra step to supply additional documentation or call customer support. If your CIP solution has a low pass rate for your target demographic, you can lose customers to onboarding friction. Work with Galileo to determine which solution best addresses your use case. For example, Galileo's CIP process does not verify businesses (KYB). Maybe your target demographic is likely to possess ID documents from outside the U.S. or Canada. Some CIP solutions use biometric technology or artificial intelligence to screen out likely bad actors, and others are integrated with blockchain technology. Regardless of which solution you choose, your app or website must collect identifying information from your customers and submit the information for verification. Required information is: Legal name — First, middle, last Address — Cannot be a P.O. box in the U.S. and Canada. Must include street address, city, state, postal code, and country. Date of birth Customer ID — The types of customer identifiers to accept are determined by your bank and specified in your product settings. Consult the Customer ID Types enumeration for possible ID types. The account-creation process supports one or two identifiers per customer. Implementing ID verification ID verification must be performed prior to account creation. Using your own ID verification process If you are using your own KYC/CIP provider, send customer information to your provider, and after ID verification is successful, you send a request to an account-creation endpoint (Create Account or Create Virtual Card Account) with these parameters populated: First, middle, and last names Date of birth Primary address Optional — Ship-to address (if different from the primary address, to mail a physical card) Optional — Customer ID: id, idType and/or id2, idType2, as required by your bank for record-keeping. See Using the id and idType parameters for additional information. cipStatus — Do not include You do not need to inform Galileo whether a customer passed ID verification; however, you should create accounts only for those customers who pass. 📘NoteSee Create Account using your own CIP in the Creating an Account guide for the account-creation workflow when using Create Account or Create Virtual Card Account. Using Galileo's ID verification process When using Galileo's integrated ID verification process, you will need to make the following decisions in cooperation with your bank: Which applications will use the integrated ID verification process: Program APIs or CST Whether the product requires a government ID Which government ID is accepted or required, such as SSN (U.S.), SIN (Canada), passport or driver license. Consult the Customer ID Types enumeration for the complete list. Whether a second form of ID is required Whether minors will be using the product, and what the minimum age is Whether the same government ID must be unique across all of your offerings or only within the same program or product What to do when a customer fails ID verification: What account status to set Whether you or Galileo will perform additional verification when a customer has a partial match How a customer with a partial match can provide verification documents Whether to send a Notice of Adverse Action Whether to send a refund check The order in which to perform ID verification relative to other onboarding processes such as: Create an account Send a card to the embosser Add funds Charge an activation fee Activate the account Set the start date Endpoints for performing ID verification Depending on your enrollment strategy, you can use these endpoints to run Galileo's integrated ID verification process. Galileo will tell you which endpoints you should use for your particular program and use case. Create Account — Gathers personal information and identifiers. Creates a customer record. Successful ID verification results in account creation. Create Virtual Card Account — Gathers personal information and identifiers. Creates a customer record. Successful ID verification results in account creation for a virtual card. You must be PCI compliant to use this endpoint. Start Enrollment — Gathers personal information and identifiers. Creates a customer record. Does not create an account and therefore does not send a record of unsuccessful CIP attempts to the bank. Consult with Galileo before using this endpoint. Run CIP — Runs ID verification on a customer who has an existing record. Also reruns CIP after it has already been run. Run Enrollment CIP — Runs ID verification on a customer identifier but does not create a customer record or an account. Use when you have already run Start Enrollment for the customer with runCip: 0. This table summarizes the inputs and actions of the endpoints listed above:  Create Account*Start EnrollmentRun CIPRun Enrollment CIPInput: Customer profileXXInput: Customer IDXXXInput: PRNXAction: Run ID verificationXXXXAction: Create customer recordXXAction: Create accountX * Also applies to Create Virtual Card Account. ID verification process When Galileo receives your customer's information, Galileo sends it to a third party for verification, and the third party returns one of three results: pass, failure, or referral. The specifics of the process are different depending on which endpoint you use to submit the information. Create Account and Create Virtual Card Account process When you use the Create Account or Create Virtual Card Account endpoint to submit customer information to the ID verification process, these are the results: Galileo creates a customer record using the information provided. When ID verification is successful, the account is created and put into status: W (Waiting for processing). When ID verification is not successful, the account is created and put into status: F (failed ID verification). The endpoint response includes one of these values: F — Failed. The submitted data did not yield a plausible match. The customer is either on a watch list or is unlikely to be a real person. No further action can be taken. The account is never activated. R — Referral. The submitted data yielded a partial match. The customer is likely to be a real person. S — System failure. The CIP-related data was not formatted properly, and the CIP check was not performed. See Testing ID verification for the validation checks. When the result is R, there are two options, depending on your arrangements with Galileo: Galileo instructs the customer how to pass ID verification. When the customer's identity is verified, Galileo activates the account. You instruct the customer how to pass verification. When ID verification is successful, you call the Force Pass CIP endpoint to move the account to active status: Y and account status: N. (Force Pass CIP only updates the account statuses—it does not run ID verification again.) If ID verification is still unsuccessful after the additional verification steps, the account is never activated. 📘NoteSee Create Account using Galileo CIP in the Creating an Account guide for the account-creation workflow when using Create Account or Create Virtual Card Account. Start Enrollment process When you use the Start Enrollment endpoint to send customer profile information to the ID verification process, these are the results: Galileo creates a customer record based on the information provided but does not create an account. The endpoint response includes one of these values: P — Pass. The submitted data matched. Call Complete Enrollment to create the account. F — Failed. The submitted data did not yield a plausible match. The customer is either on a watch list or is unlikely to be a real person. No further action can be taken. The account is never created. S — System failure. The CIP-related data was not formatted properly, and the CIP check was not performed. See Testing ID verification for the validation checks. R — Referral. The submitted data yielded a partial match. The customer is likely to be a real person. For a referral, you request additional information from the customer and then follow these steps: Call Update Enrollment and pass the new information. Call Run Enrollment CIP to submit the customer information to CIP again. If the customer passes, call Complete Enrollment to create the account. Using the id and idType parameters The endpoints that gather ID verification information have two sets of parameters for government ID inputs: id and id2 — Contain the actual identifier idType and idType2 — Specify the type of ID that is in id or id2 When one of the id parameters is populated, the corresponding idType parameter is required. The format for id is determined by the value in its idType field, as shown in the Customer ID Types enumeration. For example, if you set idType: 2 (SSN), then id must contain nine numerals. When you are using Galileo's integrated ID process, you must populate id and idType at minimum. If your bank requires an SSN (U.S.) or SIN (Canada) for verification, you must populate id with the SSN/SIN instead of id2: Galileo checks the value in id for duplicate entries when IDSSN is set. It does not check the value in id2 for duplicates. In the RDFs, an SSN/SIN that was entered in the id field is masked, whereas an SSN/SIN in id2 is not masked. Because the SSN/SIN is personally identifiable information (PII), inputting the SSN/SIN in id avoids mishandling that information. Populating id2 and idType2 depends on the requirements of your program. If you are using Galileo's integrated ID process, and your program requires two forms of ID, then populate these parameters with the second form of ID (as long as SSN/SIN is in id). Alternatively, you can use the id2 and idType2 parameters to pass card-art information to your embosser. See Specifying a card design in the Design a Card guide for details. The value in the id parameter is sometimes called the ""customer ID,"" such as when using the Get Account by ID endpoint. Galileo also calls it the ""government ID"" in some contexts. Overriding your ID verification setting If your product is using Galileo's ID verification, you can override that setting for individual customers at the time of account creation by passing the cipStatus parameter for Create Account or Create Virtual Card Account. This parameter has no effect if you are using your own ID verification. 0 or empty — Do not override program settings. 1 — Send customer information to Galileo ID verification but do not create an account. When you pass this value, the endpoint response contains status: 407-13 as well as the verdict. 2 — Do not send customer information to Galileo ID verification but create an account. Open the Recipe below to see the Create Account response when cipStatus: 1. Create Account response code 407-13Open Recipe To exempt an individual customer from ID verification when using Start Enrollment, pass runCip: 0. If you want to run ID verification later on that same customer, use Run Enrollment CIP. Use cases for ID verification override These are some of the use cases for cipStatus in the Create Account and Create Virtual Card Account endpoints and runCip in Start Enrollment: cipStatus: 1 or runCip: 1 — You want to check whether a customer passes ID verification before creating an account. If the customer passes ID verification, then call the Complete Enrollment endpoint to create the account. Do not call Create Account, Create Virtual Card Account, or Start Enrollment more than once per customer, or you will create duplicate customer records. cipStatus: 2 or runCip: 0 — You need to exclude the customer from ID verification. See ""Running ID verification on minors,"" below, for one use case. Running ID verification on minors Minor persons are not required to fulfill ID verification requirements but they do need to fulfill minimum age requirements. Determine the minimum age for minor customers and Galileo will set it in the DOB product parameter. The dateOfBirth endpoint parameter is then verified against the age limit. When you are creating an account for a minor while using Galileo's integrated ID verification, call the Create Account or Create Virtual Card Account endpoint with cipStatus: 2 or the Start Enrollment endpoint with runCip: 0. If the minor's account is to be a secondary account to a parent's account, pass the parent's PRN for primaryAccount. See Primary and secondary account scenarios in the About Accounts guide for more information. Running ID verification on existing customers When a customer record already exists but you need to run ID verification again, use the Run CIP endpoint. 🚧WarningDo not call Create Account, Create Virtual Card Account, or Start Enrollment more than once per customer, or you will create duplicate customer records. The Run CIP endpoint returns the same verdicts—pass, fail, and refer—as the other ID-verification endpoints. Testing ID verification When using Create Account, Create Virtual Card Account, and Start Enrollment in the CV environment, you can pass specific names for the firstName, middleName, and lastName parameters to trigger different verdicts: John F Smith triggers a fail John R Smith triggers a refer John P Smith triggers a pass. Other names besides the two listed above will also trigger a pass. 🚧Warning In Production do not pass false information such as firstName: testname. All values in Production must be valid. In CV, the terms test and account trigger a failed status, and in Production they cannot be used. When testing in Production, the following will result in status: S (system failure) from the CIP system, which means that a formatting or validation error was present in the CIP data, and so the CIP process was not initiated: Year of birth before 1900 Missing required values The SSN (idType: 2) has one or more of these characteristics: Nine sequential digits (123456789) Begins with 9, 000, or 666 Middle two digits are 00 Last four digits are 0000 If you would like to use real customer names and IDs for testing in CV, ask Galileo to enable that feature for you with the CIPEV parameter. Events API You can arrange with Galileo to receive events that are related to customer ID verification: EventDescriptionCAPP:app_completedThe customer passed ID verification and the account has been created. This event is also triggered when ID verification is not run and account creation is successful. This event is not triggered for Digital First accounts.PTID: pass_idThe customer passed ID verification.BFID: failed_idFTID: fail_idThe customer failed ID verification. Consult Galileo about which event to use for your use case. Galileo setup These are some of the product parameters to be configured at Galileo to control ID verification. Additional internal parameters that are not listed here also need to be set up. ParameterDescriptionCIPEVEnable CIP testing with real customer names and IDs in the CV environmentTOTIDRTTIDWhether to use Galileo's integrated ID verificationTUCRYWhich country's database to use for ID verification: U.S. or CanadaCIPGTWhich forms of ID to requireVALIDWhether a unique government ID (SSN in the U.S. and SIN in Canada) is required.IDSSNWhether an SSN is required or optional, and whether the SSN must be uniqueFFTIDWhether a driver license can be accepted as a government IDVLDLVAt what level a government ID must be unique: across the product, program, or providerDOBMinimum age for customersTIDSTWhich account status to set when ID verification fails: F (default) or otherMPADDMailing address where customers can send documents after being referredMPFAXFax number where customers can send documents after being referredMTOTBMaximum refund check amount after failing ID verificationCIPAPWhich applications can run ID verification when onboarding customers: CST or Program APIACSETThe order in which to perform ID verification relative to other processes, such as account creation and sending an emboss order.Updated 2 months ago Table of Contents Choosing an ID verification solution Implementing ID verification Using your own ID verification process Using Galileo's ID verification process Endpoints for performing ID verification ID verification process Create Account and Create Virtual Card Account process Start Enrollment process Using the id and idType parameters Overriding your ID verification setting Use cases for ID verification override Running ID verification on minors Running ID verification on existing customers Testing ID verification Events API Galileo setup "
317,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-start-grace-period,"overdraft_start_grace_period Code — ODGP Event trigger — A transaction meets or exceeds the overdraft transaction-level de minimis and an overdraft fee may apply, starting the grace period timer. Process — This process contains the event trigger: Authorization request over a card network's rails Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" method AccountEvent msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODGP"" od_amt Overdraft amount authorized when a transaction exceeds the core account balance. Example: ""61.23"". pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" trans_deminimis Minimum overdraft amount to assess an overdraft fee. If od_amt meets or exceeds this, an overdraft fee may be assessed. Example: ""5"". type Example JSON# overdraft_start_grace_period example: { ""balance_id"": ""20211"", ""method"": ""AccountEvent"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODGP"", ""od_amt"": ""61.23"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""trans_deminimis"": ""5"", ""type"": ""overdraft_start_grace_period"" } Table of Contents Fields Example "
318,docs.galileo-ft.com/pro/reference/api-reference-events-api-ext-trans-debit-fail,"ext_trans_debit_fail Code — GDBF Event trigger — The External Trans API reaches the retry limit. Process — This process contains the event trigger: External Trans API attempt times out Fields All fields are strings. Your field names may vary. Field Required Description amount X Amount of the transaction. Unsigned. Example: ""63.21"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GDBF"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" tp_trans_id X ACH transaction ID. Example: ""323232323"" type X The name of this event: ""ext_trans_debit_fail"" Example JSON# ext_trans_debit_fail example: { ""amount"": ""63.21"", ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""GDBF"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""tp_trans_id"": ""323232323"", ""type"": ""ext_trans_debit_fail"" } Table of Contents Fields Example "
319,docs.galileo-ft.com/pro/reference/api-reference-events-api-credit-limit-change,"credit_limit_change Code — CLIM Event trigger — The credit limit changes. Processes — These processes contain the event trigger: Set Credit Limit endpoint Automated processes Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description amount X The change_type indicates what this value represents. Example: ""500.25"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" change_ts X Time at which the credit limit was changed. YYYY-MM-DD hh:mm:ss Example: ""2023-03-24 13:43:02"" change_type X Type of change: S — Limit was set to amount I — Limit was increased by amount D — Limit was decreased by amount cred_lim_hist_id X Identifier for this credit limit change. msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CLIM"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" reason_code X Reason for changing the limit: 0 — Manual update, data fix 1 — Direct deposit threshold met 2 — Direct deposit threshold failed 3 — Secured balance updated 4 — Overdraft limit changed type X The name of this event: ""credit_limit_change"" user_name X The user who made the change. Example JSON# credit_limit_change example: { ""amount"": ""500.25"", ""balance_id"": ""20211"", ""change_ts"": ""2023-03-24 13:43:02"", ""change_type"": ""S"", ""msg_event_id"": ""243693"", ""msg_id"": ""CLIM"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""reason_code"": ""0"", ""type"": ""credit_limit_change"" } Table of Contents Fields Example "
321,docs.galileo-ft.com/pro/reference/post/verifycardsecuritycode,Verify Card Security Code The table below lists status codes that apply to this specific endpoint. Status CodeCode Description440-01Card security code does not match.440-02Card not found using PAN and expiry date.440-03No matching card(s) found.440-04System error440-05System errorLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
322,docs.galileo-ft.com/pro/reference/post/reversefee,"Reverse Fee If the fee was created with Assess Fee, pass the transactionId of the endpoint request to be reversed instead of passing a new value. If the fee was not created by Assess Fee, pass feeId, which you can retrieve with the Get Fee History endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description479-01Fee has already been reversedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
323,docs.galileo-ft.com/pro/changelog/august-2021,"August 2021 New Use Cases guide section We added a new Use Cases section (see About Use Cases) for high-level descriptions of Galileo programs and products. We’ve also added a new guide to this section, Business Banking Programs, an overview of Galileo’s solutions for your business customers. New transaction type In the list of Transaction Types, we added transaction type 7 (cash disbursement). Correction to BEXP: auth_exp field description For the BEXP: auth_exp (authorization expiration) webhook, we corrected the description for the open_to_buy field to clarify that it shows the amount immediately after the original authorization and does not reflect activity since the original authorization. This change affects this event only. Clarified events in the Events API In the Events API reference, following up on our July updates, we added more context to the descriptions of many more of our events, including what triggers the event and which processes may elicit that trigger. One example is the BAUT: auth event, which is triggered by you or Galileo approving an authorization request. We plan to add similar context to the remaining event descriptions soon. Correction to About Cards From the About Cards guide we removed a statement that said that cards in status: Z could not be reactivated. New future scheduled payments object In the response to the Get Scheduled Bill Payments endpoint there is a new object: future_scheduled_payments. Card expiry and creation dates For the Get Account Cards and Get Card responses, we are now returning a date in the expiry_date field instead of a datetime, and for created_date you have the option of getting a date or a datetime, depending on how a parameter is set. Add ACH Account requirement For the Add ACH Account endpoint we updated the description for the name parameter to indicate that it is required unless you are using Plaid. New locales To the locale parameter we added MX_es (Mexico Español) and MX_en (Mexico English) as valid values. These endpoints are affected: Create Account Create Virtual Card Account Start Enrollment Correction to Creating a Provisioning Request We updated the Creating a Provisioning Request guide and a couple of its corresponding recipes to remove two parameters that do not need to be passed in the Create Provisioning Request call: clientAppID and clientWalletProvider. These values are instead provided by Galileo. This change applies only to calls made for Visa with Google Pay and Samsung Pay, and so those two recipes no longer include the parameters. The parameters have also been removed from the Create Provisioning Request endpoint reference. Update to Digital First Program To the Digital First Program guide we added information about using the IVR to set the PIN in the Protecting the physical card section. Corrected Postman guide In the Postman Setup guide we removed a note that said you needed to get a certificate for CV and Production. A certificate is not needed for those environments. New guide and new recipes We added a new guide, Creating a Provisioning Request, to accompany the About Mobile Wallets guide. With this new guide we're introducing a new feature called ""recipes."" Each recipe provides a code sample with narration to explain the elements of that sample, and you can click the clipboard icon to copy the code sample for your own use. For example, this recipe shows a Create Provisioning Request call when the wallet provider is Apple Pay. You can find the recipes embedded in the guide and in the Create Provisioning Request endpoint reference as well as on a special Recipes page that you can access from the top menu. Updated guide To the About Mobile Wallets guide we added contact information for the wallet providers as well as two flowcharts: Manual provisioning workflow Push-provisioning workflow New status code The Reverse Adjustment endpoint has a new status code: 447-01 (Adjustment amount to be reversed does not match original transaction amount). Clarified balance-related fields In the response to the Get Balance endpoint we clarified the difference between the balance and balance_without_pending fields. Clarified field descriptions The descriptions for the response fields have been clarified for these endpoints: Get Account Overview Get Authorization History Get Transaction History Get All Transaction History "
325,docs.galileo-ft.com/pro/reference/api-reference-events-api-frozen,"frozen Code — FRZN Event trigger — The status value in the freeze_info object is changed to frozen by an internal process. Processes — These processes contain the event trigger: Modify Status endpoint with type: 17 Customer Service Tool Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FRZN"" new_status X Card status code. See Card Statuses for possible values. Because freezing a card does not change its status, this status is the same as before the freeze. Example: ""N"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""frozen"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# frozen example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""FRZN"", ""new_status"": ""N"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""frozen"" } Table of Contents Fields Example "
326,docs.galileo-ft.com/pro/docs/ach-endpoints,"ACH Endpoints The following tables summarize ACH endpoints in the Galileo system. Endpoints are grouped by outgoing ACH and incoming ACH. See the sections below for information on how to use each endpoint. Outgoing ACH endpoints Use endpoints in this table to create and view outgoing ACH transactions that originate at Galileo. Use caseEndpointAdd an ACH account to associate your customer’s account with an external account. Use this endpoint when the external account belongs to an individual. You must create an ACH account to send an outgoing ACH transaction.Add ACH AccountAdd an ACH account that belongs to a corporate entity.Add ACH Account CorporateGet a record of ACH accounts that are associated with your customer’s account.Get ACH AccountsUpdate account information for an existing ACH account.Modify ACH AccountRemove an ACH account from a customer account.Remove ACH AccountSend an outgoing ACH transaction from your customer’s account to an external account.Create ACH TransactionCancel a transaction that you created with the Create ACH Transaction endpoint.Cancel ACH TransactionGet a record of all ACH transactions created via the Create ACH Transaction History endpoint.Get ACH Transaction History Incoming ACH endpoints Use endpoints in this table to view and modify incoming ACH transactions from an external originator. Use caseEndpointGet the ACH deposit history either for an entire program or for a single customer account. Use for incoming ACH credit.Get Deposit HistoryRetrieve a list of incoming ACH credit requests where the funds are not yet available to your customer.Get Pending DepositsEither post or return a pending incoming ACH credit.Modify Pending Deposit Status Adding an ACH account There are two types of external accounts that can be added as ACH accounts: personal and corporate. A personal account belongs to a natural individual, and a corporate account belongs to a business entity. To add each type of account use these endpoints: Add ACH Account — Add a personal account Add ACH Account Corporate — Add a business account By using these endpoints, you set up ACH transactions where the originator is your customer’s account in the Galileo system and the receiver is the external account. Each ACH account stores the information for only one external account. You will need to add a new ACH account for each external receiver account. When you add an ACH account, you provide the external bank account and routing numbers to make direct ACH transfers with the external account. Alternatively, you can use Plaid integration to get external account information. See Plaid integration for more information. The Add ACH Account and Add ACH Account Corporate endpoints return an ach_account_id that you will pass through the Create ACH Transaction endpoint when your customer originates an ACH transaction with the external account. 📘NoteA customer can have multiple ACH accounts that use the same account and routing numbers as long as each duplicate ACH account is linked to a different account type. For example, you can add separate ACH accounts to a checking account and savings account that each link to the same external account. Add ACH Account This table describes parameters that are specific to the Add ACH Account endpoint. ParameterDescriptionaccountNoAccount number for the account associated with this ACH account. This can be a primary or secondary account.achAccountNoBank account number identifying the external account for ACH transactions. Required unless Plaid integration is used.achRoutingNoBank routing number identifying the external bank for ACH transactions. Required unless Plaid integration is used.processorTokenToken provided by Plaid for Galileo + Plaid integration. Replaces the achAccountNo and achRoutingNo. See Plaid integration for more information.nameDescription of the account, such as ""Wells Fargo Checking"".firstNameFirst name of the external account owner. This is a display name.fileFirstNameFirst name to include in the outgoing Nacha file instead of firstName.lastNameLast name of the external account owner. This is a display name.fileLastNameLast name to include in the outgoing Nacha file instead of lastName. Add ACH Account Corporate This table describes parameters that are specific to the Add ACH Account Corporate endpoint. ParameterDescriptionaccountNoAccount number for the account associated with this ACH account. This can be a primary or secondary account.achAccountNoBank account number identifying the external account for ACH transactions. Required unless Plaid integration is used.achRoutingNoBank routing number identifying the external bank for ACH transactions. Required unless Plaid integration is used.processorTokenToken provided by Plaid for Galileo + Plaid integration. Replaces the achAccountNo and achRoutingNo. See Plaid integration for more information.nameDescription of the account, such as ""Citibank Saving"".companyNameName of the company that holds the external account. This is a display name.fileCompanyNameCompany name to include in the outgoing Nacha file instead of companyName. Viewing ACH accounts Use the Get ACH Account endpoint to retrieve ACH account information. Pass the customer's PRN for accountNo, which you used in the Add ACH Account or Add ACH Account Corporate endpoint, to this endpoint. Do not pass an ach_account_id for accountNo. If there are multiple ACH accounts linked to the accountNo, the Get ACH Account endpoint returns information for each ACH account. The found field in the response data indicates the number of ACH accounts that are linked to the accountNo. Modifying ACH accounts Use the Modify ACH Account endpoint to update ACH account information. When using Modify ACH Account, you must specify the entityType of the account to modify: C — Corporate ACH account. The account was created using Add ACH Account Corporate. I — Individual ACH account. The account was created using Add ACH Account. Depending on the value of entityType, other fields are also required: entityType: C — companyName is required entityType: I — firstName and lastName are required Removing an ACH account Use the Remove ACH Account endpoint to remove an ACH account. ACH account records cannot actually be deleted from the Galileo system, but a removed account is deactivated so that it can no longer be used for ACH transactions. A removed ACH account is set to status: D (deleted). This table describes parameters that are specific to the Remove ACH Account endpoint. ParameterDescriptionaccountNoAccount number for the account associated with the ACH account.achAccountNoAccount number for the ACH account to be removed. Creating an ACH transaction Use the Create ACH Transaction endpoint to originate an outgoing ACH transaction where the originator is your customer in the Galileo system and the receiver is the holder of an external account. This table describes parameters that are specific to the Create ACH Transaction endpoint. ParameterDescriptionaccountNoAccount number for the account associated with this ACH account.achAccountIdThe ach_account_id as returned by the Add ACH Account or Add ACH Account Corporate endpoint.amountThe amount to credit or debit the receiver’s account. Do not use a plus or minus sign. Instead, use the debitCreditIndicator field to indicate the direction of funds.sameDaySet to Y to post a same-day ACH credit request. See Same-day ACH for more information.descriptionA description for the transaction. This description is not passed in the Nacha file, but you can see it in the CST or have it added to the RDFs and event messages.debitCreditIndicatorIndicates whether the transaction will credit or debit the receiver’s account. Values are:C — CreditD — Debit Viewing ACH transactions There are several endpoints for viewing posted and pending ACH transactions. When you view transactions for a specific account, the accountNo that you pass to the endpoint should be associated with at least one ACH account created with the Add ACH Account or Add ACH Account Corporate endpoint. If there are multiple ACH accounts linked to the accountNo, Galileo returns transaction information for each ACH account. This table describes endpoints for viewing ACH transactions. EndpointDescriptionGet ACH Transaction HistoryReturns the entire ACH transaction history for a customer account, including pending and posted transactions.Get Deposit HistoryReturns records for incoming ACH credit requests, either for an entire program or for a specific customer. Leave the accountNo empty to return the program history.Get Pending DepositsReturns records for incoming ACH credit requests that have not been posted to the receiver’s account. Canceling an ACH transaction Use the Cancel ACH Transaction endpoint to cancel an outgoing ACH transaction originated by your customer in the Galileo system. You cannot cancel an ACH transaction in this manner after Galileo processes the transaction and adds it to a Nacha file. If you need to stop a transaction after Galileo generates the Nacha file, you must initiate an ACH return. See ACH returns for more information. When an ACH transaction is successfully canceled, any funds debited from your customer’s account are returned and a BADJ: adj event is generated. This table describes parameters that are specific to the Cancel ACH Transaction endpoint. ParameterDescriptionaccountNoThe accountNo that is linked to the ACH account used for the transaction.transactionIdThe transactionId of the endpoint request to be reversed.achTransactionIdThe ach_transaction_id returned by the Create ACH Transaction endpoint. Modifying a pending ACH deposit status A pending ACH deposit is an incoming ACH credit that has not been posted to the customer’s account. You can use the Modify Pending Deposit Status endpoint to either post or return a pending ACH direct deposit before it is posted to the account. In most cases you will modify pending ACH direct deposits that are flagged for review (status: i). This table describes parameters that are specific to the Modify Pending Deposit Status endpoint. ParameterDescriptionaccountNoDestination account number for the pending direct deposit.depositTransactionIdThe ach_trans_id for the deposit returned by the Get Pending Deposits endpoint.actionTypeIndicates whether to post or return the pending ACH deposit. Values are:P — PostR — ReturncategoryCodeCategory to assign to the deposit. Values are:COF — Questionable IAT countryFBE — Federal benefitHRK — High risk depositLRG — Large transfer amountNAM — Unverified nameNFC — NFCUPAY — Payday loanTAX — TaxcategoryTypeIndicates the decision for future ACH deposits that match the program settings for the current deposit. Values are:A — Approve matching transactions.D — Decline matching transactions.W — Watch matching transactions and send for manual review.retCodeReason for returning the deposit. This parameter is required when actionType: R. See Return Codes for valid values.Updated 15 days ago Table of Contents Outgoing ACH endpoints Incoming ACH endpoints Adding an ACH account Add ACH Account Add ACH Account Corporate Viewing ACH accounts Modifying ACH accounts Removing an ACH account Creating an ACH transaction Viewing ACH transactions Canceling an ACH transaction Modifying a pending ACH deposit status "
327,docs.galileo-ft.com/pro/reference/post/cancelachtransaction,Cancel ACH Transaction For more information on this endpoint see Canceling an ACH transaction in the ACH Endpoints guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description431-01ACH transaction not found431-02ACH transaction in error status431-03ACH transaction already canceled431-04ACH transaction can not be canceled431-05ACH transaction has been processed and cannot be canceledLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
329,docs.galileo-ft.com/pro/reference/api-reference-emboss-statuses,Emboss Statuses Status codeDescriptionNCard activatedYEmboss record sent to embossing partner 
330,docs.galileo-ft.com/pro/docs/creating-statements-from-the-rdfs,"Creating Statements from the RDFs Galileo offers pre-made statements to its clients, but only for certain account types and only with a predetermined format. (See Statements for more information.) If you want to produce customized statements that go beyond what Galileo offers, you can build your own statements using the daily raw data files (RDFs) that you get from Galileo. When assembling statements from the RDFs, keep the following in mind: You must consult with your bank to comply with all of their statement requirements. No single RDF file contains all of the data to use for a statement: You must draw on the datastore that you have accumulated from daily RDFs. Reporting periods are most commonly based on calendar month. However, you can use the billing cycle date as the first date of the statement. For example, if the cycle date is the fifth of the month, your statement's start date would be the fifth of the previous month and the ending date would be the fourth of the current month. A Galileo calendar day may not correspond to the day that you use for statements. For example, if you are in the U.S. Eastern time zone (GMT -0500), your day begins two hours earlier than Galileo system time during standard time and three hours earlier during daylight saving. The RDF's AMOUNT fields are always in the currency in which the account is based. Card networks automatically convert foreign currency amounts (both authorizations and settlements) into the account's local currency. Prerequisites Before you attempt to generate statements from the RDFs, have the following in place: Daily consumption of the standard set of RDFs plus any CDFs you intend to use. Storage of the RDF and CDF contents in your own data warehouse. See Building a datastore in About RDFs and CDFs for more information. An understanding of differential file methodology, which means that each daily RDF contains the data for the previous day only—each file's contents must be cumulatively added to the datastore. The ability to query data across databases and perform basic calculations such as finding all transactions in a date range that have the same transaction code. Data storage capacity as specified by your bank—typically seven years. Statement format Statements typically contain these elements: Header Program name Program contact information (phone/email) Logo Body Account holder name and address Account statement details Account number and/or masked PAN Statement period Account summary The summary can be as simple as total debits, total credits, and fees for the period. Interest summary — Interest-bearing accounts must report interest on a monthly basis, not a bill-cycle basis. Interest paid this period Annual percentage yield earned List of posted transactions Date of transaction Description Type of transaction: payment, adjustment, settlement, fee Amount Running balance Footer Bank-required disclosures Instructions for reporting errors or making inquiries, including your mailing address and other contact information. Other elements that you may want to include are: Beginning balance (statement date-range start) Ending balance (statement date-range end) Pending authorizations Deposits ATM withdrawals Purchases Reversals Adjustments Fees Fees reversed Transactions grouped by MCC Disputes RDF fields to use This table shows where to find statement elements in the RDFs. Also see RDF Reference for a list of all RDF fields. ElementRDFField nameAccount holder nameCustomer MasterPRIMARY CARDHOLDER'S FIRST NAMEPRIMARY CARDHOLDER'S LAST NAMEAddressCustomer MasterADDRESS LINE 1ADDRESS LINE 2CityCustomer MasterCITYStateCustomer MasterSTATEPostal codeCustomer MasterZIP CODEAccount numberCustomer MasterAccount CardPosted TransactionsPRNPANAccount CardCARD NUMBERStarting or ending balanceCustomer MasterCURRENT BALANCEAVAILABLE BALANCEDepositsATM withdrawalsPurchasesAdjustmentsFeesDisputesReversalsPosted TransactionsTRANSACTION DATE/TIMETRANSACTION CODE/TYPETRANSACTION AMOUNTPending authorizationsAuthorized TransactionsTRANSACTION DATE/TIMETRANSACTION CODEAUTHORIZATION AMOUNTInterest paid this periodPosted TransactionsTRANSACTION DATE/TIMETRANSACTION CODE/TYPETRANSACTION AMOUNTAnnual percentage yield earnedPosted TransactionsTRANSACTION DATE/TIMETRANSACTION CODE/TYPETRANSACTION AMOUNTDate of transactionPosted TransactionsTRANSACTION DATE/TIMEDescriptionPosted TransactionsMERCHANT DESCRIPTIONTRANSACTION DESCRIPTION*Type of transactionPosted TransactionsTRANSACTION CODE/TYPEAmountPosted TransactionsTRANSACTION AMOUNTAccount statusCustomer MasterSTATUSCard statusAccount CardCARD STATUSBalance IDAll RDFsGALILEO ACCOUNT IDCard IDAll RDFsCARD IDENTIFIERType of accountCustomer MasterTYPE OF ACCOUNTPRODUCT IDExternal account IDCustomer Master Posted TransactionsEXTERNAL ACCOUNT NUMBERLast transaction dateCustomer MasterLAST TRANSACTION DATEBill-cycle dateCustomer MasterBILL CYCLE DAYMCCPosted TransactionsMERCHANT CATEGORY CODE * By default, the RDFs do not include the transaction description that was used by the Create Account Transfer, Create Payment, or Create Adjustment endpoints. You may want to set up your own lookup file to correlate the TRANSACTION CODE/TYPE with description strings, or you can request that the TRANSACTION DESCRIPTION field be added to your Posted Transactions RDF. Queries and calculations This section provides guidelines on performing queries or calculations for various statement elements. If you need to join two tables in a query, join on these two fields: UNIQUE PROGRAM ID GALILEO ACCOUNT ID Specific transaction types To calculate totals or to present lists of specific transaction types, perform these searches in your Posted Transactions RDF datastore. TRANSACTION DATE/TIME — Statement date range TRANSACTION CODE/TYPE — Selected activity type or transaction type. For example, to show all deposits, select all PMxx transaction codes, or to show all ATM withdrawals, select all xxW transaction codes. Use the curated transaction-codes list that Galileo supplied to you for all possible transaction codes for your program. Also see Classifying transactions in the About Transactions guide and the Transaction Types enumeration for more information. TRANSACTION AMOUNT — Show in a list or as a sum Pending authorizations To show pending authorizations as of the statement date, compare the list of transactions in the Authorized Transactions RDF with the Posted Transactions RDF using AUTHORIZATION CODE + NETWORK CODE to match transactions. Any unmatched authorizations during your selected timespan can be displayed as pending. Beginning and ending balances In your Customer Master datastore, use the balance fields as follows: CURRENT BALANCE — The total of all posted transactions as of 23:59:59 on the day before the RDF file was generated. Pending transactions are not subtracted out. AVAILABLE BALANCE — The CURRENT BALANCE minus any pending transactions. Running balance If you want to show the running balance in your transaction list, begin with CURRENT BALANCE (ledger balance) for the start of the statement period, and as you list each transaction in chronological order, calculate the running total. This approach is not recommended if your transaction list is broken into separate categories such as deposits (payments), adjustments, fees, or MCC. Keep in mind that a running balance thus calculated will not show the available balance, so an account holder may wonder why a transaction was denied when the running balance on the statement appears to show sufficient funds. Galileo checks the available balance when deciding whether to approve a transaction, not the ledger balance, and so funds may not have been available at a particular time because of a hold. Transaction lists per card To present transactions from multiple cards, use the CARD IDENTIFIER (CAD) to select the individual card, and use either the PRN or the GALILEO ACCOUNT ID (balance ID) to identify cards belonging to the same account. Instead of exposing the CAD or the balance ID to the account holder, use the masked PAN to identify individual cards. Grouping by merchant category As desired, use the MERCHANT CATEGORY CODE to break out transactions by merchant type. You will usually need to include multiple codes per category, such as both 5541 and 5542 for gas stations.Updated 6 months ago Table of Contents Prerequisites Statement format RDF fields to use Queries and calculations "
331,docs.galileo-ft.com/pro/reference/breaking-change-policy,"Breaking Change Policy This document outlines the Galileo breaking changes policy, intended to set mutual expectations between Galileo and our clients regarding our APIs, file formats, and protocols. Overview Galileo is on a mission to continuously improve the products and services available to our clients. Our goal is to minimize client impacts when introducing enhancements, new product features and capability improvements. However, from time to time, a change may require a client action to prevent existing capabilities from breaking. The purpose of this document is to outline what changes Galileo considers a breaking change versus a non-breaking change, as well as, how we will provide client communication in the event of a breaking change. Definitions Non-breaking changes Non-breaking changes are code changes that are not expected to be disruptive to clients, who can adapt to these changes at their own discretion. Clients should be able to handle these changes without any notice from Galileo. Example of non-breaking changes Adding a new, optional, input field to a request that does not change the behavior of existing fields Adding a new required field that has default values Adding a new response code for new functionality that does not impact existing response codes Adding a new field or data element to an existing response payload returned from Galileo services that does not change the meaning of existing fields Adding an optional request header Adding a new endpoint Removal of an optional request header Updating a parameter description Updating sequence numbers in accordance with NACHA rules Breaking changes Breaking changes are code changes that will require clients to adapt to these changes to avoid potential disruption. Galileo will communicate these changes to clients before rolling out these changes. Example of breaking changes Requiring a new input field Making a previously optional input field a required field Updating an existing field or data element in an existing response payload returned from Galileo services Changing the agreed details of a file exchange (e.g., file name patterns, field widths, field data types, ordering of fields, format changes, adding/removing fields in fixed width files, line endings in ACH files) Changes to request/response headers Updating existing required product configuration parameters Communication We will communicate breaking changes to clients before rolling out these changes. However, if a change is necessary for critical legal, security, or compliance concerns, we will deploy a breaking change without prior notice. For all other breaking changes we will communicate with clients before the release. This communication will include documentation. Clients will be able to complete client validations, in advance of a change to the production environment. Notification will be completed utilizing existing channels, for example, product roadmap, monthly updates and client meetings.Table of Contents Introduction Overview Definitions Non-breaking changes Breaking changes Communication "
332,docs.galileo-ft.com/pro/reference/api-reference-events-api-addr-chg,"addr_chg For address changes by the Customer Service Tool, see CHPC: cardholder_info_changed. Code — ADRC Event trigger — One or more of the cardholder's address parameters is updated: address1 address2 city state postalCode Processes — These processes contain the event trigger: Update Account endpoint Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description addr1 X New first address line. Example: ""123 Maple St."" addr2 X New second address line. Example: ""Apt 25"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" city X New city. Example ""Salt Lake City"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" email X New email address. Example: ""[email protected]"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ADRC"" old_addr1 X Old first address line. Example: ""2310 Main St."" old_addr2 X Old second address line. Example: ""Apt 4B"" old_city X Old city. Example: ""Seattle"" old_email X Old email. Example: ""[email protected]"" old_state X Old state or province. Two-character abbreviation. Example: ""WA"" old_zip X Old postal code. Example: ""98108"" open_to_buy X Balance available to spend. Example: ""2453.44"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" state X New state or province. Two-character abbreviation. Example: ""UT"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""addr_chg"" user_data Populated according to your use case and needs by arrangement with Galileo. zip X New postal code. Example: ""84101"" Example JSON# addr_chg example: { ""addr1"": ""123 Maple St."", ""addr2"": ""Apt 25"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""city"": ""Salt Lake City"", ""credit_balance"": ""325.00"", ""email"": ""[email protected]"", ""msg_event_id"": ""243693"", ""msg_id"": ""ADRC"", ""old_addr1"": ""2310 Main St."", ""old_addr2"": ""Apt 4B"", ""old_city"": ""Seattle"", ""old_email"": ""[email protected]"", ""old_state"": ""WA"", ""old_zip"": ""98108"", ""open_to_buy"": ""2453.44"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""state"": ""UT"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""addr_chg"", ""zip"": ""84101"" } Table of Contents Fields Example "
333,docs.galileo-ft.com/pro/changelog/december-2022,"December 2022 Data type change Some response fields for the Get Credit Summary endpoint were incorrectly identified as floats. The amount and available_credit descriptions have been corrected to show ""string"" as the correct data type. Event removed The ODSH: overdraft_excessive_use event has been removed from the reference. Timestamps added To the tables in the Card Transaction Scenarios we added timestamps to better indicate transaction timing. Galileo Buy Now, Pay Later Galileo Buy Now, Pay Later (BNPL) solution, powered by Mastercard, provides customizable payment offers through single-use virtual card and a loan management system designed to enable more purchase options for your customers. Check out the About Galileo Buy, Now Pay Later guide to learn more about this product offering. "
334,docs.galileo-ft.com/pro/reference/program-api-intro,"About Program API The web services software is built to interact with cardholder information. Whether doing a batch process of accounts via another client application, a real-time web request through the Galileo interface, or a terminal transaction through a closed network, you can use web services to meet a wide variety of needs. Currently, the web services software can handle account transactions with the endpoints defined in this reference. You can request that additional endpoints and modifications be developed at an additional cost. Information provided by Galileo Secure web address Provider ID Provider usernames and passwords Product IDs Information provided by you Business contact Technical contact Connecting provider IP address or address range Interfacing The web service is available on HTTP through an SSL connection. Galileo will provide you with information to get connected.Table of Contents Integration web service Information provided by Galileo Information provided by you Interfacing "
335,docs.galileo-ft.com/pro/reference/api-reference-events-api-dispute-final-pc,"dispute_final_pc Code — DSFP Event trigger — The dispute is finalized. Process — This process contains the event trigger: Galileo receives notification from the network or bank Fields All fields are strings. Your field names may vary. Field Required Description dispute_amount X The amount of the dispute. Example: ""3245.22"" dispute_id X Unique identifier for the dispute. Example: ""12432"" dispute_notice_date X Date on which the cardholder disputed the charge. Format YYYY-MM-DD Example: ""2023-04-23"" dispute_pc_amount X The amount of provisional credit awarded. Example: ""34.65"" dispute_pc_date X The date the provisional credit was awarded. MM/DD/YYYY Example: ""04/23/2023"" dispute_pc_reversal_date X The date the provisional credit was reversed. MM/DD/YYYY Example: ""04/30/2023"" dispute_rege_date X Due date for a Regulation E dispute. Format YYYY-MM-DD Example: ""2023-05-13"" dispute_resolution X The final resolution of the dispute. Valid values: MERCHANT_CREDIT — Merchant credited the cardholder account CUSTOMER_LOSS — Dispute not settled in cardholder's favor CHARGEBACK — Dispute settled in cardholder's favor; amount moved into cardholder account PRTL_CHARGEBACK — Dispute settled in the cardholder's favor; partial amount moved into cardholder account. WRITE_OFF — Amount written off and awarded to cardholder CH_CANCELED — Cardholder canceled the dispute dispute_resolution_date X Date on which the dispute was resolved. Example: ""2023-04-29"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DSFP"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" settle_detail_id X ID that maps back to the settlement record for the transaction. Example: ""13354855"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""dispute_final_pc"" Example JSON# dispute_final_pc example: { ""dispute_amount"": ""3245.22"", ""dispute_id"": ""12432"", ""dispute_notice_date"": ""2023-04-23"", ""dispute_pc_amount"": ""34.65"", ""dispute_pc_date"": ""04/23/2023"", ""dispute_pc_reversal_date"": ""04/30/2023"", ""dispute_rege_date"": ""2023-05-13"", ""dispute_resolution"": ""PRTL_CHARGEBACK"", ""dispute_resolution_date"": ""2023-04-29"", ""msg_event_id"": ""243693"", ""msg_id"": ""DSFP"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""settle_detail_id"": ""13354855"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""dispute_final_pc"" } Table of Contents Fields Example "
336,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-suspended,"overdraft_suspended Code — ODSK Event trigger — One of the following takes place: The overdraft account status is updated to K (suspended) The overdraft freeze status is changed to Frozen: 1. Processes — These processes contain the event trigger: Modify Status endpoint with type: 14 Internal process that detects whether the monthly fee cap has been exceeded Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODSK"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_suspended"" 📘NoteIf the Program API, CST, or website attempt to change the status to K, an automated process will override that action if the account meets eligibility requirements. Example JSON# overdraft_suspended example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODSK"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_suspended"" } Table of Contents Fields Example "
337,docs.galileo-ft.com/pro/reference/api-reference-events-api-fee-reversal,"fee_reversal Code — FREV Event trigger — A posted fee is reversed. Processes — These processes contain the event trigger: Program API endpoints: Reverse Fee Reverse Account Transfer, if type included a fee Cancel ACH Transaction Customer Service Tool Card-network messages Fields All fields are strings. Your field names may vary. Field Required Description act_type X For all fees the activity type is ""FE"". amount X Amount of the fee. Example: ""2.50"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description X Description for the fee. Example: ""Out of network ATM"" ext_trans_id External transaction ID. Example: ""1234-abcdefg"" fee_id X Unique identifier for the fee. Example: ""124365"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FREV"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" orig_fee_event_id X Original fee event identifier of the fee that is being reversed. Example: ""93052"" otype X See the curated list of otypes for your program from Galileo. Example: ""AC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fee_reversal"" Example JSON# fee_reversal example: { ""amount"": ""2.50"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""description"": ""Out of network ATM"", ""ext_trans_id"": ""1234-abcdefg"", ""fee_id"": ""124365"", ""msg_event_id"": ""243693"", ""msg_id"": ""FREV"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""orig_fee_event_id"": ""93052"", ""otype"": ""AC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fee_reversal"" } Table of Contents Fields Example "
338,docs.galileo-ft.com/pro/reference/post/modifylocation,Modify Location Nullifying data elements You can pass null for the following parameters to set the value in the database to null. nameaddress1address2cityphoneproviderSpecifiedIdSee Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description508-01Invalid invoice value. (The number passed in cycleInvoice did not work with the chosen cycleType).508-02Invalid cycleStart. (The number passed in cycleStart did not work with the chosen cycleType).508-03No Credit Limit to adjustLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
339,docs.galileo-ft.com/pro/docs/lost-stolen-or-damaged-cards,"Lost, Stolen, or Damaged Cards This guide describes the procedure for handling lost, stolen, or damaged cards using the Modify Status and Add Card endpoints, which you implement from your own web site or mobile app. Alternatively, your customers can use Galileo's IVR, or you can report cards as lost, stolen, or damaged using the CST. Contact Galileo for information on using these methods. See the Setting Up a Card Program guide for general information about cards in the Galileo system. 📘NoteInstead of reporting a card as lost or stolen, your customers might want to temporarily freeze a card. See Freezing cards in the Card Statuses guide for more information. Lost or stolen cards A card is ""lost"" when the cardholder no longer possesses the card but does not suspect that someone else has the card or will attempt to use it—for example, when a wallet falls into a lake. However, out of an abundance of caution, a replacement card with a new PAN should be issued for a lost card. A card is ""stolen"" when someone has taken possession of a card or card number with the intent to use it fraudulently. A physical card may be stolen in a robbery, or a card number may be obtained online from a database breach or intercepted transmission. In the case of stolen cards a replacement card with a new PAN should always be issued. 📘NoteThe lost and stolen operations are identical in the Galileo system—the lost and stolen distinction is intended for your records only. You have two options for lost/stolen cards: Mark the card as lost or stolen and at the same time trigger the operation to issue a replacement physical card. Use the Modify Status endpoint with type: 3 for lost or type: 4 for stolen. Do not use this method for virtual-only cards. Mark the card as lost or stolen but do not issue a replacement physical card. Use the Modify Status endpoint with type: 8 for lost or type: 9 for stolen. Always use this method for virtual-only cards. To trigger the card-replacement operation after passing these Modify Status types, you can pass types 3 or 4 later. 📘NoteFor Digital First cards, see Lost or stolen Digital First cards in the Setup for Digital First guide. Lost/stolen physical card operation This operation issues a replacement physical card as soon as a card is reported as lost or stolen. The cardholder reports the card as lost or stolen. You call the Modify Status endpoint with these parameters: accountNo: PAN or CAD of the card type: 3 for lost or 4 for stolen The lost/stolen card operation: Changes the card to status: L or status: S, which immediately deactivates the card. Creates a new card record with the same PRN but a new PAN, CVV and expiry date. Flags the new card for embossing. Sends the LSCR: lost/stolen card with replacement event message. When the emboss process runs, it creates an emboss record in status: Y, includes the emboss record in the batch file, and sends the SHIP: card_shipped event message. The embosser mails the replacement card to the cardholder. The cardholder activates the card using your preferred method, which changes the replacement card to status: N. See the Activating a Card guide for more information. Because the replacement card has a different PAN from the lost/stolen card, the cardholder must set a new PIN. See PIN-Set Procedures for more information. The lost/stolen card retains status: L or status: S. Lost/stolen virtual card operation This operation does not issue a replacement card. The cardholder reports the card as lost or stolen. You call the Modify Status endpoint with these parameters: accountNo: PAN or CAD of the card type: 8 for lost or 9 for stolen The lost/stolen card operation: Changes the card to status: L or status: S, which immediately deactivates the card Sends the LSCN: lost/stolen card no replacement event message. You call the Add Card endpoint with these parameters to receive the new PAN, CVV, and expiry date: accountNo: PAN or PRN of the lost/stolen card newAccountNo: Do not populate prodId: Must be the same as the lost/stolen card If the product settings do not automatically activate the card upon creation (such as with Digital First), call the Modify Status endpoint with these parameters: accountNo: PAN or CAD of the added card type: 7 The lost/stolen card retains status: L or status: S. 📘NoteIf a lost or stolen card was in a mobile wallet, the replacement card does not automatically replace the card in the wallet. Either the cardholder must manually provision the replacement card to the wallet or you push-provision it. See Manual provisioning or Push provisioning in the Setup for Mobile Wallets guide for instructions. Damaged cards A ""damaged"" card is still in the cardholder's possession, but it cannot be used in card readers because of physical damage to the card. A damaged card should be reissued rather than replaced. See the Reissuing Cards guide for instructions. Temporarily issue cards While customers wait for the personalized, physical card to arrive in the mail, your program might offer the option of issuing an instant-issue (physical) or virtual card in the meantime. When the cardholder activates the personalized card, the temporary card is deactivated. For temporary instant-issue cards, follow the instructions in Adding an instant-issue card to an existing user in the Setup for Instant Issue guide. For temporary virtual cards, call the Add Card endpoint with the PAN or PRN of the card you are replacing as the accountNo. If the card is a Digital First card, the new virtual card is already available to use as soon as the old card is reported lost, stolen, or damaged. However, if the original card was in a mobile wallet, the card in the wallet is not automatically updated. You must push-provision the new card, or the cardholder must input the new card manually.Updated about 2 months ago Table of Contents Lost or stolen cards Lost/stolen physical card operation Lost/stolen virtual card operation Damaged cards Temporarily issue cards "
340,docs.galileo-ft.com/pro/page/scenario-6-refund-after-clearing-visa,"Scenario 6: Refund After Clearing (Visa) << Back to the index A debit cardholder purchases several items at a home-improvement store for $150. The next day, the cardholder returns one $40 item to the store. The merchant accepts the return and refunds $40 to the cardholder on the card that was used to make the purchase. The following are true: The initial available balance is $1000. The merchant validates the debit card with a PIN. The network is Visa Interlink. The cardholder returned the item after the transaction cleared. Sequence of events Events in the same step have the same timestamp. Visa sends an authorization request for –150.00. Galileo approves the request and places a 150.00 hold on the account. The available balance is now 850.00. Galileo sends the BAUT: auth webhook. Visa sends a batch file that contains the –150.00 transaction. Galileo backs out the 150.00 hold and posts –150.00 to the account. The available balance is still 850.00. Galileo sends a SETL: setl webhook. Visa sends a merchant credit authorization request for 40.00. Galileo approves the request but does not credit the account yet. The available balance is still 850.00. Visa sends a batch file that contains the 40.00 credit. Galileo creates authorization and backout entries for the ledger and credits 40.00 to the account. The available balance is now 890.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth150.0077880100020210411:115310MSTAuthMerchant Credit40.009944085020210412:145448MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth150778808502021-04-11 11:53:10 MSTSETLsetl150778808502021-04-12 13:46:02 MSTSETLsetl40994408902021-04-12 14:54:48 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME150.00-77885004112021 11:53:1040.00+99446004122021 14:54:48 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE150.00-7788ISA778804112021 11:53:100412202140.00+9944ISZ994404122021 14:54:4804132021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. amtauth_idoriginal_auth_idtypelocal_amttimestamp-15077880A0000000150002021-04-11 11:53:10 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-15077880ISA2021-04-11 11:53:102021-04-12 13:46:024099440ISZ2021-04-12 14:54:482021-04-13 14:10:39 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-15077880VIA7788850N2021-04-11 11:53:102021-04-11 11:53:1015077880BVA77881000NNone2021-04-12 13:46:02-15077880ISA7788850N2021-04-11 11:53:102021-04-12 13:46:024099440VIZ9944890N2021-04-12 14:54:482021-04-13 14:10:39-4099440BVZ9944850NNone2021-04-13 14:10:394099440ISZ9944890N2021-04-12 14:54:482021-04-13 14:10:39 "
342,docs.galileo-ft.com/pro/reference/api-reference-federal-benefit-enrollment-agency-types,Federal Benefit Enrollment Agency Types TypeDescriptionSOCIAL SECURITYSocial SecuritySUPP SECURITYSupplemental Security IncomeVA COMP/PENSIONVeterans Compensation & PensionVA EDUCATN MGIBVeterans Education MGIBVA EDUC MGIB/SRVeterans Education/Selected ReserveVA LIFE INSURVeterans Life InsuranceVA VOC REHAB EMPVeterans Vocational Rehabilitaion & Employment BenefitsCIVIL SERV CSAFederal Civil Service Retirement/AnnuityCIVIL SERV CSFFederal Civil Service Survivor/AnnuityRAILROAD RET BDRailroad Retirement/Annuity BenefitsRAILROAD UISIRailroad Retirement Unemployment/Sickness Benefits 
343,docs.galileo-ft.com/pro/reference/post/getpendingdeposits,Get Pending Deposits See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
344,docs.galileo-ft.com/instant/reference/authentication,"Authentication Generate API Keys from the Instant Dashboard. Be sure to keep these keys secure. Don't store them in public areas such as Github, client-side code, etc. Exchange the API Keys for an access token using the /login endpoint. The access token expires after 15 minutes. Use the access token in the Authorization header in all API requests. After the access token expires, use the /refresh endpoint to get a new one. "
345,docs.galileo-ft.com/pro/reference/api-reference-global-response-statuses,"Global Response Statuses Status codeDescription-5Provider configuration error-4Unknown endpoint-3Network or system failure-2External system failure-1System failure0Success1Missing parameters2Invalid parameter(s)4Failed API login12Invalid customer account16Failure17Invalid API usage. Consult documentation for correct usage.18Unauthorized access to this version of the API21Unregistered IP address22Method not allowed for this provider23Invalid date range24Duplicate transaction25Invalid or unconfigured type26Limit violation27Request cannot be completed28Product not allowed for this provider29Incorrect provider ID30Invalid enrollment transaction31Unknown or unregistered transaction32Account and transaction details do not match33Recipient not found34Non-unique recipient criteria35A problem exists with the recipient account36Recipient same as sender37Recipient velocity failure38Sender velocity failure39Invalid recipient ID40Insufficient balance41Recipient is not in the same program42Recipient is not related to the primary account43Recipient does not have an active account44No records found46Invalid product47PAN is required as accountNo no in multi-card/account situations48Configuration error49Maximum recordset page size exceeded50Invalid JWT51Referenced account is not a credit product52Invalid program ID53Account not allowed to load funds54This end point has been deprecated and will be removed in the very near future. If you feel that this is not valid, contact Galileo55This transaction is already being processed57Account is bankrupt or undergoing the bankruptcy process100Failed API login: missing transactionId100Success (Verify)101Multiple cards found when searching by PRN102No card found for account103Too many results were found (>400). Modify search criteria to reduce the number of results. "
346,docs.galileo-ft.com/pro/docs/statements,"Statements A statement is an official summary of financial transactions that occurred within a given period for a bank account held by a person or business. Statements are commonly used by account holders to monitor cash flow, check for possible fraudulent transactions, and perform bank reconciliations. Most Galileo clients deliver statements electronically, with some offering a paper option. Issuers in the United States are typically required to send a statement for an account only if one transaction has been made on the account during the statement period. What's in a statement? Because a statement is a report of account activity, statements should display activity summaries (debits, credits, fees) as well the details of each transaction that took place during the statement period. Statements should also display the account balance as of the statement date, fee totals, and any interest with the interest rate. Statement options As a Galileo client you have these options to provide statements: Create statements from the RDFs — Use this option if you want to customize your statements beyond what Galileo offers or to provide statements for credit accounts. See Creating Statements from the RDFs for guidelines. Obtain JSON statement data from Galileo — Use this option if you want to create basic statements for debit accounts using JSON files. Continue reading for instructions. Obtaining statements from Galileo Galileo currently offers statement data for these account types: DDA plus overdraft Savings GPR If account holders have all three account types, for example, then Galileo would generate three statements per month for them. Keep the following in mind: Amounts shown are always in the currency in which the account is based, not the currency at the point of sale. Statement periods begin at midnight on the first day of the statement cycle and end at 23:59:59 on the last day according to Galileo system time. Galileo stores your statement data for two years. Retrieving statements on-demand You can retrieve individual account statement data in your interface by calling Get Access Token and then assembling an HTTP call. Get Access Token call These parameters are required for the Get Access Token call: accountNo — Use the PRN of the account. type — Pass 1 (account) Galileo returns these values: token — A case-sensitive alphanumeric string, for example, hpSVyayQScHmhJS6_MVXT1WlsFRQoDJrRu_fi_JlX2Jo2dgg5p expires — The date/time the token expires, formatted as YYYY-MM-DD hh:mm:ss The default expiry is 300 seconds and/or 3 attempts. You can change default token-expiry parameters with the TSECV and TUSEC product parameters. HTTP request for the statement With the token assemble an HTTP call to retrieve the statement data, as shown in the example. The URL in the example is for an AWS instance that Galileo provisions for each client. If you do not already have an AWS URL, request one from Galileo This example is for the CV environment. For Production change the cv in the URL to pd. HTTPhttps://asset-[clientname].cv.gpsrv.com/asset/statement/account?token=[token]&config=[config]&date=[mmyy]&statementType=[type]&output=json where: clientname — The name of your tenanted AWS instance token — The token returned by Get Access Token config — A value provided by Galileo date — Statement date in MMYY format. The month corresponds to the first day of the statement period. statementType — Type of statement to return: G — GPR D — DDA, including overdraft S — Savings output — json Example HTTP call HTTPhttps://asset-clientname.cv.gpsrv.com/asset/statement/account?token=qXWUhQL8zwi3uJTykXuInGw7JbVoGf30bhPMNJLlc_nZekwvAQ&config=test&date=0118&statementType=G&output=json Galileo returns a JSON of the statement data, which you can present electronically or merge into a PDF template. You can print the PDFs on paper for those account holders who have opted out of electronic statements. Each JSON file name has this format, stmt_PRN_mmyy[_esign].json, where: PRN — The account's payment reference number mmyy — The month and year of the starting date of the statement _esign — Appended when the account holder has opted in to electronic statements JSON fields The JSON file that Galileo returns for each statement contains the fields in the table below. Most of the data are formatted as strings (enclosed in double quotation marks), and within those strings are these data types: alphanumeric — A–Z, a–z, and 0–9 $decimal – $999999999.99. Up to nine digits plus two decimal places, making 11 digits total. Specified as (11, 2). No comma separation for thousands. $1000 is formatted as $1000.00 instead of $1,000.00, and a negative value is -$1000.00. integer — Whole number with no decimal. list — Nested JSON list. long date — A date with the month spelled out and the four-digit year: November 01, 2023 or November 2023. Field nameTypeLengthDescriptionacct_noalphanumeric12 (PRN)16 (PAN)Either the Galileo PRN (savings) or a masked PAN with the format ""XXXXXXXXXXXX9999""addr1alphanumericAccount holder address, line 1. Example: ""93713 Garfield Dr""addr2alphanumericAccount holder address, line 2. Example: ""Apt 814""bal_idintegerBalance ID (Galileo account number). The identifier for the account that was transacted on. Example: 3556begin_balance$decimal(11, 2)The account balance at midnight on the first day of the reporting period in Galileo system time. Example: ""$1498.21""begin_datelong dateThe first day of the reporting period. Example: ""November 01, 2023""business_nameVARCHAR2Name on the business account. Example: ""K&L Nursery""cancel_dateYYYY-MM-DDT00:00:00Cancelation date and time.cityalphanumericThe account holder city of residence. Example: ""Silent Hill""deposits$decimal(11, 2)The sum of all deposits (payments) made during the statement period. Always a positive number. Example: ""$1220.18""end_balance$decimal(11, 2)The account balance at 23:59:59 on the last day of the reporting period in Galileo system time. Example: ""$10928.14""end_datelong dateThe last day of the reporting period. Example: ""November 30, 2023""fullnamealphanumericThe account holder's first name followed by the account holder's last name. Example: ""Lucy Lovelace""is_business_prodalphabetic1Whether the prod_id is a business product: Y (business product) or N (not a business product. Example: Nmmyyinteger4The abbreviated month and year for the statement. For cycle-date statements that span a month boundary, it is the month when the period begins. For example, if the cycle billing period goes from November 5 through December 4, 2023, the value is ""1123"", not ""1223"".month_yearalphanumericThe written-out month and year for the statement. Like the mmyy field, it is the month that begins the period when the cycle period spans a month boundary. Example: ""November 2023""od_per_fees$decimalOverdraft fees for the period. Always a negative number. Example: ""-$5.00""od_ytd_fees$decimalYear-to-date overdraft fees. Always a negative number. ""-$10.00""per_beg_dtYYYY-MM-DDThh:mm:ssBeginning date for the statement period in Galileo system time.per_end_dtYYYY-MM-DDThh:mm:ssEnding date for the statement period in Galileo system time.period_fees$decimalFees paid during the period. Always a negative number. Example: ""-$22.50""prnstring12The PRN of the account. Example: ""777777777777""prod_idintegerThe number Galileo assigns to the product for this account. Example: 4444prog_namealphanumericThe account program description. Example: ""Balance Financial by Galileo""purchases$decimal(11, 2)The sum of all point-of-sale purchases made during the statement period. Always a negative number. Example: ""-$19010.17”ri_per_fees$decimalDirect deposit fees for the period. Example: ""3.50""ri_ytd_fees$decimalYear-to-date direct deposit fees. Example: ""38.50""start_balance$decimalThe available balance as of 00:00 on the first day of the statement period. Example: ""$245.67""statealphanumeric2 or 3The two-letter abbreviation of the account holder state of residence (in the U.S.) or the two-letter country abbreviation. Example: ""OH"" for Ohiostatement_titlealphanumericDefault title: ""Account Statement"". A custom title can be added to the config file to override this.stmt_typealphabetic1Type of statement: D (debit account),suppress_odBooleanWhether overdraft is suppressed: true or falsetransactionslist0–n itemsA list of transactions. See the transactions fields table. If there are no transactions during the reporting period, this list is not populated.ytd_fees$decimal(11, 2)Year-to-date fees. The sum of all fees charged from January 1 through the end of the statement period. Always a negative number. For cycle periods that span a year boundary (Dec to Jan), this field includes only those fees charged from January 1 through the period end date. Example: ""-$100.09""zipalphanumericThe account holder postal code. If there is no postal code on file, this will be an empty string. Example: ""84122"" transactions fields These fields are nested in the transactions object for each transaction, when transactions are present. Field nameTypeLengthDescriptionact_typealphabetic2See Activity Type for possible values. Example: ""VI""amt$decimal(11, 2)Transaction amount. Can be a positive or negative number, depending on the type of transaction. Example: ""-$482.79""otrans_dtYYYY-MM-DDThh:mm:ssThe date-time the transaction posted or settled in Galileo system time. Example: ""2023-11-01T13:22:45""otypealphanumeric4See Transaction Types for possible values. Example: ""W""running_balance$decimalThe available balance after this transaction took place. Example: ""$75.00""source_idintegerIdentifier that maps back to the original transaction, such as authorization ID, payment ID, adjustment ID or ACH transaction ID. Example: 23944trans_descalphanumericTransaction description. For card transactions this is DE043, and for others it corresponds to the act_type. Example: ""Smokey Kitchens Bakery, Fireweed, GA"" or ""Retail Load""trans_dtMM/DD/YYYY10Transaction date. The date the transaction posted or settled in Galileo system time. Example: ""11/01/2023"" Example JSON statement JSON{ ""acct_no"": ""777777777777"", ""addr1"": ""123 Maple St"", ""addr2"": """", ""bal_id"": 88888, ""begin_balance"": ""$0.00"", ""begin_date"": ""November 23, 2022"", ""business_name"": null, ""cancel_date"": null, ""city"": ""Oak Park"", ""deposits"": ""$100.00"", ""end_balance"": ""$0.00"", ""end_date"": ""November 30, 2022"", ""fullname"": ""Adela Martinez"", ""is_business_prod"": ""N"", ""mmyy"": ""1122"", ""month_year"": ""November 2022"", ""od_per_fees"": ""$0.00"", ""od_ytd_fees"": ""$0.00"", ""per_beg_dt"": ""2022-11-01T00:00:00"", ""per_end_dt"": ""2022-11-30T23:59:59"", ""period_fees"": ""$0.00"", ""prn"": ""777777777777"", ""prod_id"": 4444, ""prog_name"": ""MoneyProgram"", ""purchases"": ""$50.00"", ""ri_per_fees"": ""$0.00"", ""ri_ytd_fees"": ""$0.00"", ""start_balance"": ""$0.00"", ""state"": ""CA"", ""statement_title"": ""Account Statement"", ""stmt_type"": ""D"", ""suppress_od"": false, ""transactions"": [  {  ""act_type"": ""PM"",  ""amt"": ""$100.00"",  ""otrans_dt"": ""2022-11-23T00:00:00"",  ""otype"": ""RL"",  ""running_balance"": ""$100.00"",  ""source_id"": 134,  ""trans_desc"": ""Retail Load"",  ""trans_dt"": ""11/23/2022""  },  {  ""act_type"": ""VS"",  ""amt"": ""-$25.00"",  ""otrans_dt"": ""2022-11-23T00:00:00"",  ""otype"": ""M"",  ""running_balance"": ""$75.00"",  ""source_id"": 286,  ""trans_desc"": ""Eastern Clothier"",  ""trans_dt"": ""11/23/2022""  },  {  ""act_type"": ""AD"",  ""amt"": ""-$25.00"",  ""otrans_dt"": ""2022-11-23T00:00:00"",  ""otype"": ""M"",  ""running_balance"": ""$50.00"",  ""source_id"": 41,  ""trans_desc"": ""Card to Card to Marco Martinez"",  ""trans_dt"": ""11/23/2022""  } ], ""ytd_fees"": ""$0.00"", ""zip"": ""12345"" } Converting JSONs to PDFs One way to convert JSON data to PDFs is to follow these steps: Convert the JSON into a format that can be used by an HTML Jinja template. Convert the Jinja template into raw HTML. Use a third-party tool to convert the HTML to PDF. You may find other ways to port JSON data to a PDF template as suits your use case. Your JSON-to-PDF conversion must include the following elements: header, footer, and legal disclaimers.Updated 10 days ago Table of Contents What's in a statement? Statement options Obtaining statements from Galileo Retrieving statements on-demand JSON fields transactions fields Example JSON statement Converting JSONs to PDFs "
347,docs.galileo-ft.com/instant/reference/card-activity-type,Card Activity Type TypeDescriptionauthorizationA card authorizationsettlementA card settlement 
348,docs.galileo-ft.com/pro/reference/post/getgroupsinfo,Get Groups Info Use the Get Groups Info endpoint to retrieve information about one or more groups. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description616-01Invalid group ID. The groupId does not exist in the core. Verify that groupId is correct by calling Get Group Hierarchy for the root group.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
349,docs.galileo-ft.com/pro/changelog/august-2022,"August 2022 Allpoint ATM loads We added support for directly loading cash onto cards at Allpoint ATMs. Converting JSON to PDF In the Statements guide we added a suggestion on how to convert the statement JSON to PDF. New ACH endpoint and name fields We have added the Add ACH Account Corporate endpoint, for adding ACH accounts that belong to a corporate entity. For ACH accounts that belong to individuals, continue using Add ACH Account. The ACH account–related endpoints have some new fields so that you can specify the account holder name in the outgoing Nacha files. firstName — First name of account holder lastName — Last name of account holder fileFirstName — First name to include in the Nacha file, instead of firstName fileLastName — Last name to include in the Nacha file, instead of lastName companyName — Name of corporate account holder fileCompanyName — Corporate name to include in the Nacha file, instead of companyName For Modify ACH Account, specify the entityType to modify: I for individual or C for company. IIAS fields Both versions of the Auth API now have IIAS (inventory information approval system) information for FSA/HSA/HRA cards. See IIAS fields in the Authorization Controller API guide for more information. Signed amount field change In the SETL: setl event message, the sign_amount field has been changed to signed_amount, which contains the amount plus a negative sign for debits or no sign for credits. Example -234.44 ACH identifier clarification We changed the ACH Tracking and Troubleshooting page to better explain which identifiers can be used to track ACH transactions. New event We added the AUMD: auth_metadata event, which provides request/response times for the Auth API. Switch Product recovery In the Switching Products guide we added recovery information: if the product switch is successful but the reissue is not, you can often call Reissue Card with the correct parameters to successfully reissue the card. Status-code format change Up until now, status codes for the Program API have had the format xxx-xx, where the first three digits are the 3-digit endpoint ID. As we continue to add new endpoints, some of the newer ones will have 4-digit endpoint IDs, so the status code will have the format xxxx-xx. All of the status codes that currently use a 3-digit endpoint ID will continue to use the 3-digit format. "
350,docs.galileo-ft.com/instant/docs/about-cards,"About Cards Each of your cardholders is automatically mailed a personalized debit card to access the funds in their Account. All cards support Apple Pay, Google Pay, and Samsung Pay. The Card Object Card ID The card_id uniquely identifies the card and is used in all API requests regarding a particular card. There is no reason to share this identifier with cardholders. Creation date The creation_date is the datetime recorded when the card is created. Emboss date The emboss_date is the datetime recorded when the card is embossed. Masked PAN The masked_pan is a masked version of the 16-digit card number. The first 12 digits are asterisks, followed by the last four numbers of the PAN. Status The status indicates the status of the card and allows processes to be initiated to handle different scenarios, such as a lost or stolen card. Card lifecycle Embossment and delivery After the cardholder has been created successfully, Galileo sends a request to a third-party emboss vendor to print a card. After the personalized card is printed, it is attached to a card carrier, which is white-labeled with your brand and mailed to the cardholder's shipping_address. Status updates A card's status will change as it progresses through its lifecycle and experiences various events. For example, a card that is in the mail will have a shipped status, and an expired card will have an expired status. A card's status may be updated via API in response to the card being lost, stolen or damaged, or to freeze or deactivate the card. Expiration A card expires between 45 and 51 months after it is issued. The exact number of months is randomly selected from this range as an anti-fraud measure. Galileo automatically manages the process of sending out a new card as the old card nears expiration. It is important to verify that the cardholder's shipping_address is up to date, especially as the old card nears expiration. Card design Each card has either a black or white background with your logo on the front, with the cardholder's name, the card number, the expiry date, and the CVV on the back. You can view your card design in the Dashboard. If you wish to have multiple card designs, you must create a product for each in the Dashboard.Updated over 2 years ago Table of Contents The Card Object Card lifecycle Card design "
351,docs.galileo-ft.com/pro/page/alc-deletion-endpoints,"ALC Deletion Endpoints Delete Account-Level Auth Control, below Delete Account-Level MCC Control Delete Account-Level Merchant Control POST Delete Account-Level Auth Control /deleteAccountLevelAuthControl Use the Delete Account-Level Auth Control endpoint to delete a velocity ALC that was created by the Set Account-Level Auth Control endpoint. Prior to using this endpoint, call Get Auth Control with accountNo populated to retrieve the control_id of the ALC to delete. FORM DATA apiLogin string, required Provider's web service username, as provided by Galileo for the requesting IP address. Pattern: Max 50 characters Example: ""AbC123-9999"" apiTransKey string, required Web service password, as provided by Galileo for the requesting IP address. Pattern: Max 15 characters Example: ""4sb62fh6w4h7w34g"" providerId string, required Galileo-issued unique provider identifier. Pattern: Max 10 digits Example: 9999 transactionId string, required A provider-generated ID that is unique to each API call. A UUID is preferred. Do not reuse this identifier for multiple API calls. Pattern: Max 60 characters Example: ""9845dk-39fdk3fj3-4483483478"" accountNo string required The PRN for the account. Do not use the CAD or PAN. Pattern: PRN (12-digit numeric string) Example: ""344101254935"" controlId int32 required The velocity control ID to delete, as returned by Get Auth Control. Pattern: Integer, maximum 18 digits Example: 102 HEADERS response-content-type string Use xml or json to specify the type of response. The default value is xml. Use this header instead of the standard accept header. RESPONSE See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status codeDescription622-01No control found. A velocity control with that controlId does not exist. Verify that the ID is correct by calling Get Auth Control. Example request cURLcurl --location --request POST 'https://api-exact.cv.gpsrv.com/pintserv/deleteAccountLevelAuthControl' \ --header 'response-content-type: json' \ --header 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'apiLogin=[redacted]' \ --data-urlencode 'apiTransKey=[redacted]' \ --data-urlencode 'providerId=19' \ --data-urlencode 'transactionId=3439cf48-414f-4e9c-a0f5-159c34d4a43a' \ --data-urlencode 'accountNo=999101050927' \ --data-urlencode 'controlId=2' Example response JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.146,  ""response_data"": {},  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""656c7ed7-d745-40ae-9978-42547d521ebf""  },  ""system_timestamp"": ""2023-02-13 17:37:10"",  ""rtoken"": ""052ef73a-8712-4cb8-8d73-7363a6a91f08"" } POST Delete Account-Level MCC Control /deleteAccountLevelMccControl Use the Delete Account-Level MCC Control endpoint to delete an MCC ALC that was created by the Set Account-Level MCC Controls endpoint. Prior to using this endpoint, call Get MCC Controls with accountNo populated to retrieve the list of MCC controls. FORM DATA apiLogin string, required Provider's web service username, as provided by Galileo for the requesting IP address. Pattern: Max 50 characters Example: ""AbC123-9999"" apiTransKey string, required Web service password, as provided by Galileo for the requesting IP address. Pattern: Max 15 characters Example: ""4sb62fh6w4h7w34g"" providerId int32, required Galileo-issued unique provider identifier. Pattern: Max 10 digits Example: 9999 transactionId string, required A provider-generated ID that is unique to each API call. A UUID is preferred. Do not reuse this identifier for multiple API calls. Pattern: Max 60 characters Example: ""9845dk-39fdk3fj3-4483483478"" accountNo string, required The PRN for the account. Do not use the CAD or PAN. Pattern: PRN (12-digit numeric string) Example: ""999101254935"" mccControlStart int32, required Beginning of the MCC range of the control to delete, as returned by Get MCC Controls. Pattern: 4 digits Example: 6012 mccControlEnd int32, required Ending of the MCC range of the control to delete, as returned by Get MCC Controls. Pattern: 4 digits Example: 6012 HEADERS response-content-type string Use xml or json to specify the type of response. The default value is xml. Use this header instead of the standard accept header. RESPONSE See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status codeDescription623-01No control found. An MCC control for the account does not exist. Verify that the range is correct by calling Get MCC Controls. Example request cURLcurl --location --request POST 'https://api-exact.cv.gpsrv.com/pintserv/deleteAccountLevelMccControl' \ --header 'response-content-type: json' \ --header 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'apiLogin=[redacted]' \ --data-urlencode 'apiTransKey=[redacted]' \ --data-urlencode 'providerId=19' \ --data-urlencode 'transactionId=c66566f0-03aa-4376-a545-7df8dd33ce81' \ --data-urlencode 'accountNo=999101050927' \ --data-urlencode 'mccControlStart=6012' \ --data-urlencode 'mccControlEnd=6012' Example response JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.163,  ""response_data"": {},  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""e6f52c59-4a4c-405a-aa76-0127fd222337""  },  ""system_timestamp"": ""2023-02-13 17:30:23"",  ""rtoken"": ""b5a27c0d-955b-4ad0-9b36-89f83328ac22"" } POST Delete Account-Level Merchant Control /deleteAccountLevelMerchantControl Use the Delete Account-Level Merchant Control endpoint to delete a merchant ID ALC that was created by the Set Account-Level Merchant Control endpoint. Prior to using this endpoint, call Get Merchant Controls with accountNo populated to retrieve merchant IDs. FORM DATA apiLogin string, required Provider's web service username, as provided by Galileo for the requesting IP address. Pattern: Max 50 characters Example: ""AbC123-9999"" apiTransKey string, required Web service password, as provided by Galileo for the requesting IP address. Pattern: Max 15 characters Example: ""4sb62fh6w4h7w34g"" providerId int32, required Galileo-issued unique provider identifier. Pattern: Max 10 digits Example: 9999 transactionId string, required A provider-generated ID that is unique to each API call. A UUID is preferred. Do not reuse this identifier for multiple API calls. Pattern: Max 60 characters Example: ""9845dk-39fdk3fj3-4483483478"" accountNo string, required The PRN for the account. Do not use the CAD or PAN. Pattern: PRN (12-digit numeric string) Example: ""344101254935"" merchantId string, required The account-level merchant ID to delete, as returned by Get Merchant Controls. Pattern: Maximum 15 alphanumeric characters Example: ""000534LECR08003"" HEADERS response-content-type string Use xml or json to specify the type of response. The default value is xml. Use this header instead of the standard accept header. RESPONSE See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status codeDescription624-01No control found. The merchant control for the account does not exist. Verify that the merchant ID is correct by calling Get Merchant Controls. Example request cURLcurl --location --request POST 'https://api-exact.cv.gpsrv.com/pintserv/deleteAccountLevelMerchantControl' \ --header 'response-content-type: json' \ --header 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'apiLogin=[redacted]' \ --data-urlencode 'apiTransKey=[redacted]' \ --data-urlencode 'providerId=19' \ --data-urlencode 'transactionId=ac60ccd7-498b-4cc0-8928-3d82909bc142' \ --data-urlencode 'accountNo=999101050927' \ --data-urlencode 'merchantId=45678910asdf123' Example response JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.132,  ""response_data"": {},  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""2e479017-4d78-4e96-984e-039299060f99""  },  ""system_timestamp"": ""2023-02-13 17:43:09"",  ""rtoken"": ""1d7b0a2f-b09c-42c0-b180-ae4d7be1d2ed"" } "
352,docs.galileo-ft.com/instant/reference/transfer-type,Transfer Type TypeDescriptionaccount_to_accountTransfer between accountsachACH transferaccount_fundingTransfer from MFA 
353,docs.galileo-ft.com/pro/page/scenario-9-merchant-credit-mastercard-banknet,"Scenario 9: Merchant Credit (Mastercard Banknet) << Back to the index A debit cardholder receives a gift worth $150. The cardholder does not want to keep the gift and returns it to the original merchant. The merchant provides a $150 merchant credit on the cardholder's debit card. The following are true: The initial available balance is $1000. The merchant validates the debit card with a signature. The network is Mastercard Banknet. Galileo processes merchant credits from Mastercard Banknet as adjustments, which is different from other networks. Sequence of events Events in the same step have the same timestamp. Mastercard sends a merchant credit authorization request for 150.00. Galileo approves the request but does not credit the account yet. Mastercard sends a clearing file with the 150.00 credit. Galileo posts 150.00 to the cardholder account as an adjustment. The available balance is now 1150.00. Galileo sends a BADJ: adj webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthMerchant Credit150.0000440100020210412:101827MST Authorization/Settlement Events webhooks msg_idtypeamountadj_idoriginal_auth_idopen_to_buytimestampBADJadj1508822011502021-04-12 10:18:27 MST Authorized Transactions RDF This transaction does not appear in this RDF. Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE150.00+8822ADC882204122021 10:18:2704122021 Get Authorization History response This transaction is not returned by this endpoint. Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts15088220ADC2021-04-12 10:18:272021-04-12 10:18:27 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts150None0ADC88221150None2021-04-12 10:18:272021-04-12 10:18:27 "
354,docs.galileo-ft.com/pro/reference/webhook/authorization/event/post,"Authorization Events Webhook Requests The event data (described in the index pages that follow) will be in the body of the request, as JSON or form data. JSON example (application/json): JSON{ ""type"": ""denied_auth_gas"", ""account_id"": ""2011"", ""amount"": ""10.25"", ""balance"": ""500.00"", ""card_id"": ""12534"", ""mcc"": ""5712"", ""merch_loc"": ""NEW YORK, NY"", ""merch_name"": ""Widgets Incorporated"", ""merch_num"": ""L4DIV6D5LM4X7LF"", ""network"": ""V"", ""pmt_ref_no"": ""155200002022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2019-10-09 11:20:33 MST"", ""auth_id"": ""12303090"" } Form example (application/x-www-form-urlencoded): type=denied_auth_gas&prod_id=1504&prog_id=255&pmt_ref_no=199999999998&merchant_name=DISCOUNT+FM+1&merchant_number=231000000129001&mcc=5541&merch_loc=ARCHER%2C+FLUS&auth_tran_type=5&amount=30.65&network=V&open_to_buy=2.95&auth_id=29143890&timestamp=2019-10-09+11%3A20%3A33+MST&account_id=388750&card_id=740724 Responses JSON example: JSON{ ""success_code"": ""0"" } XML responses should use the webhook name (Authorization) as the envelope. Example: XML<Authorization><success_code>0</success_code></Authorization> LanguageShellNodeRubyPHPPython "
355,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-tkc,"mobile_activation TKC The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Vxxx — Token generated by Visa Codes — ATKC, GTKC, STKC, VTKC Event trigger — Galileo receives notification that the card network generated a token for the card. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""GTKC"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation TKC"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ATKC) ""Google"" (event code GTKC) ""Samsung"" (event code STKC) ""Visa"" (event code VTKC) Example JSON# mobile_activation TKC example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""GTKC"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation TKC"", ""wallet_type"": ""Visa"" } Table of Contents Fields Example "
356,docs.galileo-ft.com/pro/changelog/march-2023,"March 2023 Click March 2023 to see the details. Sandbox API URL updated We updated the examples in the reference documentation to reflect the new Sandbox URL: https://api-sandbox.cv.gpsrv.com/intserv/4.0. Updated parameter description We changed the description of accountNo on the Add Card endpoint to clarify that CAD is not accepted. Frozen card behavior We updated the Card Statuses guide to include details about which transactions are affected by a card freeze and which are not, as well as a way to override the freeze on transactions that credit the account. New Mastercard response codes Mastercard has changed some of its authorization response codes. Check with Galileo to see if your program is using these new codes yet. ​​Card status or other conditionNew response codeC (canceled)R (charged off)Z (canceled without refund)D (disabled)V (voided)W (waiting for payment) AVS/ASI check failureInvalid account78 — Invalid AccountX (set to emboss)Y (shipped, ready to activate),B (blocked)O (operations hold)Tokenization blocked by product settings57 — Transaction not permittedL (lost card)A (lost card waiting for sufficient funds)41 — Lost CardQ (delinquent)51 — Insufficient FundsFraud63 — Security ViolationMCC product- or account-level block03 — Invalid MerchantMax system amount reached13 — Invalid AmountFrozen card62 — Restricted card Statements update We've updated the Statements guide with current fields and definitions. Auth API doc reorganization We have divided the Authorization Controller API guide into three guides for ease of navigation. The content was not updated: Authorization Controller API — Main guide for API functionality Auth API Validation Checks — The checks that Galileo performs on incoming authorization requests and the corresponding response codes Auth API Field Detail — Lengthier explanations for some of the specialized webhook fields New Offline PIN guide We published the Offline PIN guide, which addresses how to set PINs in some non-U.S. jurisdictions. API transaction reversal From the guides that explain how to initiate transactions with the Program API—Creating a Payment, Creating an Account Transfer, Creating an Adjustment—we removed references to the corresponding reversal endpoints, because those endpoints do not produce good results in terms of funds flow. Instead, Galileo recommends using Create Adjustment to reverse out payments and adjustments, using the appropriate type to indicate a reversal. Pause or cancel card emboss In the case that you want to pause a card embossing, such as with Digital First cards, you can now call Set Account Feature with a new feature type. You can use this feature to cancel an emboss permanently or to resume it at a later time. Event message clarification We added a section to Event Setup and Configuration to clarify the relationship between event timestamps and account balance. "
357,docs.galileo-ft.com/pro/reference/post/getbulkcardorder,Get Bulk Card Order The table below lists status codes that apply to this specific endpoint. Status CodeCode Description471-01Unrecognized bulk card orderLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
358,docs.galileo-ft.com/pro/reference/api-reference-cit-and-mit-indicators,"CIT and MIT Indicators A CIT is any transaction where the cardholder is actively participating in the transaction. CITs may be performed based on credentials provided by the cardholder at the time of transaction or stored credentials-on-file from a previous interaction. CITs can occur as in-store point-of-sale transactions, e-commerce transactions, mail-order/telephone order transactions or at an ATM. An MIT is any transaction where the cardholder is not actively participating in the transaction. MITs may often be preceded by either a CIT or an AVS request, and include recurring payments such as standing orders, subscriptions, installments or unscheduled credential-on-file transactions. MITs may also be industry-practice transactions such as partial shipments, related or delayed charges, no-shows or resubmissions. In general, where there is a series of transactions, the first transaction is CIT and subsequent transactions are MIT. The first character of the code indicates which party initiated the transaction: C — Cardholder M — Merchant CodeDescriptionC101Credentials on file (ad-hoc). The cardholder agrees to store the credentials on file with the merchant for future cardholder-initiated purchases that may occur from time to time.C102Standing order. Cardholder agrees to store the credentials on file and initiates a first transaction in a series intended to be for a variable amount and a fixed frequency.C103Subscription. Cardholder agrees to store the credentials on file and initiates a first transaction in a series intended to be for a fixed amount and a fixed frequency.C104Installment. Cardholder agrees to store the credential-on-file to establish an installment plan and initiates a first transaction in a series. The installment plan should reflect the single purchase of goods/services with a known amount and set frequency over a specified duration.M101Unscheduled credential on file. A transaction made pursuant to an agreement between a cardholder and a merchant, whereby the cardholder authorizes the merchant to store and use the cardholder’s account data to initiate one or more future transactions. The transaction can be for a fixed or variable amount but does not occur at regular intervals on a scheduled date. For example, the cardholder agrees to allow a tollway merchant to initiate transactions when the balance in the consumer account with the merchant falls below an established amount (auto top-up).M102Standing order. A transaction made pursuant to an agreement between a cardholder and a merchant, whereby the cardholder authorizes the merchant to store and use the cardholder’s account data for a transaction that must occur at regularly scheduled intervals for a variable amount, as specified in the agreement, such as with utility payments.M103Subscription. A transaction made pursuant to an agreement between a cardholder and a merchant, whereby the cardholder authorizes the merchant to store and use the cardholder’s account data for a transaction that must occur at regularly scheduled intervals for a fixed amount, as specified in the agreement. The subscription agreement may include an allowance for introductory pricing or for price changes to occur from time to time.M104Installment. A transaction in a series of transactions made pursuant to an agreement between a cardholder and a merchant, whereby the cardholder authorizes the merchant to store the cardholder’s account data for use by the merchant to initiate one or more future transactions for a known amount over a specified duration based on a single purchase.M205Partial shipment. An agreed quantity of goods ordered through e-commerce are not all available for shipment at the time of purchase. Each shipment is a separate transaction.M206Related or delayed charge. An additional account charge after initial services have been rendered and payment has been processed, such as a hotel mini bar charge after the cardholder has checked out of the hotel.M207No-show charge. A penalty charged according to the merchant’s cancellation policy, such as a cardholder’s cancellation of a reservation without providing proper advance notice to the merchant.M208Resubmission. A previous attempt to obtain authorization for a transaction was declined but the issuer’s response did not prohibit the merchant from trying again later, such as an insufficient funds/over-credit-limit response or transit debt recovery. Content based on the Mastercard document AN 5524 Cardholder-Initiated Transaction and Merchant-Initiated Transaction Indicators. "
359,docs.galileo-ft.com/pro/reference/post/getaccountgrouprelationships,"Get Account Group Relationships Use the Get Account Group Relationships endpoint to retrieve all accounts that are in a group, either in a single group or in all associated subgroups. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description618-01Invalid group ID. The groupId does not exist in the core. Verify that groupId is correct by calling Get Group Hierarchy for the root group.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
360,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-exp-reversal,"auth_exp_reversal Code — BEXR Event trigger — Galileo expires the reversal. Process — This process contains the event trigger: Galileo receives a clearing message for the reversal. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billing_amt Amount to be billed in the currency of the cardholder account (DE006). Example: ""24.35"" billing_curr_code Currency code for billing_amt (DE051). Example: ""840"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" fund_pastotb The available balance of the real-time funding account after this transaction takes place. Example: ""24365.90"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BEXR"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""auth_exp_reversal"" Example JSON# auth_exp_reversal example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""billing_amt"": ""77"", ""billing_curr_code"": ""840"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BEXR"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""auth_exp_reversal"" } Table of Contents Fields Example "
361,docs.galileo-ft.com/pro/reference/dispute/post/ping,Ping Use the Ping endpoint to test API connectivity and permissions. Ping does not perform any functions on the Galileo system. Some use cases for Ping are: Testing access from an automated monitoring service Integrating with an API call to confirm assumptions and validate access LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! 
363,docs.galileo-ft.com/pro/reference/post/creategroup,"Create Group Use the Create Group endpoint to create a root group or a non-root group. When creating a root group, populate these parameters to create the business profile: businessLegalName doingBusinessAs phoneCountryCode phone primaryContactEmail primaryContactName When creating a non-root group, you can populate the business-profile parameters as desired, except for phone and phoneCountryCode, which are required. All of the name parameters support the Latin-9 (ISO-8859-15) character set. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description613-01Maximum levels exceeded. The root group specifications do not permit this level to be created. Create this group at a higher level in the hierarchy.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
364,docs.galileo-ft.com/pro/docs/ach-tracking-and-troubleshooting,"ACH Tracking and Troubleshooting This guide describes identifiers used to track outgoing and incoming ACH. It also describes statuses that indicate a failed outgoing ACH request. Using identifiers to track ACH transactions You can use a combination of identifiers to track ACH transactions within your system. Tracking methods depend on whether the transaction is outgoing or incoming ACH. See also Mapping Transactions Within Your System for a general guide on using identifiers to trace transactions. The table below shows how various ACH-related identifiers are represented across Galileo systems. The variety in identifiers is a reflection of the complexity in back-end systems and databases. 📘NoteThe labels for these identifiers in the Events API messages may differ according to the arrangements you made with Galileo. For example, some of these identifiers could be labeled tran_id instead of the identifier shown below. You may also need to request that some fields be added to your events. ACH transaction IDExternal transaction IDPayment or adjustment IDInternal transaction IDTrace IDProgram APIach_transaction_idach_trans_id (both outgoing)external_trans_idsource_idach_trans_iddeposit_transaction_id (both incoming)Events APIach_trans_idext_trans_idpmt_idadj_idach_source_tracePosted Transactions RDFTRACE NO (outgoing)EXTERNAL TRANSACTION IDAUTHORIZATION CODETRACE NO (incoming)ACH-related CDFsext_trans_idsource_idtrans_idtrace_noCSTIDTrans IDTrace NoExternal Trans APItransaction_idsource_trace ACH transaction ID — This value is returned by the Create ACH Transaction endpoint as ach_transaction_id. Most of the other transaction-retrieval endpoints return ach_transaction_id, except Get All Transaction History and Get Pending Deposits, which return this value as ach_trans_id. External transaction ID — When you pass a transactionId with the Create ACH Transaction call, the value is copied to the external transaction ID field. This identifier is universally unique, and it is present only for outgoing ACH transactions. Payment or adjustment ID — The identifier for the actual payment (credit) or adjustment (debit) that is triggered by the ACH transaction, either incoming or outgoing. The otype differentiates ACH transactions from other types of payments and adjustments. Internal transaction ID — This is the primary key for one of the tables involved in ACH processing. Trace ID — The 15-digit identifier that is passed in the Nacha file. This value may help differentiate one ACH transaction from another, but it is not universally unique, even within the same Nacha file, and so it cannot be used by itself to uniquely identify a transaction. Present for both incoming and outgoing ACH transactions. Tracking outgoing ACH transactions When you use the Create ACH Transaction endpoint, the ach_transaction_id that it returns and the external transaction ID can be used to track the transaction in the Program API, events webhook messages, and the Posted Transactions RDF. To match the same transaction in the CST, match the ID for payment and adjustment transactions. Tracking incoming ACH transactions When Galileo receives a Nacha file, the only identifier in the file for a transaction is the trace ID, which is not universally unique. When Galileo posts the transaction to the payments or adjustments table, you can use that ID in conjunction with the trace ID to track the transaction across multiple systems. Matching returned transactions When one of your outgoing ACH transactions is returned by the recipient, Galileo sends the ACRT: ach_return event message. To link this return to the original ACH transaction (BPMT: pmt or BADJ: adj), match the ach_trans_id. Troubleshooting outgoing ACH This table lists ACH transaction statuses that prevent an outgoing transaction from being completed, as well as the next step to take. StatusDescriptionNext stepDDeleted by account holderWait for the account holder to request a new transaction.EErrorReturn or cancel the transaction and notify the originator.LCanceled due to violation of debit limitNotify the originator that the transaction was canceled and that it is outside of the allowed range.RBad routing numberFor outgoing ACH, obtain the correct routing number from the customer.XOn holdDetermine whether to post or return the transaction.lPending approval, limit exceededNotify the originator that the transaction is outside of the allowed range.Updated about 6 hours ago Table of Contents Using identifiers to track ACH transactions Tracking outgoing ACH transactions Tracking incoming ACH transactions Matching returned transactions Troubleshooting outgoing ACH "
365,docs.galileo-ft.com/pro/docs/partners-programs-and-products,"Partners, Programs and Products This guide explains how Galileo’s platform is structured to meet the needs of Galileo clients and clients’ customers. This structure is commonly referred to as ""The 3 Ps"": partners, programs and products. The 3 Ps are arranged in a hierarchy. The 3 Ps structure is a hierarchy in which you, the Galileo client, are called the partner, and you manage multiple programs. Each program contains one or more products. The partner hires Galileo to manage the financial programs they offer to their end users. (Partners may also be called ""providers."") As a partner, you have one or more programs. A program is a collection of products and services that you want to offer to your customers. A program has a standard set of parameters that apply to all of the products within that program. ""Program"" can also describe the contractual relationship between a fintech company and an issuer to bring to market a financial service on behalf of the issuer. Fintechs and issuers work with Galileo to leverage its technology and services (i.e., the Galileo platform), allowing them to offer card or banking services to their customers. Programs also include contractual partnerships with other entities that handle specific aspects of the program, such as payment networks and embossers (for physical card offerings). Within each program is one or more products. Products are account types that you want to offer to your customers. Galileo offers a number of different products, each with a set of parameters that determine account behavior. Some product types are: Spending account (DDA) Savings account Credit account Health savings account Example: Company Intrepid In this example, Company Intrepid is a Galileo client. Company Intrepid is the partner, and they provide debit and savings services to their account holders. Company Intrepid provides these services to customers who are in the United States and in France. Partner — Company Intrepid Programs — Banking: U.S. dollar, Banking: Euro Products — Debit account, savings account The differentiating factor between the programs is the currency. Program-level parameters Parameters set at the program level will drive the behavior of all products within the program. The values for the parameters are determined by your bank to manage risk. Mandatory parameters typically include: Currency type Max daily limits Transaction dispute method Parameters for fraud Additional services/providers/vendors CIP provider (automated KYB or KYC) Emboss provider Customer Service Fraud Disputes If you want to offer products with one or more different parameters than the ones specified in your existing programs, you will need to create a new program with new products. For example, if you want to offer a version of your products in a different currency, you would create a new program that contains copies of the original products. Product-level parameters Each product has a specific set of parameters that must be set for the product to drive the correct account behavior. These parameters are determined during product setup, and may include: Transaction limits Point-of-sale daily limit			 Daily ATM withdrawal limit			 Per-transaction ATM withdrawal limit 				 Daily over-the-counter limit				 Per-transaction over-the-counter limit 				 Total daily cash withdrawal limit				 Total daily limit (point of sale, cash advance, ATM)			 Daily number of ATM withdrawals	 Phone-service limits (only if using the Galileo call center and fees are being charged) Load limits Maximum card value	 Card-to-card (recipient only)	 Direct deposit	 Mastercard Load or Visa ReadyLink	 Sending limits, card-to-card Product fees Card maintenance fees Domestic transaction fees International transaction fees Service fees MCC controls Country blocks Additional parameters Identifiers Galileo uses various types of identifiers to track partners, programs, and products across systems. When you sign on as a Galileo client, Galileo generates several identifiers that distinguish you and your data from other Galileo clients. If you are using the Program API, Galileo assigns you a provider ID that you include with all of your API calls. This ID is unique across Galileo. For each program you are assigned a program ID, and each product has a product ID. Both of these identifiers are unique across Galileo. The product ID is sometimes called a PID. The program ID is present in every record of the RDFs as UNIQUE PROGRAM ID as well as in Events API messages as prog_id. You will use the product ID every time you create an account with the Program API (prodId), and the prod_id is present in every Events API message as well as in some Program API responses. This table summarizes how your identifiers are represented across Galileo systems. Program APIEvents APIAuth APIRDFCSTproviderId————prog_idprog_id—UNIQUE PROGRAM ID—prodIdprod_idprod_id—PRODUCT IDCard DescriptionUpdated 5 months ago Table of Contents Example: Company Intrepid Program-level parameters Product-level parameters Identifiers "
366,docs.galileo-ft.com/pro/reference/about-cards,"About Cards Choose a Card Strategy — Explanation of card types and use cases Physical cards Digital cards Setting Up a Card Program — Card lifecycle and other general card information Card identifiers See Retrieving Card Information or Setting Up a Card Program Card statuses See Card Statuses. Card networks See Networks. Card activation See Activating a Card. Card embossing See Card embossing in Setting Up a Card Program. Card art See Design a Card. Card shipment See Card shipment in Setting Up a Card Program. Viewing card information See Retrieving Card Information. Freezing cards See Freezing cards in Card Statuses. Lost or stolen cards See Lost, Stolen, or Damaged Cards. Reissuing cards See Reissuing Cards. Card expiry See Card expires in Setting Up a Card Program. Cancelling cards See Card cancelation in Setting Up a Card Program.Table of Contents Card identifiers Card statuses Card networks Card activation Card embossing Card art Card shipment Viewing card information Freezing cards Lost or stolen cards Reissuing cards Card expiry Cancelling cards "
367,docs.galileo-ft.com/pro/reference/post/updatependingmerchantcredit,"Update Pending Merchant Credit To use this endpoint, first, use the Get Pending Merchant Credit endpoint to retrieve the settle_id value, then pass it in the settleId parameter. Use type to specify whether to post or post and hold. When the Galileo system receives the call to this endpoint, the credit is queued for processing.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description556-01Merchant credit not foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
368,docs.galileo-ft.com/pro/changelog/january-2022,"January 2022 New status code The Add ACH Account endpoint has a new status code: 423-04: Account already exists. Additional factors for tokenization authorization requests For Visa programs you can now include factors such as the device risk score and cardholder age when the network sends Galileo the tokenization authorization request (TAR). Creating a Provisioning Request updates We made some adjustments to the Creating a Provisioning Request guide: Removed cert1 and cert2 as required fields for Samsung Pay requests Clarified how the PPALE parameter works Fixed the formatting on the example certificate Remove erroneous data from the example activationData response field Driving accounts negative The default behavior of the Create Account Transfer endpoint is to reject any transaction that drives the sending account negative. You can now ask Galileo to set the ALWNB parameter to permit the account balance of the sending account to be driven negative by Create Account Transfer. Activate card procedure We fixed an error in the Activating a Card procedure that said that the card-activation process looks for cards in status: Y to activate. Instead, the process looks for emboss records in status: Y. ACH transaction statuses We clarified the definitions of the ACH transaction statuses. Balance events We clarified when the BBAL: bal and BNEG: neg_bal events are sent: When BNEG is enabled, BBAL is sent for positive and zero balances, whereas BNEG is sent for negative balances. When BNEG is not enabled, BBAL is sent for all balances: positive, negative, and zero. New Recipes We added two new recipes to show the responses to two endpoints when there is a secondary account involved as well as multiple card and emboss records. Get Account Cards — Shows a primary and secondary account with two cards and multiple emboss records Get Card — Shows multiple emboss records for one card Creating an Overdraft Account update We updated the Creating an Overdraft Account guide to remove part of Step 3. The step had contained instructions to set account feature 17 to P after adding the overdraft account. However, the system automatically sets account feature 17 to P when the overdraft account is added. You should remove the unnecessary step to avoid making excessive API calls. Optional fields for Events API webhooks In addition to the required (default) fields for the Events API webhooks, we now display the optional fields so that you can customize your event messages according to your use case and business needs. The required fields have an X in the center column and the optional fields do not. Deprecated status codes We deprecated status codes from these endpoints: Create Virtual Card Account 520-13 — Application successfully started and CIP run Start Enrollment 504-27 — VERIFY ONLY: An error occurred calculating credit limit 504-28 — VERIFY ONLY: Unable to extend credit for this application Complete Enrollment 480-13 — Application successfully started and CIP run Add Account 456-02 — Customer account balance is not sufficient Update Pending Merchant Credit 556-02 — Invalid merchant credit Reorganized ACH guides We’ve moved the About ACH guide to a new section and reorganized the content into sections: About ACH ACH at Galileo Galileo ACH Workflows ACH Developer Setup External transaction ID usage In these guides we added a note to say that when you initiate a transaction with the Program API, the transactionId of the API request is copied to the external transaction ID field for all transactions created by the request: Creating an Internal Transfer Creating a Payment About Adjustments AWS URLs added To these guides we added URLs for those clients who are on a Galileo AWS instance: Digital Cards Direct Render PIN-Set Procedure Direct POST PIN-Set Procedure PIN Retrieval Service Colombia-specific fields The endpoints that retrieve card transactions now return these two fields that Colombian clients need for the Mastercard Interchange Intracountry Calculation Program: iva_tax — Impuesto al valor agregado. Value-added tax. iac_tax — Impuesto al consumo. Consumption tax. "
369,docs.galileo-ft.com/pro/page/scenario-17-card-load-maestro,"Scenario 17: Card Load (Maestro) << Back to the index A debit cardholder is a driver for a ride-share company and receives a $300 payment from the company in his debit account as a Maestro load. The following are true: The initial available balance is $1000. The network is Mastercard Debit. Sequence of events Events in the same step have the same timestamp. Mastercard sends a payment authorization for 300.00 over network rails. Galileo approves the authorization and posts 300.00 to the account. The available balance is now 1300.00. Galileo sends BPMT: pmt and AAPM: auth_payment webhooks. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampauthpayment300.0011330100020210411:050429MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idsource_idoriginal_auth_idopen_to_buytimestampBPMTpmt300337713002021-04-11 05:04:29 MSTAAPMauth_payment3001133013002021-04-11 05:04:29 MST Authorized Transactions RDF The authorization amount is expressed as a negative number even though it's a payment into the cardholder account. TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME300.00-113328004112021 05:04:29 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE300.00+1133PMMX337704112021 05:04:2904112021 Get Authorization History response This transaction is not returned by this endpoint. Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts30011330PMMX2021-04-11 05:04:292021-04-11 05:04:29 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts30011330PMMX33771300None2021-04-11 05:04:292021-04-11 05:04:29 "
371,docs.galileo-ft.com/instant/docs/about-transactions,"About Transactions A transaction is any type of financial activity related to an account. There are many different transaction types, ranging from card authorizations to ACH transfers to ATM fees. Transactions are central to any banking app. Your customers expect to use your product to create transactions and to see a history of their transactions. Some transactions, such as transfers, can be created via API, while others, such as fees, cannot be created via API. A history of all transactions is available via API. The Transaction Object Type There are five types of transactions: card: A transaction that occurs over a card association's rails transfer: The movement of money between any two accounts payment: An account credit adjustment: A transaction used to modify the cardholder's balance for various operational purposes fee: An account debit to pay for a particular service Subtype Each transaction type is divided into subtypes to offer more specific classification: card authorization: A pending card transaction settlement : A settled card transaction transfer account_to_account: A transfer between two Galileo accounts account_funding: A transfer from the Master Funding Account wire: A wire transfer to the account payment direct_deposit: -An ACH credit originated from an external account manual: A manual payment from Galileo for testing purposes adjustment provisional_credit: A temporary credit to an account, usually during a dispute merchant_credit: A credit from a merchant, e.g., a refund provisional_credit_reversal: A reversal of a provisional credit direct_debit: An ACH debit originated from an external account manual: A manual adjustment by Galileo for testing purposes fee card_replacement: Covers the card production and shipping costs express_shipping: Covers express shipping costs for card delivery domestic_atm: Covers domestic ATM fees international_atm: Covers international ATM fees domestic_cashback: Covers domestic cashback fees international_cashback: Covers international cashback fees Amount A transaction always has an amount. The amount is useful for determining the size of the transaction and the direction of the transaction. The sign of the amount denotes whether the money is incoming or outgoing. For example, an account-to-account transfer with a negative amount is outgoing; similarly, one with a positive amount is incoming. Description The transaction description offers additional details about the transaction. For example, the description on a card transaction includes details about the merchant, usually the name and address. Status The status indicates whether the Transaction is pending or posted. Pending Transactions are not finalized. All authorizations have a pending status by default, as the amount may be changed by the settlement. ACH debit Transactions (debiting an external account and pulling the money to the Galileo Account) have a pending status for three to five days while the money is in transit. All other transaction subtypes skip the pending status and post immediately. Timestamp The timestamp indicates when the transaction occurred in ISO 8601 format (YYYY-MM-DDThh:mm:ssZ in UTC). Transaction ID The transaction_id is the unique identifier for a transaction. Creating a transaction Transfers The only type of transaction that may be created via API in Production is a transfer. Transfers are possible between two cardholder accounts or between the Master Funding Account and a cardholder account. Simulating card transactions In Sandbox, it's possible to simulate card authorizations and settlements for testing purposes.Updated over 2 years ago Table of Contents The Transaction Object Creating a transaction "
372,docs.galileo-ft.com/pro/reference/post/expirehold,"Expire Hold The table below lists status codes that apply to this specific endpoint. Status CodeCode Description540-01Holds are not enabled for this product/program. Please contact client support for more information.540-02The expirationDateTime parameter must be a future date-time in the correct format (YYYY-MM-DD HH:MM:SS), or leave this field empty to expire the hold immediately540-03An unknown error occurred. Please contact client support if this error persists.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
374,docs.galileo-ft.com/pro/reference/post/movecard,Move Card The table below lists status codes that apply to this specific endpoint. Status CodeCode Description552-01Invalid instant issue card552-02Invalid move-to location ID552-03No card inventory movedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
375,docs.galileo-ft.com/pro/docs/mapping-transactions-within-your-system,"Mapping Transactions Within Your System This guide provides suggestions for creating unique mapping identifiers for the transactions in your records. As you store your own record of transactions—building off the Events API, Auth API, or RDFs and CDFs, for example—Galileo recommends that you have a way to map authorizations in your database to their respective settlements. With this mapping your customers can see authorized (pending) transactions in a separate list from settled (posted) transactions. See Transaction History for more information. Furthermore, you will need a way to differentiate transaction identifiers from different Galileo sources in your own databases. Authorization identifiers For each card network that you implement, Galileo creates an authorizations table. (See Networks for more information.) These are the possible authorizations tables that can be created: Mastercard Banknet (credit) Mastercard Maestro/Cirrus (debit) Visa (credit, Interlink, Plus) Allpoint STAR (MoneyPass, Presto) Discover Pulse Each authorizations table has auth_id as the primary key (unique identifier for a row in the table). The tables are populated independently as the transactions come in from the networks, and the rows are numbered sequentially, so it is possible for a transaction in one table to have the same auth_id as a transaction in another table. For example, if there are at least 300 transactions in each of the tables, then auth_id: 300 could refer to a Mastercard, Maestro, Visa, Allpoint, STAR, Discover or Pulse transaction. 📘NoteThe Visa and Star tables include all transactions from their respective subnetworks, so a transaction that comes in over Visa credit rails will never have the same auth_id as an Interlink or Plus transaction. Likewise, a Star transaction will never have the same auth_id as a MoneyPass or Presto transaction. Authorization mapping For your system, create one designator per authorizations table. (Consult the Network Codes enumeration to see Galileo network identifiers.) You could use a single-letter designator such as M for Mastercard (credit) and V for all of the Visa subnetworks, or you could use a spell-out such as mccredit, mcdebit, visa, or allpoint. You can combine the auth_id and your network identifier in any way that makes sense to you, for example: visa33333 Disc_33333 33333V M-33333 33333_mcdebit Example authorization mapping This example assumes that you are mapping network: V to visa and network: P to mc_debit. You receive an Authorization Event message with these values: type: auth amount: -50 network: V auth_id: 44444 Then you receive another Authorization Event message with these values: type: auth amount: -50 network: P auth_id: 44444 Later, you receive a Settlement Event message with these values: type: setl amount: -50 network: V auth_id: 44444 In your database the transactions might look like this: TypeAmountMapping identifierauth-50visa_44444auth-50mc_debit_44444setl-50visa_44444 Because the visa_44444 auth entry also has a settlement entry with the same identifier, you can display that transaction as settled, whereas the mc_debit_44444 auth has no corresponding settlement, so you would display it as pending. Mapping non-card-network transactions Transactions that do not take place over card-network rails have their own tables, and each table has an ID that is unique only to that table. These are the non-network transaction tables with their primary key (identifier) field names and their two-letter activity type. (For information on activity types, see Classifying transactions in the About Transactions guide.) TableIdentifierActivity typeAdjustmentsadj_idADPaymentspmt_idPMFeesfee_idFEHoldshold_idTHACHtrans_id*PM or ADBillpaybillpay_id**AD * ACH transactions have two entries: one in the ACH table and one in either the payments or adjustments table, depending on how the funds move. ** Billpay transactions have two entries: one in the billpay table and one in the adjustments table. If each table has at least 300 transactions, then adj_id: 300 and pmt_id: 300 would collide with auth_id: 300 in many contexts, such as in the AUTHORIZATION CODE field of the Posted Transactions RDF or in your database. To differentiate between these transaction identifiers, you can use the activity type (act_type) field or a short descriptor: TH_88888 88888FE AD88888 88888-PM 88888-ach billpay_88888 Reconciliation with the RDFs Consult the table below to see how the fields discussed in this guide correspond to fields in the RDFs. For an explanation of the Activity type + transaction type column, see Classifying transactions in the About Transactions guide.  Authorization IDNetworkActivity type + transaction typeSource IDRDFsAUTHORIZATION CODENETWORK CODETRANSACTION CODE/TYPE*SOURCE ID**Auth APIauth_idnetwork + subnetworkauth_type + subnetwork§auth_idAuthorization Eventsauth_idnetworkact_type + otypeauth_idSettlement Eventsauth_idnetworkact_type + otypeauth_idTransaction Events——act_type + otypesource_id§§Program API responsesauth_idnetwork_idtrans_codesource_id‡ * The Authorized Transactions RDF has a field called TRANSACTION CODE that is not the same as TRANSACTION CODE/TYPE in the Posted Transactions RDF. See Authorization Types for values in the TRANSACTION TYPE field. ** SOURCE ID is a custom field that you must request for the RDFs. § See Activity type and transaction type in the Galileo system in the About Transactions guide for instructions on how to derive the activity category from these fields. §§ The source ID maps to the individual transaction-type identifier, such as adj_id for adjustments or pmt_id for payments. ‡ The source_id maps to different identifiers depending on which endpoint retrieves the data, as shown in this table: Transaction ID labelEndpointpmt_idGet Payment Historyauth_idGet Authorization Historyach_trans_idGet Deposit Historyach_transaction_idGet ACH Transaction Historyhold_idGet Hold Historybillpay_transaction_idGet Bill Payment History For more information on the RDFs, see the About RDFs and CDFs guide.Updated 6 months ago Table of Contents Authorization identifiers Authorization mapping Example authorization mapping Mapping non-card-network transactions Reconciliation with the RDFs "
376,docs.galileo-ft.com/pro/reference/post/verifyinstantissuecard,Verify Instant-Issue Card 📘NoteYou can receive PCI-sensitive information only if your provider parameters permit it.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description495-01Invalid instant issue card495-02Expired495-03Invalid productLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
377,docs.galileo-ft.com/pro/reference/post/getaccountfeatures,Get Account Features LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
378,docs.galileo-ft.com/pro/changelog/october-2022,"October 2022 New response code The Get Card PIN-Change Key endpoint has a new response code: 536-01 — Possible failure due to previous attempt. Two processes attempted to save the same record to the database at the same time. New guide We have added the Partners, Programs and Products guide to explain how ""the 3 Ps"" are organized in the Galileo system. Additional card simulations To the Simulating Card Transactions guide we have added two new examples: ATM withdrawal, Visa International transaction, Visa Simulating Card Transactions guide To accompany the new parameters added to the Create Simulated Card Authorization endpoint, we created the Simulating Card Transactions guide to explain how to use some of the new features. This guide has only a handful of examples now: we will keep adding more examples as we are able. Corrected Recipe The Get Authorization History response recipe has been corrected. The previous version showed the output for an authorization from Get All Transaction History. "
379,docs.galileo-ft.com/pro/changelog/february-2021,"February 2021 Enumeration updated We removed erroneous status codes from the Account Statuses enumeration. Guide revision We clarified how to activate an overdraft account in Creating an Overdraft Account. We revised the Digital First Program guide to improve multi-step onboarding, such that banks are informed of customers who fail CIP. [Multi-step onboarding has been deprecated.] We updated the Environments guide to reflect recent changes to the Sandbox Dashboard. We updated the Postman Setup guide to reflect changes to the Sandbox Dashboard and to clarify how credentials map to the KEY field in Postman. We also revised this guide to reflect changes to the Galileo Pro collection and the Postman application. Endpoint description revisions We revised the descriptions for each endpoint to be more consistent and informative. Updates to the Set Account Feature table We updated the featureType table for Set Account Feature as follows: Account feature 15 has been removed. Contact Galileo for instructions on setting an overdraft account limit. Account feature 19 (E-Sign Act opt-in or opt-out) has been added. The descriptions for account features 20 through 22 have been clarified. The definitions for account features 20 and 21 had been incorrectly switched, and now they're correct. Events API webhooks reorganization Instead of listing the Events webhooks by their four-letter codes, we have alphabetized them by the value in the type field, so ACCL: account_closed is now listed as account_closed, for example. In some cases, more than one webhook has the same value in type, so we've combined the events into one page. For example, the auth page combines the entries for AAAU and BAUT. If you have any of the Events webhooks bookmarked you will need to change them, because the URI for each page has changed. You can still look up the webhooks by their four-letter codes, in the search bar. We also added these events to the documentation: agserv_PIN_change_fail (ADPE, AFPE) agserv_PIN_change_success (ADPS, AFPS) Auth_api_timeout (OATO) billpay_expired (BPEX) cardholder_info_changed (CHPC) low_balance_notify (LBLC) overdraft_limit_change (ODSN) token_update (TKUP) New guides added We added these new guides: Quickstart — Quickly get connected to the API. Build a Sample App — A tutorial to walk you through some common endpoints. "
380,docs.galileo-ft.com/instant/docs/peer-to-peer-transfers,"Peer-to-Peer Transfers Galileo allows you to transfer money between any two Galileo Accounts—instantly and free. A transfer between two Cardholder Accounts is useful for peer-to-peer payments. Instructions Step 1: Obtain the destination_account_id and source_account_id Obtain the account_id for both accounts involved in the transfer. The account_id may be obtained by sending a GET request to the Accounts endpoint, including the cardholder_id of the cardholder who is sending or receiving money as the path parameter. Step 2: Create the transfer Determine which account from Step 1 above is the source account and which is the destination account. Send a POST request to the Transfers endpoint, including the source_account_id, the destination_account_id and the amount. If the amount is greater than the source account balance, the request will result in an insufficient_funds error. The response contains a source_transaction_id and a destination_transaction_id that map the transfer to transactions on the respective accounts. Both participating accounts now have transactions with a transfer type and an account_to_account subtype in the transaction history.Updated over 2 years ago Table of Contents Instructions Step 1: Obtain the destination_account_id and source_account_id Step 2: Create the transfer "
381,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-stip-advice,"auth_stip_advice Code — STPA Event trigger — Galileo receives a STIP advice notification that an authorization request was approved. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billing_amt Amount to be billed in the currency of the cardholder account (DE006). Example: ""24.35"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" in_de39* X The response code that the network provided to the merchant (not the response code that Galileo provided to the network, which for STIP notifications is always 00). See Authorization Response Codes for possible values. is_stip_denial Whether the STIP advice is a denial. Example: Y local_surcharge_amtlocal_atm_surcharge The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""STPA"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" stip_advice X Advice reason code from the network. See Stand-in processing for more information. Example: ""9020"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""auth_stip_advice"" * Required in new setups (as of Feb 2022); optional for all others Example JSON# auth_stip_advice example: { ""amount"": ""-77.00"", ""auth_id"": ""12303090"", ""balance_id"": ""20211"", ""billing_amt"": ""77"", ""cad"": ""12534"", ""currency"": ""840"", ""mcc"": ""4814"", ""merchant_location"": ""PERRY, GA"", ""merchant_name"": ""AT&T RNCP 136300"", ""merchant_number"": ""000844017654881"", ""network"": ""M"", ""open_to_buy"": ""-7.58"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""00"", ""stip_advice"": ""9020"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""auth_stip_advice"" } Table of Contents Fields Example "
382,docs.galileo-ft.com/pro/reference/pci-sensitive-data,"PCI Sensitive Data To become PCI compliant you must submit an Attestation of Compliance (AOC), which is a self-assessment questionnaire that measures an organization's conformity to Payment Card Industry Data Security Standards (PCI-DSS). Contact Galileo for more information on the different levels of PCI compliance and how you can fulfill the requirements. "
383,docs.galileo-ft.com/pro/reference/api-reference-events-api-agserv-pin-change-success,"agserv_PIN_change_success Codes — ADPS, AFPS Event trigger — Staging a PIN change is successful. Process — This process contains the event trigger: Galileo receives a PIN-set form via direct POST or direct render. Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" code X This field is present in the event message only if the PIN set change attempt was made using the Direct POST method, which corresponds with the ADPS event code. Successful staging always returns ""0"". msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""AFPS"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""agserv_PIN_change_success"" Example JSON# agserv_PIN_change_success example: { ""balance_id"": ""20211"", ""code"": ""0"", ""msg_event_id"": ""243693"", ""msg_id"": ""AFPS"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""agserv_PIN_change_success"" } Table of Contents Fields Example "
384,docs.galileo-ft.com/instant/docs/using-plaid-to-add-an-ach-account,"Connecting an ACH Account Galileo and Plaid have partnered to provide the simplest way for your Cardholders to fund their Accounts. Your Cardholders can verify their external bank accounts from Plaid's drop-in module within your app or website. Once an external account is verified, you can use Galileo to transfer money between the external account and your Cardholder's Account. This integration was built with security in mind, as it eliminates the need for you to store sensitive information from your Cardholders' external bank accounts. Instructions Step 1: Integrate Plaid Link After you have created a Plaid account, follow the directions in Plaid's documentation to add the Plaid Link module to your app or website. When a Cardholder successfully verifies an Account, Plaid sends you a public_token and an account_id through its onSuccess callback function. Use Plaid's exchangePublicToken API endpoint to exchange the public_token for a Plaid access_token. Next, use Plaid's createProcessorToken endpoint, passing in the access_token and account_id, to receive a Galileo processor_token. This processor_token is used to communicate to Galileo which external bank account to transfer money to and from. Step 2: Add an ACH Account As soon as the processor_token is obtained, send a POST request to the Accounts endpoint, passing in the processor_token and account type. Galileo uses the processor_token to fetch the account number, routing number, and account type from Plaid. The identity of the owner of the external account must match the identity stored in the Cardholder Object. Galileo uses the Cardholder's name, address, email, and phone number to verify that the ACH Account is owned by the Cardholder. The identity-matching algorithm allows some margin for error and shouldn't be affected by minor typos or inconsistencies. If the identities don't match, you receive an error. Your Cardholders should verify that their bank has the correct information on file or to try to connect a different account. If the request is successful, the response contains the account_id used to create the ACH transfer. If Galileo's communication with Plaid is unsuccessful, a plaid_error will be returned. You should use the propagated error to resolve the issue with Plaid. A common plaid_error is ITEM_LOGIN_REQUIRED, which means the cardholder needs to reauthenticate the account through Plaid Link's update mode. See Plaid's section on Errors for a comprehensive list of possible plaid_errors. All of a Cardholder's accounts, including linked ACH Accounts, are available by sending a GET request to the Accounts endpoint. ACH Accounts have ach as the account_type. Connecting an ACH Account in Sandbox The Instant Sandbox corresponds with Plaid's Sandbox. To test out connecting ACH Accounts in Sandbox, you should first create an Item in Plaid's Sandbox. You are able to obtain a processor_token for this Item the same way you would in Plaid's Production environment. Once the processor_token has been obtained, proceed to Step 2. Removing an ACH Account In the event that your Cardholder wishes to remove an ACH Account, update the Account status to removed. Doing so will remove the Account from the list of the Cardholder's Accounts available from the API.Updated over 2 years ago What’s NextACH TransfersTable of Contents Instructions Step 1: Integrate Plaid Link Step 2: Add an ACH Account Connecting an ACH Account in Sandbox Removing an ACH Account "
385,docs.galileo-ft.com/pro/changelog/april-2021,"April 2021 Go and Java code examples We added code examples for Go and Java to the endpoint reference. Go to the Form Data section of any endpoint and click the tabs at the right for the desired code. Added nullable parameter The embossLine2 parameter of the Update Account endpoint is now nullable. Parameter correction The descriptions for the GGRBU and GGSAS parameters have been corrected in the Direct Render PIN-Set Procedure. Update for interest_ytd field The description for the interest_ytd field of the response schema for the Get Savings Interest endpoint was erroneous. It has been updated to clarify that it contains the interest paid during the specified period. Added links to tutorials We added links under About the API Guides to our Quickstart, Build a Sample App tutorial, and other getting-started guides so that they are easier to find. We also cross-linked these guides. Email validation For the email parameter we added information about validation: Marshmallow for the Python implementation and for the PHP implementation you should contact Galileo. Customer ID Types enumeration updates Some customer ID types require a timestamp in addition to the ID string, so we have updated the Customer ID Types enumeration with that information. New Account Events We added the ODCL: overdraft_credit_limit_change and ODGP: overdraft_start_grace_period Account Events. Validation pages For some endpoint parameters the validation information is too long to include in the individual parameter descriptions, so we have created a few pages for those validations, which we link to from the parameter descriptions: address1 Special Characters About Cards clarification The language in About Cards implied that there could be more than one active card per account. It now specifies that there should be only one active card per account, and also clarifies when the Add Card endpoint should be used. "
387,docs.galileo-ft.com/pro/page/scenario-3-incremental-authorizations,"Scenario 3: Incremental Authorizations << Back to the index A debit cardholder calls a ride-share service through its app, and the cost of the proposed destination is $25. After arriving at the first destination the cardholder requests a second destination for $15, and then after arriving at the second destination requests a third, for $10. The initial available balance is $1000. The cardholder pays using a mobile wallet. The network is Visa. Sequence of events Events in the same step have the same timestamp. Visa sends an authorization request for –25.00. Galileo approves the request and places a 25.00 hold on the account. The available balance is now 975.00. Galileo sends the BAUT: auth webhook. Visa sends an incremental authorization request for –40.00. Galileo approves the request, backs out the previous 25.00 hold, and places a new 40.00 hold on the account. The available balance is now 960.00. Galileo sends the BAUT: auth webhook. Visa sends another incremental authorization request for –50.00. Galileo approves the request, backs out the previous 40.00 hold, and places a new 50.00 hold on the account. The available balance is now 950.00. Galileo sends the BAUT: auth webhook. Visa sends a clearing file with the –50.00 settlement. Galileo backs out the 50.00 hold and posts –50.00 to the account. The available balance is still 950.00. Galileo sends the SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundsincremental_authtimestampAuthAuth25.00333301000.00False20210617:142135MSTAuthAuth40.0066663333975.00True20210617:162917MSTAuthAuth50.0099996666960.00True20210617:170840MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth25333309752021-06-17 14:21:35 MSTBAUTauth40666633339602021-06-17 16:29:17 MSTBAUTauth50999966669502021-06-17 17:08:40 MSTSETLsetl50999966669502021-06-19 17:47:19 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME25.00-33335006172021 14:21:3540.00-66665333306172021 16:29:1750.00-99995666606172021 17:08:40 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE50.00-9999VSA999906172021 17:08:4006192021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. This example shows all three authorizations; however, in Production you would get only the most recent transaction. The local_amt field contains the amount of the increment and amt contains the cumulative amount. amtauth_idoriginal_auth_idtypelocal_amttimestamp-2533330A00000000025002021-06-17 14:21:35-4066663333A0000000015002021-06-17 16:29:17-5099996666A0000000010002021-06-17 17:08:40 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-5099996666VSA2021-06-17 16:45:022021-06-19 17:47:19 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-2533330VIA3333975Y2021-06-17 14:21:352021-06-17 14:21:3525NoneNonePVPV33331000NoneNone2021-06-17 16:29:17-4066663333VIA6666960Y2021-06-17 14:21:352021-06-17 16:29:1740NoneNonePVPV66661000NoneNone2021-06-17 16:45:02-5099996666VIA9999950Y2021-06-17 16:45:022021-06-17 17:08:405099996666BVA99991000Y2021-06-17 16:45:022021-06-19 17:47:19-5099996666VSA9999950Y2021-06-17 16:45:022021-06-19 17:47:19 "
388,docs.galileo-ft.com/pro/reference/post/addaccount,"Add Account Consult the Adding an Account procedure for instructions on using this endpoint. Also see Create Account vs Add Account in the About Accounts guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description456-01Product not supported456-03Customer already has this product. To increase the secondary account limit per product ID, set SECLM on the secondary account.456-04Cannot add this product as a savings account for this card456-05The primary account is marked ineligible for this product456-06Invalid real-time funding account. Input valid 12-digit PRN of an RTF funding account.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
389,docs.galileo-ft.com/pro/changelog/january-2023,"January 2023 Updating mobile wallet cards and images For cards provisioned to mobile wallets, we've clarified that when a card is reissued or replaced, the card in the mobile wallet is not automatically updated (it must be reprovisioned), and also that when you update a mobile-wallet image, the image takes about 10 days to propagate to individual mobile wallets. New Authorization Event message We added the STPA: auth_stip_advice message to notify when a Mastercard STIP transaction has been approved. Overdraft events updated We updated the descriptions for the overdraft-related Events API messages to improve their clarity and precision. Removed parameters From the Create Virtual Card Account endpoint we removed the location and locationType parameters because they are not valid for virtual cards. Removed account status From the Account Statuses enumeration we removed c (Canceled, awaiting repayment) because it is no longer supported. Parameter description corrections In the Galileo setup section of the ACH at Galileo guide, the descriptions for BTBEI and BTBPI were reversed. They are now corrected. Leading zero for MCC In the Auth API webhook we have clarified that the mcc field does not include the leading zero; for example, MCC 0780 is transmitted as mcc: 780. New Visa response codes Visa has requested that its issuers switch to these response codes for certain card statuses and conditions. DescriptionNew response codeStatus: R — Charged offZ — Canceled; no refundC — CanceledL — LostS — Stolen46 — Closed accountFrozen card78 — Frozen cardTransaction from blocked countries including OFAC countries62 — Restricted cardPIN incorrect or missing55 — PIN incorrect/missingPick up card (no fraud)46 — Closed accountPick up card, special condition (fraud)46 — Closed accountFailure due to check-card status during tokenization and AVS46 — Closed accountInvalid account number (no such number)46 — Closed account This change will not affect all Visa clients at once—Galileo will be rolling out this change in phases. Check with your Galileo representative for information on when your core will be cut over. The RESPC parameter must be set to receive these new codes. Payment Risk Platform (PRP) Galileo’s multi-layered approach to fraud mitigation combines the power of people, technology, and data with direct access to trained fraud analysts to inform your fraud-mitigation strategies. Check out the About Payment Risk Platform guide to learn more about this product offering. Updated card transaction scenario We updated Scenario 9: Merchant Credit (Mastercard Banknet). The previous version did not show the merchant credit arriving at Galileo through the authorization stream (and therefore the Auth API). New card transaction scenario We added Scenario 19: Force Post, which shows a force-posted transaction without a corresponding authorization. "
390,docs.galileo-ft.com/pro/reference/post/getalltranshistory,"Get All Transaction History See Record-Set Pagination for instructions on using the paging parameters. Open the Recipes below to see response examples.RecipesGet All Transaction History response: preauthorization, backout, settlementOpen RecipeGet All Transaction History: Preauth at gas pump with completionOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
391,docs.galileo-ft.com/pro/reference/post/createadjustment,Create Adjustment 🚧WarningThis endpoint requires a positive integer less than 9223372036854775807 (sys.maxint in Python 2 or sys.maxsize in Python 3) for transactionId rather than the alphanumeric string that all other endpoints use. The Reverse Adjustment endpoint uses this integer to identify the transaction to reverse out.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description409-01The transactionId parameter must be an integer value409-02Cardholder not configured for overdraft409-03Cardholder product not configured for overdraft409-04Insufficient overdraft funds409-05Error transferring overdraft funds409-06Cardholder overdraft configuration error409-07Insufficient balance for cascading transaction409-08The transactionId parameter exceeds 23 charactersLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
392,docs.galileo-ft.com/pro/changelog/march-2022,"March 2022 ACH guide corrections We made these corrections to the ACH guide. Same-day ACH — ACH hold days and cutoff times apply to same-day ACH. For this reason, a same-day ACH request does not typically settle on the same day it was originated. ACH early access — You can configure a product to enable ACH early access for all accounts, or control ACH early access for individual accounts, but not both. CIP status code In the Customer ID Verification (KYC/CIP) and Creating an Account guides, we added status: S for the CIP process, which had been missing. New events Several Events API webhooks were missing from the reference and have now been added: BLVF: billpay_limit_violation BPCL: billpay_cancelled CDFR: bulk_frozen Field for event The optional field response_reasons had been omitted from the DAUT: denied_auth event webhook description. Bill Payment Statuses correction The description for code P in the Bill Payment Statuses enumeration erroneously showed ""Check printed."" It has been changed to ""Processed."" New Set Credit Limit response field We added the available_credit field to response data for Set Credit Limit. New Auth API field Both versions of the Auth API have a new field in the transaction object called transaction_initiator_code. It contains a four-character code that indicates whether the cardholder or the merchant initiated a recurring transaction. Card and account status information To the Account Statuses and Card Statuses enumerations we added information to indicate what kinds of transactions are permitted by each status as well as parameters that affect account- and card-status behaviors. New font We added Monserrat as an available font for the Direct Render PIN-Set Procedure. RDF update From the RDF Reference guide we removed an outdated statement about receiving full RDFs daily instead of differential files. We no longer offer full daily RDFs—only differentials. Mapping transactions clarification We updated Mapping Transactions Within Your System to clarify which identifiers have the potential to collide. Removed status code We removed status code 408-02 from the Create Payment endpoint reference and the Creating a Payment guide because this status code is no longer in use. Provisioning request clarification In the Creating a Provisioning Request guide we included information about which fields in the customer record must be populated for the provisioning request to be successful. Page parameter added The page parameter has been added to the Get Scheduled Bill Payment endpoint. Authentication reference We updated the Authentication reference page with improved parameter descriptions, authentication setup during onboarding, and steps to authenticate an endpoint request. Network codes table The network codes table at the beginning of Mapping Transactions Within Your System has been corrected: The Events API codes have been broken out between Authorization and Settlement when the codes are different for the same transaction. The Cirrus and Visa PLUS codes were incorrect for the RDFs Activate Card parameters To the Activating a Card guide we added information about product/program parameters that affect card-activation behavior. New guides We created three new guides: Reissuing Cards — Explains when to reissue and contains instructions for using the Reissue Card endpoint. Switching Products — Explains when to switch products with and without a card reissue. Also contains information for using the Switch Product endpoint. Switching Products with Different BINs — When the old and new products have different BINs, use this guide. Transaction identifiers We filled in the blanks in the Identifying accounts table in the Transaction History guide. Modify Status type 2 We clarified that when using Modify Status with type: 2, all accounts belonging to the same account holder are also canceled when the ACTYP parameter is set to R. Create Location change When using the Create Location endpoint for the first time, it is no longer necessary for Galileo to create the top-level location. By default, the first location that you create will become the top level in the hierarchy. Charge Off Account clarification We clarified the explanation of how to use the chargeOffDetails parameter of the Charge Off Account endpoint. Get Bulk Card Order field change The response to the Get Bulk Card Order endpoint used to provide card IDs in the card_id_range_start and card_id_range_end fields, but now those fields are populated by zeroes because the card IDs are not necessarily created in order, in one block of numbers. Freezing accounts and disabling fraud rules We clarified the conventions around using startDate and endDate when using Set Account Feature to freeze/unfreeze accounts or to disable/enable fraud rules. Update Account restrictions We clarified that using Update Account is valid only for active accounts (status: N). Accounts in other states cannot be updated. Create Hold parameter requirement We updated the description for the expirationDateTime parameter of the Create Hold endpoint to indicate that it is required. Cancel Bill Payment clarification We updated the description of the Cancel Bill Payment endpoint to indicate exactly when it may be used to cancel bill payments, including electronic payments. "
393,docs.galileo-ft.com/pro/reference/post/getrootgroups,Get Root Group Use the Get Root Groups endpoint to retrieve all of the root groups within a core. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
394,docs.galileo-ft.com/pro/docs/secured-credit-workflows,"Galileo Secured Credit Workflows This guide contains workflows that illustrate the processes for creating and managing Galileo Secured Credit. Secured credit account structure This flowchart is an example of how you might structure new accounts for a Galileo Secured Credit product. Your Galileo representative can help you build a process that works in your own system. Steps are described below. A new customer requests a secured credit account. You send the Create Account endpoint to create the primary account. You send the Add Account endpoint to create the credit account and link it to the primary account. You send the Add Account endpoint a second time to create the secured credit account and link it to the primary account. Galileo sends you the CAPP: app_completed event for the primary account. The account holder deposits funds into the secured credit account. You send the Set Credit Limit endpoint. This establishes the account credit line. Galileo sends the charge card to be embossed. The customer receives the charge card and requests to activate it. You send the Activate Card endpoint to activate the charge card. Secured credit authorization and settlement This flowchart illustrates how a Galileo Secured Credit transaction is authorized and settled. Steps are described below. An account holder makes a purchase over card network rails and the card network sends an authorization request. You or Galileo approve the authorization request based on the line of credit. If the authorization request is approved, Galileo places a hold for the authorized amount. The account holder’s available balance is reduced on the collateral account. Galileo sends the BAUT: auth event with the available balance in the open_to_buy field. The card network sends the settlement batch file. Galileo directs the issuing bank to pay the card network. Galileo backs out the authorization hold and sends you the SETL: setl event. The monthly invoice is sent to the account holder and the issuing bank receives repayment. If the account holder cannot pay down the credit line from the primary account, funds may be recovered from the collateral account. Collateral account funds flow These illustrate the movement of funds into and out of the collateral account, and the resulting credit limit adjustment. Steps are described below. Move funds into the collateral account The account holder requests to move funds from one account into the collateral account. You send the Create Account Transfer request. Funds are transferred and the collateral account balance increases. You send Set Credit Limit to update the credit line based on the funds in the collateral account. Move funds out of the collateral account The account holder requests to move funds out of the collateral account and into another account. You send a Create Adjustment or Create Payment request. Funds are adjusted and the collateral account balance decreases. You send Set Credit Limit to update the credit line based on the funds in the collateral account. Updated 2 months ago Table of Contents Secured credit account structure Secured credit authorization and settlement Collateral account funds flow Move funds into the collateral account Move funds out of the collateral account "
395,docs.galileo-ft.com/pro/reference/dispute/post/addcasereasons,"Add Case Reasons Use the Add Case Reasons endpoint to submit the account holder's answers to the case-reason questions while creating a dispute claim. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1512-4Invalid caseId or caseId returned no result1512-5Invalid Request:1512-7Case not resumed due to incomplete questionnaire, message:1512-13caseId references a case that is currently locked1512-14Invalid request message1512-15This case is already resolved with status:1512-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
396,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-request-made,"billpay_request_made Code — BPCQ Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billername X Name of the biller. billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPCQ"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_request_made"" Example JSON# billpay_request_made example: { ""act_type"": ""AD"", ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPCQ"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_request_made"" } Table of Contents Fields Example "
398,docs.galileo-ft.com/pro/reference/api-reference-events-api-pmt-split,"pmt_split Code — BSPM Event trigger — Only part of a deposit or payment is posted because of load limit violations. Processes — These processes contain the event trigger: Create Payment endpoint Create Account Transfer endpoint Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description ach_trans_id Unique Galileo-generated identifier for an ACH transaction. Example: ""7971383"" act_type For all payments the activity type is ""PM"". amount X Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" description ""Description of the payment. Example: ""Transfer from Savings"" ext_trans_id X External transaction ID. Example: ""1234-abcdefg"" hold_days X Number of days that a payment was held before posting. Example: ""1"" immed_amt X The amount of the payment that was posted immediately. Example: ""24.55"" later_amt X The amount of the payment that is posted later. Example: ""18.45"" merchant_name Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BSPM"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" otype See Transaction Types for possible values. Example: ""W"" pmt_id X Galileo-generated identifier for this payment. Example: ""7971383"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" source_id An identifier that maps back to the origin of the adjustment. timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""pmt_split"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# pmt_split example: { ""ach_trans_id"": ""7971383"", ""act_type"": ""PM"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""description"": ""Transfer from Savings"", ""ext_trans_id"": ""1234-abcdefg"", ""hold_days"": ""1"", ""immed_amt"": ""24.55"", ""later_amt"": ""18.45"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BSPM"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""otype"": ""W"", ""pmt_id"": ""7971383"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""pmt_split"" } Table of Contents Fields Example "
399,docs.galileo-ft.com/pro/reference/webhook/settlement/event/post,"Settlement Events Webhook Requests The event data (described in the index pages that follow) will be in the body of the request, as JSON or form data. JSON example (application/json): JSON{ ""type"": ""setl"", ""act_type"": ""VI"", ""amount"": ""10.75"", ""auth_id"": ""254568"", ""balance_id"": ""2011"", ""cad"": ""12534"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""otype"": ""10"", ""pmt_ref_no"": ""155200002022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2019-10-09 11:20:33 MST"" } Form example (application/x-www-form-urlencoded): type=setl&act_type=VI&amount=10.75&auth_id=254568&balance_id=2011&cad=12534&mcc=5712&merchant_location=NEW+YORK%2C+NY&merchant_name=Widgets+Incorporated&merchant_number=L4DIV6D5LM4X7LF&network=V&open_to_buy=500&otype=10&pmt_ref_no=155200002022&prod_id=1701&prog_id=305&timestamp=2019-10-09+11%3A20%3A33+MST Responses JSON example: JSON{ ""success_code"": ""0"" } XML responses should use the webhook name (Settlement) as the envelope. Example: XML<Settlement><success_code>0</success_code></Settlement> LanguageShellNodeRubyPHPPython "
402,docs.galileo-ft.com/pro/docs/about-corporate-hierarchy,"About Corporate Hierarchy Businesses have specialized needs when it comes to organizing their accounts. They may need to keep track of accounts by department or subgroup. They may have multiple businesses as customers, and each account needs to be tagged with its respective business profile. Galileo's Corporate Hierarchy feature provides a native method of organizing accounts in a multi-tiered hierarchy. With accounts organized in this way, businesses can retrieve all accounts belonging to a particular group—or they can get all accounts in related subgroups—to keep track of expenses and see developing trends. This hierarchical arrangement sets up businesses for additional functionality such as group spend controls, which Galileo plans to provide in the future. Use cases You can use Corporate Hierarchy for situations such as these: Use case 1: Business has multiple business clients B2BforU, a Galileo client, signs up three business customers: Business A, Business B, and Business C. B2BforU creates card accounts for each business and wants to know which accounts belong to each business. The program manager creates three business profiles and Galileo returns an ID for each profile. The program manager then tags each account with the ID for the business it belongs to. B2BforU can now create dashboards for each business that show total spending and track ongoing trends. Use case 2: Hierarchy within a single business B2BforU signs up Business X, an enterprise-level business that will be issuing thousands of spending cards to its employees. To better track spending, B2BforU plans to organize the card accounts by division, and within each division by department, group, and team. B2BforU creates a business profile for Business X with its respective ID, and then creates groups according to the hierarchy that Business X indicates. Each account is tagged with its group ID in such a way that the B2BforU program manager can create their own dashboard that displays spending per division, department, group, or team. How it works First, you create a root group, which is associated with a corporate profile. Each root group can represent a customer of yours, or it can be one of your departments or divisions. You can associate accounts with this root group. Under each root group you can create one or more groups. Inside each group you can put accounts and more subordinate groups. From the root group you can create up to 5 subgroups. As needed, you can add more subordinate groups for as many levels as you need. With the accounts thus organized you can retrieve accounts at any level, and you can optionally retrieve all of the subgroups—for example, all of the accounts and groups in Group C (Accounts 7–12), just the accounts in Group C (Accounts 7–8) or just the accounts in any other group. For instructions see Creating a Corporate Hierarchy.Updated 28 days ago Table of Contents Use cases Use case 1: Business has multiple business clients Use case 2: Hierarchy within a single business How it works "
403,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-gas,"denied_auth_gas Code — PUMP Event trigger — You or Galileo deny an authorization request from a gas pump because of insufficient funds. Process — This process contains the event trigger: Galileo receives one of these messages from a card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amt Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PUMP"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""denied_auth_gas"" Example JSON# denied_auth_gas example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""fee_amt"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""PUMP"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""denied_auth_gas"" } Table of Contents Fields Example "
404,docs.galileo-ft.com/pro/docs/postman-setup,"Postman Setup You can use Postman to send requests to Galileo's Program API. This guide describes how to set up Postman, add the Galileo Pro collection, and test an API request. Download and install Postman First, download and install the Postman application. To do this: Go to www.postman.com/downloads/ Click Download the App. When the installation file has finished downloading, click the file to install the application. Follow installation prompts on the screen. Add the Galileo Pro collection When installation is complete, follow these steps to add the Galileo Pro collection to Postman. Click Run in Postman below to run the collection. In the Web page that opens, select your operating system. Click Open Postman if prompted. In Postman, click the Galileo Pro collection displayed in the Collections tab. Edit collection variables Next, copy your credentials from the Sandbox Dashboard into the Galileo Pro collection variables in Postman. These are identifying variables that will apply across the collection. 📘NoteYou can also use Postman with the Client Validation and Production environments. Credentials for these environments are not in your Sandbox Dashboard, rather, you will need to get them from your Galileo representative. To add your credentials to Postman: Open another webpage and log in to the Sandbox Dashboard to access your credentials: https://sandbox.gpsrv.com/ Scroll down to API CONNECTION DETAILS. These are your credentials for the Sandbox environment. 📘NoteIf you are using Postman with the CV or Production environment, enter the credentials from your Galileo representative instead of your Sandbox credentials. In Postman, select Galileo Pro to open the collection tab. In the collection tab, click Variables. This tab will store your credentials that apply across the collection. In Postman, paste your credentials into both INITIAL VALUE and CURRENT VALUE columns for: apiLogin — API LOGIN in the Sandbox Dashboard apiTransKey — API TRANS KEY in the Sandbox Dashboard providerId — TEST PROVIDER ID in the Sandbox Dashboard prodId — TEST PRODUCT ID in the Sandbox Dashboard programId — TEST PROGRAM ID in the Sandbox Dashboard 📘NoteThere are two pre-populated collection variables: url contains the base URL for sending API requests to the Sandbox environment. If you use Postman with CV or Production environments, replace this with your URL from Galileo. responseContentType sets the response format for API requests. The default format is json, but you can change it to xml if you prefer. Click Save. Test a Ping request You can run a simple test to verify that your Galileo Pro collection is ready to run in Postman. Follow these steps to send a test Ping request. In Postman, type “ping” in the filter box. Select the Ping endpoint. In the Body tab, you can hover over text in curly braces to see the values. Most of these values call in the values from the collection variables that you entered in the Edit collection variables step. For transactionId, the value {{$guid}} is a Postman command that will generate a random ID for each API request that you send. Click Send and check the response. The response status should display Success. Updated about 1 month ago Table of Contents Download and install Postman Add the Galileo Pro collection Edit collection variables Test a Ping request "
405,docs.galileo-ft.com/pro/reference/post/chargeoffaccount,"Charge Off Account These are the rules for using the chargeOffDetails parameter: chargeOffDetails accepts a JSON-formatted list with chargeOffAmount and chargeOffReason as the two keys. The only valid values for chargeOffReason are the numerals 1-13, as shown in the chargeOffReason table. chargeOffAmount is a float that must be greater than 0. If you pass 0 the request will fail. chargeOffAmount is required when chargeOffReason does not equal 1. Example: [{""chargeOffAmount"": 2.6, ""chargeOffReason"": 5}, {""chargeOffAmount"": 4.75, ""chargeOffReason"": 2}] To recover a charged-off account use the Recover Charged-Off Account endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description588-01Account already charged off588-02The sum of the chargeoff amounts do not equal the open to buy chargeOffReason ValueDescription1Uncollected fees2System-expired authorization3Employee-expired authorization4Under-the-floor, U.S., other5Under-the-floor rental car6Under-the-floor hotel and travel7Under-the-floor outside U.S.8Second presentment9Returned check10Returned ACH11Employee error12System error13Fraudulent merchantLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
406,docs.galileo-ft.com/pro/reference/post/getingocustomerid,Get Ingo Customer ID The table below lists status codes that apply to this specific endpoint. Status CodeCode Description562-01Error authenticating with the INGO system562-02Error calling INGO API562-03Cardholder has no valid cards562-04Error registering customer active card with INGO562-05Invalid customer data562-06INGO API access misconfiguration on serverLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
407,docs.galileo-ft.com/instant/docs/statements-1,"Monthly Statements About Statements In the United States, financial institutions are required to provide ""periodic"" (usually monthly) statements for bank accounts, if accessible by ATM, debit card, or other electronic transactions. If you are building your own UI (as opposed to using the Instant Banking app) your app acts as the bank's frontend and must provide your cardholders access to monthly statements. A bank statement is useful to your cardholders for two main purposes: Reconciliation - your cardholders can gain an overview of their account activity and check for errors and potentially fraudulent transactions. Future reference - your cardholders may need to refer to previous bank statements to file a tax return or apply for a loan. What's on a Statement Your branding Account information Bank information Summary of account activity Starting balance Chronological list of deposits, withdrawals, and fees Ending balance What you should do with the Statements If your customers are using the Instant Banking app, they will be served the statements and you don't need to worry about it. You can still store them for your own records if you wish. If you are building the banking app, you need to allow your customers to access each applicable statement from the time they open the account. The list of applicable statements is available from GET /cardholders/:id/accounts/:id/statements. A PDF of an individual statement is available from GET /cardholders/:id/accounts/:id/statements/:id. How to obtain a Statement Step 1: Obtain a List of Available Statements Use the API to get a list of available statements for an Account. The response contains a list of all applicable statements since the account was created. Each statement record contains a statement_id and statement_date, but not the statement itself — that will be obtained in Step 2. One thing to note is that the statement_date is formatted YYYY-MM. Your UI should display a list of each of these statements and allow your Cardholder to select which statement they want to view. Step 2: Obtain the Encoded Statement PDF After your Cardholder has selected a statement from the list, use the API to get an encoded PDF of the desired statement. The statement is passed as a Base64 encoded string of the statement PDF. Step 3: Decode and Display the Statement PDF Use a Base64 decoder to decode the encoded PDF. Display the PDF in a WebView or some other PDF viewer.Updated over 2 years ago Table of Contents About Statements What's on a Statement What you should do with the Statements How to obtain a Statement Step 1: Obtain a List of Available Statements Step 2: Obtain the Encoded Statement PDF Step 3: Decode and Display the Statement PDF "
408,docs.galileo-ft.com/pro/reference/creating-a-billpay-transaction,"Creating a Billpay Transaction This guide explains how to use the Program API to add billers to an account and how to initiate a billpay transaction, either for one time or on a schedule. Along with this guide you may want to read these other guides: About Bill Pay — General information about bill pay at Galileo Managing Billpay Transactions — Instructions for displaying and canceling billpay transactions and removing billers. Billpay endpoints Integrate these endpoints with your billpay interface according to the use case. Use caseEndpointDisplay a list of billers that have been configured for the account holder.Get BillersFind out if a biller is in the RPPS databaseSearch Biller DirectoryAdd an electronic biller for the account holder; optionally, add a one-time payment or a series of paymentsAdd RPPS BillerModify biller information or change recurring paymentsModify RPPS BillerAdd a biller that is not in the RPPS database, which will receive a paper check; optionally, add a one-time payment or series of paymentsAdd Paper BillerModify biller information or change recurring paymentsModify Paper BillerDelete a biller from the account holder's accountRemove BillerInitiate a one-time payment to an existing billerCreate Bill PaymentCancel an existing bill payment, if possibleCancel Bill PaymentRetrieve a list of payments that have a process date that is equal to or later than the current dateGet Scheduled Bill PaymentsRetrieve a list of bill payments between specified datesGet Bill Payment History For details on using these endpoints, see the Billpay Endpoints guide. For details on managing billers and billpay transactions, see the Managing Billpay Transactions guide. Adding a biller Before you can initiate a billpay transaction, you must add the biller to the account holder's account. Billers are associated with an account holder's primary PRN, so adding a biller to one PRN does not add it to another account holder's PRN, even if the account holders share the same balance. If 10 account holders need to add the same biller, you must add that biller 10 times, to each individual account. The account holder launches an ""add biller"" control in your interface. Your interface prompts the account holder to provide the name of the biller. Call the Search Biller Directory endpoint to look for the biller name in the RPPS database. If the biller is in the database: Galileo returns one or more billers that match the string in billerName. Each biller has an rpps_biller_id. If there is more than one biller, the account holder selects the correct biller. You call the Add RPPS Biller endpoint to create the electronic biller. Optionally, the account holder can schedule a billpay transaction or create a one-time transaction. The endpoint response includes the biller_id. If the biller is not in the database: Galileo returns status code 421-01. You call the Add Paper Biller endpoint to create the paper biller. Optionally, the account holder can schedule a billpay transaction or create a one-time transaction. The endpoint response includes the biller_id. 📘NoteIf the account holder creates a one-time transaction using these Add X Biller endpoints, it is not necessary to call Create Bill Payment to initiate the transaction. Creating a billpay transaction A billpay transaction is initiated in one of these ways: At the time the biller is added, as shown in Adding a biller: The account holder creates a one-time transaction. The account holder creates scheduled transactions. After the biller has been added: The account holder creates a billpay transaction, as shown in Creating a one-time billpay transaction, below. The scheduler creates a billpay transaction, as shown in Scheduling billpay transactions. Creating a one-time billpay transaction After a biller has been created, you can create a transaction. This process applies to both electronic and paper check transactions. One-time transaction workflow This diagram shows how Galileo processes one-time transactions that are initiated by the Program API. This workflow assumes that Galileo is the system of record. If you are the system of record for your program, perform your own balance check before calling Create Bill Payment. The account holder goes to the billpay section of your interface. You call the Get Billers endpoint and present the list of billers. If the desired biller is not present, the account holder activates an ""add biller"" control on your interface. You follow the Adding a biller procedure, and the account holder optionally creates a one-time transaction with the process date of today. When creating the transaction in this way, the rest of the process follows the Scheduled transaction workflow. If the desired biller is present, the account holder selects the biller. You call the Create Bill Payment endpoint using the biller_id as returned by the Get Billers endpoint. The endpoint performs these verification checks: The biller_id must be associated with the account holder's PRN. If it is not, the endpoint returns status_code: 433-01. The processDate must be the current date or later. If it is in the past, the endpoint returns status_code: 433-02. If there is no processDate in the request, it defaults to the current date. The account status must be active. If it is not, the endpoint returns status_code: 433-06. The amount must be a positive number. If it is not, the endpoint returns status_code: 433-03. The transaction amount must not exceed the limit in LIMPB If the limit is exceeded, the endpoint returns status_code: 433-04. Galileo creates the transaction in status: N, sends the BPCQ: billpay_request_made event message, and the endpoint returns status_code: 00. Every 30 minutes, at :08 and :38 past the hour, Galileo's billpay process runs. The process performs these checks again: The account must be active. If it is not, Galileo sends the BSPF: sched_billpay_fail event message. There must be sufficient funds. If not, Galileo sends the BSPF: sched_billpay_fail event message. Velocity limits must not be exceeded. If they are, Galileo sends the BLVF: billpay_limit_violation event message. The billpay process adjusts the transaction amount out of the account and sends the BPAY: billpay event message. The billpay process checks for a fee. If there is a fee, the Processing fees process is followed. If there is no fee, the process continues. The billpay process then changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Scheduling billpay transactions Use one of these methods to schedule billpay transactions in the future: One-time transaction When adding or modifying a biller (Add X Biller or Modify X Biller), pass these parameters: frequencyType: O (letter O) nextDate: future date endDate: same as nextDate amount: amount of the transaction When creating a one-time transaction with Create Bill Payment, input a future date for processDate. Recurring transactions When adding or modifying a biller (Add X Biller or Modify X Biller), select one of these options. With recurring transactions, nextDate, endDate, and amount are required: W — Weekly M — Monthly Q — Quarterly Y — Yearly nextDate — Date of first scheduled transaction endDate — Date of last scheduled transaction, up to five years in the future amount — Amount of the scheduled transaction 📘NoteThe maximum value of endDate is five years after the current date. For example, if today is 20 Jan 2020, the end date can be no later than 20 Jan 2025. However, if today's date is leap day, such as 29 Feb 2020, the latest date can be 1 Mar 2025 instead of 28 Feb. Scheduled transaction workflow This is the workflow for a billpay transaction when the scheduler initiates the transaction. The flowchart assumes that the External Trans API is not in use. On the process date for the transaction, the scheduler initiates the billpay transaction process. The scheduler begins to run every morning. Galileo creates the transaction in status: N and sends the BPCQ: billpay_request_made event message. Galileo verifies that the account holder's account is active. If it is not, Galileo sends the BSPF: sched_billpay_fail event message. Galileo verifies that the transaction amount does not exceed the limit in LIMPB. If it does, Galileo sends the BLVF: billpay_limit_violation event message. Galileo checks for sufficient funds. * If there are insufficient funds, Galileo sends the BSPF: sched_billpay_fail event message. It adjusts the transaction amount from the account and sends the BPAY: billpay event message. The billpay process checks for a fee. If there is a fee, the Processing fees process is followed. If there is no fee, the process continues. The billpay process also changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Processing an electronic transaction On the same day that the electronic transaction is initiated, Galileo performs these actions: The electronic transaction is in status: O (in process). An internal process adds electronic transactions to the RPPS originator file and changes the transaction to status: P. This process runs at 08:45, 13:45, 16:45 and 22:45, Galileo system time, every day. Galileo sends the RPPS file to Mastercard, and the transaction is included in the Posted Transactions RDF. Mastercard receives the RPPS file and validates the transactions. If the transaction passes the validation checks, Mastercard sends the billpay transaction to the biller's bank. If the transaction is accepted by the bank and the biller, the transaction is posted to the biller’s bank account. Galileo does not receive notification of this event. If the transaction does not pass the validation checks, or if the biller or the biller's bank returns the transaction, Mastercard includes it in an RPPS return file that it sends to Galileo. It can take several days or longer for a transaction to be included in the return file. Galileo checks for the RPPS return file four times per day. When Galileo finds a rejected transaction in the return file, it performs these steps: Sends the BRRJ: billpay_rejected event message. Returns the amount back to the account, sends the BADJ: adj event message. Includes the adjustment in the Posted Transactions RDF. Electronic timing When billers register with Mastercard RPPS, they select a method for Mastercard to send the transaction to the biller's bank. The method can be ACH or it can be a quicker, electronic method. It is therefore possible for an electronic transaction to be posted to the biller's account on the same day that Galileo processes it; likewise, the transaction might be posted a few days later, depending on the delivery method chosen by the biller. This table shows the approximate amount of time it takes to transition between electronic transaction statuses Status changeApproximate intervalN to OUp to 30 minutes. Process runs at :08 and :38 minutes past the hour.O to PProcess runs at 06:45, 14:45, 18:45 and 22:45 every day. Galileo checks for RPPS return files four times per day, at 06:10, 14:10, 18:10, and 22:10 Galileo system time. When Galileo finds a return file, it processes it right away. About 30 minutes after processing the file, Galileo returns the transaction amount to the account, sends the BADJ: adj event message, and includes the adjustment in the Posted Transactions RDF. Processing a paper billpay transaction On the next business day after a paper transaction is initiated, Galileo performs these actions: Transactions in status; W (waiting to be printed) are picked up by Galileo’s paper check process once per business day at 06:00, Galileo system time. Check transactions that are initiated before midnight are included in this batch. Transactions initiated after midnight are processed the next business day. Galileo prints the check and changes the transaction to status: Q. On the same day, Galileo sends the check in the mail. Galileo then changes the transaction to status: P, sends the BCPM: billpay_check_mailed event message and includes the transaction in the Posted Transactions RDF If the check is returned, Galileo sends the BPCR: billpay_request_returned event message. Galileo later returns the amount to the account, sends the BADJ: adj event message, and includes the adjustment in the Posted Transactions RDF. If the check is cashed within 180 days, Galileo sends the BPCC: billpay_check_cleared event message. If the check is not cashed within 180 days: Galileo sends the BPEX: billpay_expired event message and changes the transaction to status: L. Galileo records the check in the cancellation file and changes the transaction to status: U. Galileo returns the amount to the account, sends the BADJ: adj event message, changes the transaction to status: Y, and includes the adjustment in the Posted Transactions RDF. Example paper check The fields for the check are derived as follows: billerAccountNo — Add Paper Biller endpoint. Account Holder Name — firstName and lastName of an enrollment endpoint such as Create Account. Biller address fields — Add Paper Biller endpoint. memo — Create Bill Payment endpoint. This string is not available in the RDFs. Checks generated by the scheduler do not have a memo entry. Only the account holder's name can be printed on the check. Galileo clients cannot have their business names printed on the check. Paper check timing Galileo typically prints and mails a paper check on the next business day after the transaction was initiated. The biller receives the check depending on post office handling. Galileo estimates ~10 days after the transaction is initiated. After that, the biller decides when to cash the check. If the biller does not cash the check within 180 days (six months) of the check date, Galileo voids the check and returns the amount to the account. A check can be returned to Galileo either by the post office (bad address), by the biller, or by the biller's bank, and the timing of the return depends on post office handling, the decision of the biller, or the bank's processing schedule. (Galileo cannot tell you why the bank returned a check; you must ask the bank for that information.) When Galileo receives a returned check—or when a check expires—it takes approximately 1–3 days to return the amount to the account. This table shows the approximate interval between transaction status changes. Factors such as the number of checks to process in a day can affect how quickly Galileo prints and mails checks as well as how fast returned and expired checks are processed. Status changeApproximate intervalN to WProcess runs at :08 and :38 minutes past the hour.W to QNext business dayQ to PSame business day as aboveP to C~10 days minimum. Up to 180 days. Processing fees When you set up billpay fees, the billpay process performs extra steps to process the fee. The fee process begins right after the adjustment is posted, as shown in this flowchart. After the billpay process posts the adjustment to the account, Galileo checks for any billpay fees. If there are no fees, Galileo does not follow the fee process and skips to step 3. If a fee is configured, Galileo verifies that there are sufficient funds for the fee. If there are sufficient funds, the process continues to step 2. If there are insufficient funds, Galileo checks the AAIGB parameter. Set — When the fee is removed from the account, it drives the balance negative. Not set — Galileo checks the BPPPF parameter. Set — The fee is deferred until there are sufficient funds in the account. Not set — Galileo rolls back both the fee and the billpay adjustment and sends the BSPF: sched_billpay_fail event message. Galileo determines whether the fee is for an electronic or a paper billpay transaction: Electronic — The BPY fee is applied. Paper — The CHK fee is applied. The billpay process then changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Table of Contents Billpay endpoints Adding a biller Creating a billpay transaction Creating a one-time billpay transaction Scheduling billpay transactions Processing an electronic transaction Processing a paper billpay transaction Processing fees "
409,docs.galileo-ft.com/instant/reference/transaction-type,Transaction Type TypeDescriptioncard_activityA card transactiontransferA transfer to or from the accountpaymentMoney credited to the accountadjustmentA debit or credit to correct a transaction errorfeeFees incurred by the account 
410,docs.galileo-ft.com/pro/reference/api-reference-events-api-unfrozen,"unfrozen Code — UFRZ Event trigger — The status value in freeze_info is changed to unfrozen by an internal process. Processes — These processes contain the event trigger: Modify Status endpoint with type: 18 Customer Service Tool Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""UFRZ"" new_status X Card status code. See Card Statuses for possible values. Because unfreezing a card does not change its status, this status is the same as before unfreezing the card. Example: ""N"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type The name of this event: ""unfrozen"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# unfrozen example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""UFRZ"", ""new_status"": ""N"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""unfrozen"" } Table of Contents Fields Example "
411,docs.galileo-ft.com/pro/reference/post/createhold,"Create Hold To create a hold on a specific payment you must pass amount and pmtId. The default hold limit is 1 000 000. You can override this limit with the MXHLD parameter. To create a hold on an account, your program parameters (THOLD) must specify that an account hold is valid for the holdType parameter. This endpoint does not create authorization holds on an account for card-association transactions — such holds are created automatically when an authorization request is approved.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description539-01Holds are not enabled for this product/program. Please contact client support for more information.539-02Provided XID does not map to a valid balance in our system539-03Provided expiration date needs to be in the correct format (YYYY-MM-DD HH:MM:SS) and needs to be in the future539-04Provided payment id is invalid539-05No payment id was provided and the provided account hold type is missing or invalid539-06Amount must be equal to or less than the payment minus any other holds that have already been placed539-07An unknown error occurred while creating the hold. Please contact client support if this error persists.539-08Amount must be equal to or less than the account balance. Set PRVNB to enable this status.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
412,docs.galileo-ft.com/pro/reference/post/getpendingfees,"Get Pending Fees The response data for this endpoint is also available in the Get Account Overview response. The response for each individual pending fee will include authorization-related transaction information, if applicable, which is in the related_transaction data element.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
413,docs.galileo-ft.com/pro/reference/post/createfbenrollment,Create Federal Benefit Enrollment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description526-01Card number not found526-02Invalid agencyType526-03The cardholder's identy must first be verified before enrolling in Federal Benefits526-04This product is not configured for Federal Benefits enrollment526-05Cardholder has already enrolled in this benefit type with SSN526-06Error occurred with the enrollment526-07Invalid recipientTypeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
414,docs.galileo-ft.com/pro/docs/business-banking-program-configuration,"Business Banking Program Configuration This page describes considerations for configuring your business banking programs. Know Your Business (KYB) When enrolling a business customer, a bank must meet the requirements for Know Your Business (KYB), a process that verifies the identity of business customers. Most issuing banks provide a KYB solution or you can consult your Galileo representative for other third-party options. Galileo setup ParameterLevelDescriptionBTBPGProgramControls whether a program is a business-to-business program. When this parameter is set to Y, the program is a business-to-business program and ACH transactions that use the Create ACH Transaction endpoint are made via CCD.CFFSIProductControls whether a product is a corporate finance fleet card product and specifies restrictions on card usage. This parameter is only valid when CFCRD is set. Values for this parameter are:0 — Corporate finance fleet card with no usage restriction (Visa only).1 — Corporate finance fleet card used for fuel and maintenance only.2 — Corporate finance fleet card used for fuel only.Other or not set — Product is not a corporate finance fleet card.Updated 2 months ago Table of Contents Know Your Business (KYB) Galileo setup "
415,docs.galileo-ft.com/pro/changelog/february-2023,"February 2023 Sandbox updates We have updated our Environments, Quickstart, and Postman Setup guides to reflect some changes to our Sandbox environment, including: The Sandbox API URL has changed to: https://api-sandbox.cv.gpsrv.com/intserv/4.0 API credentials expire every 30 days Client certificates are no longer required for authentication IP addresses outside of the US are now supported New guide Clients that use the Payment Risk Platform can now ask their Galileo representative for the PRP – Standard Fraud Rule Set PDF, which provides a list of standard rules to get you started. Secondary RDF suite Galileo now offers the secondary RDF suite, which is similar to the standard RDF suite except that it contains all possible fields for each RDF, and the fields are comma-separated instead of being fixed-width. "
416,docs.galileo-ft.com/pro/docs/activate-card-procedure,"Activating a Card This guide explains how to activate physical cards using the Activate Card endpoint. Do not follow this procedure to activate virtual cards; instead, use the Modify Status endpoint if necessary. Most virtual cards are active upon creation. As an anti-fraud measure, physical cards must be activated by the cardholder prior to use. (A Digital First card is activated automatically upon creation but not when reissued.) You determine the card-activation method for cardholders in cooperation with your bank and Galileo at the time you set up your program. This method may be through Galileo's IVR, on your web site or mobile app, or by another method. If you choose the IVR option you do not need to follow this procedure. 📘NoteFor Digital First cards you should not follow this procedure, because the cards are already activated upon creation. Instead, follow the instructions in Protecting the physical card in the Setup for Digital First guide. Result of calling Activate Card When Activate Card has run successfully, the card is changed to status: N (active). If the CANOC parameter is set, the cardholder's other active cards have been canceled. If temporary cards were issued and the TEMPC parameter is set, the temporary cards have been canceled. (See Galileo setup for more information.) Parameters This table explains the parameters that are specific to the Activate Card endpoint. See the Activate Card endpoint reference for details. ParameterUsageaccountNoPass the PRN, PAN, or CAD. If you pass the PRN you may also want to request cardNumberLastFour from the cardholder to select the correct card. To pass in the PAN you must be PCI compliant.cardExpiryDateCardholder-provided. Use this value to test against the card to be activated.cardSecurityCodeCardholder-provided. Use this value to test against the card to be activated.cardNumberLastFourCardholder-provided. If the cardholder has more than one card associated with their account, and if you passed PRN as accountNo, use this parameter to ensure that the correct card is selected.deactivateTemporaryCardsIf you issued one or more temporary cards while the cardholder waited for the physical card to arrive in the mail, pass 1 to deactivate those cards. This applies to cards that are associated with the account of the card that is being activated (same PRN), not cards that are associated with other accounts that the account holder has. The TEMPC parameter must be set for this parameter to take effect. Card-activation workflow This flowchart shows the logical progression of the Activate Card endpoint. The actual sequence of events in the Galileo system may vary. Retrieve cardholder input, populate the Activate Card endpoint, and send. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo checks for a card with the accountNo that has an emboss record in status: Y. Failure to find such an emboss record returns status: 467-02. Galileo verifies that the card's account is not in an improper status: If it is in a status that is specified in the CRDBL parameter, status: 467-06 is returned. If it is in status: F (fraud), status: 467-05 is returned. If it is in status: R (charged off), status: 467-04 is returned. If the data the customer supplied matches the data on record, Galileo activates the card and sends the webhook BACT: card_activated, if you are configured to receive it. If there is no match, Galileo returns status: 467-01. If deactivateTemporaryCards: 1, Galileo attempts to deactivate any temporary cards that were issued. If Galileo cannot deactivate the cards, status: 467-03 is returned. If the cards are successfully deactivated or deactivateTemporaryCards is not set, status: 0 is returned. Sample endpoint request and response Consult the Activate Card endpoint to see how to build the API request and to see the response schema. Status codes Consult this table to see an explanation of what each status code means and which next steps to take, if any. Status codeDescriptionNext steps467-01No cards with an emboss status: Y match the cardholder-provided input.Cardholder must supply correct card data.467-02No cards with an emboss status: Y match the PRN or customer ID.Retry with valid PRN or customer ID. Your product settings determine which value the system searches on.467-03Card successfully activated but temporary cards could not be deactivated.Verify that your product parameters are correct, or send Modify Status calls with type: 2 for the temporary cards.467-04Account is in status: R (charged-off) and cannot be modified.Inform the cardholder that the card cannot be activated.467-05Account is in status: F (fraud) and cannot be modified.Inform the cardholder that the card cannot be activated.467-06Account is in a status that is specified in the CRDBL parameter.Inform the cardholder that the card cannot be activated. View the activated card Call the Get Card or Get Account Cards endpoint and check card_status. Galileo setup These product/program parameters affect card-activation behavior. Galileo sets these parameters according to your use case. ParameterDescriptionCANCSUsed in conjunction with CANOC, it specifies the status that a card must be in to be canceled when a new card is activated. Default: N,X,Y,WCANOCWhen this parameter is set to Y, cards that belong to the same cardholder and that are in a status specified in CANCS are changed to status C (canceled) when the new card is activated. When this parameter is not set, the cardholder's other cards are not canceled. Set this parameter at the product level so that cards with the same product ID are canceled. Set this parameter at the program level so that cards with the same program ID (including different product IDs) are canceled.CRDBLContains statuses of cards that should not be activated.TEMPCCancels temporary instant-issue cards when the personalized card is activated. The instant-issue card and the personalized card must have the same balance ID but different product IDs. Set this parameter on the instant-issue product.Updated about 5 hours ago Table of Contents Result of calling Activate Card Parameters Card-activation workflow Sample endpoint request and response Status codes View the activated card Galileo setup "
417,docs.galileo-ft.com/instant/docs/about-products,"About Products A product is a set of card and account attributes; for example, card_color and daily_spending_limit are defined in this set of attributes. Product Configurations Your products are created and configured from the Dashboard. Product creation includes selecting card color, card branding and product naming. There are no API methods related to creating or modifying a product. Keep in mind, products are immutable and may not be altered after creation. If there is an error with your product, please reach out the Instant team. Product Creation Cost The product creation cost is adjusted from your Master Funds Account at the time your product is enabled for issuing. Please refer to galileo-ft.com/pricing for more information about the costs associated with product creation.Updated over 2 years ago Table of Contents Product Configurations Product Creation Cost "
418,docs.galileo-ft.com/pro/changelog/october-2020,"October 2020 New dispute-related Account Events We added dispute-related events to the Account Events webhook: DSFN: Dispute final, no provisional credit DSFP: Dispute final, provisional credit DSCT: Dispute created DSPC: Dispute provisional credit rtoken in Program API responses In all Program API responses the rtoken is now included. The rtoken is a Galileo-generated ID that you can use for tracking, debugging, and mapping to Splunk. New parameter in Auth API We added a parameter to Auth API Webhook 2.0 and Auth API Webhook 3.0: stip -- This field is present when a STIP (stand-in processing) transaction is authorized. Available for Mastercard SMS and DMS networks. New Plaid status codes We added status codes from Plaid to two Program API endpoint responses: Add ACH Account Create ACH Transaction SSN in Get Card response You can set provider parameter CINFN to return a customer's unencrypted social security number in the ssn field of the Get Card response. You need special permission to set this parameter. MCC in selected endpoint responses These Program API endpoints now return the MCC as mcc_code, to make it easier for you to map transactions to merchant categories: Get Account Overview Get Transaction History Get All Transaction History "
419,docs.galileo-ft.com/pro/changelog/october-2021,"October 2021 Update to the direct render PIN-set procedure We updated the Direct Render PIN-Set Procedure to include a new provision for using multiple stylesheets. ACH hold days clarification In the About ACH guide, we added details about the timing to clarify how hold days are applied to outgoing ACH debits. New endpoints We added two new endpoints to the Program API: Switch Product — Use this endpoint to switch a current account to a new product. You can also specify whether to reissue the card, whether to generate a new PAN and expiry date, and whether to emboss a new physical card. Reissue Card — Use this endpoint to reissue an existing card. You can also specify whether to generate a new PAN and expiry date and whether to emboss a new physical card. Updated STIP information We updated information about stand-in processing (STIP) in the Authorization Controller API guide. Refreshed site design We updated our documentation site design and user experience to improve page-load times, usability, accessibility, and alignment with the Galileo brand. Changes include: Splitting API reference documentation into separate pages for each endpoint Moving Pro documentation under the docs.galileo-ft.com domain Removing the landing page at docs.galileo-ft.com (and routing that traffic to the Pro docs by default) Refreshing the overall site design We're excited to bring you these improvements! Now that the changes are live, we recommend updating any bookmarks or links to our docs that you may have in your own internal documentation. New guide We added a new guide, Authorization Controller API, which is for those clients who are using the Auth API in the authorization stream. It contains advanced information about the checks that Galileo performs on authorization requests as well as explanations of the Auth API fields. Endpoint response field data types We clarified that some program API endpoint response fields may return a string or an integer, depending on the value. Get Account Overview savings interest amount fields usually return a string, but may return an integer if the amount is 0. The Create Payment fee_amount field and Reverse Payment fee_reversal_amount field usually return a string, but may return an integer if the amount is 0. Virtual card expiry We added information about how to reissue expiring virtual cards in the About Cards guide. CIP testing functionality In the Customer ID Verification (KYC/CIP) guide we added a note saying that you can test Galileo's integrated CIP functionality in CV if you have the CIPEV parameter enabled. New guides We added these new guides: About the Events API — Events API scenarios, setup and configuration, and information about event triggers and testing. About the Raw Data Files (RDFs) — What the RDFs are, how to use them, plus a separate reference for the RDF fields. About Card Transactions expansion and revision We have divided up the About Card Transactions guide into one main document and five subdocuments to make it easier to access the information you're looking for. We have also added details about various topics. The new subdocuments are: Networks — Explains credit vs debit networks and primary vs secondary networks. Authorization — Provides details about authorization and its variants such as preauthorization, incremental authorization, upcharges, balance inquiries, partial authorizations, and AVS checks. Settlement — Explains the settlement process as well as completion and backouts. Crediting Cardholder Accounts — Describes transactions that move funds from the merchant to the cardholder account: reversals, merchant credits, card loads, and disputes. Card Transaction Examples — Contains all of the example transactions that were in the original About Card Transaction document. New recipes We added sixteen new Recipes—four Program API responses and twelve Auth API v3 webhooks. Use the Auth API v3 webhook samples to test your Auth API endpoint, and consult the Program API responses to see how basic transactions are represented. Click the clipboard icon at the upper-right of a Recipe to copy the code. "
420,docs.galileo-ft.com/pro/reference/post/modifystatus,"Modify Status Consult the Account and card status table to see what is affected by each type value. When activating a card, use this endpoint to activate a virtual card, but use the Activate Card endpoint for physical cards. See the Lost, Stolen, or Damaged Cards guide for instructions on using types 3, 4, 7, 8, and 12.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description413-01PAN is required as accountNo no in multi-card/account situations.413-02Invalid account -- account is in charged off status and cannot be modified413-03Invalid account -- account is in fraud status and cannot be modified413-04Unknown status type413-05Card cannot be activated413-07Reissue already found for this card413-08Reissue restricted for this card413-09Stock is the same or product cannot be reissued413-10Account/Card already in requested status or cannot be changed to requested status413-11Overdraft account unavailable or not in participating status413-12Card has already been marked lost413-13Selected type is not available for use or does not exist413-14Image is not set up for card413-15Unable to change status to set to emboss413-16Unable to set bankruptcy filed because current status is not active413-17Unable to set bankruptcy discharged/dismissed because current status is not set to bankruptcy filedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
421,docs.galileo-ft.com/pro/reference/post/forcepasscip,"Force Pass CIP Consult the Creating an Account procedure for instructions on using this endpoint, and consult the Customer ID Verification guide for how to use this endpoint with Galileo's integrated CIP solution.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description535-01Customer account already CIP force passedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
422,docs.galileo-ft.com/pro/reference/api-reference-about-the-dispute-api,"About the Dispute API The Dispute API is an cloud-based, conversational API that creates and submits disputes to Galileo's dispute platform. For instructions on using this API see the Creating a Dispute guide. The Dispute API is not part of the Program API. For this API you use a different URL, and the status codes have a four-digit prefix (1502-01). Base URL For this API you are assigned a tenanted URL during the initial setup process for the Dispute API. Do not use the URL that you use for the Program API. Authentication Follow the authentication steps for the Program API. Connectivity To test connectivity to the Dispute API, use the specialty Ping endpoint, which tests only the Dispute API. Do not use the Ping endpoint of the Program API. Endpoint responses Unlike the responses of the Program API endpoints, the field names in Dispute API responses are in camelCase instead of snake_case.Table of Contents Base URL Authentication Connectivity Endpoint responses "
423,docs.galileo-ft.com/pro/changelog/february-2022,"February 2022 CIP product parameters In the Galileo setup section of the Customer ID Verification (KYC/CIP) guide, the description for the VALID parameter was incorrect, and the VLDLV parameter was missing. CLIM event We added a new Account Event, CLIM: credit_limit_change, which is triggered when the limit on a credit account changes. Endpoint parameter clarifications We clarified the descriptions for the following endpoint parameters: Switch Product and Reissue Card — For the oldCardStatus parameter, the default is blank. Clarified description and examples for newPan, emboss, and newExpiryDate parameters. Expire Hold — Leave expirationDateTime empty to expire the hold immediately. Modify Status — The bypassRepFee parameter is only valid when type: 19. Get Fee History, Get Pending Fees, and Assess Fee — The type field is the three-letter fee code, not the transaction type (otype). Status code clarification We clarified the descriptions for Expire Hold status codes. 540-02 can be resolved with a future date-time or by leaving expirationDateTime empty. 540-03 does not apply to new holds; removed “when creating a hold” from the description. Secured credit clarification We updated the Secured Credit guide with information about customer benefits and made clarifications about the customer experience. We also added some new use cases and added a new section on program manager responsibilities. New status codes The Switch Product endpoint has new status codes: 590-03 through 590-12. Secondary accounts The About Accounts guide stated that secondary accounts cannot be used as primary accounts. This is no longer true. A secondary account number can be used for accountNo with Add Account. A secondary account number still cannot be used for primaryAccount with Create Account. Disqualifying overdraft account events To the Managing Overdraft Accounts guide we added details about what causes an account holder to lose access to overdraft and how to restore access. Driving accounts negative To the description for the Create Account Transfer endpoint we added a note about setting the ALWNB parameter to allow the endpoint to drive the sending account negative. New event We added a new Account Event, ACST: account_status_change, which is triggered when an account changes to a status that is specified in the ACMSG product parameter. STIP-related fields When the networks perform STIP, Galileo can include the response code that the network sent to the merchant in the in_de39 field in the STPD: denied_auth_stip Authorization Event message and in the RDFs. These fields are enabled by request. Endpoint description clarifications We updated the following endpoint descriptions: Update Pending Merchant Credit — To be used only if you are handling your own disputes. Modify Pending Deposit Status — Used for returns on incoming ACH credit. Create IVR Call, Get IVR Call Status, and Get IVR Call Identifier — Connect your system to Galileo’s for PIN setting. Get Promontory Bank List — Related to Promontory high yield accounts for sweeps. Shows the banks that are involved in the sweep. Add ACH Account — Added information about the RPVIR parameter for Plaid integration. CRCA event We clarified the trigger for the CRCA: ready_to_activate event, which is when a card is activated in the CST. The ready_to_activate name is a misnomer, because the card is already active when the event is sent. Breaking-change policy We added our Breaking Change Policy to indicate which types of changes are to be communicated in advance of the change going live. PIN-set events We clarified the event triggers for the PIN-set events: PINC: PIN_changed — The PIN change has been staged by the CST, IVR, or Galileo-hosted website. PNCH: system_pin_change — The PIN change was successful, usually as the result of Commit Card PIN Change. Using the id and id2 fields In the Customer ID Verification (KYC/CIP) guide, we clarified how to use the id and id2 parameters in the enrollment endpoints. Pulse as a secondary network. The Networks guide had formerly indicated that Pulse was not supported as a secondary network. That is no longer true: Pulse is now supported as a secondary. "
424,docs.galileo-ft.com/pro/changelog/january-20201,"January 2021 Guides added We added these new guides: Creating an Overdraft Account — How to create overdraft accounts using the Program API. Digital Cards — About virtual, tokenized, and digital images of physical cards. Digital First Program — How to provide your customers with a digital card to use while waiting for a physical card to arrive in the mail. includeRelated clarified We clarified the description for the includeRelated parameter in endpoints such as Get Authorization History. Transaction types clarified In the API reference we removed a transaction types table that showed outdated information and clarified that transaction types are specific to your program. Guides updated We updated these guides: Digital First Program — Corrected the use cases for Account Features 20 and 21, which had been reversed. Creating an Internal Transfer — Added how to attach messages to the payment and adjustment. Parameters added to Authorization and Settlement Events Authorization Events — local_surcharge_amt Settlement Event — settle_surcharge_amt "
425,docs.galileo-ft.com/pro/reference/api-reference-events-api-insufficient-funds-to-emboss,"insufficient_funds_to_emboss Code — ISFE Event trigger — The emboss process stops because the cardholder account does not have sufficient funds for replacement fees, including express mail. Process — This process contains the event trigger: Lost-stolen card process, initiated by Modify Status types 3, 4, 7 or 8 Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ISFE"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""insufficient_funds_to_emboss"" Example JSON# insufficient_funds_to_emboss example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""ISFE"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""insufficient_funds_to_emboss"" } Table of Contents Fields Example "
426,docs.galileo-ft.com/pro/changelog/april-2022,"April 2022 Field for event We corrected the BAUT: auth event webhook description to include fee_amount field in the final amount. Set Roundup Accounts endpoint description clarification We updated Set Roundup Accounts to clarify how roundups can support various other use cases. Create ACH Transaction field correction We corrected the type for ach_transaction_id on Create ACH Transaction to string. Create Hold parameter description We corrected the description of the holdType parameter of the Create Hold endpoint to indicate that it is 2 alphanumeric characters. Network code enumeration The network code in the fee_auth field of the BFEE: fee event message has its own enumeration on the Events Network Codes enumeration. New Create Hold status code If the hold amount requested in the Create Hold endpoint is greater than the account balance, and PRVNB is set, Galileo sends status: 539-08. Optional fields for event messages For many event messages we offer the following fields, which you can request to be added to your event webhooks: avail_cash — For debit accounts, the open_to_buy including available overdraft. avail_credit — For credit accounts, the available credit limit to spend. credit_balance — For credit accounts, the total amount of unpaid purchases and advances. od_f_open_to_buy — Available overdraft balance minus pending fees. New account feature type We added featureType: 26 to Set Account Feature. Use this to disable only selected dynamic fraud rules. Enhanced data for business banking Removed general information on level 2/3 and enhanced data from Business Banking Program Configuration. Level 2/3 and enhanced data is available for Mastercard Fleet cards. ACH Same Day update Updated ACH Same Day to say that ACH is available for ACH credit and debit, and that the per-transaction limit is $1,000,000. Field lengths We added field lengths and data types to the RDF Reference. Pagination added We added pagination parameters to the Get Billers endpoint. Event added We have added the ISFE: insufficient_funds_to_emboss event to the Account Events documentation. New Auth API field To the Auth API webhook (v2 and v3) we have added an optional object that is available by arrangement with Galileo: advanced_auth_api_fields — Contains specially parsed subfields of data elements ACH updates We have made these updates to the ACH at Galileo guide: Clarified options for enabling early access Clarified how hold days work with same-day ACH Added ACH posting order at Galileo Transaction otype 11 For Mastercard transactions we added the 11 otype to the Transaction Types enumeration, which indicates that a completion arrived at Galileo but the corresponding preauthorization had not been sent first. New featureType The Set Account Feature endpoint now has featureType: 29, which you can use by arrangement with Galileo to customize a message in the carrier for shipping physical cards. Secured credit expanded We expanded the Secured Credit guide: Setting Up Secured Credit — Program manager instructions to set up and configure secured credit products. Developer Setup for Secured Credit — Endpoints and processes for implementing secured credit products. Secured Credit Workflows — Illustrated processes for implementation and funds movement. Bankruptcy reporting — New bankruptcy reporting feature. We added types and statuses for bankruptcy reporting to the API Reference. For more information, clients can request the Bankruptcy Reporting guide. "
427,docs.galileo-ft.com/pro/reference/post/modifypendingdepositstatus,"Modify Pending Deposit Status For more information on this endpoint see Modifying a pending ACH deposit status in the ACH Endpoints guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description543-01Provided depositTransactionId doesn't map to any payment543-02Invalid category type. The valid choices are A=Approve, W=Watch and D=Decline.543-03Invalid action type. The valid choices are P=Post and R=Return.543-04Transaction is not in a status that can be posted or returned543-05Failed to Post transaction543-06Failed to Return transaction543-07Ret Code should not be used when posting543-08Ret Code is required when returning543-09Invalid Ret Code supplied. Valid Ret Codes: x543-10Payment successfully updated, but was not successfully marked as reviewed. Please contact client support for more details.543-11Failed to find transaction by depositTransactionId and or categoryCode. Please confirm both are correct. Response Example json{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 0.443,  ""response_data"": {   ""deposit_transaction_id"": ""75001797"",   ""action_type"": ""P"",   ""category_type"": ""A"",   ""category_code"": ""COF""  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""52fa5fc4-beb2-49ad-b719-37d9abd4ec4d""  },  ""system_timestamp"": ""2020-07-15 14:55:11"" } ```xml xml <?xml version=""1.0"" ?> <response>  <status_code>0</status_code>  <status>Success</status>  <processing_time>0.037</processing_time>  <response_data>   <deposit_transaction_id>75001797</deposit_transaction_id>   <action_type>P</action_type>   <category_type>A</category_type>   <category_code>COF</category_code>  </response_data>  <echo>   <provider_transaction_id/>   <provider_timestamp/>   <transaction_id>aa3dbb6b-f298-4037-8f78-3ca86ff1b859</transaction_id>  </echo>  <system_timestamp>2020-07-15 14:55:12</system_timestamp> </response> LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
430,docs.galileo-ft.com/pro/docs/creating-a-billpay-transaction,"Creating a Billpay Transaction 👍NoticeThis guide is in a preliminary state. Some of the details may be incorrect, and we will be updating them as needed. Contact Galileo to report any errors or omissions. This guide explains how to use the Program API to add billers to an account and how to initiate a billpay transaction, either for one time or on a schedule. Along with this guide you may want to read these other guides: About Bill Pay — General information about bill pay at Galileo Managing Billpay Transactions — Instructions for displaying and canceling billpay transactions and removing billers. Billpay endpoints Integrate these endpoints with your billpay interface according to the use case. Use caseEndpointDisplay a list of billers that have been configured for the account holder.Get BillersFind out if a biller is in the RPPS databaseSearch Biller DirectoryAdd an electronic biller for the account holder; optionally, add a one-time payment or a series of paymentsAdd RPPS BillerModify biller information or change recurring paymentsModify RPPS BillerAdd a biller that is not in the RPPS database, which will receive a paper check; optionally, add a one-time payment or series of paymentsAdd Paper BillerModify biller information or change recurring paymentsModify Paper BillerDelete a biller from the account holder's accountRemove BillerInitiate a one-time payment to an existing billerCreate Bill PaymentCancel an existing bill payment, if possibleCancel Bill PaymentRetrieve a list of payments that have a process date that is equal to or later than the current dateGet Scheduled Bill PaymentsRetrieve a list of bill payments between specified datesGet Bill Payment History For details on using these endpoints, see the Billpay Endpoints guide. For details on managing billers and billpay transactions, see the Managing Billpay Transactions guide. Adding a biller Before you can initiate a billpay transaction, you must add the biller to the account holder's account. Billers are associated with an account holder's primary PRN, so adding a biller to one PRN does not add it to another account holder's PRN, even if the account holders share the same balance. If 10 account holders need to add the same biller, you must add that biller 10 times, to each individual account. The account holder launches an ""add biller"" control in your interface. Your interface prompts the account holder to provide the name of the biller. Call the Search Biller Directory endpoint to look for the biller name in the RPPS database. If the biller is in the database: Galileo returns one or more billers that match the string in billerName. Each biller has an rpps_biller_id. If there is more than one biller, the account holder selects the correct biller. You call the Add RPPS Biller endpoint to create the electronic biller. Optionally, the account holder can schedule a billpay transaction or create a one-time transaction. The endpoint response includes the biller_id. If the biller is not in the database: Galileo returns status code 421-01. You call the Add Paper Biller endpoint to create the paper biller. Optionally, the account holder can schedule a billpay transaction or create a one-time transaction. The endpoint response includes the biller_id. 📘NoteIf the account holder creates a one-time transaction using these Add X Biller endpoints, it is not necessary to call Create Bill Payment to initiate the transaction. Creating a billpay transaction A billpay transaction is initiated in one of these ways: At the time the biller is added, as shown in Adding a biller: The account holder creates a one-time transaction. The account holder creates scheduled transactions. After the biller has been added: The account holder creates a billpay transaction, as shown in Creating a one-time billpay transaction, below. The scheduler creates a billpay transaction, as shown in Scheduling billpay transactions. Creating a one-time billpay transaction After a biller has been created, you can create a transaction. This process applies to both electronic and paper check transactions. One-time transaction workflow This diagram shows how Galileo processes one-time transactions that are initiated by the Program API. This workflow assumes that Galileo is the system of record. If you are the system of record for your program, perform your own balance check before calling Create Bill Payment. The account holder goes to the billpay section of your interface. You call the Get Billers endpoint and present the list of billers. If the desired biller is not present, the account holder activates an ""add biller"" control on your interface. You follow the Adding a biller procedure, and the account holder optionally creates a one-time transaction with the process date of today. When creating the transaction in this way, the rest of the process follows the Scheduled transaction workflow. If the desired biller is present, the account holder selects the biller. You call the Create Bill Payment endpoint using the biller_id as returned by the Get Billers endpoint. The endpoint performs these verification checks: The biller_id must be associated with the account holder's PRN. If it is not, the endpoint returns status_code: 433-01. The processDate must be the current date or later. If it is in the past, the endpoint returns status_code: 433-02. If there is no processDate in the request, it defaults to the current date. The account status must be active. If it is not, the endpoint returns status_code: 433-06. The amount must be a positive number. If it is not, the endpoint returns status_code: 433-03. The transaction amount must not exceed the limit in LIMPB If the limit is exceeded, the endpoint returns status_code: 433-04. Galileo creates the transaction in status: N, sends the BPCQ: billpay_request_made event message, and the endpoint returns status_code: 00. Every 30 minutes, at :08 and :38 past the hour, Galileo's billpay process runs. The process performs these checks again: The account must be active. If it is not, Galileo sends the BSPF: sched_billpay_fail event message. There must be sufficient funds. If not, Galileo sends the BSPF: sched_billpay_fail event message. Velocity limits must not be exceeded. If they are, Galileo sends the BLVF: billpay_limit_violation event message. The billpay process adjusts the transaction amount out of the account and sends the BPAY: billpay event message. The billpay process checks for a fee. If there is a fee, the Processing fees process is followed. If there is no fee, the process continues. The billpay process then changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Scheduling billpay transactions Use one of these methods to schedule billpay transactions in the future: One-time transaction When adding or modifying a biller (Add X Biller or Modify X Biller), pass these parameters: frequencyType: O (letter O) nextDate: future date endDate: same as nextDate amount: amount of the transaction When creating a one-time transaction with Create Bill Payment, input a future date for processDate. Recurring transactions When adding or modifying a biller (Add X Biller or Modify X Biller), select one of these options. With recurring transactions, nextDate, endDate, and amount are required: W — Weekly M — Monthly Q — Quarterly Y — Yearly nextDate — Date of first scheduled transaction endDate — Date of last scheduled transaction, up to five years in the future amount — Amount of the scheduled transaction 📘NoteThe maximum value of endDate is five years after the current date. For example, if today is 20 Jan 2020, the end date can be no later than 20 Jan 2025. However, if today's date is leap day, such as 29 Feb 2020, the latest date can be 1 Mar 2025 instead of 28 Feb. Scheduled transaction workflow This is the workflow for a billpay transaction when the scheduler initiates the transaction. The flowchart assumes that the External Trans API is not in use. On the process date for the transaction, the scheduler initiates the billpay transaction process. The scheduler begins to run every morning. Galileo creates the transaction in status: N and sends the BPCQ: billpay_request_made event message. Galileo verifies that the account holder's account is active. If it is not, Galileo sends the BSPF: sched_billpay_fail event message. Galileo verifies that the transaction amount does not exceed the limit in LIMPB. If it does, Galileo sends the BLVF: billpay_limit_violation event message. Galileo checks for sufficient funds. * If there are insufficient funds, Galileo sends the BSPF: sched_billpay_fail event message. It adjusts the transaction amount from the account and sends the BPAY: billpay event message. The billpay process checks for a fee. If there is a fee, the Processing fees process is followed. If there is no fee, the process continues. The billpay process also changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Processing an electronic transaction On the same day that the electronic transaction is initiated, Galileo performs these actions: The electronic transaction is in status: O (in process). An internal process adds electronic transactions to the RPPS originator file and changes the transaction to status: P. This process runs at 08:45, 13:45, 16:45 and 22:45, Galileo system time, every day. Galileo sends the RPPS file to Mastercard, and the transaction is included in the Posted Transactions RDF. Mastercard receives the RPPS file and validates the transactions. If the transaction passes the validation checks, Mastercard sends the billpay transaction to the biller's bank. If the transaction is accepted by the bank and the biller, the transaction is posted to the biller’s bank account. Galileo does not receive notification of this event. If the transaction does not pass the validation checks, or if the biller or the biller's bank returns the transaction, Mastercard includes it in an RPPS return file that it sends to Galileo. It can take several days or longer for a transaction to be included in the return file. Galileo checks for the RPPS return file four times per day. When Galileo finds a rejected transaction in the return file, it performs these steps: Sends the BRRJ: billpay_rejected event message. Returns the amount back to the account, sends the BADJ: adj event message. Includes the adjustment in the Posted Transactions RDF. Electronic timing When billers register with Mastercard RPPS, they select a method for Mastercard to send the transaction to the biller's bank. The method can be ACH or it can be a quicker, electronic method. It is therefore possible for an electronic transaction to be posted to the biller's account on the same day that Galileo processes it; likewise, the transaction might be posted a few days later, depending on the delivery method chosen by the biller. This table shows the approximate amount of time it takes to transition between electronic transaction statuses Status changeApproximate intervalN to OUp to 30 minutes. Process runs at :08 and :38 minutes past the hour.O to PProcess runs at 06:45, 14:45, 18:45 and 22:45 every day. Galileo checks for RPPS return files four times per day, at 06:10, 14:10, 18:10, and 22:10 Galileo system time. When Galileo finds a return file, it processes it right away. About 30 minutes after processing the file, Galileo returns the transaction amount to the account, sends the BADJ: adj event message, and includes the adjustment in the Posted Transactions RDF. Processing a paper billpay transaction On the next business day after a paper transaction is initiated, Galileo performs these actions: Transactions in status; W (waiting to be printed) are picked up by Galileo’s paper check process once per business day at 06:00, Galileo system time. Check transactions that are initiated before midnight are included in this batch. Transactions initiated after midnight are processed the next business day. Galileo prints the check and changes the transaction to status: Q. On the same day, Galileo sends the check in the mail. Galileo then changes the transaction to status: P, sends the BCPM: billpay_check_mailed event message and includes the transaction in the Posted Transactions RDF If the check is returned, Galileo sends the BPCR: billpay_request_returned event message. Galileo later returns the amount to the account, sends the BADJ: adj event message, and includes the adjustment in the Posted Transactions RDF. If the check is cashed within 180 days, Galileo sends the BPCC: billpay_check_cleared event message. If the check is not cashed within 180 days: Galileo sends the BPEX: billpay_expired event message and changes the transaction to status: L. Galileo records the check in the cancellation file and changes the transaction to status: U. Galileo returns the amount to the account, sends the BADJ: adj event message, changes the transaction to status: Y, and includes the adjustment in the Posted Transactions RDF. Example paper check The fields for the check are derived as follows: billerAccountNo — Add Paper Biller endpoint. Account Holder Name — firstName and lastName of an enrollment endpoint such as Create Account. Biller address fields — Add Paper Biller endpoint. memo — Create Bill Payment endpoint. This string is not available in the RDFs. Checks generated by the scheduler do not have a memo entry. Only the account holder's name can be printed on the check. Galileo clients cannot have their business names printed on the check. Paper check timing Galileo typically prints and mails a paper check on the next business day after the transaction was initiated. The biller receives the check depending on post office handling. Galileo estimates ~10 days after the transaction is initiated. After that, the biller decides when to cash the check. If the biller does not cash the check within 180 days (six months) of the check date, Galileo voids the check and returns the amount to the account. A check can be returned to Galileo either by the post office (bad address), by the biller, or by the biller's bank, and the timing of the return depends on post office handling, the decision of the biller, or the bank's processing schedule. (Galileo cannot tell you why the bank returned a check; you must ask the bank for that information.) When Galileo receives a returned check—or when a check expires—it takes approximately 1–3 days to return the amount to the account. This table shows the approximate interval between transaction status changes. Factors such as the number of checks to process in a day can affect how quickly Galileo prints and mails checks as well as how fast returned and expired checks are processed. Status changeApproximate intervalN to WProcess runs at :08 and :38 minutes past the hour.W to QNext business dayQ to PSame business day as aboveP to C~10 days minimum. Up to 180 days. Processing fees When you set up billpay fees, the billpay process performs extra steps to process the fee. The fee process begins right after the adjustment is posted, as shown in this flowchart. After the billpay process posts the adjustment to the account, Galileo checks for any billpay fees. If there are no fees, Galileo does not follow the fee process and skips to step 3. If a fee is configured, Galileo verifies that there are sufficient funds for the fee. If there are sufficient funds, the process continues to step 2. If there are insufficient funds, Galileo checks the AAIGB parameter. Set — When the fee is removed from the account, it drives the balance negative. Not set — Galileo checks the BPPPF parameter. Set — The fee is deferred until there are sufficient funds in the account. Not set — Galileo rolls back both the fee and the billpay adjustment and sends the BSPF: sched_billpay_fail event message. Galileo determines whether the fee is for an electronic or a paper billpay transaction: Electronic — The BPY fee is applied. Paper — The CHK fee is applied. The billpay process then changes the transaction status according to the biller type: status: O (letter O) — Electronic biller. See Processing an electronic transaction for next steps. status: W — Paper biller. See Processing a paper billpay transaction for next steps. Updated 1 day ago Table of Contents Billpay endpoints Adding a biller Creating a billpay transaction Creating a one-time billpay transaction Scheduling billpay transactions Processing an electronic transaction Processing a paper billpay transaction Processing fees "
431,docs.galileo-ft.com/pro/docs/developer-setup-for-buy-now-pay-later,"Galileo Buy Now, Pay Later Workflows The page describes the endpoints and workflows creating and managing Galileo Buy Now, Pay Later. Endpoints related to Buy Now, Pay Later This table lists the actions for creating and managing Galileo Buy Now, Pay Later, and related Program API endpoints. ActionEndpointsCreate a single-use virtual card for a BNPL customer.Create Single-Use Virtual CardCreate the loan and disburse funds into a Galileo-linked account.Create LoanCheck the status of the loan, such as the current balance, loan cycle, and the remaining payments.Get Loan StatusCreate a payment on a single loan, either from a primary or external account.Create Loan PaymentCheck the payments made to date on the loan and receive an update schedule of future payments required.Get Loan Payment ScheduleView individual installment status across all installments.Get Loan Installment StatusesCharge off an account.Update Loan StatusClose the single use virtual card account.Modify Status How it works This section contains workflows that illustrate the processes for creating and managing a Buy Now, Pay Later service. Virtual card creation and initial purchase Your customer in the Galileo system requests to make a purchase using your BNPL service. You perform the underwriting to determine the credit limit you want to extend to the customer. You present the BNPL offer to your customer. Customer accepts the offer and terms of the loan. You use the Create Single-Use Virtual Card endpoint to create a single-use virtual card and the associated credit account. You call Create Provisioning Request endpoint to push provision the virtual card into the customer’s mobile wallet. For further information on push provisioning, see Push provisioning in the Setup for Mobile Wallets guide. The customer makes a purchase with the provisioned virtual card at a retail or online merchant. The card network sends an authorization request. Galileo verifies that this is first purchase on this card and applies any MCC rules configured for the issuer’s program. Galileo notifies you of the purchase if you participate in the Auth API. The provisioned virtual card is removed from the customer’s mobile wallet. Loan creation and first payment Galileo receives the settlement data from Mastercard and updates transactions on the credit account from pending to posted. Galileo notifies you of settled transactions via the SETL: setl event. You send the Create Loan endpoint to create a loan based on the full settlement amount, which is the balance of the credit account. Upon receiving the Create Loan response, you call Create Loan Payment endpoint to make the first payment on the loan. Galileo sends the Create Loan Payment response in confirmation of a successful payment. Galileo authorizes or declines further transactions based on Mastercard Installments program guidance for card tokens. Any merchant initiated transactions will be approved as long as the card is active. Galileo notifies you of the approved or declined transactions via the Transactions Events API. Subsequent payments and loan charge off As a reminder, you are responsible for recording the installment loans issued and paying off the outstanding credit balance. You use the Daily Loan Status and Daily Transaction file to notify the customer the next payment is due. The customer receives the notification and initiates the payment. You use the Create Loan Payment endpoint to execute on the next payment. Repeat steps 1–3 for the remaining installments. On the last payment, send a notification to the customer that the loan is paid off and closed. 60 days after settlements, if there are no disputes, you are responsible for closing the single-use virtual card account using the Modify Status endpoint.Updated 21 days ago Table of Contents Endpoints related to Buy Now, Pay Later How it works Virtual card creation and initial purchase Loan creation and first payment Subsequent payments and loan charge off "
432,docs.galileo-ft.com/pro/docs/authorization-controller-api-9,"Authorization Controller API With the Authorization Controller API (Auth API) Galileo clients have the ability to participate in the approval process for authorization requests that arrive over card-network rails. This guide explains how to use the Auth API and how to interpret the webhook. You can view the full reference guide for the Auth API webhook fields here: Version 2 Version 3 This guide assumes that you are familiar with the concepts explained in these guides: About Card Transactions Authorization To see how specific transaction types are represented in the Events API, Program API and RDF data alongside Auth API data,see the Card Transactions Scenarios. For actual Auth API webhooks, see Auth API v3 webhook examples on this page. Differences between version 2 and version 3 All new clients are set up on version 3. For clients on version 2 who want to upgrade to version 3, these are the differences between the versions of the Auth API: Version 3 includes this field: response_code_objects — An object that contains a list of response codes and textual descriptions that Galileo calculated when determining the value in response_code. Version 3 does not include this field: response_code_list — A list of response codes that Galileo calculated when determining the value in response_code. ❗️WarningVersion 3 is a breaking change from version 2. Requirements The specifics of your setup will be particular to your use case and to the types of systems you are using. Whatever you construct to handle the Auth API, your endpoint must be able to handle what Galileo sends: Authentication uses a JWT with a shared secret. See Security in the Auth API reference for details. The webhook payload is sent as an HTTP POST using HTTP/1.1 over TLS. You must respond within 2 seconds of the value in the webhook's timestamp field, which is when Galileo sent the webhook. Galileo initiates multiple, simultaneous TCP sessions and sends webhooks in parallel on those connections. For efficiency, Galileo uses the keep-alive function instead of terminating each connection. How many connections per second depends on how many cardholders you have and how often they perform card transactions. You must use your own business logic to obtain this sizing information. Decisions to make When designing your implementation of the Auth API, you will need to address issues such as these, as well as others: Whether you or Galileo will be the system of record. This decision affects funds flow, how parameters are set on the back end, how you respond to the webhooks, and other considerations. How to respond to balance inquiries. When to override the Galileo response code, if permitted. Whether to implement a real-time funding strategy to transfer funds into a cardholder account to cover the amount of an authorization. How to deal with edge cases. Consult the Card Transactions Scenarios for detailed examples of some of the transaction types you will encounter: Completions and settlements Incremental authorizations Reversals and their expiry Advices Message workflow This is the general sequence of events for an authorization: The merchant sends an authorization request to its acquirer. The acquirer forwards the request to the network. The network forwards the request to Galileo. Gaileo forwards the request to you. You return a response to Galileo. Galileo forwards the response to the network. The network forwards the response to the acquirer. The acquirer forwards the response to the merchant, who completes the transaction. Message types Messages sent between acquirers and issuers over card-network rails conform to the ISO 8583 standard. The standard defines message type indicators (MTIs), which specify the type of message being sent and indicate what kind of response is expected. MTIs are four-digit codes that are broken out as follows, with the values that are most likely to be included with Auth API webhooks: First digit — Version of ISO 8583 used 0 — 1987 version 1 — 1993 version Second digit — General purpose of the message 1 — Authorization message 2 — Financial message 4 — Reversals and chargebacks Third digit — Message function 0 — Request 1 — Request response 2 — Advice 3 — Advice response Fourth digit — Session initiator 0 — Acquirer 2 — Issuer The typical flow of messages between acquirer and issuer follows this pattern: The merchant sends a message to its acquirer. The acquirer converts the message into ISO 8583 format and sends the message to the card network with a request or notification-type MTI. The network forwards the message to the issuer. The issuer processes the message information and then sends a response message to the network with a response-type MTI. The network forwards the response to the acquirer. The acquirer processes the message and sends the response to the merchant. For example, when an acquirer sends an authorization request over credit rails, the MTI is 0100, and when the issuer responds it's MTI 0110. These are the most common MTI request/response combinations that you will encounter with the Auth API. DescriptionFrom acquirerIssuer responseAuthorization or preauthorization request over credit rails or preauthorization request over debit rails01000110Authorization request over debit rails02000210Advice over credit rails01200130Advice over debit rails02200230Authorization reversal over credit or debit rails04200430 When you send your response to Galileo, you are not required to provide the MTI: Galileo will convert your response into ISO 8583 format and include the appropriate MTI to send to the network. 📘NoteWhen the third digit is 2, the message is an advice, which you cannot reject: only a 00 response code is permitted. Alongside the MTI in the webhook, Galileo further breaks down message types based on other information that it receives in the message to provide you with more detail. This information is provided in the auth_type and transaction_type fields. These are the combinations you will most likely encounter. Descriptionauth_typetransaction_typemtiAuthorization requestAuthAuth0100 (credit rails)0200 (debit rails)Preauthorization requestAuthPreauth0100ATM withdrawal requestAuthATM0200Request for a cash advance from a tellerAuthCash Advance0200Balance inquiry from an ATM or other vendorAuthBalance Inquiry0200Request to apply credit from a merchantAuthMerchant Credit0200Request to load a cardAuthPayment0200Request to convert a card into a token for a mobile walletAuthTokenization0100Notification of a completionAdviceAuth0120 (credit rails)0220 (debit rails)AdjustmentAdviceAdjustment0200Notification of a reversalReversalAuth0420 Data elements The ISO 8583 standard defines data elements (DEs) that contain details about the transaction, such as transaction amounts, card-reader identifier and PIN capabilities, merchant name and identifier, and currency codes and conversion rates. Galileo extracts information from the DEs and converts it into the human-readable field names and values of the Auth API webhook. Because each network uses the DEs differently, the documentation does not always indicate which DE corresponds to which Auth API field. Refer to the documentation from each network to see how they use the DEs. Auth API process This is the sequence of events between Galileo and you for a typical authorization request. Galileo receives an authorization request over a card network's rails in ISO 8583 format. Galileo performs validation checks and calculates response codes. Galileo converts its response codes and selected elements of the network message into webhook format and sends it to you. You apply logic to decide whether to override Galileo's response code, if permitted. You send your response to Galileo within two seconds. Galileo converts your response into ISO 8583 format and forwards it to the network. Validation checks See Auth API Validation Checks. Additional field information See the Auth API Field Detail guide for more information on these topics: Tokenization requests Tokenization requests IIAS fields IIAS fields Advanced Auth API fields Point of sale data Subscription services Calculating a response code Based on the checks Galileo performs, Galileo populates response_code_list (version 2) or response_code_objects (version 3). From these lists, Galileo selects the response code to return in the response_code field. Galileo chooses the response_code from among multiple codes according to a proprietary algorithm. Galileo returns 00 (success) if no other response codes were generated or if the authorization message is an advice. When the response code is 00, response_code_objects or response_code_list is empty. Sending a response Your response must be in JSON format. Sample responses are in the reference (Version 2, Version 3). The response must arrive at Galileo within two seconds of the time Galileo sent the webhook to you. If you do not respond in time, Galileo may perform fallback processing, depending on your arrangements with Galileo. See Fallback processing for more information. Overrides You are permitted to override Galileo's responses only under certain circumstances. Response code override Galileo recommends that you build logic to override these response codes only: 00 — Success 10 — Approved for partial amount 46 — Suspected fraud (Visa only) 51 — Insufficient funds 59 — Suspected fraud Overriding these response codes requires bank approval. To add more response codes to override after initial setup, you will need additional bank approval and a legal addendum to the Master Service Agreement. AVS override When Galileo performs AVS checks, the verdict is in the avs_result field and the values used to perform the check are in the avs_data object. If you have reason to believe that Galileo does not have the latest address information, you can perform AVS yourself on the updated address and populate avs_response to override Galileo's result. Overriding insufficient funds When Galileo returns 51 (insufficient funds), you can override it in one of two ways: partial authorization or real-time transfers. Alternatively, Galileo can provide partial authorizations. Partial authorization Merchants determine whether they will accept partial authorizations. If the merchant accepts partial authorization, then partial_supported: true. If you hold the balance, populate partial_amount with the amount to authorize for the transaction and return response_code: 10 (approved for partial amount) or response_code: 87 (approved for partial purchase amount but not cash back). If Galileo holds the balance, the partial_amount field is already populated with the amount to authorize—which will be the available balance—and response_code: 10. If you do not want to authorize the partial amount, return response_code: 51 to override Galileo's code. If you never want to support partial authorizations, set the PAPPR parameter. Real-time transfers As desired, you can build logic on your side to transfer funds into a cardholder account to cover the amount of an authorization when the cardholder account has insufficient funds. In that case, you populate these fields: transfer_prn — The PRN of the account to provide funds. transfer_amount — The amount of the transfer. source_transfer_type — Transaction type code for the account in transfer_prn. dest_transfer_type — Transaction type code for the cardholder account. The activity type will be AD (adjustment) for both the source account and cardholder account. Use the transfer type codes that Galileo provided in a specially curated list of codes. For example, if the cardholder has $25.00 in their account and the amount of the authorization is $30.00, you could transfer $5.00 into the cardholder account and return response_code: 00. 👍TipYou can use real-time transfers to partially subsidize transactions. For example, you can build logic on your end to transfer a portion of the request amount from a central account when the request is from a certain MCC or merchant, and the rest of the amount would be drawn from the cardholder account. For example, if a request from the designated MCC arrives for $20, you can transfer $5 from the central account, and then the remaining $15 would automatically come from the cardholder account. Galileo also offers Real-Time Funding, another method of transferring funds into a card account at authorization time, which is unrelated to real-time transfers. Overriding limits With the override_limit field you can override velocity limits that are set for the product. Use the amt_til_limit and nearest_limit fields to see how close an account is to exceeding a limit and which limit that would be. Exercise caution with this type of override, however. Confirm with your bank that you are able to override limits and ensure that you have clearly defined which circumstances permit an override. Balance inquiry responses A typical balance inquiry is a separate transaction with trans_amount: 0.00 and transaction_type: Balance Inquiry. For these standalone inquiries, eligible_for_balance_return is always true. When Galileo holds the balance, Galileo returns 00 (success) and provides the balance that it has in available_funds. If you hold the account balance, populate available_balance with the current available balance and return response_code: 00. If you do not populate available_balance, Galileo will return the balance that it has on record. If you have a Mastercard program, your product parameters control which merchant category codes (MCCs) can receive the account balance in the U.S., Canada, Mexico, and Colombia. For Visa programs, product parameters specify only whether balance inquiries are permitted. In the case of Visa transactions, balance inquiries are permitted only at ATMs. For both networks, balance inquiries are permitted only for card-present transactions. With Mastercard, a ""courtesy balance"" request might also be included in a conventional authorization request, such as at a retail merchant where the merchant wants to print the balance on the receipt. In that case, eligible_for_balance_return: true and transaction_type contains a value other than Balance Inquiry. You may provide the balance in available_balance or Galileo will provide it. When Galileo receives a balance inquiry, and product settings indicate that merchant is not eligible to receive the balance, Galileo responds with 05 (do not honor). In the Authorized Transactions RDF, balance inquiries are identified by TRANSACTION CODE 10. These inquiries are not included in the Posted Transactions RDF, Program API responses, or the CST. Fallback processing When you do not respond to Galileo in time, Galileo can perform ""fallback"" processing, meaning that Galileo either responds with 05 (do not honor) for all transactions, or it returns the response that it has calculated, depending on how the APIFB product parameter is set. When this parameter is not set, Galileo returns 05 (do not honor) for all transactions that you do not respond to. When APIFB is set to Y, Galileo returns the response that it has calculated. If Galileo will provide fallback processing and you are the system of record, you must devise a way to keep Galileo updated on your account balances so that Galileo can determine whether accounts have sufficient balance. You could send a batch file every few hours, for example. When Galileo does not receive your response in time, it sends the OATO: Auth_API_Timeout Account Event webhook, and then Galileo sends you the AUFB: auth_fallback Authorization Event webhook to notify of both approved and denied fallback authorizations. Stand-in processing In some cases, the network must make a decision on Galileo's behalf, such as when Galileo does not respond to an authorization request from the network in time. The network may also process a transaction instead of sending it to Galileo first, for a variety of reasons. When you set up your relationship with the card network, you specify how and when the network will perform this stand-in processing (STIP). Based on these configuration and processing rules, the network may either deny or approve the transaction on Galileo's behalf. After the network performs a STIP transaction, it sends an advice notification to Galileo. If the transaction changes the available balance, Galileo relays the advice to you as an MTI 0120 or 0220 message. If the advice does not change the balance, Galileo does not send an Auth API webhook. Galileo also sends event messages according to the type of STIP transaction: STPA: auth_stip_advice — Mastercard approval or denial. The STIPD parameter must be enabled. If is_stip_denial: Y, then the transaction was denied. BAUT: auth — Visa approvals. No STIP information is provided with this message. STPD: denied_auth_stip — Denials. The STIPD parameter must be enabled. STIP Reason Codes Galileo not responding is only one reason why networks perform STIP. To indicate why they performed stand-in processing, Visa and Mastercard networks send a reason code in the advice notification. Galileo forwards this reason code in these fields: stip_info — In the STPD: denied_auth_stip event message stip_advice — In the STPA: auth_stip_advice event message stip: {detail} — In the Auth API webhook Consult the documentation from each network to interpret the codes: Visa SMS POS Technical Specification for field 63.4 Mastercard Single Message System Specifications and Customer Interface Specification for DE 60 Sample codes NetworkCodeDescriptionMastercard4000000Late response from issuerVisa9020The response from issuer timed outVisa9054Online CAM validation failedVisa9061Internal system error or other switch-detected error condition Authorization Events API You can arrange for Galileo to send you Events API webhooks to notify of approvals and denials. See the Authorization Events index for the list of webhooks you can receive. For common Authorization Events sequences, see Authorization events in the Events API Scenarios guide. Also see the examples in the Card Transactions Scenarios. Galileo setup These are some of the parameters that control the behavior of the Auth API. Also see Galileo setup in the Authorization guide for parameters that affect authorization behavior. ParameterDescriptionAPIFBControls whether to perform fallback processing when your response to the webhook times out. When this parameter is N or not set, Galileo returns response code 05 (do not honor) for all fallback transactions. When this parameter is Y, Galileo returns the response code that it has calculated.APPOLControls whether you review all transactions via the Auth API or only transactions that pass Galileo’s initial check.AUAPIContains host:port addresses for servers that Galileo sends webhooks to.AUAPRControls whether Galileo waits for a response to an advice. When set to Y or not set, Galileo waits for your response for all Auth API webhooks. When set to N, Galileo doesn't wait for your response for advice authorizations. (For all other authorizations, Galileo still waits for your response.)MLAPIContains the host:port address of the server to use for machine-learning fraud detection.RULAPControls whether to send a comma-separated list of rule names that caused a DENY or WARN for an authorization in the Auth API request payload. The DENY rules are in the rules_denied field and the WARN rules are in the rules_warned field. Valid only when using Galileo's fraud-detection process. Auth API v3 webhook examples Use these code samples (called Recipes) to help test your system. These samples come from actual Auth API v3 webhooks. You can also find these Recipes by clicking Recipes in the top navigation bar. Auth API v3: Approved transactionOpen Recipe Auth API v3: AVS check with in-app purchaseOpen Recipe Auth API v3: Failed PIN at ATMOpen Recipe Auth API v3: Failed PIN count exceededOpen Recipe Auth API v3: Partial approvalOpen Recipe Auth API v3: Merchant creditOpen Recipe Auth API v3: Lost cardOpen Recipe Auth API v3: Card frozen and load not permittedOpen Recipe Auth API v3: Velocity limit exceeded at ATMOpen Recipe Auth API v3: Bad CVV2 with insufficient fundsOpen Recipe Auth API v3: Expiry date mismatchOpen Recipe Auth API v3: Mobile wallet provisioning request, red pathOpen Recipe Auth API v3: Mobile wallet provisioning request, green pathOpen Recipe Auth API v3: Balance inquiryOpen Recipe Auth API v3: ReversalOpen Recipe Auth API v3: Completion (advice) at gas pumpOpen Recipe Auth API v3: 3-D Secure transactionOpen Recipe Auth API v3: Fraud rules engine denies authOpen Recipe Auth API v3: Adjustment from an ATMOpen Recipe Auth API v3: Visa merchant credit over Mastercard railsOpen Recipe Auth API v3: Denied cash advanceOpen Recipe Auth API v3: Successful card loadOpen Recipe Auth API v3: Merchant mobile wallet checkOpen Recipe Auth API v3: Denied international incremental authorizationOpen Recipe Auth API v3: STIP notification of merchant creditOpen RecipeUpdated about 10 hours ago Table of Contents Differences between version 2 and version 3 Requirements Decisions to make Message workflow Message types Data elements Auth API process Validation checks Additional field information Calculating a response code Sending a response Overrides Balance inquiry responses Fallback processing Stand-in processing STIP Reason Codes Authorization Events API Galileo setup Auth API v3 webhook examples "
433,docs.galileo-ft.com/instant/reference/account-type,Account Type TypeDescriptionspending_accountThe cardholder's primary account that has a card associated with itachA linked account for ACHmfaMaster Funds Account that belongs to the business 
435,docs.galileo-ft.com/pro/docs/ach-at-galileo,"ACH at Galileo You can enable a product for ACH transactions and specify the types of ACH transactions that customers can originate and receive using your product. This guide discusses how ACH works at Galileo and the decisions to make before you set up a product for ACH. Incoming and outgoing transactions Galileo uses the terms “incoming” and “outgoing” to indicate whether an ACH transaction originates from an external account or your customer’s account in the Galileo system. An incoming ACH transaction is externally originated. The originator initiates the transaction from an external account and the receiver is your customer in the Galileo system. An outgoing ACH transaction is Galileo-originated using Program API endpoints. Your customer initiates the transaction from an account in the Galileo system and the receiver is an external entity. ACH credit and ACH debit An ACH transaction is classified as credit or debit depending on whether the originator moves funds into or out of the receiver’s account. This means that an ACH credit is a credit to the receiver and an ACH debit is a debit to the receiver. The receiver must authorize the request before funds are moved. The originator can make an ACH credit or debit request regardless of whether the transaction is incoming or outgoing. ACH credit — The originator moves funds into the receiver’s account. For example: An employer makes a direct deposit to your customer’s account via ACH transaction. A cardholder cashes out their Venmo or Paypal account balance and opts to use ACH payment. 📘NoteAn incoming ACH credit is often called a direct deposit. Some examples of incoming ACH credit are: a payroll deposit from an employer, a tax refund, a government stimulus check, and an incoming transfer from the customer’s own external account. Galileo does not make a distinction between a direct deposit and any other incoming ACH credit. ACH debit — The originator moves funds out of the receiver’s account. For example: Your customer has an external account at another bank and posts an outgoing ACH debit that moves funds out of the external account and into the account under your product. A business bills your consumer customer and removes funds from your customer’s account via ACH transaction (commonly used for utility bills, mortgage payments, other loan payments, etc). Your business customer bills an external business and draws funds from the external business’s account via ACH transaction. Nacha file Nacha (National Automated Clearing House Association) is the organization that oversees the ACH system and sets the standards for ACH transactions. A Nacha file contains bulk ACH transaction instructions in a standardized format. The ODFI sends the transaction in one Nacha file and the RDFI sends the settlement decision in a separate Nacha file. A clearing house in the ACH network transfers Nacha files between banks. Galileo creates and sends one Nacha file per day for each bank that Galileo is integrated with. Galileo sends each Nacha file via SFTP. 📘NoteGalileo uses the Nacha file format to process ACH transactions. The Nacha file format is a standardized format that all banks in the ACH network are equipped to process. Nacha files are encrypted. Decisions to make before setting up ACH Before setting up a product that is enabled for ACH transactions, you have several decisions to make. Allow incoming ACH credits — Whether to allow incoming ACH credits. Allow incoming ACH debits — Whether to allow incoming ACH debits. By default, incoming ACH debits are not allowed. Use External Trans API for incoming ACH debits — If incoming ACH debits are allowed, you can use the External Trans API to review incoming ACH debits before posting. You can either review all incoming ACH debits, or only incoming ACH debits in which the receiver's account lacks sufficient funds. If you do not use the External Trans API, then incoming ACH debits will post automatically (subject to Galileo's logic). Account statuses for incoming ACH — Acceptable account statuses for accounts to accept incoming ACH transactions. Galileo recommends declining incoming transactions to accounts that are closed or charged-off. Hold days for outgoing ACH debit — Number of hold days for outgoing ACH debit. Early ACH access — Whether account holders have early access to incoming ACH credit. Same Day ACH — Whether to allow Same Day ACH transactions. Approval for direct deposit — Whether direct deposits require manual approval in certain circumstances. For instance, you may want to manually approve a transaction if the amount exceeds a specified limit or if it originates outside of the U.S. ACH posting order at Galileo In general, Galileo stages ACH transactions for posting when requests are received. When transactions are ready to post, Galileo typically posts the credits first, then the debits. However, you may see exceptions to this because there are many factors that affect posting order. ACH accounts Before you can originate an ACH transaction, you must provide the receiver’s external bank account and routing number. Galileo stores this information in an ACH account. See Adding an ACH Account for more information on how ACH accounts are structured at Galileo. Setup for ACH transactions In an ACH transaction, funds are usually transferred between a settlement account at the RDFI and a settlement account at the ODFI via the ACH network. However, the method used to transfer funds may vary depending on regulations that each DFI is subject to. Work with your DFI to determine how to send and receive funds for ACH transfers. ACH hold days When your customer in the Galileo system originates an outgoing ACH debit request to move funds into their account, Galileo recommends setting a waiting period of at least three calendar days before the funds can be transferred to the customer’s account. These hold days give the receiver time to deny the request before the funds are debited from the receiver’s account. Per Nacha rules, an ACH transaction can be returned two days after the settlement date (returns past this time are allowed in certain situations). You can adjust the number of hold days during product setup. The hold days timer starts when Galileo sends the outgoing Nacha file to the ACH operator. Hold days only apply to outgoing ACH debit requests. See Outgoing ACH debit workflow to see how the hold days are applied. ACH Hold Days Override We now offer the flexibility to set hold days at the transaction level for outgoing ACH Debits, to provide greater control over defining hold days. While using the createAchTransaction API, you can now pass a new optional parameter: holdDays along with an integer value. When you originate an outgoing ACH debit transaction, the value you set for hold days through the API call overrides the value that was set in the product configuration. When the API request is initiated with the new parameter and value, Galileo receives the API request and the transaction is queued in Galileo’s ACH system. Once Galileo’s ACH system processes the transaction, the Nacha file is generated and sent to the partner bank. The different parameters set up for your program determine when the Nacha file is generated by Galileo, which begins the holdDays countdown. If the holdDays parameter is empty or null, Galileo uses the default hold day value set at the program level. Requirements Get approval from your partner bank to be able to use this feature. Work with your RM to enable the product configuration ACOHD to use the optional API parameter. 📘NoteThere are various product parameters that could affect when the holdDays countdown begins and ends. To make sure you get the expected results, you may want to review those other configuration settings for your program. Galileo’s system time is Arizona Time (UTC-07:00) and does not honor Daylight Savings. Same Day ACH When you send an outgoing Same Day ACH request, Galileo posts the request in the Nacha file the same day that you originated the request (unless you send the request after Galileo’s cutoff time). For a normal (non-same day) ACH request, Galileo posts the request in the next day’s Nacha file. Same Day ACH is available for both ACH credit and debit, with a $1,000,000 per-transaction limit. International transactions are not eligible for Same Day ACH. For fraud prevention purposes, ACH hold days apply to Same Day ACH. Hold days control when the funds are posted to the receiving account. Cutoff times also apply (described below), and after settlement, the RDFI has two days to initiate a return. To post a Same Day ACH request, send the Create ACH Transaction endpoint with sameDay set to Y. The ACHSD parameter must also be set to Y to enable Same Day processing. There are a few deadlines to keep in mind when posting a Same Day transaction. Galileo’s cutoff time — The time of day that Galileo generates a Nacha file for outgoing ACH transactions that originate from your program. This is usually about 40 minutes before your own cutoff time. ODFI cutoff time — The time of day that the ODFI retrieves the Nacha file from Galileo and sends it to the ACH operator. ACH operator cutoff time — Send the Nacha file to the ACH operator by the cutoff time shown below to meet your target time for funds availability. This table shows the ACH operator’s transmit deadline and corresponding time that funds are available to the receiver for Same Day ACH. Times are in Eastern Time (but be aware that Galileo’s system time is Arizona Time (UTC-07:00)). ACH operator cutoff timeFunds available to receiver(depending on applicable hold days)10:30 AM1:30 PM2:45 PM5:00 PM4:45 PMEnd of processing day ACH early access Galileo supports early access to incoming ACH deposits, a process that moves funds into a customer’s account before the settlement date. Galileo Early Pay is a feature of ACH early access, where your customers can have early access to paychecks sent via direct deposit. During product setup, you can request one of these configurations: Enable ACH early access for all accounts within a product Do not enable ACH early access for all accounts, but control access for individual accounts Clients can request the ACH Early Access guide for more information. ACH vs. bill pay Bill pay is a service that is separate from ACH. Account holders can use bill pay to make payments to service providers, either electronically or with a paper check. It is often more convenient for account holders to use the bill pay service than to pay bills via ACH. While an ACH transaction can take a few days to process, funds from an electronic bill payment can be made available to the biller the same day the bill is paid, depending on cutoff times. The bill pay service also makes it easier to cancel a recurring bill payment. For example, if the customer cancels a gym membership, the gym may not stop the ACH requests and may continue to debit the customer’s account after the membership is terminated. Bill pay allows an account holder to pay service providers without giving them access to bank account information. 📘NoteMost Galileo programs do not enable incoming ACH debit but use bill pay instead. See About Bill Pay for more information. ACH returns and stop payment orders An ACH return is initiated when an ACH transaction is rejected by the receiver or receiver’s bank. There are three types of ACH returns at Galileo. Outgoing ACH return — An external bank rejects an outgoing ACH transaction originating from your customer. Incoming ACH return — You or Galileo reject an incoming ACH transaction from an external originator. ACH stop payment order — A type of incoming ACH return that blocks an ACH debit before Galileo processes it. 📘NoteAn ACH return can only be sent for specific reasons and must include an ACH return code. Excessive or fraudulent returns can result in fines. For suspected fraud, see ACH disputes in the About Disputes guide. This section describes each type of return in detail. Outgoing ACH returns When your customer sends an outgoing ACH request to an external receiver and the external receiver rejects the transaction, the RDFI is responsible for providing an ACH return code. See the Outgoing ACH returns workflow for an overview. 📘NoteIn some cases, there is a problem with an outgoing ACH transaction but the transaction can still be posted. When this happens, the RDFI can post the transaction instead of sending a return, and may send a notice of change that states what the error is and how to correct it. When an outgoing ACH credit is returned to your customer, the resolution depends on when in the ACH process that the return was sent. If the funds were not posted, the pending transfer is cancelled. If the funds were posted, they are returned and Galileo adjusts the amount for your customer’s account. Incoming ACH returns When you or Galileo reject an incoming ACH request, Galileo prepares a Nacha file with the return and sends a return code to the ODFI. See the Incoming ACH returns workflow for an overview. You can manage incoming ACH returns using the CST. This table describes CST controls to review ACH transactions and initiate returns. CST controlLocationDescriptionPayment Posts & ReturnsSystem Administration > Other ToolsReview an ACH transaction and decide how to handle future ACH transactions with matching program settings.ACH Automation MatchesAccount > ACH InfoUpdate a decision that was made for ACH transactions in Payment Posts & Returns.ACH ReturnsSystem Administration > Other ToolsQueue for ACH transactions that are in status: i (manual review). A transaction appears in this queue if it violates load limits, if the receiver’s account status does not allow ACH transactions, or if it was sent for review via the External Trans API.Payment HistoryAccount > Account InfoDisplays the payment history for an account. On this page, you can mark an ACH transaction for return and select a return code.ACH Debit Block ReviewSystem Administration > Other ToolsShows partial matches for ACH stop payment orders. You can approve the block and start a return. See ACH stop payment orders for more information. Alternatively, you can use the Modify Pending Deposit Status endpoint to return an incoming ACH credit. See Modifying a pending ACH deposit status for more information. ACH stop payment orders When your customer wants to block an incoming ACH debit from a specific originator, you can ask Galileo to set up an ACH stop payment order. This type of return stops an incoming ACH debit before it is processed by Galileo. You provide the following information: Your customer’s account number Name of the business that originated the ACH debit to block Amount or range of amounts to block. Date or range of dates to block. Galileo compares the business name in incoming ACH debit requests against the business name you provided for the ACH debit block. When there is an exact match, the transaction is blocked. When there is a partial match, you must manually review the transaction to verify the stop payment order. Review ACH stop payment orders in the CST on the ACH Debit Block Review page. Federal benefit enrollment Federal benefit enrollment is a process that informs the U.S. federal government to send federal benefits to a customer via ACH deposit. Use the Create Federal Benefit Enrollment endpoint to enroll a customer. The FBEVA and ENIAN parameters must be set to enable Federal Benefit Enrollment. Plaid integration Plaid integration with Galileo is a simple way for customers to move funds between accounts via ACH. You place Plaid’s front-end module on your app or website. When your customer verifies an external bank account using Plaid, Plaid sends you a public token and account ID that you can use to generate a unique processor token for the external account. Galileo can provide you with instructions for Plaid integration. When you send a call to the Add ACH Account or Create ACH Transaction endpoint, pass the processor token through the endpoint instead of the account number and routing number. 📘NoteGalileo uses Plaid Identity API endpoints to retrieve identity information and compare against the Galileo stored account holder information. We can work with you to customize the match requirements to best meet your business's needs. See Plaid's documentation about integration with Galileo at plaid.com/docs/auth/partnerships/galileo/. Incoming ACH account verification An external originator can verify your customer’s account information before making an incoming ACH request for the first time. This often occurs for a new recurring ACH transaction. These are common methods for verifying the receiver’s account: Prenotification — The originator posts a non-monetary transaction that indicates the intent to transfer funds. A successful prenotification verifies that the receiver’s account is valid. Microtransactions — The originator makes small test deposits to the receiver’s account, then debits the same amount out of the receiver’s account. A successful series of micro-deposits and micro-debits verifies that the receiver’s account is valid. Bank login verification — Some banks support applications that allow account holders to add and verify their account information. Plaid verification is one example of this. Galileo setup These internal parameters must be set at Galileo for ACH, according to your use case. ParameterLevelDescriptionACCRDProgram or productControls whether to allow incoming ACH credit requests to move funds into the customer account.ACDBTProgram or productControls whether to allow incoming ACH debit requests to move funds out of the customer account.ACDBXProgram or productControls whether you participate in the approval of incoming ACH debit requests via the External Trans API.ACHCAProgram or productControls whether to verify that the receiving account is active before posting an incoming ACH debit request.ACHCBProgram or productControls whether to check account balance for insufficient funds before posting an incoming ACH debit request. If this parameter is set to N, an incoming debit may drive the balance negative, depending on settings for ACHDN and ACHOD.ACHDNProgram or productControls whether an incoming ACH debit request to move money out of a customer account is allowed to drive the account balance negative. MBCHS must also be set.ACHODProductControls whether an incoming ACH debit request to move funds out of the customer account can draw funds from an overdraft account when there are insufficient funds in the primary account.ACHPTProductSpecifies the number of hours after midnight to post outgoing ACH debit and incoming ACH credit. When this parameter is not set, outgoing ACH debit and incoming ACH credit post at midnight. If Same Day ACH is also enabled, funds may post one day earlier. Hold days go into effect immediately, but when ACHPT is set, it requires a refresh overnight.ACHRQProgram or productControls whether you participate in the approval of ACH returns. When set, all ACH returns except R01 and R03 are set to status: i (pending approval).ACHSDProgramControls whether Same Day ACH transfers are enabled and processed as Same Day transfers.ACOHDProductSpecifies whether to override the default hold days, using an optional parameter called holdDays in the Create ACH Transaction endpoint. Sponsor bank approval is required to use this parameter.ACSTSProgramSpecifies the acceptable account statuses to allow an incoming ACH credit request to move funds into the customer account.BALMCProgramControls whether Galileo checks the balance and assesses fees for outgoing ACH credit transactions. Clients that maintain their own ledger should set this parameter. This affects transactions created with the Create ACH Transaction endpoint.BTBEIProgramControls whether to include the business ID in the Nacha file for a business-to-business ACH transfer. BTBPG must also be set. If this parameter is not set, then BTBPI must be set.BTBPGProgramControls whether the program is a business-to-business program.BTBPIProgramControls whether to use a custom identification number in the Nacha file. BTBPG must also be set. If this parameter is not set, then BTBEI must be set.EAIAAProductControls whether all accounts have early access to ACH deposits or only accounts with feature type 7 (ACH early access) set to Y have early access. FBEEA must be set to enable early access.FACHAProductControls whether incoming ACH credit or debit transactions trigger ACHR: ach_debit_fail event alert when the transaction returns status: E (error) or status: R (bad routing number).FBEEAProductSpecifies the number of days before the effective deposit date that the account holder has early access to ACH deposits. This parameter is required to enable early access to ACH deposits for all accounts, including accounts with feature type 7 set to Y (enable early access).FBEVAProductEnables Federal benefits enrollment and specifies product IDs that share a Federal benefits enrollment virtual account balance for incoming ACH credit.HDACHProductControls whether to calculate hold days for ACH transactions in terms of business days instead of calendar days.LMACHProductSpecifies the minimum and maximum amounts for an ACH debit request that is set up with the Customer Service Tool.MBCHSProductControls the minimum amount that must remain in the customer account after an outgoing ACH credit moves funds out of the customer account.NTSAAProductControls whether to send the ACRT: ach_return event message when an originated ACH transfer is returned.Updated 2 days ago Table of Contents Incoming and outgoing transactions ACH credit and ACH debit Nacha file Decisions to make before setting up ACH ACH posting order at Galileo ACH accounts Setup for ACH transactions ACH hold days ACH Hold Days Override Same Day ACH ACH early access ACH vs. bill pay ACH returns and stop payment orders Outgoing ACH returns Incoming ACH returns ACH stop payment orders Federal benefit enrollment Plaid integration Incoming ACH account verification Galileo setup "
436,docs.galileo-ft.com/pro/reference/api-reference-events-api-agserv-pin-change-fail,"agserv_PIN_change_fail Codes — ADPE, AFPE Event trigger — Staging a PIN change is unsuccessful. Process — This process contains the event trigger: Galileo receives a PIN-set form via direct POST or direct render. Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" code X This field is present in the event message only if the PIN-set change attempt was made using the Direct POST method, which corresponds with the ADPE event code. See HTTP 302 redirect codes for possible values. Example: ""-101"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ADPE"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""agserv_PIN_change_fail"" Example JSON# agserv_PIN_change_fail example: { ""balance_id"": ""20211"", ""code"": ""-101"", ""msg_event_id"": ""243693"", ""msg_id"": ""ADPE"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""agserv_PIN_change_fail"" } Table of Contents Fields Example "
437,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-opt-in,"overdraft_opt_in Code — ODIN Event trigger — Account feature 17 changes to P (participating). The core account is created in a participating state because ODOPT is set. An overdraft account is created with ODOPT set. The core account opts in to overdraft after previously opting out of an existing overdraft account. Processes — These processes contain the event trigger: Program API endpoints: Create Account for the core account with ODOPT set. Set Account Feature with featureType: 17 and featureValue: P. Add Account for the overdraft account with ODOPT set. Customer Service Tool Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODIN"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_opt_in"" Example JSON# overdraft_opt_in example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODIN"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_opt_in"" } Table of Contents Fields Example "
438,docs.galileo-ft.com/pro/changelog/march-2021,"March 2021 Modify Pending Deposit Status Return Codes enumeration The previous version of the enumeration contained multiple codes that are no longer supported. The current version displays only those codes that are supported. PIN Retrieval Service guide Use the PIN Retrieval Service to display a CAPTCHA image of the cardholder's PIN without the PIN traversing your system. HMAC example update In About Events API, we fixed these errors: In the example HTTP request header, these fields contained incorrect values: Content-Length Signature token_type The alphabetization of entries in the hashmap was erroneous. Get Account Cards correction In the response schema for Get Account Cards, we updated the data type for cards from string to object. "
439,docs.galileo-ft.com/pro/reference/api-reference-about-the-loan-api,"About the Loan API The Loan API is a separate system from Program API, but shares certain conventions for client development ease of use. For common errors, the Lending system shares status codes with Program API. Other errors, specific to the lending system, have four-digit prefixes unique to that Loan API endpoint. Base URL The Loan API is only provided via a tenanted domain in Galileo’s client validation and production environments. During setup with Galileo, you will be provided with a domain unique to you that must be used for all Loan API calls. Versions There is currently one supported version, 1.0, of the Loan API. While developing against the Loan API, please anticipate that the version component of the URI path can change as we develop changes to the Loan API endpoints. In cases where we must introduce breaking changes, they will be introduced behind a new API version. Authentication The Loan API uses the same IP address whitelisting and credential approach as the Program API. You can choose to use their existing credentials or be issued new credentials for use with the Loan API. Follow the authentication steps for the Program API. Connectivity The Loan API does not have a dedicated connectivity endpoint. Basic credential validation and connectivity can be validated by calling one of the system’s read endpoints, such as getLoanStatus with an invalid loanId. The call should connect, authenticate, and return a 1202-01 error indicating an invalid loan id was used. This procedure should not be used as part of an automated process. Endpoints The Loan API requests and responses are conventional and are similar to Program API. Requests are made with form encoded parameters in HTTP posts. Responses are available as JSON messages with snake_case field names.Table of Contents Base URL Versions Authentication Connectivity Endpoints "
440,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-negative-balance,"overdraft_negative_balance When the overdraft is paid off and the available core balance is zero or higher, this event will be triggered again the next time the core account draws on overdraft. For more information see Overdraft Workflows Code — ODNB Event trigger — The core account is driven negative by an authorization for the first time after being positive. Process — This process contains the event trigger: Authorization request over a payment network's rails Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODNB"" od_f_open_to_buy Available overdraft balance minus pending fees. Example: ""120.00"" od_open_to_buy X Available overdraft balance. Example: ""340.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: `""overdraft_negative_balance"" Example JSON# overdraft_negative_balance example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODNB"", ""od_f_open_to_buy"": ""120.00"", ""od_open_to_buy"": ""340.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_negative_balance"" } Table of Contents Fields Example "
441,docs.galileo-ft.com/pro/reference/post/modifyrppsbiller,"Modify RPPS Biller The table below lists status codes that apply to this specific endpoint. Status CodeCode Description581-01amount, nextDate, and endDate are required for scheduled bill payment581-02Biller not associated to account581-03Biller not foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
442,docs.galileo-ft.com/pro/reference/post/getaccountbyid,Get Account by ID This endpoint returns customer data such as enrollment status and onboarding date as well as a list of all accounts associated with the customer.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
443,docs.galileo-ft.com/pro/docs/about-accounts,"About Accounts This guide explains how accounts are structured in the Galileo system and which account types are relevant to the API consumer. This guide does not explain the many account characteristics that a program or product may support. Account types In the Galileo system, an account can be either a primary account or a secondary account. The purpose of creating secondary accounts is to create relationships between accounts in the Galileo system. In most cases, the related accounts all belong to the same customer, although the secondaries can also belong to someone else. In some cases, the secondaries are all business accounts that draw on the same fund. It is up to you whether to use the primary/secondary linkage inside the Galileo system or whether to use your own logic to set up relationships among accounts. If you use the primary/secondary linkage in the Galileo system, the following will be true: You can share account balances between a primary account and its secondary accounts. The CST shows which accounts are related. You can easily link naturally related accounts such as a DDA and its overdraft account. You can add a secondary account to another secondary account, but only when using the Add Account endpoint. With the Create Account endpoint, secondaries must be linked to primaries only. Galileo sets up and maintains the primary product parameters to indicate which products can be its secondaries, and also how many secondaries a primary account can have. During customer onboarding the primary account must be created first and the secondaries later. Primary accounts A primary account is the first account you create when onboarding a new customer. To create this account you must pass the customer's full name, address, and other personal information that goes into the customer record. You will also need this information to run CIP on the customer. (See Customer ID Verification (KYC/CIP) for more information.) In almost all cases you will use the Create Account endpoint to collect and submit this information. (See Creating an Account for instructions on using this endpoint.) Primary accounts are typically DDAs with a debit card, but your use case may require a different type of primary account such as a health savings account, credit account, or instant-issue card. Secondary accounts Secondary accounts represent additional products that a customer wishes to acquire, such as an overdraft account, a savings account, or an additional card. When creating a secondary account for a customer who already has a record in the Galileo system, you use the Add Account endpoint. (See Adding an Account for instructions on using this endpoint.) It is also possible to create a secondary account that belongs to someone other than the primary account owner. For example, Gerry has a primary account for a debit card and his wife Sylvia also wants a debit card. Sylvia's card account can be created as a secondary account to Gerry's account. This arrangement makes it easy to retrieve data on both accounts at the same time. In this case you would use Create Account so that you can create a customer record for Sylvia and verify her identity. Things to keep in mind about secondary accounts: A maximum of 3000 secondary accounts can be associated with a primary account; however, you may set a lower limit at the product level. By default you cannot add multiple secondary accounts with the same product ID. To enable multiple secondary accounts with the same product ID, set SECLM on the secondary account. A secondary account can belong to the same customer or it can belong to a different customer than the primary customer. Product settings can dictate that a minor child meet a minimum age requirement to obtain a secondary account. 📘NoteAlthough there is no flag in the Galileo system to specifically mark primary and secondary accounts, you can view the relationships in the CST. Primary and secondary account scenarios These example scenarios demonstrate some of the ways to set up primary and secondary accounts. One customer with multiple secondary accounts In this scenario you offer these products: Product ID 5 — DDA with a debit card Product ID 9 — Overdraft account Product ID 4 — Savings account A new customer, Leona Álvarez, signs up for the DDA. You create this account by calling Create Account and include these input parameters: Name, address and personal information prodId: 5 The endpoint returns 33333 as the PRN (pmt_ref_no) and 99999 as the PAN. The balance ID (galileo_acct_no) is 2222. You offer an overdraft account for the DDA, and Leona opts in. You call Add Account with these parameters: accountNo: 33333 prodId: 9 The endpoint returns pmt_ref_no: 66666 and balance ID 4444. Leona also wants a savings account. You call Add Account again with these parameters: accountNo: 33333 prodId: 4 The endpoint returns pmt_ref_no: 77777 and balance ID 5555. This is the end result of the above steps: Two customers with the same primary account In this scenario you offer three products: Product ID 2 — DDA with a debit card Product ID 3 — A version of the above product that is designed for adolescents Product ID 8 — Savings account A new customer, Adele Johnson, signs up for the DDA. You call Create Account with these parameters: Name, address and personal information prodId: 2 The endpoint returns pmt_ref_no: 33333 and 99999 as the PAN. The balance ID is 0101. Adele also wants the savings account, you call Add Account with these parameters: accountNo: 33333 prodId: 8 The endpoint returns pmt_ref_no: 22222 and balance ID 1212. Adele wants a card for her adolescent son Andy, and she wants Andy's account associated with hers. You call Create Account with these parameters: Andy's name, address and personal information prodId: 3 primaryAccount: 33333 The endpoint returns pmt_ref_no: 66666 and 55555 as the PAN. The balance ID is 2323. This is the end result of the above steps: 📘NoteDo not confuse primary and secondary accounts with primary and secondary products. At the time program managers set up a product they have the option of creating a secondary product with a separate product ID. The secondary product typically has lesser features compared to the primary product—such as a lower spending velocity—and is intended for minors to use. Accounts for minors If your program settings permit it, non-adult (under 18) customers can obtain secondary products. Specify the minimum age for eligible customers in the DOB product parameter. Where a minimum age is specified, the dateOfBirth parameter is required to ensure that the minor is eligible for the product. Joint accounts and shared balances It is not currently possible to set up true joint accounts in the Galileo system, wherein one account has multiple account holders. Instead, you can use the shared balance feature. A shared balance is a bank account that multiple products (accounts) can transact on. The accounts can belong to the same customer or to different customers. With shared balances you can support scenarios such as these: A customer wants multiple products from the same provider and wants all of those accounts to transact on the same bank account. A parent wants a separate card for a child, and both the parent and child will transact on the same bank account. A customer wants to add a virtual card to share the same bank account as their physical card. Two spouses want the same product, and want both product accounts to transact on the same bank account. About 3000 secondary accounts can share a balance with a primary account; however, product settings may limit the number of secondary accounts or secondary products a primary account can have. If you are planning to use a high number of secondary accounts with shared balances for corporate spending cards, Galileo recommends using Real-Time Funding instead, which scales better than using shared balances and provides superior reporting and account management. A secondary account can share a balance only with the specified primary account. 🚧WarningOnce you share a balance between accounts, you cannot ""unshare"" the balance. Instead, you would have to close the accounts and create new ones without shared balances. Likewise, you cannot share balances after the accounts have already been created. Shared balances scenarios The following scenarios demonstrate some of the ways to set up shared balances. One customer, two products In this scenario, Ana Ramírez, an existing customer, wants another product and would like the second product to transact on the same bank account as the first product. You already called the Create Account endpoint to create Ana's first account (primary account), with PRN 444 and balance ID 2222. To create the secondary account with a shared balance, call the Add Account endpoint with these parameters: accountNo: 444 sharedBalance: 1 This is the relationship that is set up: Two customers, one product In this scenario an existing customer, Simón Ramírez, wants to add an account for his son, Simón Ramírez, Jr. The product IDs are: Product ID 6 — DDA with a card Product ID 7 — DDA with a card, configured specially for adolescents For this scenario, you already called the Create Account endpoint to create the father's account (primary account). The endpoint returned pmt_ref_no: 444 and balance ID 2222. To create the account for the son, call Create Account again with these parameters: Simón Ramírez Jr.'s name and personal information primaryAccount: 444 prodId: 7 sharedBalance: 1 This is the relationship that is set up: Getting related account information When two or more accounts share a balance, you can pass includeRelated: 1 with some of the endpoints to retrieve information for all accounts that share the same balance. For example, with the Get Transaction History endpoint you can pass a secondary account number for accountNo and includeRelated: 1 to retrieve data on all accounts with the same balance ID. If accountNo: 333, as in the above example, data for both Simón Ramírez and Simón Ramírez Jr.'s accounts are returned, because they share the same balance ID. If includeRelated: 0, only information for account 333 is returned. If you pass a primary account number for accountNo, by default all accounts with the same balance ID are returned. New account creation In most cases you will use Create Account to create a customer record and a corresponding account record. Other endpoints that create a customer record are: Start Enrollment — Creates a customer record but not an account. Use this endpoint when you want to wait until after a customer passes ID verification before creating an account. See Start Enrollment process in Customer ID Verification (KYC/CIP) for more information. Create Virtual Card Account — Creates a virtual card and returns the full PAN. You must be PCI-compliant to use this endpoint, and the product ID must be for a virtual card. Customer record fields Customer name Customer billing address Customer shipping address Phone numbers Date of birth Email address Identifiers such as SSN or driver license number Occupation and income source Account record fields PRN — Payment reference number. A Galileo-generated account identifier that is unique across the Galileo system. This is the primary identifier for an account. Status — The account status. See the Account Statuses enumeration. Balance — The amount of funds present in the account that is available to spend. Balance ID — An identifier that corresponds to the bank account where customer funds reside. Application date — The date the customer is first onboarded to the Galileo system. Currency code — The denomination of the funds, such as U.S. dollar or Mexican peso. Routing number — The identifier for the bank where the account's funds reside. Product ID — The identifier for the specific offering of a program. Customer record — The information in the customer record. Savings interest object — Where applicable, the amount of interest accrued. Transactions — List of settled transactions made on the account. Authorizations — List of pending authorizations for the account. Pending fees — List of fees to be charged to the account. Holds — List of holds for the account. Card record fields See Card records in Retrieving Card Information for the fields. Create Account vs Add Account Whether to use the Create Account endpoint instead of Add Account is determined by whether the customer already exists in the Galileo system: Create an account to onboard new customers, including a new customer who will be the owner of a secondary account. Add an account to an existing customer who wants additional products such as savings or overdraft accounts. You cannot use Add Account to deposit funds into the account, nor does it run CIP. For more information on how to add overdraft accounts, see Creating an Overdraft Account. Create Account and Add Account use cases Use caseEndpointParametersOnboard a new customerCreate AccountprimaryAccount — Do not populate prodId — Any product IDsharedBalance — Do not populate.Add a secondary account (another product) to an existing customerAdd AccountaccountNo — Primary account of existing customerprodId — Must be permitted by the primary account product settingssharedBalance — (Optional) 1 to share the balance with the primary account; otherwise, set to 0 or do not populateAdd an account for a dependent minor (under 18) to a parent's account, with shared balanceCreate AccountprimaryAccount — Parent's primary accountprodId — Secondary product ID; must be permitted by the primary account product settingssharedBalance — Required. 1 to share the balance with the primary accountcipStatus — 2 if you are using Galileo's CIP; otherwise, do not populatedateOfBirth — Required if product settings have a minimum ageAdd an account for a child to a parent's account, without shared balanceCreate AccountprimaryAccount — Parent's primary accountprodId — Secondary product IDsharedBalance — Required. Set to 0 cipStatus — 2 if you are using Galileo's CIP; otherwise, do not populatedateOfBirth — Required if product settings have a minimum ageOnboard a new customer who will be sharing a balance with an existing customer's accountCreate AccountprimaryAccount — Primary account of existing customersharedBalance — 1Create a virtual card account for a new customer (You must be PCI compliant to use this endpoint.)Create Virtual Card AccountprimaryAccount — Do not populateprodId — Must be a virtual productAdd a virtual card account to an existing customer, and the virtual card has a different PAN than the primary card. (You must be PCI compliant to use this endpoint.)Create Virtual Card AccountprimaryAccount — Primary account of existing customerprodId — Must be a virtual productsharedBalance — Required. Pass 1 to share the balance with the primary account; otherwise, set to 0. Account identifiers In the Galileo system you will encounter several types of account identifiers: PRN The payment reference number is a unique, 12-digit Galileo-generated account identifier. Galileo recommends that you use this number to identify accounts, instead of card numbers or customer IDs, because a PAN can change but a PRN never does. A permanent identifier prevents maintenance headaches when the other identifiers change. The PRN comprises three parts: 3-digit prefix, unique per Galileo client 8-digit account number, which in new programs begins with 101 and increments to 102 when the five remaining digits are exhausted 1-digit checksum The PRN is also the number that customers provide to their banks when setting up ACH accounts or when setting up direct deposit from an employer. The Program API returns the PRN as pmt_ref_no. In most cases, you can use the PRN for accountNo in the Program API; however, some endpoints will return an error if there are multiple cards associated with the PRN (not multiple secondary accounts). In that case, use the PAN or CAD instead. PAN The primary account number is the globally unique 16-digit number that is displayed on a card. The first 6–8 digits are the BIN, which is assigned by your bank. If you are PCI compliant, you can receive the full PAN in Program API responses, Events API messages, the RDFs and the CST. If you are not PCI compliant you receive a masked PAN. The PAN is also called the ""card number"". See Card elements in the Setting Up a Card Program guide for more information. Galileo account number Also called the ""balance ID,"" the Galileo account number is an identifier that points to the bank account that the product transacts on. The Program API returns the balance ID as galileo_account_no. Do not pass this number for primaryAccount or accountNo. External account ID An external account ID is a number you provide that can be used for your own purposes. Some examples uses of this value are: Mapping the customer account to your back-end systems Communicating with the embosser to specify which art to use on the card (See Specifying a card design in the Design a Card guide for more information.) The externalAccountId parameter is passed in the Create Account endpoint. You can retrieve the external account number with the Verify Account endpoint and edit it with the Update Account endpoint. Do not pass this number for primaryAccount or accountNo. ACH account number An ACH account points to a customer's external bank account, which can be used for such transactions as direct deposit and interbank transfers. An ACH account is set up using the Add ACH Account endpoint. See About ACH for more information. Account identifiers in the Galileo system This table is a summary of how account identifiers are represented across the Galileo system. Galileo systemPRNGalileo account numberExternal account IDACH account numberAuth APIprnn/an/an/aEvents APIprnbalance_idn/aach_acct_idExternal Trans APIaccount_numberprnn/an/an/aProgram API requestsaccountNoprimaryAccountn/aexternalAccountIdachAccountNoProgram API responsespmt_ref_nogalileo_account_nobal_idexternal_account_idach_account_idRDFsPRNGALILEO ACCOUNT IDEXTERNAL ACCOUNT NUMBERn/a Virtual card accounts A virtual card exists only on a customer's mobile device, on the web, or in an email: it is not issued as a physical card. See Digital cards in the Choose a Card Strategy guide and Setup for Virtual Cards for information on virtual card accounts. Account status An account's status is designated by a single capital letter in the Galileo system, as shown in the Account Statuses enumeration. 📘NoteAccount status is not the same as card status. The statuses may be similar in some cases, but they operate independently. See the Card Statuses enumeration. By default, when a card account is first created, it is in status: W (waiting to be processed). (For a different default status, set the XAACT parameter.) The Galileo system runs an account-setup process, a cron job that runs every 5–30 minutes, depending on your product settings. When successful, the account is put into its next state, according to your product parameters. Most virtual card accounts and Digital First card accounts are put into status: N (active). A conventional physical card would be moved into status: X (waiting for emboss). An emboss process periodically checks for physical card accounts in status: X and collects the emboss information to send to the card embosser. At this point the account is moved to status: Y (ready to activate), and when the card is mailed to the cardholder and activated it is changed to status: N (active). See the Card Statuses guide for information on how card statuses change during the emboss process. To manually change an account status, use the Modify Status endpoint. Consult Modify Status Codes for a list of values for the type parameter. Be sure that the Modify Status type changes exactly what you want: the account status, the card status or both. Account features Most of an account's features are set at the product level; however, a few features can be set or modified at the account level, such as allowing international transactions or sending paper statements. To set or change these features use the Set Account Feature endpoint. Defaults for some of these features can also be set at a product level. Contact Galileo to set these defaults. Also see About Account-Level Authorization Controls for authorization limits to set at an account level. Depositing funds into accounts According to your product settings you have the option to deposit funds into an account at the time of account creation or you can deposit funds later. Customers can also deposit funds into their accounts if your product settings permit it. The sooner funds are deposited into a debit account, the more likely the cardholder is to start spending and to stick with the product. Consult this table to see how to use the endpoints for each use case. Use caseEndpointParametersDeposit funds into an account at the time of account creation; typically for instant issue and gift cardsCreate AccountloadAmount — Must be within the limits in your product settingsloadType — Valid values assigned by Galileo to each clientloadFromAccountNo — Use only if you have created an account within the program for depositing funds into customer accountsDeposit funds into the account at a time other than account creation, using the account you have set up with Galileo for depositing funds into customer accountsCreate PaymentaccountNo — Account to receive the deposittype — Value assigned to you by GalileoDeposit funds into the account at a time other than account creation, using an account within your program for depositing funds into customer accountsCreate Account TransferaccountNo — Account to transfer funds fromtype — Value assigned to you by Galileo transferToAccountNo — Account to receive the depositCustomer deposits funds into their account from an external bank accountCreate ACH TransactionaccountNo — Account to receive the depositachAccountId — The ACH account to draw fromdebitCreditIndicator — D to move funds from the ACH account into the customer accountCustomer sets up recurring deposits from an employer or benefits agencyDirect Deposit Switch productSee Setting Up Direct Deposit Switch for instructions.Customer deposits funds into their account from another account that they have with youCreate Account TransferaccountNo — Account to transfer funds fromtransferToAccountNo — Account to receive the deposit Retrieving account information Use these endpoints to retrieve the desired account information.. Column header key A — Get Balance B — Get Account Overview C — Get Account Features D — Get Account E — Verify Account F — Get Savings Interest G — Get Overdraft Balance AttributeABCDEFGPRNXXXBalanceXXXXCurrency codeXStatusXXXProduct IDXGalileo account no. (balance ID)XMerchant category codeXApplication dateXCustomer recordXTransaction countXTransactions (list)XAuthorization countXAuthorizations (list)XPending fees (list)XSavings interest objectXXAccount features (array)XMax load amountXExternal account IDXOverdraft balance (array)X Modifying account information After you have created a new account you can modify customer record attributes using the Update Account endpoint, as long as the account is active (status: N). When sending the Update Account call, you pass only the parameters to be modified. Parameters that are not being modified can be left blank. Do not pass null unless you want to set the parameter's value to null. 📘NoteAccording to the settings in your product parameters, some customer record information may not be modifiable or nullable. See Update Account for details. You can input either a primary or secondary account number to change the associated customer record attributes. Switching to a new product You can change the product ID for an account by following the steps in Switching Products. Closing accounts Because the Galileo system is an official system of record, it is not possible to delete an account from the Galileo system. Legal requirements specify that all activity, including account creation, be stored for a period of several years for auditing purposes. However, an account may be closed, which prevents further transactions from being made on it and deactivates any cards associated with it. The Account Statuses enumeration shows which transactions are valid for each account status. Your product settings determine some of the events that trigger an account closing, such as an account having zero or negative balance for a specified period. Other events such as a stolen or lost card can result in a closed account. (See Lost, Stolen, or Damaged Cards.) Your product settings also determine which procedures must be followed when an account is closed, such as whether to send a check for the remaining balance or whether the cardholder must return the card before receiving a check. See Account Holder Refund for more information. This table shows some of the states that can represent a closed or unusable account and the type parameter in the Modify Status endpoint that moves the account to that status. See Modify Status Codes for all Modify Status types. Follow your business plan to decide when to use these Modify Status types. Also see Card cancelation in the Setting Up a Card Program guide. 📘NoteIf the card is in status: N but the account is in a canceled status, the card cannot be used. Use caseTypeAccount statusNotesClose the account2CChanges the account to status: C but does not change the status of associated cards. When the account is closed the cards cannot be used.Deactivate account and cancel cards13CChanges both the account and associated cards to status: C.Does not close related savings accounts.Deactivate account and cards16ZChanges both the account and associated cards to status: Z.Does not affect related secondary accounts.Cancel without refund all accounts and cards for a customer and all related accounts and cards20ZChanges both the account and associated cards to status: Z.Affects all accounts and cards of the customer, including secondaries.Disable account and active cards23DChanges both the account and associated cards to status: D. Does not affect related secondary accounts. Reversing an account creation If you have created an account in error, follow these steps: Optional. Call Update Account to set the id and id2 values to null, so that the customer can attempt to join again. Call Modify Status with type: 2 to cancel the account. Alternatively, you can use the Customer Service Tool to cancel the account. Events API These event messages represent stages in account creation and management. You can arrange with Galileo to receive the events that correspond to your use case. Some of the events are triggered only by actions taken in the CST, others only by the Program API, and others by both. Click the event to see details: CAPP: app_completed — Account creation is successful. PTID: pass_id — The customer passed Galileo's integrated ID verification FTID: fail_id or BFID: failed_id — The customer failed ID verification ACST: account_status_change — Account status changed (in some circumstance) ADRC: addr_chg — The Program API updated the customer's primary address ECHG: email_addr_change — The Program API updated the customer's email address. PHCH: phone_changed — One of the customer's phone numbers was changed. PCHG: profile_changed — The CST changed customer profile information. CHPC: cardholder_info_changed — The CST changed customer profile information. BNEG: neg_bal — The account has a negative balance today. LBLC: low_balance_notify — The balance has dropped below a specified amount. ACCL: account_closed — The CST closed a customer account. Updated 2 months ago Table of Contents Account types Primary accounts Secondary accounts Primary and secondary account scenarios Accounts for minors Joint accounts and shared balances Shared balances scenarios Getting related account information New account creation Create Account vs Add Account Create Account and Add Account use cases Account identifiers Account identifiers in the Galileo system Virtual card accounts Account status Account features Depositing funds into accounts Retrieving account information Modifying account information Switching to a new product Closing accounts Reversing an account creation Events API "
444,docs.galileo-ft.com/instant/docs/ach-transfers,"ACH Transfers Instant enables you to use ACH Transactions to send money between a Cardholder's Account and their external bank account. These transfers are useful for Account funding. About ACH The Automated Clearing House (ACH) is an electronic funds transfer network that facilitates interbank transfers. Since there are several parties involved, each requiring time to process the request and route the money to the next party, ACH transactions may take two to three business days. ACH transfers are bidirectional. Through Galileo, you are able to initiate ACH credit Transactions (sending money to another Account) and ACH debit transactions (pulling money from another Account). Creating an ACH Transaction Step 1: Create an ACH Account Use Plaid to create an ACH Account. Step 2: Obtain the destination_account_id and source_account_id Obtain the account_id for both Accounts involved in the transfer by sending a GET request to the Accounts endpoint, including the Cardholder's cardholder_id. The response will contain information, including the account_id, about the Spending Account as well as all ACH Accounts that have been created. Note that either the destination_account_id or the source_account_id must be the account_id of the Spending Account. Step 3: Create the Transfer Determine which Account from Step 2 above is the source Account and which is the destination Account. Send a POST request to the Transfers endpoint, including the source_account_id, the destination_account_id and the amount. If the amount is greater than the source Account balance, the request will result in an insufficient_funds error. A successful response contains a source_transaction_id and destination_transaction_id that maps the transfer to the corresponding Transactions. The Account now has a Transaction with a transfer type and an ach subtype in the Transaction History. If the transfer is an ACH credit, it affects the Spending Account balance immediately. If the transfer is an ACH debit, the Transaction has a pending status and won't affect the Spending Account balance until the Transaction is complete, two or three business days after it is initiated. ACH Transfers in Sandbox It is possible to simulate ACH credits and debits in the Sandbox. When you initiate an ACH credit, the Spending Account balance is immediately debited and a transaction appears in the transaction history. When you initiate an ACH debit, the Spending Account balance is not debited and a transaction doesn't appear in the transaction history. In production, it takes a couple of days for these changes to take effect, but there isn't a process that runs in Sandbox to simulate the delayed arrival of ACH debits.Updated over 2 years ago Table of Contents About ACH Creating an ACH Transaction Step 1: Create an ACH Account Step 2: Obtain the destination_account_id and source_account_id Step 3: Create the Transfer ACH Transfers in Sandbox "
445,docs.galileo-ft.com/pro/docs/testing-real-time-funding-in-cv,"Testing Real-Time Funding in CV This guide explains how to test real-time funding (RTF) in the CV environment using the Program API. Do not follow this procedure to test in Production. Along with this guide you might want to read these: About Real-Time Funding — Explanation of what real-time funding is, with use cases. Creating Real-Time Funding Accounts — Properties of RTF accounts and how to set them up. Real-Time Funding Transaction Examples — How various RTF transaction types look in the ledger. In this scenario you will: Create an RTF funding account Move funds into it Create one or more RTF spending accounts Simulate a card authorization and settlement View the authorization/settlement as well as the funding transactions Remember that the CV environment runs on Galileo system time. As desired, download Galileo's Postman collection from the Postman Setup page by clicking the Run in Postman button. Set up the products Work with Galileo to set up your RTF funding and RTF spending products in CV. Galileo recommends that you configure all of the settings that you intend to use in Production. RTF funding product At minimum, the funding product should have these characteristics: Product otype 0 Product category 30 RTF spending product At minimum, the spending product should have this characteristic: Product category 31 Create the accounts Follow these steps to create an RTF funding and an RTF spending account. Create the RTF funding account Call Create Account with these parameters: ParameterValuefirstNameRTF FundinglastNameAccount1prodIdRTF funding product IDbusinessNameRequired if prodId is a business product. In the response, capture the pmt_ref_no (PRN) for future use. Activate the RTF funding account Check the status of the RTF funding account by calling Verify Account with this parameter: accountNo: PRN of the RTF funding account If the account_status is not N, activate the RTF funding account by calling Modify Status with these parameters: ParameterValueaccountNopmt_ref_no of the RTF funding accounttype1 Move funds into the RTF funding account To move funds into the RTF funding account, call Create Payment with these parameters: ParameterValueaccountNopmt_ref_no of the RTF funding accountamount1000typeRL Create an RTF spending account Call Create Account with these parameters. ParameterValuefirstNameJuanlastNameGarciaprodIdRTF spending product IDbusinessNameRequired if prodId is a business product.fundingAccountNopmt_ref_no of the RTF funding account Capture the these values from the response: pmt_ref_no card_id (CAD) last four digits of card_number As desired, create a second RTF spending account, such as a card with a different RTF spending account product ID. Activate the spending card After creating the RTF spending card, wait 15–20 minutes before performing this step to allow the emboss process to run. Skip this step if the RTF spending product has N in the third position of the XAACT parameter, such as with a Digital First card or a virtual card. Call Get Card with the pmt_ref_no or CAD of the RTF spending card as the accountNo. Verify that the embossed_cards object is populated. If it is not, wait 5 more minutes and try again. Inside the embossed_cards object, capture the values of expiry_date and card_security_code. Call Activate Card with these parameters: ParameterValueaccountNoPRN or CAD of the RTF spending accountcardExpiryDateexpiry_date as YYYY-MMcardSecurityCodecard_security_code (In CV it is always 123)cardNumberLastFourOptional. Last four digits of card_number. If there is more than one card associated with the PRN, you must populate this parameter. To verify that the card has been activated, call Get Card with the PRN or CAD of the card for accountNo. Inside the embossed_cards object you should see status: N. View account relationship To see the relationship between the RTF funding and RTF spending accounts, call Get RTF Account Relationship with this parameter: accountNo: PRN of the RTF funding account, which returns all of the spending accounts that are associated with it. Perform transactions To simulate a simple card transaction in CV, call the Create Simulated Card Authorization endpoint with these parameters: ParameterValueaccountNoPAN or CAD of the RTF spending cardamount10associationmc_authmerchantNameCentral MarketcurrencyCodePopulate this parameter only when the currency of the program is not 840 (U.S. dollar): 124 (Canada), 484 (Mexico), or 170 (Colombia). Capture the auth_id for future use. Settle the transaction by calling the Create Simulated Card Settlement endpoint with these parameters: ParameterValueaccountNoPAN or CAD of the RTF spending cardauthIdThe auth_id from the previous endpoint response.associationmc_authamount10 or blank View the RTF transactions To see the transactions that were created, call Get All Transaction History twice: accountNo — PRN of the RTF funding account accountNo — PRN of the RTF spending account For the RTF spending account you should see four transactions. The auth_id and source_id are example values only. trans_codeamtauth_idsource_idcalculated_balanceADSY102222444510AUA-10222222220BO510None222210SE5-10222222220 For the RTF funding account, you should see two transactions. trans_codeamtauth_idsource_idcalculated_balancePMRL1000null44401000ADFY-1022224444990 Simulate a Visa transaction To simulate a Visa transaction instead of the Mastercard transaction shown above, pass association: visa. In the response to Get All Transaction History, the transaction codes will be: VIA — Authorization BVA — Backout VSA — Settlement To see details of how an RTF purchase appears across Galileo systems, see Scenario 18: Real-Time Funding. 📘NoteFor other types of transactions, see the Simulating Card Transactions guide. Consult Real-Time-Funding Transaction Examples to see how RTF transactions appear in the ledger.Updated 4 months ago Table of Contents Set up the products Create the accounts Create the RTF funding account Activate the RTF funding account Move funds into the RTF funding account Create an RTF spending account Activate the spending card View account relationship Perform transactions View the RTF transactions "
446,docs.galileo-ft.com/pro/page/billpay/rejected,"billpay_rejected Code — BRRJ Event trigger — Mastercard rejects an RPPS payment. Process — This process contains the event trigger: Galileo processes an RPPS return file All fields are strings. FieldRequiredDescriptionbalance_idXThe balance ID, also called the galileo_account_number. Example: ""20211""billpay_idXUnique identifier (billpay_transaction_id) for this billpay transaction. Example: ""2436543""msg_event_idUnique Galileo-generated identifier for this message. Example: ""243693""msg_idThe four-letter code to identify this event. Example: ""BRRJ""pmt_ref_noXGalileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022""prod_idXThe product ID of the account. Example: ""1701""prog_idXThe program ID of the account. Example: ""305""rjreasonXReason for rejecting the payment.rpssamtXAmount of the RPPS payment. Example: ""57.91""rpssbillerXName of the RPPS biller. Example: ""Eastern Utilities""timestampXDate-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST""typeXThe name of this event: ""billpay_rejected"" "
447,docs.galileo-ft.com/pro/changelog/june-2021,"June 2021 Guides added We added these new guides: About Adjustments — How adjustments work in the Galileo system, including the endpoints and tools for creating, reversing, and viewing adjustments. About ACH — A general overview of the ACH process and an explanation of how incoming and outgoing ACH work in the Galileo system. New enumeration We added a new Global Response Statuses enumeration that contains the response statuses that are common to most endpoints. New ACRT field The ACRT: ach_return Event webhook now includes the ach_acct_id field. debitCreditIndicator clarification The description for the debitCreditIndicator parameter of the Create ACH Transaction endpoint was updated to clarify that the debit or credit is relative to the recipient account rather than the external account. Updated categoryCode description We updated the categoryCode description of the Modify Pending Deposit Status endpoint to include the currently valid values. PIN-change procedures update To the Direct Render PIN-Change Procedure and Direct POST PIN-Change Procedure we added information about the PNCH: system_pin_change event, which is triggered by a successful PIN change. New Auth API fields For Auth API v2 and v3, two new fields have been added to the merchant object: merchant_state — Two-letter designator for the merchant's state. terminal_network — Whether the terminal belongs to the Visa PLUS Alliance or Allpoint network. You need special configuration to receive this data; otherwise, the field contains None. New roundup endpoints We added two new endpoints: Set Roundup Accounts — Specify a bank-owned roundup account that receives contributions for charity. Get Roundup Accounts — Retrieve a record of all accounts linked to a roundup account and the contribution percentage from each account. New Create Bill Payment status code We added status code 433-06 to the Create Bill Payment status code table. This status code indicates that a bill payment was attempted on an inactive customer account. "
448,docs.galileo-ft.com/pro/reference/post/ping,Ping Testing access from an automated monitoring service Integrating with an API call to confirm assumptions and validate access See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
451,docs.galileo-ft.com/pro/reference/api-reference-federal-benefit-enrollment-statuses,Federal Benefit Enrollment Statuses StatusDescriptionCConfirmedDDepositEEnteredMResubmittedRReturnedSSubmittedTTimeoutUUpdated 
452,docs.galileo-ft.com/pro/changelog/july-2021,"July 2021 Clarified events in the Events API In the Events API reference, we added more context to the descriptions of many of our events, including what triggers the event and which processes may elicit that trigger. One example is the CAPP: app_completed event, which is triggered by successful account creation. We plan to add similar context to the remaining event descriptions soon. Corrected About Card Transactions guide The E-commerce section of the About Card Transactions guide erroneously stated that AVS checks with response code 85 were recorded in the CST as denied transactions. The text has been corrected to say that approved AVS checks are not visible in the CST but that denied checks are. Corrected About Adjustments flowchart On the Create adjustment workflow, we corrected the decision on the ""Overdraft is successful"" diamond and corrected the start of the overdraft subflow. Card Transaction Scenarios guide For Galileo clients only there is a new Card Transaction Scenarios guide that contains detailed examples of various transaction types such as preauthorization/completions (gas pumps), reversals, ATMs, international transactions, card loads, incremental authorizations, tokenization, and unmatched authorizations. Included is a narration of the sequence of events plus tables showing what data to expect from the Auth API, Events API, Program API, and RDFs. Ask your Galileo representative for the PDF. Name length increases The maximum character limits for the firstName, middleName and lastName parameters have been increased from 30 to 40 characters for these endpoints: Create Account Update Account Create Virtual Card Account Start Enrollment Update Enrollment Debit/credit description updated For the Create Adjustment endpoint, the description for the debitCreditIndicator parameter was updated to clarify that the account in accountNo is being debited or credited. New error code A new error code 467-06 was added to Activate Card to indicate that the card is in a status not permitted for activation by product parameter CRDBL. This error code is currently in limited production, so you might not receive it yet. Response schema updates The field descriptions for the response schema of Create Provisioning Request have been updated. Updated Transaction Types enumeration The Transaction Types enumeration now lists the transaction types for authorization and settlement transactions and shows which activity types are possible with each transaction type. Guide added plus updates to existing guides We added the About Card Transactions guide, which provides a tutorial on how card transactions work in the card-processing ecosystem, shows example transaction sequences and describes what you can expect from different merchant types. To complement this new guide, we've updated About Transactions and Transaction History to reflect the information in the new guide. Of especial interest are the revised Transaction sequence examples in the Transaction History guide, which include more information to help you track transactions across your system. New error code The PIN Retrieval Service has a new error code: 401. When an image is not found the error code is 404, and for all other errors the code is now 401. New Auth API fields To versions 2 and 3 of the Auth API we added two new fields to the amounts object: amt_til_limit and nearest_limit. Guide added The About Mobile Wallets guide provides instructions for setting up mobile wallets and explains how manual provisioning and push-provisioning work. "
453,docs.galileo-ft.com/pro/reference/api-reference-events-api-lost-stolen-card-no-replacement,"lost/stolen card no replacement Code — LSCN Event trigger — The card status is updated to L or S without triggering the replacement operation. Processes — These processes contain the event trigger: Modify Status endpoint with one of these type values: 8 — Lost, without replacement 9 — Stolen, without replacement Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""LSCN"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four X The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""lost/stolen card no replacement"" Example JSON# lost/stolen card no replacement example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""LSCN"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""lost/stolen card no replacement"" } Table of Contents Fields Example "
454,docs.galileo-ft.com/pro/page/scenario-19-force-post,"Scenario 19: Force Post A merchant does not obtain authorization for a $55 purchase because of technical difficulties with the card reader. The merchant later sends a clearing message for the transaction to its acquirer. The following are true: The initial available balance is $1000. The network is Visa. Sequence of events Events in the same step have the same timestamp. Visa sends a batch file with the –55.00 transaction. Galileo adds authorization and backout entries to the ledger and then posts –55.00 to the account. The available balance is 945.00. Galileo sends a SETL: setl webhook. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API This transaction does not pass through the Auth API. Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampSETLsetl55.00227709452021-08-14 19:14:38 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME55.00-22775008142021 19:14:38 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDTRANSACTION DATE/TIMEPOST DATE55.00-2277VSM227708142021 19:14:3808142021 Get Authorization History response This transaction is not returned by this endpoint. Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-5522770VSM2021-08-14 19:14:382021-08-14 19:14:38 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecred_indauth_tspost_ts-5522770VIM2277945Y2021-08-14 19:14:382021-08-14 19:14:385522770BVM22771000YNone2021-08-14 19:14:38-5522770VSM2277945Y2021-08-14 19:14:382021-08-14 19:14:38 "
455,docs.galileo-ft.com/pro/page/dispute-questionnaire-fraudcardsecure,"Dispute Questionnaire: FraudCardSecure This response is from ~May 2022. Your response will probably be different from this one. Your interface must therefore be able to handle genuinely dynamic input. For that reason, you should not cache these questionnaires, because new questions will be added as network requirements change. Questions that have blank or null answers can be ignored. JSON{ ""statusCode"": 0, ""status"": ""Success"", ""processingTime"": 308.655, ""responseData"": {  ""questionnaire"": {  ""questionList"": [   {   ""questionList"": [    {    ""questionList"": [     {     ""type"": ""YesNo"",     ""identifier"": ""CardPossessionInd"",     ""displayText"": ""Do you always have possession of the card?"",     ""dataType"": ""String"",     ""answerList"": [      {      ""identifier"": ""Yes"",      ""displayText"": ""Yes""      },      {      ""questionList"": [       {       ""type"": ""Text"",       ""identifier"": ""CardLocation"",       ""displayText"": ""Where is the card usually kept?"",       ""dataType"": ""String""       },       {       ""type"": ""Text"",       ""identifier"": ""CardNoPossession"",       ""displayText"": ""In what circumstances do you not have the card in your possession?"",       ""dataType"": ""String""       }      ],      ""identifier"": ""No"",      ""displayText"": ""No""      }     ]     },     {     ""questionList"": [      {      ""type"": ""YesNo"",      ""identifier"": ""HasAuthorizedOthers"",      ""displayText"": ""Have you ever authorized another person to use your card?"",      ""dataType"": ""String"",      ""answerList"": [       {       ""questionList"": [        {        ""type"": ""Text"",        ""identifier"": ""AuthorizedName"",        ""displayText"": ""Who has authorization to use your card?"",        ""dataType"": ""String""        }       ],       ""identifier"": ""Yes"",       ""displayText"": ""Yes""       },       {       ""identifier"": ""No"",       ""displayText"": ""No""       }      ]      },      {      ""type"": ""YesNo"",      ""identifier"": ""HasSharedPIN"",      ""displayText"": ""Have you ever shared your Personal Identification Number (PIN)?"",      ""dataType"": ""String"",      ""answerList"": [       {       ""questionList"": [        {        ""type"": ""Text"",        ""identifier"": ""SharedPINName"",        ""displayText"": ""Who did you share it with?"",        ""dataType"": ""String""        }       ],       ""identifier"": ""Yes"",       ""displayText"": ""Yes""       },       {       ""identifier"": ""No"",       ""displayText"": ""No""       }      ]      },      {      ""type"": ""YesNo"",      ""identifier"": ""AuthorizedPerson"",      ""displayText"": ""Have you confirmed that this purchase was not made by the authorized person?"",      ""dataType"": ""String"",      ""answerList"": [       {       ""identifier"": ""Yes"",       ""displayText"": ""Yes""       },       {       ""identifier"": ""No"",       ""displayText"": ""No""       }      ]      },      {      ""questionList"": [       {       ""type"": ""Dropdown"",       ""identifier"": ""WherePinKept"",       ""displayText"": ""Where do you keep your PIN?"",       ""dataType"": ""String"",       ""answerList"": [        {        ""identifier"": ""InMemory"",        ""displayText"": ""In memory""        },        {        ""identifier"": ""WrittenOnCard"",        ""displayText"": ""Written on card""        },        {        ""identifier"": ""InWalletOrPurse"",        ""displayText"": ""In wallet or purse""        },        {        ""identifier"": ""AtHome"",        ""displayText"": ""At home""        },        {        ""questionList"": [         {         ""type"": ""Text"",         ""identifier"": ""WhereIsPinKeptOtherDetails"",         ""displayText"": ""Other details."",         ""dataType"": ""String""         }        ],        ""identifier"": ""Other"",        ""displayText"": ""Other""        }       ]       },       {       ""questionList"": [        {        ""type"": ""YesNo"",        ""identifier"": ""CancelCardInd"",        ""displayText"": ""Due to the fraud on your account, would you like to cancel your card now?"",        ""dataType"": ""String"",        ""answerList"": [         {         ""identifier"": ""Yes"",         ""displayText"": ""Yes""         },         {         ""identifier"": ""No"",         ""displayText"": ""No""         }        ]        },        {        ""type"": ""Nothing"",        ""identifier"": """",        ""displayText"": ""Due to the fraud on your account, we are stopping your card from accepting more charges."",        ""dataType"": ""String""        },        {        ""type"": ""YesNo"",        ""identifier"": ""ReissueCard"",        ""displayText"": ""Would you like us to send you a replacement card?"",        ""dataType"": ""String"",        ""answerList"": [         {         ""questionList"": [          {          ""questionList"": [           {           ""questionList"": [            {            ""questionList"": [             {             ""type"": ""AutoComplete"",             ""identifier"": ""IdentifyBranchPlasticLocation"",             ""displayText"": ""What branch would you like the card sent to?"",             ""dataType"": ""String""             }            ],            ""identifier"": ""IdentifyCustomerPlasticMailingAddressList"",            ""displayText"": """",            ""dataType"": ""String"",            ""type"": ""Questionnaire""            },            {            ""questionList"": [             {             ""type"": ""RadioButtons"",             ""identifier"": ""IdentifyCustomerAddressList"",             ""displayText"": """",             ""dataType"": ""String"",             ""answerList"": [              {              ""identifier"": ""Other"",              ""displayText"": ""Other""              }             ]             }            ],            ""identifier"": ""IdentifyCustomerAddressList"",            ""displayText"": ""Okay, where should we send your card?"",            ""dataType"": ""String"",            ""type"": ""Questionnaire""            },            {            ""questionList"": [             {             ""questionList"": [              {              ""type"": ""AutoComplete"",              ""identifier"": ""IdentifyBranchPlasticLocation"",              ""displayText"": ""What branch would you like the card sent to?"",              ""dataType"": ""String""              }             ],             ""identifier"": ""IdentifyBranchLocation"",             ""displayText"": """",             ""dataType"": ""String"",             ""type"": ""Questionnaire""             },             {             ""questionList"": [              {              ""type"": ""YesNo"",              ""identifier"": ""ConfirmOptionalBranchPlasticMailingAddress"",              ""displayText"": ""Would you like your card mailed to a branch address?"",              ""dataType"": ""String"",              ""answerList"": [               {               ""questionList"": [                {                ""questionList"": [                 {                 ""type"": ""AutoComplete"",                 ""identifier"": ""IdentifyBranchPlasticLocation"",                 ""displayText"": ""What branch would you like the card sent to?"",                 ""dataType"": ""String""                 }                ],                ""identifier"": ""IdentifyBranchLocation"",                ""displayText"": """",                ""dataType"": ""String"",                ""type"": ""Questionnaire""                }               ],               ""identifier"": ""Yes"",               ""displayText"": ""Yes""               },               {               ""questionList"": [                {                ""questionList"": [                 {                 ""type"": ""Text"",                 ""identifier"": ""PlasticMailingAddressLine1"",                 ""displayText"": ""Line 1"",                 ""dataType"": ""String""                 },                 {                 ""type"": ""Text"",                 ""identifier"": ""PlasticMailingAddressLine2"",                 ""displayText"": ""Line 2"",                 ""dataType"": ""String""                 },                 {                 ""type"": ""Text"",                 ""identifier"": ""PlasticMailingAddressLine3"",                 ""displayText"": ""Line 3"",                 ""dataType"": ""String""                 },                 {                 ""type"": ""Text"",                 ""identifier"": ""PlasticMailingAddressCity"",                 ""displayText"": ""City"",                 ""dataType"": ""String""                 },                 {                 ""type"": ""Dropdown"",                 ""identifier"": ""PlasticMailingAddressState"",                 ""displayText"": ""State"",                 ""dataType"": ""String"",                 ""answerList"": [                  {                  ""identifier"": ""AK"",                  ""displayText"": ""AK""                  },                  {                  ""identifier"": ""AL"",                  ""displayText"": ""AL""                  },                  {                  ""identifier"": ""AR"",                  ""displayText"": ""AR""                  },                  {                  ""identifier"": ""AZ"",                  ""displayText"": ""AZ""                  },                  {                  ""identifier"": ""CA"",                  ""displayText"": ""CA""                  },                  {                  ""identifier"": ""CO"",                  ""displayText"": ""CO""                  },                  {                  ""identifier"": ""CT"",                  ""displayText"": ""CT""                  },                  {                  ""identifier"": ""DC"",                  ""displayText"": ""DC""                  },                  {                  ""identifier"": ""DE"",                  ""displayText"": ""DE""                  },                  {                  ""identifier"": ""FL"",                  ""displayText"": ""FL""                  },                  {                  ""identifier"": ""GA"",                  ""displayText"": ""GA""                  },                  {                  ""identifier"": ""HI"",                  ""displayText"": ""HI""                  },                  {                  ""identifier"": ""IA"",                  ""displayText"": ""IA""                  },                  {                  ""identifier"": ""ID"",                  ""displayText"": ""ID""                  },                  {                  ""identifier"": ""IL"",                  ""displayText"": ""IL""                  },                  {                  ""identifier"": ""IN"",                  ""displayText"": ""IN""                  },                  {                  ""identifier"": ""KS"",                  ""displayText"": ""KS""                  },                  {                  ""identifier"": ""KY"",                  ""displayText"": ""KY""                  },                  {                  ""identifier"": ""LA"",                  ""displayText"": ""LA""                  },                  {                  ""identifier"": ""MA"",                  ""displayText"": ""MA""                  },                  {                  ""identifier"": ""MD"",                  ""displayText"": ""MD""                  },                  {                  ""identifier"": ""ME"",                  ""displayText"": ""ME""                  },                  {                  ""identifier"": ""MI"",                  ""displayText"": ""MI""                  },                  {                  ""identifier"": ""MN"",                  ""displayText"": ""MN""                  },                  {                  ""identifier"": ""MO"",                  ""displayText"": ""MO""                  },                  {                  ""identifier"": ""MS"",                  ""displayText"": ""MS""                  },                  {                  ""identifier"": ""MT"",                  ""displayText"": ""MT""                  },                  {                  ""identifier"": ""NC"",                  ""displayText"": ""NC""                  },                  {                  ""identifier"": ""ND"",                  ""displayText"": ""ND""                  },                  {                  ""identifier"": ""NE"",                  ""displayText"": ""NE""                  },                  {                  ""identifier"": ""NH"",                  ""displayText"": ""NH""                  },                  {                  ""identifier"": ""NJ"",                  ""displayText"": ""NJ""                  },                  {                  ""identifier"": ""NM"",                  ""displayText"": ""NM""                  },                  {                  ""identifier"": ""NV"",                  ""displayText"": ""NV""                  },                  {                  ""identifier"": ""NY"",                  ""displayText"": ""NY""                  },                  {                  ""identifier"": ""OH"",                  ""displayText"": ""OH""                  },                  {                  ""identifier"": ""OK"",                  ""displayText"": ""OK""                  },                  {                  ""identifier"": ""OR"",                  ""displayText"": ""OR""                  },                  {                  ""identifier"": ""PA"",                  ""displayText"": ""PA""                  },                  {                  ""identifier"": ""PR"",                  ""displayText"": ""PR""                  },                  {                  ""identifier"": ""RI"",                  ""displayText"": ""RI""                  },                  {                  ""identifier"": ""SC"",                  ""displayText"": ""SC""                  },                  {                  ""identifier"": ""SD"",                  ""displayText"": ""SD""                  },                  {                  ""identifier"": ""TN"",                  ""displayText"": ""TN""                  },                  {                  ""identifier"": ""TX"",                  ""displayText"": ""TX""                  },                  {                  ""identifier"": ""UT"",                  ""displayText"": ""UT""                  },                  {                  ""identifier"": ""VA"",                  ""displayText"": ""VA""                  },                  {                  ""identifier"": ""VT"",                  ""displayText"": ""VT""                  },                  {                  ""identifier"": ""WA"",                  ""displayText"": ""WA""                  },                  {                  ""identifier"": ""WI"",                  ""displayText"": ""WI""                  },                  {                  ""identifier"": ""WV"",                  ""displayText"": ""WV""                  },                  {                  ""identifier"": ""WY"",                  ""displayText"": ""WY""                  }                 ]                 },                 {                 ""type"": ""Text"",                 ""identifier"": ""PlasticMailingAddressZip"",                 ""displayText"": ""Zip"",                 ""dataType"": ""String""                 }                ],                ""identifier"": ""AdHocPlasticMailingAddress"",                ""displayText"": ""Okay, where should we send your card?"",                ""dataType"": ""String"",                ""type"": ""Questionnaire""                }               ],               ""identifier"": ""No"",               ""displayText"": ""No""               }              ]              }             ],             ""identifier"": ""ConfirmOptionalBranchPlasticMailingAddress"",             ""displayText"": """",             ""dataType"": ""String"",             ""type"": ""Questionnaire""             }            ],            ""identifier"": ""OtherSelectedFromConfirmPlasticMailingAddressFromList"",            ""displayText"": """",            ""dataType"": ""String"",            ""type"": ""Questionnaire""            }           ],           ""identifier"": ""ConfirmPlasticMailingAddress"",           ""displayText"": """",           ""dataType"": ""String"",           ""type"": ""Questionnaire""           },           {           ""type"": ""RadioButtons"",           ""identifier"": ""CardShippingMethods"",           ""displayText"": ""How would you like the card to be delivered (Please note that a fee may apply)?"",           ""dataType"": ""String""           },           {           ""type"": ""YesNo"",           ""identifier"": ""RushCard"",           ""displayText"": ""Would you like your card request to be expedited for a fee of $18, with an estimated delivery timeframe of 3 business days?"",           ""dataType"": ""String"",           ""answerList"": [            {            ""identifier"": ""Yes"",            ""displayText"": ""Yes""            },            {            ""questionList"": [             {             ""type"": ""Nothing"",             ""identifier"": """",             ""displayText"": ""Your new card will be delivered within 7-10 business days."",             ""dataType"": ""String""             }            ],            ""identifier"": ""No"",            ""displayText"": ""No""            }           ]           },           {           ""type"": ""YesNo"",           ""identifier"": ""ShouldWaiveCardDeliveryFee"",           ""displayText"": ""Would you like to waive the card delivery fee?"",           ""dataType"": ""String"",           ""answerList"": [            {            ""identifier"": ""Yes"",            ""displayText"": ""Yes""            },            {            ""identifier"": ""No"",            ""displayText"": ""No""            }           ]           },           {           ""type"": ""YesNo"",           ""identifier"": ""ShouldWaiveCardReplacementFee"",           ""displayText"": ""Would you like to waive the card replacement fee?"",           ""dataType"": ""String"",           ""answerList"": [            {            ""identifier"": ""Yes"",            ""displayText"": ""Yes""            },            {            ""identifier"": ""No"",            ""displayText"": ""No""            }           ]           },           {           ""type"": ""Nothing"",           ""identifier"": """",           ""displayText"": """",           ""dataType"": ""String""           }          ],          ""identifier"": ""ReissueDetail"",          ""displayText"": """",          ""dataType"": ""String"",          ""type"": ""Questionnaire""          }         ],         ""identifier"": ""Yes"",         ""displayText"": ""Yes""         },         {         ""questionList"": [          {          ""questionList"": [           {           ""type"": ""YesNo"",           ""identifier"": ""ConfirmAccountClosure"",           ""displayText"": ""Should the account be closed permanently?"",           ""dataType"": ""String"",           ""answerList"": [            {            ""identifier"": ""Yes"",            ""displayText"": ""Yes""            },            {            ""identifier"": ""No"",            ""displayText"": ""No""            }           ]           }          ],          ""identifier"": ""ConfirmAccountClosure"",          ""displayText"": """",          ""dataType"": ""String"",          ""type"": ""Questionnaire""          },          {          ""type"": ""Nothing"",          ""identifier"": """",          ""displayText"": ""No new card will be issued at this time. If you change your mind, please contact customer service at the number on the back of your card or cardholder website to request a new card."",          ""dataType"": ""String""          }         ],         ""identifier"": ""No"",         ""displayText"": ""No""         }        ]        },        {        ""questionList"": [         {         ""questionList"": [          {          ""questionList"": [           {           ""type"": ""AutoComplete"",           ""identifier"": ""IdentifyBranchPlasticLocation"",           ""displayText"": ""What branch would you like the card sent to?"",           ""dataType"": ""String""           }          ],          ""identifier"": ""IdentifyCustomerPlasticMailingAddressList"",          ""displayText"": """",          ""dataType"": ""String"",          ""type"": ""Questionnaire""          },          {          ""questionList"": [           {           ""type"": ""RadioButtons"",           ""identifier"": ""IdentifyCustomerAddressList"",           ""displayText"": """",           ""dataType"": ""String"",           ""answerList"": [            {            ""identifier"": ""Other"",            ""displayText"": ""Other""            }           ]           }          ],          ""identifier"": ""IdentifyCustomerAddressList"",          ""displayText"": ""Okay, where should we send your card?"",          ""dataType"": ""String"",          ""type"": ""Questionnaire""          },          {          ""questionList"": [           {           ""questionList"": [            {            ""type"": ""AutoComplete"",            ""identifier"": ""IdentifyBranchPlasticLocation"",            ""displayText"": ""What branch would you like the card sent to?"",            ""dataType"": ""String""            }           ],           ""identifier"": ""IdentifyBranchLocation"",           ""displayText"": """",           ""dataType"": ""String"",           ""type"": ""Questionnaire""           },           {           ""questionList"": [            {            ""type"": ""YesNo"",            ""identifier"": ""ConfirmOptionalBranchPlasticMailingAddress"",            ""displayText"": ""Would you like your card mailed to a branch address?"",            ""dataType"": ""String"",            ""answerList"": [             {             ""questionList"": [              {              ""questionList"": [               {               ""type"": ""AutoComplete"",               ""identifier"": ""IdentifyBranchPlasticLocation"",               ""displayText"": ""What branch would you like the card sent to?"",               ""dataType"": ""String""               }              ],              ""identifier"": ""IdentifyBranchLocation"",              ""displayText"": """",              ""dataType"": ""String"",              ""type"": ""Questionnaire""              }             ],             ""identifier"": ""Yes"",             ""displayText"": ""Yes""             },             {             ""questionList"": [              {              ""questionList"": [               {               ""type"": ""Text"",               ""identifier"": ""PlasticMailingAddressLine1"",               ""displayText"": ""Line 1"",               ""dataType"": ""String""               },               {               ""type"": ""Text"",               ""identifier"": ""PlasticMailingAddressLine2"",               ""displayText"": ""Line 2"",               ""dataType"": ""String""               },               {               ""type"": ""Text"",               ""identifier"": ""PlasticMailingAddressLine3"",               ""displayText"": ""Line 3"",               ""dataType"": ""String""               },               {               ""type"": ""Text"",               ""identifier"": ""PlasticMailingAddressCity"",               ""displayText"": ""City"",               ""dataType"": ""String""               },               {               ""type"": ""Dropdown"",               ""identifier"": ""PlasticMailingAddressState"",               ""displayText"": ""State"",               ""dataType"": ""String"",               ""answerList"": [                {                ""identifier"": ""AK"",                ""displayText"": ""AK""                },                {                ""identifier"": ""AL"",                ""displayText"": ""AL""                },                {                ""identifier"": ""AR"",                ""displayText"": ""AR""                },                {                ""identifier"": ""AZ"",                ""displayText"": ""AZ""                },                {                ""identifier"": ""CA"",                ""displayText"": ""CA""                },                {                ""identifier"": ""CO"",                ""displayText"": ""CO""                },                {                ""identifier"": ""CT"",                ""displayText"": ""CT""                },                {                ""identifier"": ""DC"",                ""displayText"": ""DC""                },                {                ""identifier"": ""DE"",                ""displayText"": ""DE""                },                {                ""identifier"": ""FL"",                ""displayText"": ""FL""                },                {                ""identifier"": ""GA"",                ""displayText"": ""GA""                },                {                ""identifier"": ""HI"",                ""displayText"": ""HI""                },                {                ""identifier"": ""IA"",                ""displayText"": ""IA""                },                {                ""identifier"": ""ID"",                ""displayText"": ""ID""                },                {                ""identifier"": ""IL"",                ""displayText"": ""IL""                },                {                ""identifier"": ""IN"",                ""displayText"": ""IN""                },                {                ""identifier"": ""KS"",                ""displayText"": ""KS""                },                {                ""identifier"": ""KY"",                ""displayText"": ""KY""                },                {                ""identifier"": ""LA"",                ""displayText"": ""LA""                },                {                ""identifier"": ""MA"",                ""displayText"": ""MA""                },                {                ""identifier"": ""MD"",                ""displayText"": ""MD""                },                {                ""identifier"": ""ME"",                ""displayText"": ""ME""                },                {                ""identifier"": ""MI"",                ""displayText"": ""MI""                },                {                ""identifier"": ""MN"",                ""displayText"": ""MN""                },                {                ""identifier"": ""MO"",                ""displayText"": ""MO""                },                {                ""identifier"": ""MS"",                ""displayText"": ""MS""                },                {                ""identifier"": ""MT"",                ""displayText"": ""MT""                },                {                ""identifier"": ""NC"",                ""displayText"": ""NC""                },                {                ""identifier"": ""ND"",                ""displayText"": ""ND""                },                {                ""identifier"": ""NE"",                ""displayText"": ""NE""                },                {                ""identifier"": ""NH"",                ""displayText"": ""NH""                },                {                ""identifier"": ""NJ"",                ""displayText"": ""NJ""                },                {                ""identifier"": ""NM"",                ""displayText"": ""NM""                },                {                ""identifier"": ""NV"",                ""displayText"": ""NV""                },                {                ""identifier"": ""NY"",                ""displayText"": ""NY""                },                {                ""identifier"": ""OH"",                ""displayText"": ""OH""                },                {                ""identifier"": ""OK"",                ""displayText"": ""OK""                },                {                ""identifier"": ""OR"",                ""displayText"": ""OR""                },                {                ""identifier"": ""PA"",                ""displayText"": ""PA""                },                {                ""identifier"": ""PR"",                ""displayText"": ""PR""                },                {                ""identifier"": ""RI"",                ""displayText"": ""RI""                },                {                ""identifier"": ""SC"",                ""displayText"": ""SC""                },                {                ""identifier"": ""SD"",                ""displayText"": ""SD""                },                {                ""identifier"": ""TN"",                ""displayText"": ""TN""                },                {                ""identifier"": ""TX"",                ""displayText"": ""TX""                },                {                ""identifier"": ""UT"",                ""displayText"": ""UT""                },                {                ""identifier"": ""VA"",                ""displayText"": ""VA""                },                {                ""identifier"": ""VT"",                ""displayText"": ""VT""                },                {                ""identifier"": ""WA"",                ""displayText"": ""WA""                },                {                ""identifier"": ""WI"",                ""displayText"": ""WI""                },                {                ""identifier"": ""WV"",                ""displayText"": ""WV""                },                {                ""identifier"": ""WY"",                ""displayText"": ""WY""                }               ]               },               {               ""type"": ""Text"",               ""identifier"": ""PlasticMailingAddressZip"",               ""displayText"": ""Zip"",               ""dataType"": ""String""               }              ],              ""identifier"": ""AdHocPlasticMailingAddress"",              ""displayText"": ""Okay, where should we send your card?"",              ""dataType"": ""String"",              ""type"": ""Questionnaire""              }             ],             ""identifier"": ""No"",             ""displayText"": ""No""             }            ]            }           ],           ""identifier"": ""ConfirmOptionalBranchPlasticMailingAddress"",           ""displayText"": """",           ""dataType"": ""String"",           ""type"": ""Questionnaire""           }          ],          ""identifier"": ""OtherSelectedFromConfirmPlasticMailingAddressFromList"",          ""displayText"": """",          ""dataType"": ""String"",          ""type"": ""Questionnaire""          }         ],         ""identifier"": ""ConfirmPlasticMailingAddress"",         ""displayText"": """",         ""dataType"": ""String"",         ""type"": ""Questionnaire""         },         {         ""type"": ""RadioButtons"",         ""identifier"": ""CardShippingMethods"",         ""displayText"": ""How would you like the card to be delivered (Please note that a fee may apply)?"",         ""dataType"": ""String""         },         {         ""type"": ""YesNo"",         ""identifier"": ""RushCard"",         ""displayText"": ""Would you like your card request to be expedited for a fee of $18, with an estimated delivery timeframe of 3 business days?"",         ""dataType"": ""String"",         ""answerList"": [          {          ""identifier"": ""Yes"",          ""displayText"": ""Yes""          },          {          ""questionList"": [           {           ""type"": ""Nothing"",           ""identifier"": """",           ""displayText"": ""Your new card will be delivered within 7-10 business days."",           ""dataType"": ""String""           }          ],          ""identifier"": ""No"",          ""displayText"": ""No""          }         ]         },         {         ""type"": ""YesNo"",         ""identifier"": ""ShouldWaiveCardDeliveryFee"",         ""displayText"": ""Would you like to waive the card delivery fee?"",         ""dataType"": ""String"",         ""answerList"": [          {          ""identifier"": ""Yes"",          ""displayText"": ""Yes""          },          {          ""identifier"": ""No"",          ""displayText"": ""No""          }         ]         },         {         ""type"": ""YesNo"",         ""identifier"": ""ShouldWaiveCardReplacementFee"",         ""displayText"": ""Would you like to waive the card replacement fee?"",         ""dataType"": ""String"",         ""answerList"": [          {          ""identifier"": ""Yes"",          ""displayText"": ""Yes""          },          {          ""identifier"": ""No"",          ""displayText"": ""No""          }         ]         },         {         ""type"": ""Nothing"",         ""identifier"": """",         ""displayText"": """",         ""dataType"": ""String""         }        ],        ""identifier"": ""ReissueDetail"",        ""displayText"": """",        ""dataType"": ""String"",        ""type"": ""Questionnaire""        }       ],       ""identifier"": ""BlockAndReissueCard"",       ""displayText"": """",       ""dataType"": ""String"",       ""type"": ""Questionnaire""       }      ],      ""identifier"": ""WherePinIsKept"",      ""displayText"": """",      ""dataType"": ""String"",      ""type"": ""Questionnaire""      }     ],     ""identifier"": ""vsq1"",     ""displayText"": """",     ""dataType"": ""String"",     ""type"": ""Questionnaire""     }    ],    ""identifier"": ""CardPossession"",    ""displayText"": """",    ""dataType"": ""String"",    ""type"": ""Questionnaire""    }   ],   ""identifier"": """",   ""displayText"": ""“I didn't make the purchase, but I still have my card.”"",   ""dataType"": ""String"",   ""type"": ""Nothing""   }  ],  ""identifier"": ""FraudCardSecure""  },  ""postQuestionnaire"": {  ""questionList"": [   {   ""questionList"": [    {    ""type"": ""YesNo"",    ""identifier"": ""AddlInfo"",    ""displayText"": ""Do you have any additional information to provide about this dispute?"",    ""dataType"": ""String"",    ""answerList"": [     {     ""questionList"": [      {      ""type"": ""Nothing"",      ""identifier"": ""AttachIntakeDocs"",      ""displayText"": ""Custom Section"",      ""dataType"": ""String""      },      {      ""type"": ""TextMulti"",      ""identifier"": ""AddlInfoDetails"",      ""displayText"": ""Please provide any additional information"",      ""dataType"": ""String""      }     ],     ""identifier"": ""Yes"",     ""displayText"": ""Yes""     },     {     ""identifier"": ""No"",     ""displayText"": ""No""     }    ]    }   ],   ""type"": ""YesNo"",   ""answerList"": [    {    ""questionList"": [     {     ""type"": ""TextMulti"",     ""identifier"": ""AdditionalDisputeNotes"",     ""displayText"": ""Please provide any additional information. This will be provided to the merchant."",     ""dataType"": ""String""     }    ],    ""identifier"": ""Yes"",    ""displayText"": ""Yes""    },    {    ""identifier"": ""No"",    ""displayText"": ""No""    }   ],   ""identifier"": ""HasVisaComments"",   ""displayText"": ""Do you have any additional information that should be provided to the merchant regarding your dispute?"",   ""dataType"": ""String""   }  ],  ""identifier"": ""GFT_Extensions_PostQns""  } }, ""echo"": {  ""transactionId"": ""849d99d7-1af6-4c40-9b18-3c9ac4f1ccdb"" }, ""systemTimestamp"": ""2022-04-13 17:25:12"", ""rtoken"": ""fcb068c5-c0dc-4bf7-909b-2f4fa5e70dc9"" } "
456,docs.galileo-ft.com/pro/docs/setting-account-level-auth-controls,"Setting Account-Level Authorization Controls This guide explains how to implement account-level authorization controls (ALCs) using these endpoints: Velocity ALCs Get Auth Control Set Account-Level Auth Control Delete Account-Level Auth Control MCC ALCs Get MCC Controls Set Account-Level MCC Controls Delete Account-Level MCC Control Merchant ID ALCs Get Merchant Controls Set Account-Level Merchant Control Delete Account-Level Merchant Control This guide assumes that you are familiar with the concepts in these guides: About Account-Level Auth Controls — General explanation of ALCs, including use cases. Designing Authorization Controls — How to design authorization controls at the product and account levels. MCC and Merchant ID ALC Examples — Tables that show how MCC and merchant ID controls are applied. Result of following these procedures An ALC is created, modified, disabled, or deleted. The authorization controls can also be retrieved per account or per product. You can set three types of ALC: Velocity MCC Merchant ID General ALC characteristics These are the general characteristics of ALCs: To update an existing ALC, send another Set Account-Level X Control call with the new values. After setting or updating an ALC, there is a delay of a few minutes before the control is applied to live transactions. ALCs are applied to PRNs, not to card IDs or balance IDs: All cards that have the same PRN are affected by the ALC. If card1 and card2 have the same PRN, it is not possible to put an ALC on card1 but not card2. When two or more PRNs share an account balance (bal_id), the ALC applies only to the individual PRNs, not to the bal_id. For example, if PRN1 and PRN2 share a balance, an ALC that is applied to PRN1 will not affect PRN2. Setting time limits All ALCs can be set either permanently or for only a limited time. The startDate and endDate endpoint parameters have these defaults: startDate: Current Galileo system time endDate: 1 Jan 3000 (no expiry) When you pass nothing or Null for these values, the defaults are applied in these circumstances: The control is being created for the first time Velocity ALCs only. The control was disabled and you are reactivating it. For example, if a velocity control has expired, then the next time you call Set Account-Level Auth Control for that control—and you pass nothing or Null for the start or end dates—the default values will be applied. However, if a control has not expired, and you want to update one of its parameters, passing nothing or Null for startDate or endDate will not change the values in those fields. For MCC or merchant ID controls that have expired, you cannot pass nothing or Null to get the default date values; instead, you must enter new values. You can set startDate up to six months in the future. endDate must always be later than startDate. 🚧WarningDo not pass a time for startDate or endDate that is in the past, even if it is the time that was previously set. Instead, pass no value to keep the same value, or pass a value that is equal to or later than the current system time. This table shows some examples of setting the dates in a Set Account-Level X Control endpoint, assuming that today is Thursday March 10, 2022 at 1:00 pm. Effective timespanstartDateendDateStart now, no endblankblankStart now, end in seven daysblank2022-03-17 23:59:59Next week only, starting Monday2022-03-13 00:00:002022-03-19 23:59:59Start next Monday, no end2022-03-13 00:00:00blankEnd now (disable the control)blank2022-03-10 13:00:00 Velocity controls A velocity ALC must be based on an existing product-level velocity control. Each product-level control has a control ID that you must pass when creating the ALC. See Velocity controls in the Designing Authorization Controls guide to see how velocity controls are represented in the Galileo system. The product-level controls are visible in the GCC and CST, or you can call Get Auth Control with these parameters: controlId: blank prodId: Product ID accountNo: blank Open the Recipes below to see example responses. Consult the Get Auth Control reference material for the response schema. Get Auth Control response for productOpen Recipe Galileo recommends that you call Get Auth Control with prodId populated to create a lookup table for the product instead of calling Get Auth Control every time you want to set an ALC. You can periodically update your lookup table by calling Get Auth Control again with the prodId. You can also pass controlId and prodId with Get Auth Control to retrieve the limits for a specific control. 📘NoteGalileo will not make changes to your product-level controls except by your request. Setting velocity ALCs You can set a velocity ALC in one of two ways: In the CST, under Account Info. With the Program API. Follow these steps: Obtain the control ID by calling Get Auth Control or by consulting your lookup table. Call Set Account-Level Auth Control with these parameters: ParameterValueaccountNoPRN of the account. Do not use PAN or CADcontrolIdIdentifier for the control to set.startDateLeave blank to the current system time as the starting time, or set a time up to six months in the future.endDateLeave blank to set 3000-01-01 (no end) as the end date, or specify a date that is later than startDate.amountPass a maximum amount for the control or leave blank to set no amount limit. If this parameter is blank, then transactionCount must be populated.transactionCountPass a maximum number of transactions per control period or leave blank to set no transaction count limit. If this parameter is blank, then amount must be populated. Given the example controls in the Recipe above, this table shows how you would populate the parameters in the Set Account-Level Auth Control endpoint calls to create an ALC for each of the first three controls, assuming that today is March 10, 2022 at 1:00 pm. Note that when only the transaction count is being altered, the amount from the product-level control must be passed; otherwise, the amount would be unlimited. New limitcontrolIdstartDateendDateamounttransactionCountDaily domestic ATM withdrawal limit increased to $800 and count increased to 20. Starts now and does not end.1blankblank80020Daily international ATM transaction count increased to 25. Starts next week and ends one week after that.22022-03-17 00:00:002022-03-24 23:59:5930025Per-transaction ATM limit increased to $400, starting now and ending in an hour.3blank2022-03-10 14:00:00400blank Updating velocity ALCs When updating an existing account-level velocity control, follow these rules: Positive value — Set the control to this value Blank — Do not change the value Null — Nullify the existing value To see which ALCs are already set for an account, call Get Auth Control with these parameters: accountNo: PAN of the account prodId: blank Open the Recipe below to see an example response. Consult the Get Auth Control reference material for the response schema. Get Auth Control response for accountOpen Recipe For example, if you have already set a velocity ALC for the daily domestic ATM withdrawal limit (control ID 1), and you want to change the amount to $1000, you would call Set Account-Level Auth Control with these parameters: controlId: 1 startDate: blank endDate: blank amount: 1000 transactionCount: blank Delete one limit of a velocity ALC To delete either amount or transactionCount in a velocity ALC without deleting the other value, pass Null for the value to delete and pass nothing for the other value. In this example, the transaction count for daily domestic ATM withdrawals is removed but the amount is unchanged. Because the startDate and endDate parameters are left blank, and the ALC has not expired, the dates will remain unchanged. When the account-level transaction count is nullified, the transaction count becomes unlimited—the product-level limit is not used as long as the ALC is active. controlId: 1 startDate: blank endDate: blank amount: blank transactionCount: Null Disable a velocity ALC To disable a velocity ALC without deleting it, follow the steps to update the control and set the current date-time for endDate. When a velocity ALC has been disabled, the account reverts back to the product-level control. Reactivate a disabled velocity ALC To reactivate an expired ALC, call the Set Account-Level Auth Control endpoint with these parameters: accountNo: PRN of the account startDate: Pass nothing to set the current system time or pass a future date no more than six months in the future. endDate: Pass nothing to set the end date to 3000-01-01 or set a time that is later than startDate. amount: Leave blank transactionCount: Leave blank Deleting a velocity ALC To delete a velocity ALC from the database, call Delete Account-Level Auth Control with these parameters: accountNo: PRN of the account. Do not use PAN or CAD. controlId: ID of the control to delete MCC controls It is not necessary to set product-level MCC controls before setting account-level MCC controls. However, if you do have product-level MCC controls set up, you must take them into account when setting MCC controls at the account level. Consult MCC controls in the Designing Authorization Controls guide to see how product-level MCC controls affect account-level MCC controls. You can see the MCC blocklist and product-level controls in the GCC and the CST, and you can also retrieve the product-level MCC controls by calling the Get MCC Controls endpoint with these parameters: accountNo: blank prodId: Product ID Open the Recipes below to see sample responses. Get MCC Controls response for productOpen Recipe To see existing account-level controls, pass the PRN in accountNo. Get MCC Controls response for accountOpen Recipe Setting MCC ALCs Verify that the controls you intend to create do not violate any of the MCC control conventions. If they do violate a convention, the endpoint will return an error. To set one or more account-level controls, call the Set Account-Level MCC Controls endpoint with these parameters: ParameterValueaccountNoPRN of the account. Do not use the PAN or CAD.startDateLeave blank to set the current date-time as the starting time, or set a time up to six months in the future. Must be earlier than endDate. Cannot be earlier than the current time.endDateLeave blank to set 3000-01-01 (no end) as the end date, or specify a time that is later than startDate.mccControlsA list of MCC ranges or single MCCs. Format: ['XXXX', 'YYYY-ZZZZ', 'AAAA-BBBB']allowDenyPass a for ALLOW or d for DENY.onlineOnlyPass Y to apply this control only to online transactions or leave blank (or pass N) to apply to all transactions. When you pass multiple MCC ranges in a single endpoint call, the system creates a new control for every range or single MCC. For example, if you pass this value, ['2000', '3000-3500', '3580-4000', '5555'], the system creates these four controls: beginning_mccend_mcc20002000300035003580400055555555 All four of these controls have the same properties for start and end dates, allow/deny, and online only. 📘NoteIf you pass one or more MCCs or MCC ranges that overlap with existing MCCs, the error message that the endpoint returns indicates only the first violation. When you send another request, the endpoint returns the second violation only, and so on. Updating account-level MCC controls In the Galileo tables that contain account-level MCCs, each control occupies a separate row, and the row is identified by the first value in the MCC range. (In database terms, it's the primary key when paired with the account number.) In the example above, the identifier for the first control is 2000, the identifier for the second control is 3000, and so on. When updating controls, specify the entire range in mccControls along with the new values. If the existing range is 2000–3000 and you input 2000 only, the system will change the end value of the range to 2000. For startDate and endDate you cannot pass a date-time in the past, even if it is the existing date-time. You should leave startDate and endDate blank unless you are changing them to the current date or to a date in the future. To update the values in an existing, unexpired control, call the Set Account-Level MCC Controls endpoint with these parameters: accountNo: PRN of the account startDate: Leave blank to maintain the same value or pass a new date. endDate: Leave blank to maintain the same value or pass a new date. mccControls: Specify the entire range of the control to update: ['2000-2500'] or ['5555']. allowDeny: Leave blank. This value cannot be changed. onlineOnly: Leave blank to maintain the same value or pass Y or N to change it. For example, to change the online-only property of the first and third controls in the table above to Y, call Set Account-Level MCC Controls with these values: mccControls: ['2000', '3580-4000'] onlineOnly: Y To change the start and end dates on the fourth control to include all of January 2023, call Set Account-Level MCC Controls with these values: mccControls: ['5555'] startDate: 2023-01-01 00:00:00 endDate: 2023-01-31 23:59:59 To change the third control to include the 3580–4025 range, call Set Account-Level MCC Controls with these values: mccControls: ['3580-4025'] To change the second range to 2800–3500—which affects the beginning MCC value—you have two options: Create a second control for 2800–2999. Ask Galileo to delete the original control, and then set a new control for 2800–3500. Disable an account-level MCC control To disable an account-level MCC control without deleting it, follow the steps to update the control and set endDate to the current date-time. Reactivate a disabled MCC control To reactivate a disabled MCC control, call the Set Account-Level MCC Controls endpoint with these parameters: accountNo: PRN of the account startDate: Pass the current time or a future date no more than six months in the future. endDate: Pass a time that is later than startDate. mccControls: Specify the entire range of the control to update: ['2000-2500'] or ['5555']. allowDeny: Leave blank. onlineOnly: Leave blank or pass a new value. Deleting an MCC control To delete an MCC control from the database, call Delete Account-Level MCC Control with these parameters: accountNo: PRN of the account. Do not use PAN or CAD. beginMccControl: First number in the MCC range endMccControl: Last number in the MCC range Merchant ID controls A merchant ID (MID) is a string that uniquely identifies a point of sale. MIDs have a maximum of 15 characters. They are usually all numeric but some contain letters. Go to Merchant ID controls in the Designing Authorization Controls guide for more information. Because a DENY MID ALC can contradict MCC controls, it is not necessary to retrieve the MCC controls before setting a DENY MID ALC. However, the MCC blocklist will override any MID controls you set. You can see existing MID controls in the GCC and CST, and you can retrieve them by calling the Get Merchant Controls endpoint with one of these parameters: accountNo: Populate to get the account-level MID controls. prodId: Populate to get the product-level MID controls. Open the Recipes below for example responses. Get Merchant Controls response for productOpen Recipe Get Merchant Controls response for accountOpen Recipe Setting account-level merchant ID controls To set an account-level merchant ID control, call Set Account-Level Merchant Control with these parameters: ParameterValueaccountNoPRN of the account. Do not use PAN or CAD.startDateLeave blank to set the current date-time as the starting time, or set a time in the future. Cannot be more than six months in the future. Must be earlier than endDate.endDateLeave blank to set 3000-01-01 (no end) as the end date, or specify a date that is later than startDate.merchantIdMerchant ID. Max 15 characters. Not case-sensitive.allowDenyPass a for ALLOW or d for DENY. To set another merchant ID control, repeat the procedure to add to the list of MID controls. The additional MID controls can be either ALLOW or DENY. Updating account-level MID controls When updating an MID control, you cannot pass a date-time in the past, even if it is the existing date-time. You should leave startDate and endDate blank unless you are changing them to the current date or to a date in the future. If you already have an account-level MID control for 55555555555555 ALLOW, for example, and you want to deny that merchant ID from now on, you have two options: If the MCC controls already deny that merchant's MCC, you can expire (disable) the MID control, and the merchant will be blocked by the MCC controls. See Disable an account-level MID control. If the MCC controls allow that merchant's MCC, update the existing control to allowDeny: d. To update an existing, unexpired account-level MID control, call Set Account-Level Merchant Control with these parameters: accountNo: PRN of the account. Do not use PAN or CAD. startDate: Leave blank to keep the current value or pass a new value. Must be earlier than endDate. endDate: Leave blank to keep the current value or specify a new date that is later than startDate. merchantId: Pass the same merchant ID that the existing control has. If you pass a new value, a new MID control will be created. As needed, call Get Merchant Controls to get the ID. allowDeny: Leave blank to keep the current value or pass a for ALLOW or d for DENY. Disable an account-level MID control To disable an MID control without deleting it, you expire it. Follow the steps to update the control and set the current date-time for the end date. Reactivate an account-level MID control To reactivate an expired MID control, call Set Account-Level Merchant Control with these parameters: accountNo: PRN of the account. Do not use PAN or CAD. startDate: Pass a time up to six months in the future. Must be earlier than endDate. endDate: Specify a date that is later than startDate. merchantId: Pass the same merchant ID that the existing control has. As needed, call Get Merchant Controls to get the ID. allowDeny: Leave blank or pass a new value to change it. Deleting an account-level MID control To delete an MID control from the database, call Delete Account-Level Merchant Control with these parameters: accountNo: PRN of the account. Do not use PAN or CAD. merchantId: The merchant ID Use cases These use cases are examples of how to set the ALCs in the Use cases section in About Account-Level Authorization Controls. All examples assume that today is March 10, 2022 at 1:00 pm in Galileo system time. Use case 1: Setting multiple cardholder tiers You establish two tiers above the default level for cardholders who qualify for the increased limits. You have set up logic to determine which cardholder qualifies for which tier. When you determine that a cardholder qualifies, you set an ALC for each of the five product-level controls, and the limits do not expire. Because you are increasing the limits on five controls, you send five calls to Set Account-Level Auth Control, one for each control ID. This example shows how to set a new amount and transactionCount for the first control (Daily domestic ATM withdrawal limit). ParameterValuecontrolId1startDateblankendDateblankamount3000transactionCount20 Use case 2: Raise international ATM limits Raise international daily ATM limits to $800 with the transaction count raised to 20 during a cardholder's vacation, from March 20 to March 26. Call Set Account-Level Auth Control with these parameters: ParameterValuecontrolId2startDate2022-03-20 00:00:00endDate2022-03-26 23:59:59amount800transactionCount20 Use case 3: Reduce a limit Reduce the total weekly amount to $3000 with transaction count set at 7. The change starts at 1:00 pm (now) and does not expire. Call Set Account-Level Auth Control with these parameters: ParameterValuecontrolId5startDateblankendDateblankamount3000transactionCount7 Use case 4: Change count but not amount Raise the domestic ATM transaction count limit to 4 but do not change the amount, starting now (1:00 pm) and ending in 30 minutes. After the ALC expires, the account reverts back to the product-level controls. Call Set Account-Level Auth Control with these parameters. ParameterValuecontrolId1startDateblankendDate2022-03-10 13:30:00amountblanktransactionCount4 Use case 5: Fleet-card controls The fleet-card product has an MCC control of 5530–5549 ALLOW, which permits purchases at gas stations and auto parts stores only. For those drivers who regularly need to make overnight stays, call the Set Account-Level MCC Controls endpoint with these parameters to allow the card to be used at hotels. ParameterValueaccountNoPRNstartDateblankendDateblankmccControls3500-3900allowDenyaonlineOnlyblank Use case 6: Food-delivery cards The food-delivery driver cards have a product-level MCC control of 0000–0000 ALLOW, which means that all MCCs are denied. The merchant ID controls are valid for only one hour. When an order comes in for Restaurant A, you retrieve Restaurant A's merchant ID from a lookup table that you maintain for all affiliated restaurants. Call the Set Account-Level Merchant Control endpoint with these parameters: ParameterValueaccountNoPRNstartDateblankendDate2022-03-10 14:00:00merchantId0002454MRAC0001allowDenyaUpdated 4 days ago Table of Contents Result of following these procedures General ALC characteristics Setting time limits Velocity controls Setting velocity ALCs Updating velocity ALCs Deleting a velocity ALC MCC controls Setting MCC ALCs Updating account-level MCC controls Deleting an MCC control Merchant ID controls Setting account-level merchant ID controls Updating account-level MID controls Deleting an account-level MID control Use cases Use case 1: Setting multiple cardholder tiers Use case 2: Raise international ATM limits Use case 3: Reduce a limit Use case 4: Change count but not amount Use case 5: Fleet-card controls Use case 6: Food-delivery cards "
457,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-api-timeout,"Auth_API_timeout Code — OATO Event trigger — Galileo does not receive a response to an outbound API. Processes — These processes contain the event trigger: Events API message sent Auth API webhook sent External Trans API webhook sent Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description act_type X See Activity Type for possible values. Example: ""VI"" amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""OATO"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" original_auth_id X The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" otype X See Transaction Types for possible values. Example: ""W"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""Auth_API_timeout"" Example JSON# Auth_API_timeout example: { ""act_type"": ""VI"", ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""OATO"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""original_auth_id"": ""12303085"", ""otype"": ""W"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""Auth_API_timeout"" } Table of Contents Fields Example "
458,docs.galileo-ft.com/pro/page/scenario-4-reversal-on-authorization-before-clearing-mastercard,"Scenario 4: Reversal on Authorization Before Clearing (Mastercard) << Back to the index A debit cardholder makes an online purchase for $10 using a mobile wallet. A couple hours later, the cardholder cancels the transaction. The transaction does not clear before the reversal. The following are true: The initial available balance is $1000. The network is Mastercard Banknet. Transactions for this merchant type and amount are configured to expire after seven days. Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –10.00. Galileo approves the request and places a 10.00 hold on the account. The available balance is now 990.00. Galileo sends the BAUT: auth webhook. Mastercard sends a reversal for 10.00. Galileo reverses out the 10.00 hold. The available balance is now 1000.00. Galileo sends an AAAU: auth webhook. After seven days, the authorization and its reversal expire. Galileo sends the BEXP: auth_exp and BEXR: auth_exp_reversal webhooks. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth10.0022330100020210411:161855MSTReversalAuth10.009900223399020210411:184642MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth10223309902021-04-11 16:18:55 MSTAAAUauth109900223310002021-04-11 18:46:42 MSTBEXRauth_exp_reversal10990022339902021-04-19 05:49:06 MSTBEXPaut_exp102233010002021-04-19 05:49:11 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDTRANSACTION DATE/TIME10.00-22335004112021 16:18:5510.00+99005223304112021 18:46:42 Posted Transactions RDF The transactions do not appear in this RDF. Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. In this table both the authorization and reversal are shown; however, in Production you would get only the most recent transaction. amtauth_idoriginal_auth_idtypelocal_amttimestamp-1022330A0000000010002021-04-11 16:18:551099000R0000000010002021-04-11 18:46:42 Get Transaction History response The transactions are not returned by this endpoint. Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts-1022330AUA2233990Y2021-04-11 16:18:552021-04-11 16:18:55109902233AUR99001000Y2021-04-11 18:46:422021-04-11 18:46:42-10NoneNoneEXR9900990NoneNone2021-04-19 05:49:0610NoneNoneEXA22331000NoneNone2021-04-19 05:49:11 "
459,docs.galileo-ft.com/pro/reference/post/getdeposithistory,Get Deposit History See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
460,docs.galileo-ft.com/pro/reference/post/cancelbillpayment,"Cancel Bill Payment Keep in mind that you cannot cancel a bill payment that has already been processed. When you create an electronic bill payment with a process date of ""now,"" the payment is processed within five minutes. If the payment is scheduled for a future date, you can still cancel it (paper or electronic), as long as it has not been processed yet. When canceling a paper bill payment in status P, it is possible that the check will not be canceled because of processes that are downstream from making the cancelation request with this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description435-01Bill pay transaction could not be found435-02Bill pay transaction not in a reversible stateLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
461,docs.galileo-ft.com/pro/reference/api-reference-events-api-dispute-pc,"dispute_pc Code — DSPC Event trigger — Provisional credit is awarded for a dispute. Process — This process contains the event trigger: Internal process that detects provisional credit Fields All fields are strings. Your field names may vary. Field Required Description dispute_amount X The amount of the dispute. Example: ""3245.22"" dispute_id X Unique identifier for the dispute. Example: ""12432"" dispute_notice_date X Date on which the cardholder disputed the charge. Format YYYY-MM-DD Example: ""2023-04-23"" dispute_rege_date X Due date for a Regulation E dispute. Format YYYY-MM-DD Example: ""2023-05-13"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DSPC"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" settle_detail_id X ID that maps back to the settlement record for the transaction. Example: ""13354855"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""dispute_pc"" Example JSON# dispute_pc example: { ""dispute_amount"": ""3245.22"", ""dispute_id"": ""12432"", ""dispute_notice_date"": ""2023-04-23"", ""dispute_rege_date"": ""2023-05-13"", ""msg_event_id"": ""243693"", ""msg_id"": ""DSPC"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""settle_detail_id"": ""13354855"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""dispute_pc"" } Table of Contents Fields Example "
462,docs.galileo-ft.com/pro/docs/direct-render-pin-set-procedure,"Direct Render PIN-Set Procedure This guide describes the direct render procedure for setting PINs, using the Get Card PIN Change Key and Commit Card PIN Change endpoints. This procedure transfers PCI-sensitive information directly from the cardholder’s device to Galileo's system using a PIN-set form that Galileo hosts. You do not need to be PCI compliant to use this method. Go to PIN-Set Procedures for other methods. Use this procedure to: Set a cardholder’s PIN for a new card Reset a cardholder's PIN for an existing card The direct form PIN-change process transfers PIN data from the cardholder directly to Galileo without the data passing through your system, thereby satisfying information security requirements. The process involves the following high-level steps: You call the Galileo Program API to get a PIN-change access key. You present the cardholder with an HTML PIN-set form that Galileo hosts. The cardholder enters the PIN twice and submits the form. Galileo stages the change if the PINs are correct. Galileo informs you of the success or failure of the PIN validation and form submission via either JavaScript or redirect pages, and Events API webhook messages may also be sent. If successful, you call the Galileo Program API to commit the PIN change. Galileo may send an Events API webhook to notify that the change was successful. Options You will need to decide among various options before using this procedure. PIN-set form presentation: WebView — Wrap the PIN-set form in a WebView. Browser window/pop-up — Present the PIN-set form directly in a browser or pop-up. iFrame — Embed the PIN-set form as an iFrame. PIN-set form styling: CSS SCSS (See https://sass-lang.com/documentation for the specification.) Results presentation: Your redirect pages — You can host one page for both results or different pages for success and failure. The pages can be accessed via HTTP or a deep link in your app. Galileo redirect pages — Galileo hosts the success and failure pages. JavaScript — Galileo enables JavaScript callbacks to be called on the error and success pages. JavaScript must be enabled on the PIN-set form. Webhook messages — Galileo sends Events API webhook messages to your server in addition to one of the other methods. Token/key validity: Amount of time — Default is five minutes. Number of attempts — Default is five attempts. Prior setup After you have been approved to use the direct render procedure, you must coordinate with Galileo to get set up. You will need to provide: Issuing bank approval. If using the redirect options — A list of base URLs to be used in redirects. When you pass in a redirect URL, the beginning of the URL is matched to the configured URLs in the Galileo system. You may also use custom schemes to intercept redirects within a mobile application. If the success redirect URL is https://pin.foo.com/pin-success, Galileo must register https://pin.foo.com in the system to allow the redirect. If you are using a failure redirect URL and it shares the same base URL (e.g., https://pin.foo.com/pin-failure), no additional base URLs need to be registered. If using a mobile deep link such as bar://pin-success, Galileo must register bar://. Additional header fields and values to be set on the redirect response. Whether to enable mobile callbacks in WebView. Whether to enable JavaScript messages in the parent page for the iFrame. If using the iFrame option — A list of URLs that will be embedding the iFrame. Because some legacy browsers do not support Content-Security-Policy, the first domain listed will be used for the X-Frame-Options header field. If the URL of the site embedding the iFrame is https://pin.bar.com/pin-set, Galileo registers https://pin.bar.com to enable the PIN form site to be in an iFrame. CSS (cascading stylesheet) or SCSS (sassy CSS). Stylesheets All stylesheets must be approved by Galileo before they are added to the system. You can provide more than one stylesheet. The filenames for the stylesheets are specified in a comma-delimited list in the GGSAS parameter, with the first filename listed being the default stylesheet. For example, if you create three stylesheets, they would be listed as style-1,style-2,style-3 in the GGSAS parameter. See step 3. Call the PIN-set form for instructions on specifying the stylesheet. Galileo will provide you with a starting CSS/SCSS file to style the PIN-set form. You then modify the file to add your styling. (There are SCSS plugins available for most major IDEs including Visual Studio Code and Jetbrains IDEs.) 📘NoteYou can provide or update the stylesheet at any point in the process. Galileo can perform initial setup without your stylesheet. When submitting a stylesheet change, you must provide the entire stylesheet. The top section of the SCSS file has variables used for the form and basic styling. Most styles can be modified by setting the variables in the first section. If you need more advanced styling, Galileo can provide four sample HTML pages that match the HTML of the PIN-set form: Set Your Pin.html — The initial PIN-set form with no alerts or errors. Set Your Pin-form-errors.html — The initial PIN-set form with form errors and error alerts visible. Set Your Pin-error.html — The error page that the cardholder would see if a token becomes expired or other system error occurs, such that you need to restart the process. Set Your Pin-success.html — The success page that the cardholder would see You cannot edit the HTML pages — the only styling that is permitted is via the stylesheet. If you are using redirects, the sample error and success pages will not be visible to your cardholder. Galileo will redirect to the URLs that you passed instead of displaying the sample pages. 📘NoteThe stylesheet cannot include references to external resources such as images, fonts, or additional stylesheets. The CSS/SCSS file can contain small base64-encoded images, which must be approved and encoded by Galileo. Galileo has several fonts available from Google Fonts. (Go to https://fonts.google.com to view font samples.) If you want to use other fonts, you must first obtain a license to use the font, then the font must be approved and go through a project request and change window (at least one month), so additional costs may accrue. Currently available fonts: FontURLArimoarimo-v13-latin/arimo-v13-latin-regular.[eot, svg, ttf, woff, woff2]IBM Plex Monoibm-plex-mono-v5-latin/ibm-plex-mono-v5-latin-regular.[eot, svg, ttf, woff, woff2]Latolato-v16-latin/lato-v16-latin-regular.[eot, svg, ttf, woff, woff2]Merriweathermerriweather-v21-latin/merriweather-v21-latin-regular.[eot, svg, ttf, woff, woff2]Merriweather Sansmerriweather-sans-v11-latin/merriweather-sans-v11-latin-regular.[eot, svg, ttf, woff, woff2]Monserratmontserrat-v18-latin/montserrat-v18-latin-300.[eot, svg, ttf, woff, woff2]Open Sansopen-sans-v17-latin/open-sans-v17-latin-regular.[eot, svg, ttf, woff, woff2]Playfair Displayplayfair-display-v15-latin/playfair-display-v15-latin-regular.[eot, svg, ttf, woff, woff2]PT Monopt-mono-v7-latin/pt-mono-v7-latin-regular.[eot, svg, ttf, woff, woff2]PT Serifpt-serif-v11-latin/pt-serif-v11-latin-regular.[eot, svg, ttf, woff, woff2]Robotoroboto-v20-latin/roboto-v20-latin-regular.[eot, svg, ttf, woff, woff2]Roboto Condensedroboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.[eot, svg, ttf, woff, woff2]Roboto Monoroboto-mono-v7-latin/roboto-mono-v7-latin-regular.[eot, svg, ttf, woff, woff2]Roboto Slabroboto-slab-v9-latin/roboto-slab-v9-latin-regular.[eot, svg, ttf, woff, woff2]Slaboslabo-27px-v6-latin/slabo-27px-v6-latin-regular.[eot, svg, ttf, woff, woff2]Source Sans Prosource-sans-pro-v13-latin/source-sans-pro-v13-latin-regular.[eot, svg, ttf, woff, woff2] To use one of these fonts, add the font face to your CSS/SCSS file. For example: CSS@font-face {  font-family: 'Roboto Condensed';  font-style: normal;  font-weight: 400;  src: url('/agserv/fonts/roboto-condensed-v18-latin-regular.eot');  src: local('Roboto Condensed'), local('Roboto Condensed Regular'), url('/agserv/fonts/roboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.eot#iefix') format('embedded-opentype'), url('/agserv/fonts/roboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.woff2') format('woff2'), url('/agserv/fonts/roboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.woff') format('woff'), url('/agserv/fonts/roboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.ttf') format('truetype'), url('/agserv/fonts/roboto-condensed-v18-latin/roboto-condensed-v18-latin-regular.svg#RobotoCondensed') format('svg'); } Once you have added your styles, Galileo will add the CSS/SCSS file or files to the system. (The stylesheets replace the partner.css file in the sample HTML pages.) 📘NoteIf you submit stylesheet changes but they are not visible after Galileo has updated the CSS file, verify that your submitter_id is correct. CSS files are linked to the submitter_id, so if there is a typo you will most likely see the default CSS. WebView If you are wrapping the PIN-set form in a native mobile application WebView, you can add an interface/message handler to receive the code from the error and success pages. JavaScript must be enabled on the Galileo system. Interfaces are called onLoad if interfaces are found in code on error and success pages. For Android, generate and register to the WebView a JavaScriptInterface with the name Android and the method postMessage(int statusCode). See Sample code for an example. For iOS, generate and register to the WebView a ScriptMessageHandler with the name IOS. See Sample code for an example. Direct render PIN-set workflow This flowchart illustrates the workflow for the process: 1. Cardholder accesses your interface The cardholder goes to your interface to set or change a PIN. 2. Send the Get Card PIN Change Key call Galileo recommends that you pass the CAD (card_id) for accountNo in the Get Card PIN Change Key call. In the response, Galileo sends a 50-character key in the token field. This key is valid for only a limited time and for only a specified number of uses, which are configured in your provider parameters. Defaults are five minutes and five page requests. The key cannot be reused after a success. Consult the Get Card PIN Change Key status codes table for an explanation of what each status code means and which next steps to take, if any. 3. Call the PIN-set form Create a URL using the token, your submitter ID, and locale to call the PIN-set form. The PIN-set form that you call for the customer's initial PIN set will be identical to the customer's subsequent calls to reset the PIN. The URL in the example is an AWS instance that Galileo sets up for each client. Request an AWS URL from Galileo if you do not already have one. The example contains the URL for the CV environment. For Production change cv in the URL to pd. HTML<iframe src=\""https://agserv-[clientname].cv.gpsrv.com/agserv/direct/pin/[locale]/[submitter id]/[token]""> where: clientname — Your Galileo system name locale — Supported locales are en_US, es_US, fr_US, fr_CA, en_MX, or es_MX, or you can specify the language only, as en, es, or fr. submitter_id — Supplied by Galileo, this number identifies your stylesheet, which will be applied to the PIN-set form. The identifier has the format [provider_id]-9999. token — The 50-character token that you retrieved by calling Get Card PIN Change Key. Include redirects (optional) If you are redirecting to pages that you host, you can specify one page for both results or different pages for success and failure. You must pass in the URLs with the PIN-set form call, using this format as well as URL encoding: ?r=[URL] — URL is the single redirect page or the success redirect page. ?f=[URL] — URL is the failure redirect page. Single-page redirect This is the format when both success and failure use the same page: HTTPhttps://[Galileo_URL]/agserv/direct/pin/[locale]/[submitter_id]/[token]?r=[URL-encoded_result_page] Optional: Include the s parameter to specify which stylesheet to use, such as s=style-2. If you do not pass the s parameter, the first stylesheet listed in the GGSAS parameter is used. HTTPhttps://agserv-[clientname].cv.gpsrv.com/agserv/direct/pin/en_US/99-9999/888tOkEn777777AaaaaaAtOkEn999999999999999999999999?r=https%3A%2F%2Fmydomain.com%2Fresult%2F Separate-page redirect This is the format when success and failure each have their own page: HTTPhttps://[Galileo_URL]/agserv/direct/pin/[locale]/[submitter_id]/[token]?r=[URL-encoded_success_page]&f=[URL-encoded_failure_page] Optional: Include the s parameter to specify which stylesheet to use, such as s=style-2. If you do not pass the s parameter, the first stylesheet listed in the GGSAS parameter is used. HTTPhttps://agserv-[clientname].cv.gpsrv.com/agserv/direct/pin/en_US/99-9999/888tOkEn777777AaaaaaAtOkEn999999999999999999999999?r=https%3A%2F%2Fmydomain.com%2Fresult%2Fsuccess&f=https%3A%2F%2Fmydomain.com%2Fresult%2Ffailure If you add %status_code% to the redirect URL, it will be replaced with the status code; otherwise, status_code=[status_code] will be appended to the redirect URL as a query-string variable. If the redirect URL contains variables, ensure that the variables are URL-encoded before encoding the full URL. Consult the PIN-set form status codes table to see an explanation of the status codes for the PIN-set form call and which next steps to take, if any. 4. Cardholder submits the form The cardholder enters and re-enters the PIN and submits the data directly to Galileo, without the data traversing your system. 5. Galileo sends the verdict If submitting the form times out, Galileo sends a failure message. If submitting the form is otherwise unsuccessful, such as the form being incorrectly formatted, Galileo sends a failure message. If the form submission is successful, Galileo performs two verification checks: The PINs have four digits each The PINs match Galileo responds with either success or failure, sending that response via redirect or JavaScript. If the verification checks are successful, Galileo stages the PIN change. According to your arrangements with Galileo, you will also receive the AFPE: agserv_PIN_change_fail or AFPS: agserv_PIN_change_success Account Events webhooks. 6. Send the Commit Card PIN Change call If you receive a success message, send the Commit Card PIN Change call to commit the change. Use the same accountNo that you used for the Get Card PIN Change Key call. Consult the Commit Card PIN Change status codes table to see an explanation of what each status code means and which next steps to take, if any. When the PIN change is successful, Galileo sends the PNCH: system_pin_change event. At this point, the cardholder can use the PIN, and you can retrieve the PIN via the PIN Retrieval Service if you are subscribed to that service. Sample code The samples below are provided as a reference on how to consume iFrame messages and mobile callbacks. 🚧WarningThe code samples contain some debugging and logging code that should not be used in the Production environment. JavaScript Requires JavaScript and iFrame messaging to be enabled. JavaScriptif (window.addEventListener) {  window.addEventListener(""message"", function (event) {   // Modify URL to match environment   if (event.origin !== ""https://secure-agserv.ua.gpsrv.com"") {    console.log(""Event.origin does not match baseurl"");    return;   }   var statusCode = event.data;   // Do something with the statusCode   console.log(""Received status code: "" + statusCode);   alert(""Received message: "" + event.data);  }, false); } Android (Kotlin) Requires JavaScript and mobile callbacks to be enabled. Kotlinclass MainActivity : AppCompatActivity() {  lateinit var webView: WebView  @SuppressLint(""SetJavaScriptEnabled"")  override fun onCreate(savedInstanceState: Bundle?) {   super.onCreate(savedInstanceState)   webView = WebView(this)   setContentView(webView)   webView.settings.javaScriptEnabled = true   webView.addJavascriptInterface(WebAppInterface(this), ""Android"")   webView.webChromeClient = WebChromeClient()   webView.webViewClient = WebViewClient()   webView.loadUrl(""https://secure-agserv.ua.gpsrv.com/agserv/direct/pin/en_US/99-9999/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"")  }  override fun onResume() {   super.onResume()  }  class WebAppInterface(private val context:Context) {   @JavascriptInterface   fun postMessage(code: Int) {    Toast.makeText(context, ""Received code $code"", Toast.LENGTH_LONG).show()   }  } } iOS (Swift) Requires JavaScript and mobile callbacks to be enabled. Swiftclass ViewController: UIViewController, WKScriptMessageHandler, WKNavigationDelegate {  func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {   print(message.body);  }  override func viewDidLoad() {   super.viewDidLoad();   let preferences = WKPreferences();   preferences.javaScriptEnabled = true;   let contentController = WKUserContentController();   contentController.add(self, name: ""IOS"");   let config = WKWebViewConfiguration();   config.preferences = preferences;   config.userContentController = contentController;   let url = URL(string: ""https://secure-agserv.ua.gpsrv.com/agserv/direct/pin/en_US/99-9999/KU1kqfr0zrFgwP0KXFfz3JuMrj5ETmGtXn7RH8p5_49oQTeew7"");   let webview = WKWebView(frame:    self.view.bounds, configuration: config); self.view.addSubview(webview);   webview.navigationDelegate = self   webview.load( URLRequest( url: url!) );  }  func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {   webView.evaluateJavaScript(""document.documentElement.outerHTML.toString()"",         completionHandler: { (html: Any?, error: Error?) in    print(html!)   });  } } Galileo setup These internal provider-level parameters must be set at Galileo, according to the form-presentation and results-presentation methods that you are using. ParameterDescriptionFormResultsGGEJSEnable all JavaScript. Required if using mobile or iFrame postMessage.iFrameWebViewJavaScriptGGHDR (optional)A set of key/value pairs for additional response headers when using no-redirect mode.iFrameWebViewRedirectGGIFDDomains that are allowed to call the iFrame.iFrameRedirectJavaScriptGGIFMEnable event trigger on error and success pages.iFrameJavaScriptGGKEH(optional)Number of times a PIN-set token can be used. Default: 5iFrameWebViewRedirectJavaScriptGGKEX(optional)Seconds before token expiry. Default: 300iFrameWebViewRedirectJavaScriptGGMCBEnable native mobile callbacks.WebViewJavaScriptGGRBUArray of redirect URLs when using a single results page or base redirect URLs when using both success and failure redirect pagesiFrameWebViewRedirectGGSASName of the file to use as a stylesheet. In the case of multiple stylesheets, this is a comma-separated list of filenames.iFrameWebViewRedirectJavaScript Get Card PIN Change Key status codes Consult this table to see an explanation of what each status code means for the Get Card PIN Change Key endpoint and which next steps to take, if any. Status codeDescriptionNext steps0SuccessContinue the procedure2Your API call contained one or more values that were not valid for the parameter.Retry with valid parameters4System exceptionContact Galileo for troubleshooting12The value in accountNo is not a valid account number.Retry with valid account number47Multiple active cards were found for the account.Retry with the CAD (card_id) in accountNo.-1System failure. Possibly a network or database issue.Consult the response message to see which steps to take. PIN-set form status codes Consult this table to see an explanation of the status codes for the PIN-set form call and which next steps to take, if any. Status codeDescriptionNext steps0SuccessContinue the procedure-1Bad submitter ID or no redirect URL providedRetry with valid submitter ID or provide redirect URL-10Invalid token. Token is either expired or not found.Verify that the token is correct or call the Get Card PIN Change Key endpoint again.-11Cardholder submitted a form with a token that is no longer valid, because Get Card PIN Change Key was called again, invalidating the previous key.Verify that the form is using the correct key before calling Get Card PIN Change Key again.-999System errorContact Galileo for troubleshooting-9999Unknown errorContact Galileo for troubleshooting Commit Card PIN Change status codes Consult this table to see an explanation of what each status code means for the Commit Card PIN Change endpoint and which next steps to take, if any. Status codeDescriptionNext steps0SuccessNone2Your API call contained one or more values that were not valid for the parameter.Retry with valid parameters.4System exceptionContact Galileo for troubleshooting.12The value in accountNo is not a valid account number.Retry with valid account number.47Multiple active cards were found for the account.Retry with the CAD (card_id) in accountNo.537-01No staged PIN change found.Verify that the form submission was successful.537-02No cards in status: N were found for the account.Verify that the card is in active status, or inform the cardholder that no PIN can be set for this card.537-03PIN change has not been started.Restart the process, beginning with calling Get Card PIN Change Key.-1System failure. Possibly a network or database issue.Consult the response message to see which steps to take.Updated about 2 months ago Table of Contents Options Prior setup Stylesheets WebView Direct render PIN-set workflow 1. Cardholder accesses your interface 2. Send the Get Card PIN Change Key call 3. Call the PIN-set form 4. Cardholder submits the form 5. Galileo sends the verdict 6. Send the Commit Card PIN Change call Sample code JavaScript Android (Kotlin) iOS (Swift) Galileo setup Get Card PIN Change Key status codes PIN-set form status codes Commit Card PIN Change status codes "
463,docs.galileo-ft.com/pro/reference/post/getaccesstoken,"Get Access Token Use this endpoint to send a customer a link to a one-time view of a dynamically generated image of a virtual card via HTTP, for example, or for other purposes as appropriate. Consult Digital card images in the Retrieving Card Information guide for more information. For other uses contact Galileo.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
464,docs.galileo-ft.com/pro/reference/api-reference-address1-validation,"address1 Any string that starts with APO, PO, APOB, POB, post office, call box, or gpobox and is followed by numbers or box. Street names that start with apo or po are not detected, e.g., Apollo street, Polar street. These elements do not affect the result: Leading, trailing, or in-between white-space characters such as space, tab, or enter A dot . between the letters A, P, and O, e.g., A.P.O or P.O. The case — Validation is case-insensitive. To disable this check, Galileo can set the EAPOB parameter. "
465,docs.galileo-ft.com/pro/reference/api-reference-special-functions,"Special Functions Visa Use the values in this table when association: visa. ValueDescriptionadd_address_verification_fieldsAdds the AVS verification parameters address1, address2 and zip to DE123 if they are present in the client's profile.add_cashbackSimulates cash back as part of the transaction. Requires the cashbackAmount parameter.add_pinAdds the PIN to DE052, if set.make_address_verification_onlyConverts the authorization message into an AVS transaction. Use when performing a tokenization authorization for a mobile wallet (transType: 16).make_multicurrencyConverts the transaction into a multicurrency request. Requires these parameters: settleAmount settleCurrencyCode cardBillingAmount cardBillingCurrencyCode If any of these parameters are not populated, the multicurrency property will not be applied to the authorization message. You can use whichever currency codes you want.make_tokenizedSimulates a transaction made with a mobile wallet. The requesterId and posEntryMode parameters are recommended for this function. Mastercard Use the values in this table when association: mc_auth. ValueDescriptionmake_tokenizedConverts the transaction into a tokenization request. Populating the requesterId and posEntryMode parameters is recommended for this function.make_atmConverts the transaction into an ATM withdrawal.make_partial_reversalConverts the transaction into a partial reversal. Requires the partialAmount parameter. The partialForeignAmount parameter can be populated instead.make_cashbackSimulates cash back as part of the transaction. Requires the cashbackAmount parameter. Debit accounts only.make_cash_advanceSimulates a cash advance as part of the transaction. Requires the cashbackAdvanceAmount parameter. Credit accounts only.Table of Contents Visa Mastercard "
466,docs.galileo-ft.com/pro/reference/api-reference-events-api-about-events-api-paths-and-content-types,"Paths and Content Types As mentioned in the Overview, events are grouped into categories, and posted to the webhook for that category: Account Events: /AccountEvent Authorization Events: /Authorization Settlement Events: /Settlement Transaction Events: /Transaction Galileo can send the event information as JSON or form data, and Galileo can receive the client response as JSON or XML. All fields are sent as strings. For example, a dollar amount like 500.00 is sent as ""500.00"". "
467,docs.galileo-ft.com/pro/docs/card-transaction-examples,"Card Transaction Examples This page contains examples for concepts that are explained in these guides: About Card Transactions — A general overview of how card transactions work, including the phases that a card transaction passes through. Authorization — An explanation of authorization and its variants. Settlement — An explanation of settlement and clearing. Crediting Cardholder Accounts — An explanation of transactions that return funds to the cardholder account. Except where otherwise noted, these examples show card transaction sequences as they appear in Get All Transaction History responses. These same sequences are available in the CST. 📘NoteTo see more detailed examples of transaction sequences as they appear in the Program API, Events API, Auth API, and RDFs, see the Card Transaction Scenarios. Three-step sequence The most common transaction sequence has three steps: authorization or preauthorization, backout, and settlement. Assuming an available balance of $1000, a retail merchant, and Mastercard Banknet (credit) rails, this is how a purchase of $30 might appear. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthAUA-3022330Y2233970BackoutBO530NoneNoneNone22331000SettleSE5-3022330Y2233970 The top row is the initial authorization for 30.00. Galileo places a 30.00 hold on the account. The second and third rows have the same timestamp and show the authorization backout (BO5) immediately before its settlement (SE5). The momentary increase to the balance happens on the ledger but is not perceptible to the cardholder nor can the funds be spent. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. MaestroVisa creditInterlinkStarDiscoverPulseAuthDBAVIAVIASTADCLPUABackoutBDABVABVABSABCLBPASettleSDAVSAISASSASCLSPA For a more detailed example, see Scenario 1: Authorization with Settlement. To see how to simulate this transaction in CV go to Three-Step Sequence Simulation. Also see this Recipe for an explanation of the fields in a Get All Transaction History response: Get All Transaction History response: preauthorization, backout, settlementOpen Recipe Five-step sequence In the case of gas pumps and some other merchants, the transaction sequence has five steps: preauthorization, preauthorization backout, completion, completion backout, and settlement. For a preauthorization with completion at a gas pump, Visa Interlink (debit) rails, and an upcharge of $75, this is how a $25 purchase might appear, assuming $1000 available balance at the beginning of the purchase. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balancePreauthVIL-7555660N5566925Preauth backoutPVPV75NoneNoneNone55661000CompletionVIC-2588995566N8899975Completion backoutBVC25NoneNoneNone88991000SettleISC-2588995566N8899975 The top row is the initial preauthorization with the upcharge. Galileo places a 75.00 hold on the account. The second and third rows have the same timestamp, and they represent the time when the gas has finished pumping. The third row is the completion that the pump sends with the actual sale amount, and the second row is the preauthorization backout immediately before. The hold on the account is now 25.00. The momentary increase to the balance from the backout happens on the ledger but is not perceptible to the cardholder nor can the funds be spent. The fourth and fifth rows have the same timestamp a day or so later, when the settlement batch file arrives at Galileo and Galileo matches the clearing message to the completion. The fifth row is the final settlement amount and the fourth row is the backout immediately before. The momentary increase to the balance happens on the ledger but is not perceptible to the cardholder. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. Mastercard BanknetMaestroVisa creditStarPreauthAULDBLVILSTLPreauth backoutBKBKPBPBPVPVPSPSCompletionAUCSDCVICSSCCompletion backoutBO5BDABVABSASettleSE5SDAVSASSA For a more detailed example see Scenario 2: Preauthorization with Completion. Also see the Gas pump plus convenience store example. To see how to simulate this transaction in CV, go to Five-Step Sequence Simulation. Also see this Recipe for an explanation of the fields in a Get All Transaction History response: Get All Transaction History: Preauth at gas pump with completionOpen Recipe Incremental authorization In this example, a ride-share app gets an authorization for $15, then after arriving at the first destination the cardholder asks for a second destination, which is an additional $10. After arriving at the second destination the cardholder asks for a third destination for $5. The network is Visa credit. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthVIA-1544440Y4444485Preauth backoutPVPV15NoneNoneNone4444500AuthVIA-2555554444Y5555475Preauth backoutPVPV-25NoneNoneYNone500AuthVIA- 3066665555Y6666470BackoutBVA30NoneNoneNone6666500SettleVSA-3066665555Y6666470 The top row is the initial authorization for 15.00. Galileo puts a 15.00 hold on the account. The second and third rows have the same timestamp, and they represent the time that the cardholder asks for the second destination. The app sends an authorization request for the cumulative amount and indicates that it is an incremental authorization. Galileo backs out the 15.00 hold and replaces it with a 25.00 hold. The fourth and fifth rows have the same timestamp, and they represent the time that the cardholder asks for the third destination. The app sends an authorization request for the cumulative amount and indicates that it is an incremental authorization. Galileo backs out the 25.00 hold and replaces it with a 30.00 hold. The sixth and seventh rows have the same timestamp and they represent time when Galileo receives the settlement batch file, matches the settlement to the final authorization, backs out the 30.00 hold, and debits 30.00 from the account. The prior_id field (called original_auth_id, original_id, or reversal ID in other contexts) for each incremental authorization contains the auth_id of the previous authorization in the series. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. Keep in mind that transactions in a mobile app are card-not-present transactions, and so interbank networks such as Maestro, Interlink and Star would not handle the precise scenario described above. However, incremental authorizations can also happen in card-present contexts. Mastercard BanknetMaestroInterlinkStarAuthAUADBAVIASTAPreauth backoutBKBKPBPBPVPVPSPSAuthAUADBAVIASTAPreauth backoutBKBKPBPBPVPVPSPSAuthAUADBAVIASTABackoutBO5BDABVABSASettleSE5SDAISASSA For a detailed example of an incremental authorization, see Scenario 3: Incremental Authorizations. To see how to simulate this transaction, see Incremental Authorization Simulation. Authorization reversal and expiry In this example the cardholder makes a purchase in a mobile app for $40 but cancels it a few minutes later. The cardholder has a $500 available balance before the transaction, and it takes place over Mastercard Banknet rails. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthAUA-4066770Y6677460ReversalAUR4088996677Y8899500Expire authEXA4066770Y6677540Expire reversalEXR-4088996677Y8899500 The first row shows the original authorization for -40.00. Galileo puts a 40.00 hold on the account. In the second row, when the cardholder cancels the transaction, the mobile app sends a reversal for 40.00. Galileo releases the 40.00 hold. The merchant never sends a clearing message for the transaction because the authorization and reversal are for the same amount. The third and fourth rows show that after the configured amount of time, both the authorization and its reversal expire. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. MaestroVisa creditInterlinkStarAuthDBAVIAVIASTRReversalDBRVIRVIRSSRExpire authDXAVXAVXASXAExpire reversalDXRVXRVXRSXR See Full reversal before clearing in the Crediting Cardholder Accounts guide for an explanation of this reversal type. To see how to simulate a reversal in CV, see Authorization Reversal Simulation. For a detailed example of a full reversal, see these scenarios: Scenario 4: Reversal on Authorization Before Clearing (Mastercard) Scenario 5: Reversal on Preauthorization Before Clearing (Visa) Partial reversal and expiry This example shows a cardholder using a ride-share app. At the beginning of a ride, the app obtains a $15 preauthorization and then settles the actual amount ($10) at the end of the ride. The cardholder has an available balance of $500 prior to the ride. The network is Mastercard Banknet (credit). trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balancePreauthAUL-1555110Y5511485ReversalAUR566330Y6633490Expire reversalEXR-5None0None6633485BackoutBO515NoneNoneNone5511500SettleSE5-1055110Y5511490 The first row is the initial preauthorization for -15.00. Galileo places a 15.00 hold on the account. The second row represents the end of the ride, when the ride-share app determines that the actual cost of the ride is 10.00, and so it sends a 5.00 reversal. Galileo removes 5.00 from the hold. The third, fourth and fifth rows have the same timestamp one or two days later, and they represent Galileo receiving the clearing message for -10.00. Galileo expires the 5.00 reversal first before backing out the original 15.00 hold and posting the $10 settlement. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. MaestroVisa creditInterlinkStarPreauthDBLVILVILSSLReversalDBRVIRVIRSSRExpire reversalDXRVXRVXRSXRBackoutBDABVABVABSASettleSDAVSAICASTA For a detailed example of a partial reversal, see Scenario 8: Partial Reversal on Preauthorization. Settlement of an expired authorization This example shows a settlement that posts for an authorization that has expired. The auth_id of the expired authorization is provided in the expired_auth_id field in the SETL: setl event webhook and the EXPIRED AUTH CODE field of the Posted Transactions RDF. Both of these fields must be enabled by request. If you do not enable these fields, there is no identifier to link the expired authorization with its settlement; instead, you must infer the relationship by comparing other values such as the amount and the merchant ID. The transaction is over Visa Interlink rails for $30. The initial available balance is $500, the authorization expires after seven days, and the settlement arrives at Galileo after 10 days. This table shows fields in the Events API webhooks. typeauth_idact_typeotypeamountexpired_auth_idopen_to_buyauth9090VIA30470auth_exp9090VXA30500setl2121ISM309090470 The first row shows the BAUT: auth event webhook when the transaction is initially approved. The second row shows the BEXP: auth_exp event webhook that is sent seven days later, when the authorization expires. The third row shows the SETL: setl event webhook that is sent 10 days after the initial authorization, when the clearing message arrives at Galileo in the settlement batch file. Because the authorization had expired, Galileo creates a new authorization entry, backs it out, and posts the settlement. The SETL: setl event has a new auth_id but includes the auth_id of the expired authorization in expired_auth_id. Other network codes When the example above takes place on other networks, these are the values in the act_type + otype columns. Mastercard BanknetMaestroVisa creditStarauthAU ADB AVI ASS Aauth_expEX ADX AVX ASX AsetlSE 5SD MIS MST M For a detailed example of the settlement of an expired authorization, see Scenario 16: Settlement Without Authorization. To see how to simulate a force-post in CV, go to Force-Post Simulation. Merchant credit See Merchant credits in the Crediting Cardholder Accounts guide for an explanation of merchant credit. These examples show a $50 merchant credit from different networks, assuming a starting balance of $500. Mastercard Banknet A Mastercard Banknet (credit) merchant credit does not have an authorization record, and it is classified as an adjustment by the Galileo system. For this reason, Galileo sends both a SETL: setl event webhook and a BADJ: adj webhook when the merchant credit is settled. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAdjustmentADC50None0None5511550 Mastercard Maestro For a Mastercard Maestro (debit) merchant credit there is an authorization record for a positive amount that is backed out when the settlement arrives. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthDBZ5044880N4488550BackoutBDZ-50NoneNoneNone4488500SettleSDZ5044880N4488550 Visa Interlink Similar to Mastercard Maestro, for a Visa merchant credit there is an authorization record for a positive amount that is backed out when the settlement arrives. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthVIZ5099440N9944550BackoutBVZ-50NoneNoneNone9944500SettleISZ5099440N9944550 These scenarios provide detailed examples of merchant credits: Scenario 6: Refund after Clearing (Visa) Scenario 7: Refund after Clearing (Mastercard Banknet) Incremental clearing See Incremental clearing in the Settlement guide for an explanation of this example, including an explanation of what a bookkeeping authorization record is. To link bookkeeping authorization records with the original preauthorization, Galileo uses these fields: original_multiclearing_auth_id — The auth_id of the original preauthorization that arrived over network rails. bookkeeping_auth_id — The auth_id of the bookkeeping authorization record that is next in the series. remaining_amount — The amount of the preauthorization that has not been cleared yet. Existing clients must request that these fields be enabled for the SETL: setl Events API webhook. The fields might have different names than those shown here. This example illustrates how a multi-clearing settlement appears through Events API webhooks, assuming that the multi-clearing fields have been enabled. Also see the Amazon transaction example for an alternative way for a merchant to handle multiple items in an order. Original preauthorization When the merchant obtains the preauthorization for the full sale amount, Galileo sends the BAUT: auth webhook with this data: auth_idamountresponse_code22222240000 This is a conventional authorization that arrives over network rails and passes through the Auth API, if used. The BAUT: auth webhook does not indicate that this transaction will have multiple clearings. First clearing The first clearing for $150 arrives in a settlement batch file from the network. An indicator in the clearing message shows that this is not the final clearing. Galileo sends a SETL: setl webhook with this data: auth_idbookkeeping_auth_idremaining_amountamountoriginal_multi_clearing_auth_id222222333333250150222222 Because the bookkeeping_auth_id field is populated, you know that Galileo has created a bookkeeping authorization record for the remaining $250 and that its auth_id is 333333. Galileo does not send a webhook to notify that a bookkeeping record has been created, and the bookkeeping records are not present in the RDFs. The original preauthorization amount is backed out before the bookkeeping authorization record is created. Second clearing The second clearing for $75 arrives in a settlement batch file from the network. An indicator in the clearing message shows that this is not the final clearing. Galileo sends a SETL: setl webhook with this data: auth_idbookkeeping_auth_idremaining_amountamountoriginal_multi_clearing_auth_id33333344444417575222222 With the value in original_multi_clearing_auth_id you can link this settlement to the original preauthorization. Final clearing The final clearing for $175 arrives in a settlement batch file from the network. An indicator in the clearing message shows that this is the last clearing. Galileo sends a SETL: setl webhook with this data: auth_idbookkeeping_auth_idremaining_amountamountoriginal_multi_clearing_auth_id44444400175222222 Because the bookkeeping_auth_id field is zero, you know that this is the last clearing for the transaction. If there were any remaining amount, it would expire after the configured time and be returned to the cardholder account. Disputes This example shows a chargeback and a second presentment over Visa rails for a disputed transaction of $70 that was resolved in the merchant's favor. The initial available balance is $500. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthVIA-7011110Y1111430BackoutBVA70NoneNoneNone1111500SettleVSA-7011110Y1111430ChargebackADh7011220None11225002nd presentADj-7011330None1133430 The first three rows show the original authorization, backout, settlement transaction sequence. The fourth and fifth rows have the same timestamp and show the chargeback amount (ADh) and the second presentment amount (ADj). The second presentment is present because the dispute was resolved in the merchant's favor. Galileo posts chargebacks and second presentments at the same time, after the dispute is resolved. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. Mastercard BanknetMaestroInterlinkPlusStarAuthAUADBAVIAVIWSTABackoutBO5BDABVABVWBSASettleSE5SDAISAPLWSSAChargebackADHADdhADhADhADse2nd presentADIADdjADjADjADSC See the About Disputes guide for more information. Examples by merchant type ATM withdrawal In this example the cardholder inputs $60 as the withdrawal amount. The ATM operator assesses a $2 fee per transaction, and the Galileo issuer assesses an additional $1 fee. The network is Visa Plus, and the cardholder has a $500 available balance. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balanceAuthPLW-6322220N2222437BackoutBVW63NoneNoneNone2222500SettlePLW-6222220N2222438FeeFE0013-188882222None8888437 The top row shows the initial authorization, which includes the cash amount plus both fees. The second, third, and fourth rows have the same timestamp, which is when Galileo receives a clearing file from Visa. Galileo backs out the original hold in the second row. For the settlement, the ATM operator's fee plus the cash amount are in one settlement (third row) and the fee assessed by the Galileo issuer is in another (fourth row). Other network codes When the example above takes place on other networks, these are the values in the trans_code column. The FE0013 would be the same for all networks, depending on your product settings. MaestroInterlinkStarMoneyPassPulseAllpointPrestoAuthDBWVIWSTWSTWPUWAPWSTWBackoutBDWBVWBSWBSWBPWABWBSWSettleSDWVSWSSWMPWSPWASWPRW For detailed ATM transaction examples, see these scenarios: Scenario 11: ATM Withdrawal Scenario 12: ATM Reversal To see how to simulate an ATM withdrawal in CV, go to ATM Withdrawal, Visa Simulation. Gas pump plus convenience store Cardholders frequently make purchases at the convenience store where they pump gas. These sample transactions assume Mastercard Maestro (debit) rails, a $75 upcharge, $45 total at the pump, $12 at the convenience store, and a starting available balance of $500. trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balancemcc_codePreauthDBL-7522770N22774255542Preauth backoutPBPB75NoneNoneNone2277500NoneCompletionDBC-4533880N33884555542AuthDBA-1244220N44224435541Completion backoutBDC45None0None3388488NoneBackoutBDA12None0None4422500NoneSettleSDC-4533880N33884555542SettleSDA-1244220N44224435541 The first row is the initial preauthorization at the pump for -75.00. Galileo places a 75.00 hold on the account. The second and third rows have the same timestamp a few minutes later, which represents the time when the gas transaction has finished and the pump sends a completion message. Galileo backs out the 75.00 preauthorization and replaces it with a 45.00 hold. The fourth row is the authorization for the purchase inside the convenience store, a few minutes after the gas finishes pumping. Galileo places an additional 12.00 hold on the account. The remaining rows all have the same timestamp a day or two later, when Galileo receives the clearing file from Mastercard. Both the gas and convenience store debits are backed out and then replaced by the completion (SDC) and the settlement (SDA), respectively. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. Mastercard BanknetVisa creditInterlinkStarPreauthAULVILVILSSLPreauth backoutBKBKPVPVPVPVPSPSCompletionAUCVICVICSSCAuthAUAVIAVIASTACompletion backoutBOCBVCISCBSCBackoutBO5BVABVABSASettleSE5VSCVSCSSCSettleSE5VSAISASSA Amazon transaction This example shows an Amazon transaction for two items, one of which ($25) is fulfilled by Amazon and the other ($50) by a third-party vendor. The cardholder has an available balance of $500 at the time the transaction is initiated and the transaction takes place over Mastercard Banknet (credit) rails. This is only one possible way for a merchant to conduct a transaction with multiple parts. See the Incremental clearing example for an alternative. Transaction codeAmountAVSResponse codeMerchant IDAuth IDBalanceAVS checkDA00.00Y850000022225599500.00PreauthAUL-25.00Y000000022229900475.00BackoutBO525.00NoneNone500.00SettleSE5-25.000000022229900475.00PreauthAUL-50.00Y005550022222211425.00BackoutBO550.00NoneNone475.00SettleSE5-50.005550022222211425.00 The information in the AVS and Response code columns is visible in the Authorized Transactions RDF. The merchant ID is available in the Authorized Transactions and Posted Transactions RDFs as well as responses from the Program API. The top row is the initial check that Amazon performs to ensure that the card is valid. AVS response Y means that both the address and Zip code matched, and response code 85 for an AVS check means success. The second row shows that some hours later, Amazon obtains a preauthorization for $25. There is a delay between the AVS check and the preauthorization because Amazon, like many high-volume vendors, submits authorizations in batches. The third and fourth rows happen a day or so later, when Amazon sends a clearing message for the preauthorization and Galileo backs out the preauthorization amount. The remaining rows show that when fulfilling its part of the order at a later time, the third-party vendor gets a separate preauthorization for $50, and then settles it in the usual manner. Other network codes When the example above takes place the Visa credit network, these are the values in the Transaction code column. Keep in mind that an Amazon transaction is a card-not-present transaction and so the debit (PIN) networks would not be involved. VisaAVS checkDA0PreauthVILBackoutBVASettleVSAPreauthVILBackoutBVASettleVSA Uber payment The tables below show a $200 payment from Uber into a driver's account (available balance $500) using a Maestro load. Keep in mind that with payments, the authorization ID (if present) may not be the same as the source ID. Authorized Transactions RDF TRANSACTION CODEAUTHORIZATION CODETRANSACTION AMOUNT289988200.00- Posted Transactions RDF TRANSACTION CODE/TYPEAUTHORIZATION CODETRANSACTION AMOUNTSOURCE IDPMMX9988200.00+2255 Get All Transaction History response trans_codeamtauth_idprior_idcredit_indsource_idcalculated_balancePMMX20099880None2255700 The record in the Authorized Transactions RDF shows the amount to load as a negative number, even though it is a payment into the account. These authorization entries are present for Mastercard loads but not Visa loads. Although there is a record in the Authorized Transactions RDF, there is no corresponding authorization record in the CST or the Program API responses, because there was no actual authorization—there is no authorization hold or subsequent backout. Only the settled payment is returned by the Program API and CST. In the CST the ID field corresponds to the source ID. The source_id maps to the pmt_id in the payments table. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. Keep in mind that for a Visa Money Transfer there is no entry in the Authorized Transactions RDF. Mastercard BanknetVisa Money TransferPMMLPMVT For a detailed example of a card load, see Scenario 17: Card Load (Maestro). International transaction In this example a U.S. resident cardholder with a $500 available balance goes to Brazil and purchases items worth 200 Brazilian reals. This transaction takes place over Mastercard Banknet (credit) rails. trans_codeamtauth_idlocal_amtlocal_curr_codeAuthAUA-39.629999200986BackoutBOA39.62NoneNoneNoneSettleSE5-40.239999200986 The top row shows the original authorization for USD$39.62. The local_amt field plus local_curr_code shows that the amount at the merchant site is 200 Brazilian reals. The second and third rows have the same timestamp, which is when the clearing file arrives from Mastercard a few days later. Galileo backs out the original authorization amount. The clearing amount is still the U.S. dollar equivalent of R$200, but because the exchange rate has changed since authorization, the clearing amount is different from the authorization amount. Other network codes When the example above takes place on other networks, these are the values in the trans_code column. MaestroVisaAuthDBAVIABackoutBDABVASettleSCAVSA For detailed examples of international transactions, see these scenarios: Scenario 13: International Authorization Scenario 14: International Reversal To see how to simulate an international transaction, see International Transaction, Visa Simulation. Updated 4 months ago Table of Contents Three-step sequence Five-step sequence Incremental authorization Authorization reversal and expiry Partial reversal and expiry Settlement of an expired authorization Merchant credit Mastercard Banknet Mastercard Maestro Visa Interlink Incremental clearing Original preauthorization First clearing Second clearing Final clearing Disputes Examples by merchant type ATM withdrawal Gas pump plus convenience store Amazon transaction Uber payment International transaction "
468,docs.galileo-ft.com/pro/reference/api-reference-de061-subfields,"DE061 Subfields DE061 contains point of service (POS) data about the conditions that exist at the point of service at the time of the transaction. Subfield 1 — POS terminal attendance. 1 digit. Indicates whether the card acceptor is attending the terminal. 0 — Attended terminal 1 — Unattended terminal (cardholder-activated terminal [CAT], home PC, mobile phone, PDA) 2 — No terminal used (voice/audio response unit [ARU] authorization); server 9 — Unknown data not available (SMS only*) Subfield 3 — POS terminal location. 1 digit. Indicates the location of the terminal. 0 — On premises of card acceptor facility 1 — Off premises of card acceptor facility (merchant terminal—remote location) 2 — Off premises of card acceptor facility (cardholder terminal including home PC, mobile phone, and PDA) 3 — No terminal used (voice/automated response unit [ARU] authorization); server 4 — On premises of card acceptor facility (cardholder terminal including home PC, mobile phone, PDA) 6 — Off cardholder premises, unattended (SMS only*) 8 — Additional POS terminal locations 9 — Unknown data not available (SMS only*) Subfield 4 — POS cardholder presence. 1 digit. Indicates whether the cardholder is present at the point of service and explains the condition if the cardholder is not present. 0 — Cardholder present 1 — Cardholder not present (unspecified) 2 — Cardholder not present (mail/facsimile order) 3 — Cardholder not present (phone or automated response unit [ARU]) 4 — Standing order/recurring transactions 5 — Cardholder not present (electronic order [home PC, internet, mobile phone, PDA]) 9 — Unknown data not available (SMS only*) Subfield 5 — POS card presence. 1 digit. Indicates if the card is present at the point of service. 0 — Card present 1 — Card not present 9 — Unknown data not available (SMS only*) Subfield 6 — POS card-capture capabilities. 1 digit. Indicates whether the terminal has card-capture capabilities 0 — Terminal/operator does not have card-capture capability 1 — Terminal/operator has card-capture capability 9 — Unknown data not available (SMS only*) Subfield 8 — POS transaction security. 1 digit. Indicates the card acceptor’s confidence in the transaction security level. 0 — No security concern 1 — Suspected fraud 2 — Identification verified Subfield 10 — Cardholder-activated terminal (CAT) level. 1 digit. Indicates the type of CAT used by the cardholder to initiate the transaction. 0 — Not a CAT transaction 1 — Authorized level 1 CAT: Automated dispensing machine with PIN 2 — Authorized level 2 CAT: Self-service terminal 3 — Authorized level 3 CAT: Limited amount terminal 4 — Authorized level 4 CAT: In-flight commerce 5 — Scrip device 6 — Authorized level 6 CAT: Electronic commerce transactions 7 — Authorized level 7 CAT: Transponder Subfield 12 — POS authorization lifecycle. 2 digits. Indicates the number of days preauthorization stays in effect (ATM and Maestro POS transactions should use 01). * SMS is the single-message system. At Galileo, the Maestro (debit) and Cirrus (ATM) networks are SMS, and the Mastercard Banknet (credit) network is dual-message system (DMS). The contents of this page are derived from the Mastercard document Single Message System Specifications, October 2019. "
469,docs.galileo-ft.com/pro/reference/post/updatefbenrollment,Update Federal Benefit Enrollment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description528-01Enrollment not found528-02Invalid agencyType528-03Invalid status528-04Invalid signedForm value528-05Invalid earlyAccess value528-06Error saving data528-07Invalid recipientTypeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
471,docs.galileo-ft.com/pro/reference/post/switchproduct,"Switch Product Galileo recommends that you use the CAD for accountNo; however, you can use the PRN if only one card has ever been associated with the account. For prodId pass the new product ID. Galileo recommends that you use this endpoint instead of Set Account Feature with type: 3 to switch products. For instructions see the Switching Products guide. 📘NoteThe expiry_date and card_security_code (CVV) that are returned by the endpoint are not the new values. The new values are generated later by the emboss process. Call Get Card to retrieve the new values after the emboss process has run. Status codeDescription590-01Product cannot be switched to the same product590-02Product cannot be switched to an invalid product590-03Product has been successfully switched but card reissue failed: The valid values for newPanFlag and newExpiryDate are Y, N or blank590-04Product has not been successfully switched and card reissue failed: Trying to update card status without requesting new PAN. oldCardStatus is valid only when newPan: Y.590-05Product has been successfully switched but card reissue failed: The valid values for oldCardStatus are C, D, and blank590-06Product has been successfully switched but card reissue failed: Trying to update card status without requesting new PAN. oldCardStatus is valid only when newPan: Y.590-07Product has been successfully switched but card reissue failed: Failure getting data associated with account/card. Cannot retrieve CAD, ENP or product ID.590-08Product has been successfully switched but card reissue failed: Failure getting data associated with account/card. CAD or XID is null.590-09Product has been successfully switched but card reissue failed: Insufficient funds to cover reissue fee590-10Product has been successfully switched but card reissue failed: Failure, generic error processing reissue fee.590-11If newPan: Y then newExpiryDate: Y is required.590-12Product has been successfully switched but card reissue failed: card has pending reissue records.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
472,docs.galileo-ft.com/pro/reference/post/modifyachaccount,Modify ACH Account For instructions on using this endpoint see Modifying ACH Accounts in the ACH Endpoints guide.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description424-01ACH account not found424-02ACH account already existsLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
473,docs.galileo-ft.com/pro/docs/about-real-time-funding,"About Real-Time Funding Companies that issue debit cards to their employees for business-related expenses soon find that keeping track of all those account balances is complicated. Each card account must be loaded—and then frequently reloaded—with an appropriate amount of funds, and then to see how much has been spent and how much remains, the balances from dozens, hundreds, or even thousands of accounts must be totaled. This laborious process provides a mere snapshot that quickly goes out of date, and so the totaling must be repeated. Galileo's Real-Time Funding (RTF) solution removes this accounting complexity by providing one central account that contains all of the funds for multiple card accounts. When a card is used to make a purchase, Galileo automatically transfers the purchase amount from the central account to the card account in real time. When an amount is reversed back onto the card, Galileo automatically transfers the funds back into the central account. With this arrangement, a company only has to check the balance of the central account to see how many funds remain, while at the same time separate transaction records for each individual card are also available. For individual cardholders, the purchasing experience is the same as with a conventional payment card: the real-time funds transfer happens so quickly that authorization time is not noticeably affected. Card transactions are denied only if the central funding account has insufficient funds or if the purchase violates velocity, merchant type, or other limits on the individual card. Use case 1 A corporation issues three types of cards to its employees, depending on the employee's role and responsibilities. Each department has its own central account, and the monthly budget for the departments is deposited into each central account from another corporate account. For example, the Sales department receives $100,000 per month in its central account, and all of the Sales employees have cards that are tied to that central account. Some employees have a card with a weekly limit of $200 at office supply stores, others have a card with a $500 weekly limit that can be used at a wider number of stores, and the executives have cards with no limits. Every time one of the cards is used to make a purchase, the card draws on the central account. The department regularly checks the balance of the central account to ensure that they're staying within budget, and at any time they can get an itemized list of what each card spent and where. Use case 2 A family has three children who are old enough to learn how to handle money. They set up a central allowance account and issue a card to each child. The cards have different spending limits depending on the age of the child as well as limits on the merchants where the cards are valid. The parents can set a hard monthly limit on the central fund—once it's gone, it's gone—or they can decide to add funds as needed from another family account. How it works The issuer sets up a central account, called an RTF funding account, that contains the funds for all of the cards and then creates RTF spending accounts with cards that are connected to the RTF funding account. The RTF spending accounts all have a 0.00 balance, and for this example, the RTF funding account contains 1000.00. When a cardholder uses a card to make a $50 purchase, the sequence of events is as follows: The merchant sends an authorization request to Galileo for –50.00. Galileo checks the available balance of the RTF funding account. There are sufficient funds. Galileo moves 50.00 from the RTF funding account into the RTF spending account. The RTF funding account now has an available balance of 950.00 and the RTF spending account has an available balance of 50.00. Because the transfer was triggered by an authorization request, the 50.00 is locked and cannot be spent on another transaction. Galileo approves the authorization request and places a 50.00 hold on the RTF spending account, so the available balance on the RTF spending account is 0.00 again. A few days later, when the –50.00 settlement arrives, Galileo reverses the 50.00 hold and posts –50.00 to the spending account. The available balance for the RTF spending account is still 0.00. Likewise, if the RTF spending account receives a merchant credit or reversal, the funds are posted to the spending account, and Galileo immediately moves the amount back into the RTF funding account. 📘NoteSee Real-Time Funding Transaction Examples for example ledger entries. RTF account characteristics Galileo has created two new product categories: RTF funding and RTF spending. RTF funding accounts An RTF funding product has these characteristics: Supports: Thousands of connections with RTF spending accounts ACH credits and debits, both incoming and outgoing Connections to RTF spending accounts with different product IDs Does not support: Card transactions Product switching Galileo KYC/CIP process Balance sharing Velocity, MCC, or merchant ID authorization controls at the product or account level Cannot be a secondary account or have secondary accounts. RTF spending accounts An RTF spending product has these characteristics: Is a debit-type product. Can be a physical card, virtual card, or Digital First card Maintains a 0.00 available balance at all times. Can be associated with only one RTF funding account. Cannot be moved to another RTF funding account. Does not share a balance with the RTF funding account or other RTF spending accounts. Supports: Conventional card transactions, except ATM program fees and balance inquiries Cashback, at the program manager's discretion Velocity, MCC, and merchant ID authorization controls at the product and account levels The Galileo KYC/CIP process. Whether you need to run KYC/CIP to create a spending account depends on your bank's requirements. Merchant credits Secondary accounts such as savings or overdraft Does not support Bill pay Real-time ACH transactions Card loads Manual funds transfers with the Program API or the CST Follows these rules for product-switching: An account can be product-switched, but only to another RTF spending product. Cannot switch from an RTF spending product to a non-RTF spending product or vice-versa. You can create different RTF spending products according to the card types that you want to issue to cardholders. For example, you can create an RTF spending product with a virtual card and another with a physical card, or you can create card products with different spending limits, and all of these card accounts can be associated with the same RTF funding account. 📘NoteThe linkage between RTF funding accounts and RTF spending accounts is created at the account level, during spending-account creation. There is no back-end setting to link an RTF funding product to RTF spending products. Creating RTF accounts See Creating Real-Time Funding Accounts for instructions. Managing RTF accounts See Managing Real-Time Funding in Creating Real-Time Funding Accounts for instructions. Migrating existing accounts to RTF accounts Ask Galileo for advice on how to proceed. Do not attempt to use product switching to convert non-RTF accounts into RTF accounts.Updated 5 months ago Table of Contents Use case 1 Use case 2 How it works RTF account characteristics RTF funding accounts RTF spending accounts Creating RTF accounts Managing RTF accounts Migrating existing accounts to RTF accounts "
475,docs.galileo-ft.com/pro/reference/account-events-webhook,"Account Events Webhook Requests The event data (described in the index pages that follow) will be in the body of the request, as JSON or form data. JSON example (application/json): JSON{ ""type"": ""card_shipped"", ""account_id"": ""2011"", ""balance"": ""500.00"", ""cad"": ""12534"", ""pmt_ref_no"": ""155200002022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2019-10-09 11:20:33 MST"", ""msg_event_id"": ""1234567891"" } Form example (application/x-www-form-urlencoded): type=card_shipped&prod_id=1619&prog_id=255&pmt_ref_no=199999999998&open_to_buy=4.05&timestamp=2019-10-09+11%3A20%3A33+MST Responses JSON response example: JSON{ ""success_code"": ""0"" } XML responses should use the webhook name (AccountEvent) as the envelope. Example: XML<AccountEvent><success_code>0</success_code></AccountEvent> LanguageShellNodeRubyPHPPython "
476,docs.galileo-ft.com/pro/reference/api-reference-ach-account-statuses,ACH Account Statuses StatusDescriptionACancelled AccountDDeleted AccountMErrorNActivePPremiumQPending VerificationSUnverifiedTTrialUUnconfirmedXVerification NeededaApprovedbCancelledlPending Approval 
478,docs.galileo-ft.com/pro/docs/creating-an-adjustment,"Creating an Adjustment An adjustment is a transaction that modifies the balance in a customer account. In the Galileo Program API, you can manually make an adjustment that credits or debits your customer’s account using the Create Adjustment endpoint. Galileo's internal processes also can make adjustments, and an external entity might make an adjustment, such as when a financial institution makes an inbound debit request to move funds out of your customer’s account. This guide provides an overview of adjustments and describes the endpoints and tools for creating, reversing, and viewing adjustments in the Galileo system. Adjustment use cases These are some common use cases for adjustments. Fee reimbursement — If your customer incurs a fee that should be reimbursed, you can create an adjustment that credits the fee amount to the customer’s account. For example, you can create an adjustment to reimburse an ATM withdrawal fee. (Depending on your setup, you can use the Reverse Fee endpoint instead.) Non-card based account debit — Adjustments debit funds for non-card transactions, such as bill pay, account to account, and outbound ACH transactions. Dispute resolution — If your customer successfully disputes a transaction, you can create an adjustment to credit the funds for the dispute to your customer’s account. See Provisional credit in the Disputes at Galileo guide for more information. Rewards and third-party integrations — You can create adjustments for regular transactions that are established at the program level that credit or debit external accounts based on daily aggregates (for example, loading a debit card or sending funds using a third-party acquiring service). Payments vs. adjustments The Galileo system classifies transactions into one of four categories: authorization/settlement, payment, adjustment, and fee. (See Classifying transactions in the About Transactions guide for more information.) These are the differences between a payment made with the Create Payment endpoint and an adjustment made with the Create Adjustment endpoint. Direction of funds — The Create Payment endpoint moves funds only into a customer’s account while the Create Adjustment endpoint moves funds either into or out of a customer’s account. Velocity limits — The Create Payment endpoint applies velocity limits to transactions while Create Adjustment usually does not. Typically, the Create Adjustment endpoint is used to make administrative adjustments for an account balance, which may mean that velocity limits should not be applied. Account status — The Create Payment endpoint takes account and card status into consideration when a payment is posted. Create Adjustment always ignores the account or card status because administrative activities may need to be performed on canceled accounts or cards. Hold days — The Create Payment endpoint accounts for pending hold days, which you can update with the Update Payment endpoint. The Create Adjustment endpoint does not account for hold days. Adjustments are immediately inserted into the account without significant delay. 📘NoteSee the Creating a Payment guide for more information about creating, reversing, and updating payments. Summary of payments and adjustments This table summarizes the differences between payment and adjustment endpoints. Endpoint usageCreate PaymentCreate AdjustmentMoves funds into customer accountXXMoves funds out of customer accountXApplies velocity limits to transactionsXIgnores account and card statusXAccounts for pending hold daysX Create Adjustment endpoint Use the Create Adjustment endpoint to modify the balance of a customer account. You can use this endpoint to either credit or debit the account. This table describes parameters that are specific to the Create Adjustment endpoint. ParameterDescriptionaccountNoThe account number for the account to be adjusted.amountThe amount to credit or debit, as a decimal or whole number. Do not use a negative number. Instead, indicate the direction of funds in the debitCreditIndicator field.typeYou determine valid values in cooperation with Galileo.debitCreditIndicatorIndicates whether to credit or debit the account with the value in the amount field.C — CreditD — Debit 📘NoteWhen initiating a transaction with the Program API, the transactionId from the API request is copied to the external transaction ID field of all transactions that result from the request. The external transaction ID is available in the responses to transaction-retrieval Program API requests as external_trans_id, in the Posted Transactions RDF as EXTERNAL TRANSACTION ID, and in the Events API webhook messages as ext_trans_id. Reversing an adjustment Although the Program API has a Reverse Adjustment endpoint, Galileo recommends that you not use it to reverse adjustments, because of the way that endpoint handles transaction codes. If you use the Reverse Adjustment endpoint, the reversed transaction will not have a transaction code that indicates that it is a reversal of a previous transaction. Instead, when you design your funds-flow schema with Galileo, make sure that you have an otype that designates the appropriate reversal. Using the Create Adjustment endpoint, reverse the original adjustment by passing the opposite direction for debitCreditIndicator and by using the corresponding reversal otype for type. Viewing adjustments You can retrieve a record of adjustments and adjustment reversals using the Get Account Overview, Get Transaction History, and Get All Transaction History endpoints. These endpoints return a comprehensive list of transactions, including adjustments. 📘NoteThere is a delay of several seconds before an adjustment appears in a customer’s transaction history and account overview. Create adjustment workflow This flowchart shows the logical progression of the Create Adjustment endpoint. The actual sequence of events in the Galileo system may vary. You send the Create Adjustment request. Galileo performs preliminary checks. Failures return the status codes shown in the diagram. Consult Create Adjustment status codes in this guide for next steps. Galileo verifies that the transaction ID is an integer. If it is not, Galileo returns status: 409-01. An integer is required so that if there is a later call to the Reverse Adjustment endpoint, the transaction ID is an exact match. Galileo verifies that the transaction ID is 23 characters or less. If it exceeds 23 characters, Galileo returns status: 409-08. If debitCreditIndicator is set to C, Galileo moves funds into the account, returns status: 0 and sends the BADJ: adj event if it is configured. If debitCreditIndicator is set to D, Galileo checks whether there are sufficient funds in the account. If there are sufficient funds, Galileo moves funds out of the account, returns status: 0 and sends the BADJ: adj event. If there are not sufficient funds, Galileo performs the following checks: Galileo checks if the product is either configured to allow a negative balance (ALWNB is set to Y at the provider level) or if there is a corporate finance tree to handle insufficient funds. If either are true, Galileo moves funds out of the account, returns status: 0 and sends the BADJ: adj event. If the product does not allow a negative balance and overdraft withdrawals should not be attempted, Galileo returns status: 409-07. Galileo verifies that the product is configured for overdraft. If not, Galileo returns status: 409-03. Galileo verifies that the account holder is participating in overdraft. If not, Galileo returns status: 409-02. Galileo verifies that the overdraft account has sufficient funds to cover the adjustment. If not, Galileo returns status: 409-04. Galileo verifies that the overdraft account is configured for adjustments. If not, Galileo returns status: 409-06. Galileo verifies that funds from the overdraft account were transferred successfully. If not, Galileo returns status: 409-05. Galileo sends response status: 0 and creates the adjustment by crediting or debiting the account. Galileo sends Transaction Events webhook BADJ: adj. Events API webhook When an adjustment is made for an account balance (either credit or debit), the BADJ: adj event message is triggered, if it is configured. The BADJ: adj event is also triggered by internal and external processes that credit or debit an account. Depending on your configuration, this may include: Adjustments made via CST Adjustments made by internal processes Inbound merchant credit Fees and reimbursements Withdrawals from an overdraft account Authorization reversals ACH returns Outbound ACH credit Billpay transactions Status codes This table contains status codes that are specific to the Create Adjustment endpoint as well as any next steps to take. Status codeDescriptionNext step409-01The transactionId parameter is not an integer value.Retry with a valid transactionId.409-02An overdraft adjustment was attempted but the account holder is not participating in overdraft.Follow your business plan for this event.409-03An overdraft adjustment was attempted but the product for the account is not configured for overdraft. This could mean that:ODPID is not setODISE is not set and the account holder is not participating in overdraftThe PRN for the overdraft account does not existFollow your business plan for this event.409-04The overdraft account has insufficient funds to cover the negative adjustment.Follow your business plan for this event.409-05Overdraft funds did not successfully transfer.Retry the adjustment.409-06Account holder overdraft configuration error.Check the customer’s overdraft configuration.409-07The account balance contains insufficient funds for the adjustment and the following conditions are met:There is no corporate finance tree to handle insufficient funds.The product is not configured for overdraft.ALWNB is not set to 1 to allow the account balance to be driven negative.Follow your business plan for this event.409-08The transactionId parameter exceeds 23 characters.Retry with a valid transactionId. Using the CST for adjustments You can use the CST to create and view adjustments for an account. The following are actions that you can take in the CST that will result in an adjustment. Create an adjustment from the Insert Adjustments page. Mark a return from the Payment History page. Initiate or recover an account chargeoff from the Account Info page. Process a dispute by issuing temporary credit, or by releasing or reversing a transaction from the Adjustment History page. 📘NoteSome CST controls may not be available for all users depending on your administrator’s Roles and Rights settings. A user must have permission to create and modify specific adjustment types and to set adjustment limits. No adjustments are allowed until an adjustment limit is set. This table describes controls for creating and viewing adjustments in the CST. CST controlLocationDescriptionInsert AdjustmentAccount > Finance BarCreate an adjustment for the account. Enter a positive amount to credit the account and a negative amount to debit the account.Account DetailsAccount > Account InfoView all transactions for the account, including adjustments.All TransactionsAccount > Account InfoView details and totals for all transactions within a specified time period, including adjustments.Adjustment HistoryAccount > Account InfoView the entire history of adjustments made for the account. Galileo setup ParameterLevelDescriptionADJLMProductSpecifies the maximum amount for adjustments made through the CST.ALWNBProviderControls whether a call to the Create Adjustment endpoint can drive an account balance negative. When this parameter is set at the product level, it permits the account to be driven negative by the Create Account Transfer endpoint.Updated 21 days ago Table of Contents Adjustment use cases Payments vs. adjustments Summary of payments and adjustments Create Adjustment endpoint Reversing an adjustment Viewing adjustments Create adjustment workflow Events API webhook Status codes Using the CST for adjustments Galileo setup "
479,docs.galileo-ft.com/pro/reference/api-reference-ach-transaction-statuses,"ACH Transaction Statuses StatusDescriptionACancelled at account holder's request.CCancelled.DDeleted by account holder.EError. The transaction was invalidated before being included in the Nacha file, or the transaction was returned because of an error.LCancelled due to violation of debit limit.NQueued for transfer. The initial status when the transaction is placed in the queue to be validated. Only transactions in this state can be cancelled.PQueued for transfer. This is the status after N when the transaction has been successfully validated and is ready to be added to the Nacha file.RBad routing number.SSent. The transaction has been placed in the Nacha file to be sent to the bank. If the transaction is successful, it remains in Sent status.VQueued for transfer. This is the status after N when the validation is unsuccessful. The reject_code field is populated in this case.XOn hold.aApproved after limit violation.bCancelled after limit violation.lPending approval after limit exceeded. "
480,docs.galileo-ft.com/pro/docs/about-overdraft-accounts,"About Overdraft Accounts Galileo supports overdraft protection for your customers when a primary checking account is associated with an overdraft account. An overdraft account provides a line of credit when there are insufficient funds in the primary account to cover a transaction. The overdraft product can be linked to a primary debit card product, mobile wallet product, or consumer checking product. Overdraft is a regulated product. You may offer overdraft protection to your customers if you meet requirements and obtain permissions from your bank. Overdraft terminology Galileo uses the following terminology to describe overdraft accounts and features. Demand Deposit Account (DDA) — The customer’s primary account. This is the first account created when a customer is enrolled, and the product that the overdraft account is linked to. Overdraft account — An account that provides a line of credit to the account holder when there are insufficient funds in the DDA. The account holder must opt in and maintain eligibility to access overdraft account funds. Active overdraft account — An overdraft account that is available for use, such that all qualifying transactions can draw on it. Inactive overdraft account — An overdraft account that is not available for use. The account may be technically active (it is connected to the DDA), but transactions cannot use it because of a disqualifying event or condition. For details, see Account holder loss of access to the line of credit in Managing Overdraft Accounts. Line of credit — The overdraft funds available to the account holder. This is also called the credit limit. De minimis — The minimum threshold amount that the primary account can draw on the overdraft account, at which point a fee is applied. Grace period — A period of time granted to the account holder to repay funds drawn on the overdraft account before the overdraft fee is charged. The grace period timer starts when funds drawn on the overdraft account meet or exceed the de minimis threshold. Guide contents The following sections in this guide describe overdraft accounts at Galileo. How Overdraft Works at Galileo — Overview of the account holder experience, product setup, and overdraft transactions. Configuring Overdraft Products — Options and considerations for overdraft product setup. Managing Overdraft Accounts — Requirements for overdraft account eligibility and information about how overdraft works with secondary account configurations. Overdraft Operational Setup — Description of the Get Overdraft Balance endpoint, Events API webhooks, and CST controls for overdraft accounts. Overdraft Workflows — Workflows for overdraft settlement, credit limit, repayment, and funds transfer in case of non-payment. Creating an Overdraft Account — Procedures to create, view, and disable overdraft accounts. Updated about 1 year ago Table of Contents Overdraft terminology Guide contents "
481,docs.galileo-ft.com/pro/reference/post/getcreditsummary,Get Credit Summary The table below lists status codes that apply to this specific endpoint. Status CodeCode Description549-01Invalid credit accountLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
482,docs.galileo-ft.com/pro/reference/errors,"Status Codes and Errors Endpoint-specific status codes are documented in the description for each individual endpoint and have one of these two formats: [3-digit-prefix]-xx [4-digit-prefix]-xx Status codes that are used across endpoints are listed in the Global Response Statuses enumeration. When the status code communicates an error, the errors list is present and is populated with one or more details about the error. Example error response JSONXML{  ""status_code"": 2,  ""status"": ""Invalid parameter(s)"",  ""system_timestamp"": ""2020-08-13 10:20:46"",  ""response_data"": {},  ""processing_time"": 0.28,  ""echo"": {   ""transaction_id"": ""hymteqhhj9qlyrebeb8ktmk2GEwfql"",   ""provider_transaction_id"": """",   ""provider_timestamp"": null  },  ""errors"": [   ""achAccountNo='achAccountNo' is required and cannot be empty"",   ""achRoutingNo='achRoutingNo' is required and cannot be empty""  ] } <response>  <status_code>2</status_code>  <status>Invalid parameter(s)</status>  <system_timestamp>2020-08-13 10:20:08</system_timestamp>  <response_data/>  <processing_time>0.228</processing_time>  <echo>   <transaction_id>hymteqhhj9qlyrebeb8ktmk2GEwfql</transaction_id>   <provider_transaction_id/>   <provider_timestamp/>  </echo>  <errors>   <error>achAccountNo='achAccountNo' is required and cannot be empty</error>   <error>achRoutingNo='achRoutingNo' is required and cannot be empty</error>  </errors> </response> Table of Contents Example error response "
483,docs.galileo-ft.com/pro/changelog/july-2020,"July 2020 New account features We added six new features for the Set Account Feature endpoint: These three are mutually exclusive — only one can be set to Y at a time : 20 — Block card present without token 21 — Block all card not present and card present without a token 22 — Block all token transactions These features enable delinquency reporting: 23 — First delinquency date 24 — Delinquency amount Feature 25 sets embossLine2. Updated expressMail capabilites For Program API endpoints that create card orders, we updated the expressMail parameter to support additional shipping methods: Create Account Create Virtual Card Account Start Enrollment "
484,docs.galileo-ft.com/instant/reference/ach-status,ACH Status StatusDescriptionpendingACH queued for transferpostedACH successfulfailedACH failed 
485,docs.galileo-ft.com/pro/reference/api-reference-events-api-low-balance-notify,"low_balance_notify Code — LBLC Event trigger — The available balance is lower than LOBTH. Process — This process contains the event trigger: Automated process that checks for balances lower than LOBTH. Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""LBLC"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""low_balance_notify"" Example JSON# low_balance_notify example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""LBLC"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""low_balance_notify"" } Table of Contents Fields Example "
486,docs.galileo-ft.com/pro/docs/crediting-cardholder-accounts,"Crediting Cardholder Accounts This guide explains transactions that move funds from the merchant to the cardholder account: Reversals — An authorization is negated fully or partially before clearing. Merchant credits — A transaction is reversed after clearing, or the merchant provides compensation to the cardholder. Card loads — Funds are deposited into the cardholder account. Disputes — A settled transaction is challenged with the help of the card network. This guide assumes that you are familiar with the concepts in these guides: About Transactions — A general guide to how transactions are represented in the Galileo system. About Card Transactions — A general overview of how card transactions work, including the phases that a card transaction passes through. Authorization — A detailed explanation of authorization and its variants. Settlement — A detailed explanation of settlement and clearing. 📘NoteTo see detailed examples of transaction sequences as they appear in the Program API, Events API, Auth API, and RDFs, refer to the Card Transaction Scenarios. Reversals A reversal negates all or part of a previous authorization. Reversals are performed before the transaction passes through the clearing stage and are performed in situations such as these: A preauthorization is for a larger amount than the final sale, so the remaining amount is reversed out. A transaction is performed in error, such as a duplicate transaction. A cardholder cancels a transaction in an app shortly after the initial authorization. A cardholder requests a refund for all or part of a purchase amount before the transaction clears. An e-commerce site gets a preauthorization for a nominal amount to verify the card, then reverses the amount before authorizing the full sale amount. The merchant does not receive an authorization response from the issuer. The merchant is unable to complete the authorized transaction because of technical problems. A reversal may be for the previously authorized amount or for only part of it. When the reversal is for the same amount as the original authorization, the transaction is effectively canceled, so the merchant does not send a clearing message for that transaction. Instead of clearing, the authorization and its reversal expire out of the Galileo system after the configured time. For most reversals, the transaction type is R, and the reversal ID (called the prior_id, original_id, and original_auth_id in other contexts) links the reversal with its authorization. For card-load reversals over network rails, the transaction type varies according to the network and the load type, and the prior_id is not necessarily populated. See the Additional network transactions table in the Transaction Types enumeration for reversal codes. The sequence of events for a reversal is different depending on whether a full or partial amount is reversed. (In the explanations that follow, the MTI is provided for those clients who use the Auth API.) Full reversal When a merchant reverses all of a transaction before it clears, it's usually for one of these reasons: There was an error in making the original authorization request. A duplicate authorization request was accidentally sent. The authorization was for a small amount to check card status. A preauthorization was for an estimated amount that is followed by the actual sale amount soon after. The cardholder returned the item within a short time. In this example reversal, the sale amount is $40. The merchant sends an authorization request for -40.00, as either MTI 0100 or MTI 0200. The authorization request is approved. Galileo assigns 4444 as the auth_id,sends the BAUT: auth webhook, and places a 40.00 hold on the account. A few hours later, the merchant sends the reversal notification for 40.00 as MTI 0420. Because the third digit is 2, this is an advice, so only 00 is accepted as the response. Galileo sends the webhook for the reversal with 5555 as the auth_id and 4444 as the original_id. Galileo sends the AAAU: auth webhook and removes the 40.00 hold. These two transactions, the unsettled authorization (auth_id: 4444) and the reversal (auth_id: 5555), remain in Galileo's authorizations table until the configured expiry time for this transaction type and merchant. At the expiry time, Galileo expires the two transactions from the database and sends the webhooks BEXP: auth_exp for auth_id: 4444 and BEXR: auth_exp_reversal for auth_id: 5555. Neither of these two transactions will appear in the Posted Transactions RDF, but they will both be present in the Authorized Transactions RDF. To see which transactions are produced by a reversal see Authorization reversal and expiry in Card Transaction Examples. For detailed examples see these card transaction scenarios: Scenario 4: Reversal on Authorization Before Clearing (Mastercard) Scenario 5: Reversal on Preauthorization Before Clearing (Visa) Partial reversal In some cases the merchant reverses out only part of the transaction before clearing, usually for these reasons: The cardholder returns only part of a purchase. The merchant made an error such as double-charging for an item. After a preauthorization, the merchant knows that the sale amount will be far less than the preauthorization amount, so it reverses out most of the preauthorization to release that amount from the authorization hold. In this example reversal the initial sale amount is $80. The merchant sends an authorization request for -80.00, as either MTI 0100 or MTI 0200. You approve the request. Galileo assigns 3333 as the auth_id, sends the BAUT: auth webhook, and places an 80.00 hold on the account. A little while later, the merchant sends a reversal notification for 30.00 as MTI 0420. Because the third digit is 2, this is an advice, so only 00 is accepted as the response. Galileo sends the webhook for the reversal with 6666 as the auth_id and 3333 as the original_id. Galileo sends the AAAU: auth webhook and removes 30.00 from the hold. A day or so later, the network sends a settlement file that contains the 50.00 transaction. Galileo expires the 30.00 reversal and sends the BEXR: auth_exp_reversal webhook. Galileo matches the settlement to the auth_id: 3333 authorization, releases the 50.00 hold, posts -50.00 to the account, and then sends the SETL: setl webhook. The original authorization request (auth_id: 3333) and the reversal (auth_id: 6666) will be present in the Authorized Transactions RDF but only the -50.00 settlement will be visible in the Posted Transactions RDF. To see which transactions are produced by a partial reversal, see Partial reversal and expiry in Card Transaction Examples. For a detailed example see Scenario 8. Partial Reversal on Preauthorization. Merchant credits A merchant credit is a transaction that moves funds from the merchant to the cardholder account. Merchant credits are provided in these types of circumstances: A cardholder returns a purchased item and requests a full or partial refund after the transaction has cleared, using the original card for the purchase. A cardholder returns a purchased item and requests a full or partial refund on a different card from the one used to make the purchase. A cardholder receives a gift and returns it to the original store. A cardholder is unhappy with services received, so the merchant provides credit as compensation. In all of these cases the cardholder contacts the merchant directly to ask for a refund instead of using the disputes process. Merchant credits differ by network. Mastercard Banknet — The merchant credit is not accompanied by an authorization and is posted as an adjustment. All other networks — The merchant credit has an authorization for a positive amount that is later settled. Merchant credits are posted at the time of settlement, not when an authorization arrives, if any, so a cardholder's available balance does not reflect a merchant credit until a few days after it is initiated. When a network sends a merchant credit authorization request to the issuer, the issuer verifies that the card is eligible to receive a refund—that it has not been reported lost or stolen, for example, or that the credited amount does not violate load limits. Merchant credit after a purchase When the cardholder returns all or part of a purchase after the merchant sent the clearing information to the network, the merchant provides merchant credit. This example shows the sequence of events for a purchase amount of $100 over any rails except Mastercard Banknet. (In this explanation, the MTI is provided for those clients who use the Auth API.) The merchant sends an authorization request for -100.00, as either MTI 0100 or MTI 0200. Galileo approves the request. Galileo assigns 7777 as the auth_id, sends the BAUT: auth webhook, and places a 100.00 hold on the account. A day or so later, the network sends a settlement batch file that contains the -100.00 transaction. Galileo matches the settlement to the auth_id: 7777 authorization, releases the 100.00 hold, posts -100.00 to the account, and then sends the SETL: setl webhook. Some time later, the cardholder returns a $30 item and the merchant sends a merchant credit authorization request for 30.00 as either MTI 0120 or MTI 0220. Galileo approves the merchant credit because it does not violate velocity limits. Galileo assigns 8888 as the auth_id. There is no value for the original ID and no webhook sent. The merchant credit is not added to the available balance at this time. A day or so later, the network sends a settlement batch file that contains the 30.00 credit. Because there is no matching entry in the authorizations table, Galileo creates a 30.00 authorization entry with auth_id: 8888, backs it out, and posts 30.00 to the account, and then sends the SETL: setl webhook. The 30.00 merchant credit is visible in the Authorized Transactions RDF as well as the Posted Transactions RDF. The timestamp for the merchant credit in the RDFs corresponds to the time when Galileo received the merchant credit transaction, but the actual post date, which is later, is visible in the CST and the Get All Transaction History endpoint response. Merchant credit without a purchase A merchant may initiate a credit when a previous purchase was not made, such as when a cardholder returns a gift or any other time the merchant wants to compensate a cardholder. This example shows the sequence of events for a merchant credit of $200 over any rails except Mastercard Banknet. (In this explanation, the MTI is provided for those clients who use the Auth API.) The merchant sends a merchant credit authorization request for 200.00 as either MTI 0120 or MTI 0220. Galileo approves the merchant credit because it does not violate velocity limits. Galileo assigns 9999 as the auth_id. The merchant credit is not added to the available balance at this time. A day or so later, the network sends a settlement batch file that contains the 200.00 credit. Because there is no matching entry in the authorizations table, Galileo creates a 200.00 authorization entry with auth_id: 9999, backs it out, and posts 200.00 to the account, and then sends the SETL: setl webhook. The 200.00 merchant credit is visible in the Authorized Transactions RDF as well as the Posted Transactions RDF. The timestamp for the merchant credit in the RDFs corresponds to the time when Galileo received the merchant credit transaction, but the actual post date, which is later, is visible in the CST and the Get All Transaction History endpoint response. Merchant credits from Mastercard Banknet When the network is Mastercard Banknet, a merchant credit is processed as an adjustment, so Galileo does not create an authorization entry that is backed out. There is no entry in the Authorized Transactions RDF for the merchant credit. For examples see Merchant credit in Card Transaction Examples and for detailed examples see these scenarios: Scenario 6. Refund after Clearing (Visa) Scenario 7. Refund after Clearing (Mastercard Banknet) Card loads Card loads take place in one of two ways: over network rails and by other means. Loads over card rails (and their transaction codes) are: Allpoint Cash Load (PMAO) Mastercard Load (PMML) Maestro Load (PMMX) Visa ReadyLink (PMVL) Visa Money Transfer (PMVH, PMVT) These loads typically occur when the cardholder receives funds from a cash-transfer app such as Venmo or CashApp or is paid for their work with a gig-economy company such as Uber or DoorDash. (The exception is Visa ReadyLink, which permits cardholders to load cash on their cards at cash-accepting ATMs.) With Allpoint cash loads, the cardholder feeds cash directly into the ATM to load onto the card. Galileo also supports loads from these other services, which you enable at the time you set up your program: Western Union (PMSP) Green Dot (PMGT) MoneyGram (PMMG) With these services, a cardholder enters a retail establishment and presents cash to a cashier, who transfers the cash onto the card. Galileo receives these transactions over special APIs, so they do not go over network rails. When reconciling your card transactions, do not include these transactions in any settlement totals. These transactions are present in the Posted Transactions RDF and the CST. With other card-loading services such as push-to-card or remote deposit capture, the transactions are present in the Posted Transactions RDF and CST with the transaction codes that Galileo provides to you in your curated transaction code list. Mastercard Loads over Banknet or Maestro rails typically have an entry in the Authorized Transactions RDF that is expressed as a negative amount, even though it is a deposit. The corresponding settlement in the Posted Transactions RDF is a positive amount with the transaction code PMML (Mastercard Banknet rails) or PMMX (Maestro rails). The posting is available in Program API responses whereas the authorization is not. For an example of a Maestro load, see Uber payment in Card Transaction Examples. For a detailed example of a Maestro load, see Scenario 17: Card Load (Maestro). Visa For Visa loads the transaction does not have an entry in the Authorized Transactions RDF. The settlement is shown in the Posted Transactions RDF with transaction codes PMVL (Visa ReadyLink), PMVT or PMVH. The load is also available in Program API responses. The Visa money transfer types are differentiated by the BAI. See the Business Application Identifier enumeration for the definitions. PMVH — BP, CP, FD, GD, GP, LO, MD, OG, PD PMVT — All other BAIs Allpoint Allpoint ATMs support inserting cash directly into the ATM and loading the amount onto the card. When the cash is inserted, the ATM sends an authorization request, which Galileo approves. As soon as the load is approved, the amount is credited to the cardholder account and is available to spend. The transactions are shown in the Posted Transactions RDF with the transaction code PMAO for loads and ADao for reversals. Western Union When a cardholder receives funds via Western Union, it is a card load with transaction code PMSP. Western Union uses a special API to send card loads to Galileo, so they do not go over network rails and there is no entry in the Authorized Transactions RDF. Use the source ID to track these transactions across Galileo systems. However, when a cardholder sends funds using a service that runs over the Western Union infrastructure, the transaction follows the same authorization, backout, settlement sequence as a conventional card transaction. Green Dot Green Dot loads involve a cardholder presenting cash to an affiliated merchant, who loads the cash onto the card. Green Dot communicates the loads to Galileo using a special API. Because these transactions do not arrive over card-network rails, there is no authorization request. The amount is visible in the Posted Transactions RDF with transaction code PMGT. (Green Dot direct deposits have transaction code PMGO.) Use the source ID to track these transactions across Galileo systems. You can also arrange with Galileo to receive special Events API webhooks for these loads. Disputes A cardholder has the right to challenge a transaction, such as when the transaction is unrecognized, when there is a duplicate transaction, or when the cardholder believes the amount is wrong. In the case of an account being driven negative, program managers also have the right to dispute transactions independently of the cardholder. See About Disputes for information about the phases a dispute passes through. See also Disputes at Galileo for information specific to the Galileo implementation, including transaction codes and Events API webhook messages. Events API webhooks For reversals Galileo sends the AAAU: auth webhook. The value in amount is unsigned, so to detect a reversal, match the original_auth_id with a previous BAUT: auth webhook. For example, if you receive a BAUT: auth webhook with amount: 20 and auth_id: 3333, and then later you receive an AAAU: auth webhook with amount: 20 and original_auth_id: 3333, you know that it is a full reversal of the transaction. For merchant credits over all networks except Mastercard Banknet, Galileo sends the SETL: setl webhook with otype: Z. For Mastercard Banknet merchant credits, Galileo sends the BADJ: adj webhook with act_type: AD and otype: C.Updated 18 days ago Table of Contents Reversals Full reversal Partial reversal Merchant credits Merchant credit after a purchase Merchant credit without a purchase Card loads Mastercard Visa Allpoint Western Union Green Dot Disputes Events API webhooks "
487,docs.galileo-ft.com/pro/reference/api-reference-events-api-overdraft-authorization,"overdraft_authorization Code — ODAA Event trigger — An authorization that uses overdraft funds is approved. Process — This process contains the event trigger: You or Galileo approve an authorization request. Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ODAA"" od_f_open_to_buy Available overdraft balance minus pending fees. Example: ""120.00"" od_open_to_buy X Available overdraft balance. Example: ""340.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""overdraft_authorization"" Example JSON# overdraft_authorization example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""ODAA"", ""od_f_open_to_buy"": ""120.00"", ""od_open_to_buy"": ""340.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""overdraft_authorization"" } Table of Contents Fields Example "
488,docs.galileo-ft.com/pro/docs/simulating-card-transactions,"Simulating Card Transactions This guide contains instructions for simulating various card transaction types using the Create Simulated Card Authorization and Create Simulated Card Settlement endpoints in the CV environment. Before performing these simulations, you should follow these instructions: Client Validation setup in the Environments guide Setup for Card Transaction Simulations to create a card account, activate the card, and fund the account To test RTF accounts see Testing Real-Time Funding in CV for initial setup and to see the additional funding transactions. 🚧WarningDo not follow this procedure in Production. The transaction-simulation endpoints are not valid in Production. Simulations list 📘NoteThis list of simulation types is not yet complete. More examples of card simulations will be made available in the future. Check the Changelog for updates to this document. Three-step sequence — Conventional transaction: authorization, backout, settlement Five-step sequence — Gas-pump transaction: preauthorization, preauthorization backout, completion, backout, settlement Incremental authorization — Three incremental preauthorizations before being completed and then settled Authorization reversal — Full reversal of an authorization before settlement Authorization expiry — Authorization expires before being settled ATM withdrawal, Visa — Cash withdrawal from an ATM with operator and issuer fees Force-post — Settlement of a transaction with no matching authorization Cashback — Cash back during a purchase International transaction, Visa — International purchase with fee Further examples To find more example transactions to base your tests on, try these resources: Card Transaction Scenarios — Example scenarios to show how various card transaction types appear in the Program API, Events API, Auth API, and the RDFs. Card Transaction Examples — Examples of the transaction types explained in the other guides. Recipes — Annotated code samples. The ""Auth API v3"" Recipes are the most helpful for simulating card transactions. Updated 2 months ago Table of Contents Simulations list Further examples "
489,docs.galileo-ft.com/pro/reference/post/modifylocationfee,"Modify Location Fee For this endpoint, amount and amountType are not required, but if one of them is populated, then both are required.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description596-01Location was not found.596-02Fee doest not exist.596-03locationType 1 name is maximum of 15 characters.596-04locationType 0 and 2 require location to be an integer value.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
491,docs.galileo-ft.com/pro/reference/api-reference-events-api-about-events-api,"About Events API In addition to the information provided here, see the About the Events API guide. Events are grouped into the following categories: Account Events Authorization Events Settlement Events Transaction Events Each category is posted to a separate webhook. For example, account events are posted to /AccountEvent; transaction events are posted to /Transaction. Events are identified by the type field in the request body. For example, when a cardholder has successfully completed the enrollment process for a card, the event type will be app_completed. Some events have further distinguishing fields; for example, for mobile tokenization events, there is a wallet_type field that identifes the wallet ""vendor"" (Apple, Google, Samsung, etc.). Galileo also uses 4-character codes for the events in other systems like the Customer Service Tool (CST). For example, CAPP corresponds to the app_completed API type. Each category has an index (in subsequent pages below) that lists each event along with its description, 4-character code, API type field, and the fields that are sent in the event. Note: Galileo sends all events asynchronously so that it doesn't block or slow down transaction and backoffice processing. Unlike Auth API and External Trans API, the response clients send back does not control the outcome of a transaction. "
492,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-tcn,"mobile_activation TCN The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — ATCN, GTCN, STCN Event trigger — Galileo receives notification from the card network that the tokenized card has been successfully provisioned to the mobile wallet. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ATCN"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_id Unique identifier for the token, provided by the card network in the Tokenization Complete advice. Called ""Token Unique Reference"" by Mastercard and ""Token Reference ID"" by Visa."" Example: ""DAPLMC00001016928f8dbe28d4eb48c784204ea4f826b5a7"" type X The name of this event: ""mobile_activation TCN"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ATCN) ""Google"" (event code GTCN)) ""Samsung"" (event code STCN) Example JSON# mobile_activation TCN example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""ATCN"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_id"": ""DAPLMC00001016928f8dbe28d4eb48c784204ea4f826b5a7"", ""type"": ""mobile_activation TCN"", ""wallet_type"": ""Samsung"" } Table of Contents Fields Example "
493,docs.galileo-ft.com/pro/reference/api-reference-events-api-card-returned,"card_returned Code — PSUC Event trigger — The shipping department reports that the card has been returned. Process — This process contains the event trigger: Internal reporting process Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" exp_date The expiration date of the card. Format: MM/DD/YYYY. Example: ""03/14/2023"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PSUC"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" protected_pan_four X The last four digits of the PAN. Example: ""3523"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""card_returned"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# card_returned example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""exp_date"": ""03/14/2023"", ""msg_event_id"": ""243693"", ""msg_id"": ""PSUC"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""protected_pan_four"": ""3523"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""card_returned"" } Table of Contents Fields Example "
494,docs.galileo-ft.com/pro/changelog/june-2022,"June 2022 New FREV field You now have the option of adding the orig_fee_event_id field to your FREV: fee_reversal event webhook. The field contains the fee_id of the fee that was reversed. New Instant-Issue Cards guide We created a new guide, Instant-Issue Cards, which explains how to use instant-issue cards as part of a customer-onboarding strategy and explains how to set them up. Changed overdraft behavior A recent upgrade to the overdraft system has changed the behavior when adding an overdraft account to a primary account. Formerly, when using Add Account to create an overdraft account, account feature 17 would automatically change to P, which activated the overdraft account. Now, you must manually change account feature 17 to P. We added the instructions in Activate the overdraft account in the Creating an Overdraft Account guide. Charging off secured credit accounts Added Charge Off Account to Endpoints for Secured Credit International addresses and phone numbers. We have updated our endpoints to support these international conventions: Address lines 3, 4 and 5 — The endpoints now support three additional address lines Country codes — The mobilePhoneCountryCode is for the country code when mobilePhone contains a number outside the U.S. or Canada. These are the affected endpoints: Create Account Create Virtual Card Account Start Enrollment Update Enrollment Update Account Multiple card images for mobile wallets Galileo now supports creating multiple digital card images per product for mobile-wallet provisioning. Summary of network differences To the Networks guide we added a summary of network differences. New parameters for Create Payment These new parameters have been added to the Create Payment endpoint: holdAmount — Amount of the payment to hold holdExpirationDateTime — When to expire the hold holdDescription — Description for the hold holdExternalId — An alternative ID for the hold If you have populated these fields, the hold_id in the response contains an identifier for the hold that you can retrieve with the Get Hold History endpoint and expire them with Expire Hold. Switching Digital First products In the Switching Products guide, we clarified that <<glossary;Digital First>> products cannot be switched using the Set Account Feature endpoint; instead, use the Switch Product endpoint. "
495,docs.galileo-ft.com/pro/docs/pin-set-procedures,"PIN-Set Procedures A personal identification number is an anti-fraud measure that helps authenticate the cardholder at physical points of sale and ATMs. At the time customers activate their cards they also set a PIN. Customers may also want to set a new PIN at a later time. 📘NoteWhen you reissue or replace a card with a new PAN, you must also set a new PIN. Reissued cards with the same PAN but new expiry do not need a new PIN. You can set a PIN for a physical card or for a virtual card that is provisioned to a mobile wallet, in the event that the wallet is presented at a physical NFC device that accepts PINs. For virtual-only cards that are not in mobile wallets you do not set a PIN. At account creation, you can set a default PIN by setting the product parameter CASPO to one of these options: Last 4 digits of home phone Last 4 digits of mobile phone Last 4 digits of PRN No PIN For other use cases you have these options for setting a PIN for a card, either as part of the card-activation procedure or to reset a PIN. Direct render — The cardholder goes to your web page or mobile app and enters the new PIN through a form that Galileo hosts. You do not need to be PCI compliant to use this method. See Direct Render PIN-Set Procedure. Direct POST — The cardholder goes to a web page or mobile app and enters the new PIN through a web page that you host. You must complete PCI-DSS Self-Assessment Questionnaire A-EP (191 of 250 PCI requirements) to use this procedure. See Direct POST PIN-Set Procedure. Offline PIN — Some non-U.S. jurisdictions require offline PIN validation, where the PIN is written to the EMV chip and the card reader validates the typed PIN against the PIN on the chip. See Offline PIN for directions. Galileo IVR (automated phone system) — The cardholder calls a number that is on a sticker on the new card and inputs the card and PIN information using the phone keypad. You do not need to be PCI compliant to use this method. Updated 16 days ago "
496,docs.galileo-ft.com/pro/reference/post/createsimulatedcardsettle,"Create Simulated Card Settlement For instructions on using this endpoint see Simulating Card Transactions. 🚧WarningDo not use this endpoint in Production. 📘NoteA simulated settlement will settle for only the amount of the card authorization — you cannot simulate an up-charge in the CV environment. For example, if the authorization amount is $10.50 and the settlement specifies $15.50, the posted settlement will be $10.50.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description544-01Method not available in the production environment544-02Authorization is not found for account544-03Authorization is already settled or in the wrong statusLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
497,docs.galileo-ft.com/pro/reference/api-reference-bill-payment-statuses,"Bill Payment Statuses StatusDescriptionABillpay sent and acknowledgedBReversal processedCPayee processed checkEErrorFCheck payment reversedHPayment stop requestedICanceled before adjustment madeJCheck cancellation errorKCheck cancellation requestedLCheck has remained unprocessed for 180 days and is expired. Next, status: U will be triggered.NReady to processOIn processPProcessedQCheck printedRPayment reversedUCheck is recorded in the cancellation file. Next, status: Y will be triggered.VVoid check requestWWaiting to be printedXCheck canceledYCheck expired, the expiration was recorded in the cancellation file, and a refund was issued to the account that issued the check.ZIn process "
498,docs.galileo-ft.com/pro/changelog/july-2022,"July 2022 Multi-network examples On the Card Transaction Examples page we added Other network codes tables to show the transaction codes when the transactions happen on other networks. New guide We completed a new guide, About Disputes, which explains the dispute process in general and then describes how disputes work at Galileo. Both card and ACH transactions are covered. Customer activation and engagement strategies We've published a suite of new product documentation to help you take advantage of Galileo's capabilities to drive customer activation and engagement. We have also reorganized much of the card-related content to make it easier for you to find what you're looking for, whether it be business cases or implementation instructions. Maximizing Customer Activation Rates — A new guide to help you get your new customers to start spending on your platform and strategies to keep customers engaged Choose a Card Strategy — A new guide that explains the card products that Galileo offers and how you can use those products to meet your business goals Setting Up a Card Program — A new guide on the steps to take during the lifecycle of a card We've also reorganized our cards-related documentation into three new sections: Card Strategy, Card Management and Card Implementation. Galileo Secured Credit: Dynamic Funding We added information on the new Dynamic Funding product. We also renamed and moved the Galileo Secured Credit guide to the Credit section in the sidebar. Major additions for Dynamic Funding are: Dynamic Funding in About Galileo Secured Credit Setup for Dynamic Funding in Setup for Galileo Secured Credit Considerations for Dynamic Funding in Developer Setup for Galileo Secured Credit Secured credit account structure and Secured credit authorization and settlement in Galileo Secured Credit Workflows Remove parameter from Add Card From the Add Card endpoint we have removed the sharedBalance parameter. Get Balance response field clarification We've rewritten the descriptions for the Get Balance response fields to better explain exactly what each balance-related field means. Edit to PINC description We removed the phrase ""This event is not sent when a PIN is set for the first time” from the description for the PINC: PIN_changed event. New Event API fields For these events you now have the option to receive the rrn (Reference Retrieval Number) and merchant_postal_code fields: BAUT: auth AAAU: auth SETL: setl Feature Type clarification We clarified that featureType: 21 of the Set Account Feature endpoint does not block card loads. Renamed endpoint category In the API Reference, we changed the Program API category ""Prepaid"" to ""Instant Issue."" New guides Galileo now offers account-level authorization controls (ALCs), which allow you to set velocity, MCC and merchant ID controls at the account level. About Account-Level Authorization Controls — Explanation of ALCs plus use cases. Designing Authorization Controls — Lays out the rules that govern the different controls at both the product and account levels. MCC and Merchant ID ALC Examples — Multiple tables to illustrate how MCC and merchant ID controls are applied Setting Account-Level Authorization Controls — Procedure for using the ALC-related endpoints. Reference for six new endpoints: Get Auth Control Set Account-Level Auth Control Get MCC Controls Set Account-Level MCC Control Get Merchant Controls Set Account-Level Merchant Control Advanced Auth API fields We added information about advanced_auth_api_fields to the Authorization Controller API guide. Parameters removed We removed these parameters from the Create Location endpoint: centralBillFlag creditLimit cycleType cycleInvoice cycleStart locationAchAccountNo locationAchRoutingNo "
499,docs.galileo-ft.com/pro/reference/api-reference-events-events-network-codes,"Events Network Codes NetworkAuth APIEvents APIProgram APIRDFs subnetworknetworknetwork_codeNETWORK CODEAllpointAllpointAAACirrusMastercard Debit SwitchPCPDiscoverDiscoverDDDMaestroMastercard Debit SwitchPPPMastercardMastercard BanknetMMMMoneyPassStar MoneyPassS* O**SSPrestoStar PrestoS* R**SSPulsePulseBBBSTARStarSSSVisaVisaVVVVisa InterlinkVisa InterlinkV* I**IIVisa PlusVisa PLUSV* E**ZP * Authorization Events ** Settlement Events When Galileo sends an Authorization Event message for the Visa or STAR networks, the network field contains the network, whereas for the Settlement Event message, network contains the subnetwork. For example, an auth message for the Visa Plus subnetwork has network: V and for the corresponding Settlement Event it has network: E. For your events webhooks you may want to create a lookup table to identify networks V, I and E as Visa networks, for example, and networks S, R and O as STAR networks. fee_auth codes These are the network codes for the fee_auth field in the BFEE: fee event: CodeNetworkAAllpointBPulseCDiscoverDMastercard Maestro/Cirrus (debit)MMastercard Banknet (credit)OMoneyPassPVisa PlusRPrestoSStarVVisa and Visa InterlinkTable of Contents fee_auth codes "
500,docs.galileo-ft.com/pro/docs/creating-an-account,"Creating an Account This guide describes the procedure for creating a new customer account using the Create Account endpoint or Create Virtual Card Account endpoint. With these endpoints you can optionally issue a card and deposit funds into the account at the same time that you create the new account. 📘NoteWhen creating an account for a new customer you must perform KYC and CIP. Consult the Customer ID Verification (KYC/CIP) guide for instructions. You should also read the About Accounts guide to familiarize yourself with Galileo's account structure and conventions. Follow this procedure to: Onboard a new customer for a physical card. Onboard a new customer for a virtual card. Create a secondary account for a different customer than the primary account holder, such as a spouse or child. Do not follow this procedure to: Add a secondary account to an existing customer; instead, see the Adding an Account guide. Add an overdraft account; instead, see the Creating an Overdraft Account guide. Create an instant-issue card; instead, see Setup for Instant Issue. Create an account for a Digital First account, where you provide a digital version of the card for customers to use while the physical card arrives; instead, consult Digital First cards in the Choose a Card Strategy guide. Break out the account-creation steps into component parts, such as passing Galileo CIP before creating an account; instead, use Start Enrollment and Complete Enrollment. For directions see Start Enrollment process in Customer ID Verification (KYC/CIP). Result of calling Create Account or Create Virtual Card Account When Create Account or Create Virtual Card Account has run successfully, these new items are created in the Galileo system. See New account creation in the About Accounts gude for details. Customer record — Contains the customer's personal data such as address, date of birth, and contact information. Account record — Contains general account information. Card record (for card products) — Contains card information. You can receive unmasked PAN/CVV/expiry date values only if you are PCI compliant. Parameters This table explains the parameters that are specific to the Create Account and Create Virtual Card Account endpoints. See the Create Account or the Create Virtual Card Account reference for details. ParameterUsageaccountNoPopulate only for instant-issue cards. For all others leave blank.idRequired for Galileo CIP. Primary ID number. See Using the id and idType parameters for instructions. If you are not using Galileo CIP you may still populate these ID fields for your own records.idTypeRequired for Galileo CIP. Required when id is populated. Primary ID type. Your product settings might require idType: 2 (SSN) for the primary ID. See the Customer ID Types enumeration for valid values.id2Optional or required for Galileo CIP, depending on your product settings. Secondary ID number.idType2Required when id2 is populated. Secondary ID type.locationTypeDo not populate.locationDo not populate.localeCustomer localization preferences. If the customer address is outside the U.S., pass a non-_US value for this parameter to disable U.S. address validation.Customer profile parametersRequired for Galileo CIP and for the customer record. For customer ID verification you must include the name parameters, the address parameters, and the date of birth. See the Customer ID Verification (KYC/CIP) guide for more information.webUidDo not populate.webPwdDo not populate.secretQuestionDo not populate.secretAnswerDo not populate.incomeSourceCreate Account only. The name of the customer's employer or income source.occupationCreate Account only. Job title of the customer.prodIdThe identifier for the product the customer is signing up for. Galileo generates a unique product ID for each of your products.loadAmountPopulate only if the product is configured to deposit funds into the account at creation time.loadTypeRequired when passing loadAmount; valid values are created in cooperation with Galileo.externalAccountIdThis field is for your own purposes. Galileo stores but does not process this parameter; however, it can be updated with the Update Account endpoint (active accounts only), you can retrieve it using the Verify Account endpoint, and it is provided in the RDFs. You can use this parameter in cooperation with your card embosser to dynamically select card art, or you can input customer identifiers for your own back-end systems.primaryAccountPopulate only when creating a secondary accountsharedBalanceRequired when passing primaryAccount. Pass 1 when creating a secondary account that will transact on the same balance as the primaryAccount. Pass 0 if the account balances will not be shared.userDataThis field is for your own purposes. Galileo does not process this parameter and it cannot be updated using the Update Account endpoint. You might want to use this field to track internal groups or advertising campaigns or for other similar purposes.offlineDo not populate.verifyOnlyPass 1 to verify the parameter values in your API request without creating an account or running CIP.cipStatusPopulate only when using Galileo CIP. See Overriding your ID verification setting for more information.embossLine2A second line to be printed under the name on the card.providerAssessedFeeDo not populate.loadFromAccountNoFor depositing funds into the new account from another account in the same program. You must also pass loadAmount and loadType when populating this parameter.sweepDateDo not populate.expressMailCreate Account only. Populate to ship the card via accelerated delivery. Valid values come from your emboss vendor.shipToAddressPermanentCreate Account only. Pass 1 to make the ship-to address information permanent, meaning that you don't have to provide a new ship-to address every time you send a new card to the embosser.shipTo parametersCreate Account only. Populate for physical cards, when the shipping address is different from the primary address..businessNameRequired when prodId is a business account. See businessName parameter for the validation rules.mobilePhoneCountryCodeRequired when any of the phone parameters are populated. This value determines how the phone numbers are validated Account-creation workflow Consult these flowcharts and explanations for the Create Account and Create Virtual Card Account endpoint workflows: the first when using your own CIP and the second when using Galileo's CIP. 📘NoteCall the Create Account or the Create Virtual Card Account endpoint only once per customer when onboarding. Because these endpoints create a customer record, it is important that only one record be created per customer. Create Account using your own CIP This flowchart shows the logical progression of the Create Account endpoint and subsequent backend processes when not using Galileo's CIP. This diagram is also valid for the Create Virtual Card Account endpoint. The actual sequence of events in the Galileo system may vary. 📘NoteThe Account Events messages are sent to you according to the arrangements you have made with Galileo. Retrieve customer information from your web page or mobile app. Send the customer information to your third-party CIP provider. When CIP is successful, populate the Create Account request with that information and send. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo creates an account with status: W (Waiting to Be Processed). If the account cannot be created Galileo returns status: 407-05. According to product settings, Galileo creates a card object and deposits funds into the account. The account that receives the funds is identified by the balance ID, also called ""Galileo account number."" If depositing funds is not successful, the status codes shown in the diagram are returned. Consult the Status codes table for next steps. The card object contains the PAN, the expiry date, and the CVV. The full contents of this object are returned to you in the API response only if you are PCI compliant. If all processes have been successful, Galileo sends two messages: API response with status: 0 (successful) Account Events webhook CAPP: app_completed. Galileo runs an account setup process to determine whether other criteria for the account have been fulfilled, according to product settings. When all criteria are fulfilled, the Galileo system checks the XAACT product parameter for how to set the account status: First character — Account active/inactive (Y/N) Second character — Account status Third character — Card status (if any) For example, if the product is a card account, and XAACT is YNX, then when account setup is completed these are the settings: Account active: Y Account status: N (active) Card status: X (set to emboss) See Lifecycle of a card in Setting Up a Card Program for the next steps when the account has a card. Create Account using Galileo CIP This flowchart shows the logical progression of the Create Account endpoint and subsequent backend processes when using Galileo's integrated CIP. This diagram is also valid for the Create Virtual Card Account endpoint. The actual sequence of events in the Galileo system may vary. Retrieve customer information from your web page or mobile app. Populate the Create Account request with that information and send. Galileo performs a number of preliminary checks. Failures return the status codes shown in the diagram. Consult the Status codes table for next steps. Galileo sends the customer information to its CIP provider. Galileo creates the customer account with status: W (Waiting to Be Processed). According to product settings, Galileo creates a card object and deposits funds into the account. The account that receives the funds is identified by the balance ID, also called ""Galileo account number."" If depositing funds is not successful, the status codes shown in the diagram are returned. Consult the Status codes table for next steps. The card object contains the PAN, the expiry date, and the CVV. The full contents of this object are returned to you in the API response only if you are PCI compliant. Galileo verifies whether CIP was successful: If CIP was successful, Galileo sends you two messages: API response with status: 0 (successful). Account Events webhook CAPP: app_completed. If CIP was not successful, Galileo sends two messages: API response with status: 407-11 (CIP failed) with the R, F or S verdict in the cip field. Account Events webhook FTID: fail_id. Galileo launches an account setup process, which verifies whether all criteria for account creation have been fulfilled. If CIP was not successful Galileo moves the account to status: F (failed CIP). You take your next steps according to the failed CIP status that was returned: S — System failure. CIP was not performed because the CIP-related data was not valid. See Testing ID verification in the Customer ID Verification (KYC/CIP) guide for CIP validations. F — Failed. The customer is on a watch list or is unlikely to be a real person and therefore does not qualify for an account. The account will not be activated. R — Referral. The customer is likely a real person because there was a partial match for the personal information and identifier. In this case, either you or Galileo performs further steps to identify the customer, such as requesting that valid documents be sent. If Galileo completes validation and the customer passes, Galileo moves the account to status: N and sends the Account Events webhook PTID: pass_id. If you complete validation and the customer passes, you call the Force Pass CIP endpoint to move the account to status: N and you receive the Account Events webhook PTID: pass_id. Galileo runs an account setup process to determine whether other criteria for the account have been fulfilled, according to product settings. When all criteria are fulfilled, the Galileo system checks the XAACT product parameter for how to set the account status: First character — Account active/inactive (Y/N) Second character — Account status Third character — Card status (if any) For example, if the product is a card account, and XAACT is YNX, then when account setup is completed these are the settings: Account active: Y Account status: N (active) Card status: X (set to emboss) See Lifecycle of a card in Setting Up a Card Program for the next steps when the account has a card. 📘NoteThe account setup process is a cron job with an interval between 5 and 30 minutes, according to your product settings. For this reason, you will receive the CAPP: app_completed or PTID: pass_id webhooks and the API response before the account is usable. See the Activating a Card guide for more information. To see account status, call an endpoint such as Get Account Overview or see Retrieving account information in the About Accounts guide for a list of endpoints that retrieve the account status. Sample endpoint request and response Consult the Create Account or the Create Virtual Card Account endpoint to see how to build the API request and to see the response schema. Status codes Consult this table to see an explanation of what each status code means and which next steps to take, if any. Status codeDescriptionNext steps407-03Invalid instant issue card. An attempt was made to issue an instant-issue card that has already been issued.Retry with an unissued instant-issue card number.407-04The value in loadAmount was outside what product settings permit. Account not created.Retry with an appropriate amount in loadAmount, or check your maxLimit and minLimit settings.407-05Could not create account.Contact Galileo for troubleshooting.407-06Could not load card.Contact Galileo for troubleshooting.407-07Primary account is invalid.The account number in primaryAccount cannot be an instant-issue card.407-08Secondary accounts cannot be added to secondary accounts.The account number in primaryAccount cannot be a secondary account.407-09Maximum number of secondary accounts was exceeded, according to product settings.Verify that your product settings are correct.407-10idType: 2 (SSN) is required by your product settings for running CIP, and you provided a different ID type.Pass idType: 2 with a valid SSN in the id field.407-11The product is configured to use Galileo CIP, and the customer failed CIP.Take action depending on the result in the response: F — Fail. Take no action: the customer does not qualify for an account. R — Refer. Depending on your arrangement with Galileo, request valid documents from the customer or wait for Galileo's third-party CIP to complete.407-12An account with the same government ID has already been created.Follow your business plan for this outcome.407-13You passed cipStatus: 1 and Galileo ran CIP on the customer. No account was created.Take action depending on the result in the response: P — Pass. Contact Galileo for instructions on creating the account. Do not run Create Account again. F — Fail. Take no action: the customer does not qualify for an account. R — Refer. Depending on your arrangement with Galileo, request valid documents from the customer or wait for Galileo's third-party CIP to complete.407-14Card successfully loaded, but load limit was violated. Only the amount permitted by project settings was loaded.Contact Galileo for troubleshooting.407-15The account was created but funds were not loaded onto the card because of limit violations. An attempt will be made tomorrow to load the card.Contact Galileo for troubleshooting.407-16Card is marked as fraudulent. An instant-issue card was swiped before it was issued.Retry with another instant-issue account.407-17Card not allocated to your store for issuance. The location does not match the location that this batch of cards was created for.Change the location on the account or retry with another instant-issue account number.407-18The loadFromAccountNo parameter contained an account number that does not exist in the Galileo system.Resend with a valid account number.407-19A load was attempted for a non-positive amount. The value in loadAmount was negative.Retry with positive amount.407-20Maximum number of allowed secondary accounts has been reached.Set SECLM on the secondary account to a higher number. View the new account Use the Get Account Cards endpoint to retrieve account status and other information. Consult Retrieving account information in the About Accounts guide for a list of endpoints and the specific account information they retrieve.Updated 4 months ago Table of Contents Result of calling Create Account or Create Virtual Card Account Parameters Account-creation workflow Create Account using your own CIP Create Account using Galileo CIP Sample endpoint request and response Status codes View the new account "
501,docs.galileo-ft.com/pro/reference/api-reference-events-authorization-response-codes,"Authorization Response Codes This table has the response codes for all networks except Allpoint. See Allpoint response codes below. Codes marked with an asterisk (*) are success codes. All other codes are deny codes. CodeDescription00*Success. Authorization request approved.01Issuer error.04Capture card. The merchant or ATM must retain the card because fraud is suspected.05Do not honor. This is the default deny code when other deny codes do not apply. Also the mobile-wallet provisioning red path, or card not in active status for AVS-only checks.10*Partial approval. The amount approved is less than the authorization request amount.14All but Visa. Invalid PAN. This PAN does not exist in the Galileo system. Transactions with this response are not passed to the Auth API or included in the RDFs or Program API responses.30Format error.41All but Visa. Lost, pick up. The card has been reported lost and is in status: L. The merchant should retain the card if possible and return it to the issuer.43All but Visa. Stolen, pick up. The card has been reported stolen and is in status: S. The merchant should retain the card if possible and return it to the issuer.46Visa only. Closed account. This response code includes lost, stolen, invalid account number, suspected fraud, and AVS-check failure during tokenization.51Insufficient funds (NSF). The authorization amount is larger than the cardholder's available balance.54Card expired or expiry date mismatch. The card's expiry date has passed, or the value provided by the merchant does not match the value on record.55Invalid PIN. The wrong PIN was input in the PIN keypad.57Transaction not permitted to cardholder. For some possible reasons for this response code, see Transaction type validation in the Authorization Controller API guide.59Visa and STAR only. Suspected fraud. The risk score exceeds a program-specified threshold.61Exceeds amount limit. The transaction violates the per-transaction velocity limit set by the program.62Visa only. Restricted card. Card is being used in an OFAC-restricted country.65Exceeds count limit. The transaction violates the number of transactions in a period velocity limit set by the program.75PIN count exceeded. The number of failed PIN attempts exceeds the number set by the program.78Visa only. Frozen card.85*AVS-only success or mobile wallet provisioning yellow path. When the transaction amount is 0.00 and the response is 85, the AVS check was successful. For a provisioning request, see Manual provisioning workflow in the Setup for Mobile Wallets guide.87*Partial approval (sale amount only, no cashback). The amount approved is less than the authorization request amount, and any requested cashback is denied.91Visa only. Issuer did not respond in time.96System error.N7Invalid CVV2 (Visa only). The CVV2 provided in a card-not-present transaction did not match the CVV2 on record. Allpoint Response Codes The following numbering scheme is used for Allpoint response codes: 0xx=authorization approved 1xx=authorization denied 2xx=authorization denied 4xx=reversal actions 6xx=administrative actions 8xx=network management actions 9xx=error response actions CodeDescription000Approved001Approved With Identification002Approved For Partial Amount003Approved (VIP)100Do Not Honor (General Denial)101Expired Card102Suspected Fraud103Card Acceptor Contact Acquirer104Restricted Card105Card Acceptor Call Acquirer's Security Department106Allowable Pin Tries Exceeded107Refer To Card Issuer108Refer To Card Issuer's Special Condition109Invalid Merchant110Invalid Amount111Invalid Card Number112Pin Data Required113Unacceptable Fee114No Account Of Type Requested115Requested Function Not Supported (Invalid Transaction)116Insufficient Funds117Incorrect Pin118No Card Record119Transaction Not Permitted To Cardholder120Transaction Not Permitted To Terminal121Exceeds Withdrawal Amount Limit122Security Violation123Exceeds Withdrawal Limit Frequency124Violation Of Law126Invalid Pin Block127Pin Length Error128Pin Key Synchronization Error (Sanity Error)129Suspected Counterfeit Card130Transaction Failed OFAC Check131Check Not Acceptable138Incorrect Configuration (Custom; Not For General Use)159Suspected Fraud (Custom; Not For General Use)180Limit Exceeded Due To Cash Back Amount181Enter Lesser Amount182Institution Not Supported By Switch183Balances Not Available For Inquiry184Resubmission In Violation Of Network Rules185Stop Payment On Check (Shared Branch Only)200Do Not Honor201Expired Card202Suspected Fraud203Card Acceptor Contact Acquirer204Restricted Card205Card Acceptor Call Acquirer's Security Department206Allowable Pin Tries Exceeded207Special Conditions208Lost Card209Stolen Card210Suspected Counterfeit Card211Invalid Card Number214No Account Of Type Requested216Insufficient Funds217Incorrect Pin400Accepted600Accepted601Not Able To Trace Back To Original Transaction800Accepted880Key Change Rejected—Check Value Mismatch881Key Change Rejected—Local System Problem882Key Change Request Rejected—Key Change In Progress883Declined—Incorrect Institution Identifier900Accepted907Card Issuer Or Switch Inoperative908Transaction Destination Cannot Be Found For Routing909System MalfunctionTable of Contents Allpoint Response Codes "
502,docs.galileo-ft.com/pro/docs/operational-setup-for-business-banking-programs,"Operational Setup for Business Banking Programs This guide describes Galileo’s APIs and highlights some common use cases for business banking programs. Galileo’s APIs are not business-specific. The same endpoints and webhooks also apply to consumer programs. Program API endpoints for managing business banking This table lists common business banking use cases and related Galileo Program API endpoints. It also links to guides that provide additional information and procedures. Use caseEndpoint(s)Guide(s)Create a virtual card account and present a digital card imageCreate Virtual CardSetup for Virtual CardsCreate a new business or user accountCreate AccountCreating an AccountChange account or card statusModify StatusAccount status in About AccountsCard StatusesManage account-level featuresSet Account FeatureGet Account FeatureAccount features in About AccountsGet account and card informationGet Account OverviewGet CardRetrieving account information in About AccountsRetrieving Card InformationGet transaction historyGet Transaction HistoryGet All Transaction HistoryTransaction HistorySet and manage a line of creditGet Credit SummarySet Credit LimitGet Credit Limit Change HistoryInitiate an ACH transactionCreate ACH TransactionAbout ACHSet a PINGet Card PIN Change KeyCommit Card PIN ChangePIN Set Procedures Webhooks for business banking Galileo sends webhooks to provide information and to give you control over account-level decisions. Galileo webhooks are used in both business banking programs and consumer-level programs. This section is a summary of Galileo's API webhooks. Events API — Galileo sends Events API webhooks to notify you when an event occurs. For example, when a business’s application for a new virtual card account is successful, Galileo sends you the CAPP: app_completed event. For more information on events, see About Events API in the API reference. Auth API — Galileo can send Auth API webhooks to inform you of individual authorization requests and to receive additional instructions from you. For example, Galileo sends an Auth API webhook to inform you that an authorization request will be approved. However, the request exceeds your internal limit, so you respond with instructions to deny the request. For more information, see About Auth API in the API reference. External Trans API — The External Trans API is similar to the Auth API, but instead of authorization requests, the External Trans API gives you the ability to approve or deny individual ACH debit and bill pay transactions. For more information, see About External Transactions API in the API reference.Updated 2 months ago Table of Contents Program API endpoints for managing business banking Webhooks for business banking "
503,docs.galileo-ft.com/pro/reference/direct-deposit-switch,"Direct Deposit Switch Galileo's Direct Deposit Switch provides your customers with a speedy, guided method to set up direct deposit that avoids many of the pitfalls involved with the manual process. Galileo's Direct Deposit Switch provides a ~50% increase in direct deposit adoption over conventional methods. The convenience and ease of Direct Deposit Switch provides satisfaction to customers, who expect a seamless experience from today's banks. Advances across the market in direct deposit setup mean that your offering will be competitive. About 70% of your customers can use Direct Deposit Switch because Galileo is integrated with: Most top employers and payroll companies All federal agencies All state unemployment agencies Gig-worker platforms Additional coverage as partner integrations grow Instead of integrating with multiple vendors, consolidate your direct deposit functionality with Galileo's one-stop shop. Galileo's strong market presence and higher volume tractions mean better rates than you could get from integrating directly with a third-party vendor. Customer experience Your customers' experience can be as simple as this: Create an account on your platform. Launch a Direct Deposit Setup control on your interface. Customers follow a simple set of prompts to set up direct deposit. Select the employer or payroll provider from a list. Log in using company credentials. Specify how much of each check—some or all—to deposit in the new account. Submit request. Get immediate feedback about the status of the request. Because Direct Deposit Switch permits your customers to specify how much of a check to deposit in their accounts, they can create accounts for specific purposes, such as a vacation or education fund, and make regular deposits into those accounts. Implementation You need only create a user interface to launch the Direct Deposit Switch functionality. Most of the rest of the interface is provided by Galileo: Employer/payroll selector Login screen Amount selector Success/failure screens See Setting Up Direct Deposit Switch for implementation instructions.Table of Contents Customer experience Implementation "
504,docs.galileo-ft.com/pro/reference/post/updategroup,"Update Group Use the Update Group endpoint to update an existing group, either a root group or a non-root group. Pass only the parameter(s) to update. All of the name parameters support the Latin-9 (ISO-8859-15) character set. You cannot change the parent ID of a group. See Creating a Corporate Hierarchy for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description615-01Invalid group ID. The groupId does not exist in the core. Verify that groupId is correct by calling Get Group Hierarchy for the root group.615-02Maximum level for a root group cannot be decreased. Set maxLevel to a value higher than the current level.615-03Cannot update maxLevel for a non-root group. Verify that groupId is a root group or leave maxLevel blank.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
506,docs.galileo-ft.com/pro/docs/offline-pin,"Offline PIN A personal identification number is an anti-fraud measure that helps authenticate a cardholder at physical points of sale and ATMs. PIN validation requires the cardholder to input the PIN on a card reader's PIN pad, and the card reader compares the input with the PIN that was set for the card. When the PINs match, the cardholder is assumed to be the authorized user, and the transaction can continue from there. Card readers can compare the input PIN to the card's PIN in one of two ways: Online PIN — The card reader passes the PIN to the issuer in the authorization request, and the issuer validates the PIN. Offline PIN — The PIN is encoded in the embedded EMV chip. The card reader compares the PIN that the cardholder inputs with the PIN encoded on the EMV chip. If the PIN matches, the card reader sends the validation results to the issuer in the authorization request. The offline PIN method was developed for two primary reasons: In some areas, card readers are attached to networks with intermittent connectivity, or they are not connected to a network at all. A PIN that is sent over the card network risks being intercepted. Validating the PIN on the chip reduces that risk. In the U.S. and Colombia, the online method is preferred, whereas in Canada and the rest of Latin America the offline method is preferred. If you are located outside of the U.S., or if you want to expand your business outside the U.S., you will probably need to implement offline PINs, depending on the regulations in each jurisdiction. Galileo can help you determine which regions require offline PINs. Initial PIN setting You can initially set an offline PIN using one of two methods: Write the PIN to the chip when the card is embossed. Run a script to write the PIN to the chip during the first transaction after emboss. Write the PIN at emboss For this method, Galileo sends an encrypted PIN in the emboss file that is sent to the embosser with the card production information. The embosser decrypts the PIN and writes the PIN on the EMV chip. This PIN can be either a random PIN that Galileo generates or it can be a PIN provided by the cardholder during the account-creation process. This method requires development work between Galileo and the emboss vendor, as well as a mechanism for the cardholder to securely obtain the PIN that is agreeable to the sponsoring bank, such as the PIN Retrieval Service (PRS), the welcome packet, or a separate letter. Write the PIN using a script For this method, the cardholder does not set the PIN prior to embossing. The embosser writes a random PIN on the chip, so when the cardholder attempts to use the card for the first time, the attempt fails because the cardholder does not know the correct PIN. Galileo recommends that the card holder be instructed to first go to an ATM and set their PIN as soon as they receive their card. If they do not, at the point of sale, after three failed attempts the card reader goes online to contact Galileo, and Galileo runs a script that writes a PIN to the chip. The transaction is attempted again and it is approved. The cardholder can retrieve the PIN to use in future transactions with the PIN Retrieval Service. Changing the PIN The cardholder changes the PIN using the direct render or direct POST PIN-set procedure, and Galileo stores the changed PIN until the next time the cardholder attempts to make a transaction. When the card reader attempts to validate the PIN on the chip, it fails because the new PIN that the user inputs is not the same as the PIN on the chip. After the transaction fails three times, the card reader contacts Galileo, and Galileo runs a script that writes the new PIN to the chip. The transaction is then approved. Improving the user experience Forcing the cardholder to attempt a transaction three times before it succeeds is not an ideal user experience. To make things a bit easier, you can use these methods: ATM first — ATMs in all regions are always online, so when the cardholder swipes the card and inputs an incorrect PIN, the ATM immediately contacts Galileo, and Galileo synchronizes the PIN on the card with the PIN in Galileo's system. In your welcome packets you can advise cardholders to use an ATM right after setting or changing a PIN. PIN Retrieval Service — Securely retrieve and present the PIN on your app or website or present it as a prompt before changing the PIN. FTPAM and FTPDY parameters — Setting these parameters permits transactions to be approved without offline PIN validation immediately following a PIN change. FTPAM specifies the maximum amount for a transaction to be approved without offline PIN validation, and FTPDY specifies the number of days since the PIN change to not require offline PIN validation. At the time that this first transaction is approved, Galileo runs a script to write the PIN to the chip. Keep in mind that using this method increases your fraud risk even as it improves user experience. Cardholder verification method (CVM) Depending on the region, a card must specify the order in which the various types of card authentication should be attempted. If one method fails, the next method is attempted. These are the options: Online PIN — Contact the issuer over the network connection Offline PIN — Verify the PIN on the EMV chip; up to three attempts Signature — No PIN validation; merchant authenticates the card with signature or other method No CVM — No card authentication PIN-set scenarios These scenarios explain how to set up and execute various PIN-set methods. Scenario 1: Cardholder sets PIN during card creation — Not for instant-issue cards. Valid for personalized cards when the cardholder is present at account creation. Not valid in Mexico. Scenario 2: Cardholder sets PIN during card activation — For instant-issue and personalized cards when the cardholder is not present at account creation. Valid in Mexico. Scenario 3: PIN set by issuer script at first transaction — Not valid in Mexico or other jurisdictions where a PIN must be written to the chip during emboss. Scenario 1: Cardholder sets PIN during card creation During account enrollment, the cardholder is prompted to provide a PIN. The card is not sent to emboss until after the cardholder sets the PIN. The PIN is written to the card when it is embossed, and the cardholder can securely retrieve the PIN before the first transaction if necessary. This scenario is valid only when the cardholder is present at the time the account is created, such as when signing up for a card in an app. Do not use this method for instant issue cards; instead, go to Scenario 2. This scenario is not valid in Mexico. Setup Set these parameters: XAACT: YNO EMVOP: Y EMBFL: PINBLOCK The cardholder verification method (CVM) should be set in this order: PIN online PIN offline Signature No CVM PIN retry counter typically set to 3 Workflow Steps Call Create Account to create the account. Capture the card_id (CAD). The card is in status: O (letter O; operational hold). Present the cardholder with a PIN entry form. Follow the direct render or direct POST PIN-set procedure, using the CAD for the API calls. When you receive the PNCH: system_pin_change event, call Modify Status with type: 22 to set the card status to X (ready to emboss). The emboss process picks up the card along with the PIN and writes the encrypted PIN block to the emboss file. The card is changed to status: Y and Galileo sends the SHIP: card_shipped event. The embosser writes the PIN block on the EMV chip and mails the card to the cardholder. The cardholder receives the card in the mail. Optionally, you can include the PIN in the card mailer, or you can send a letter containing the PIN. The cardholder goes to your app to activate the card. Follow the Activating a Card procedure. The cardholder attempts to make the first transaction. If the cardholder inputs the correct PIN, the transaction is approved. If the cardholder does not remember the PIN, launch the PIN Retrieval Service to present the PIN to the cardholder. Scenario 2: Cardholder sets PIN during card activation The chip receives a randomly generated PIN during emboss. When the cardholder receives the card and activates it, the cardholder is prompted to keep the random PIN or to change it. If the cardholder changes the PIN, the PIN is written to the chip during the first transaction. This method can be used for instant-issue cards, when the cardholder is not present at the time of account creation, or it can be used for personalized cards. Setup Set these parameters: EMVOP: Y EMBFL: PINBLOCK SRPEL: Y (Mexico only) KPPIN: Y (Mexico only) The cardholder verification method (CVM) should be set in this order: PIN offline PIN online Signature No CVM PIN retry counter typically set to 3 Workflow Steps Call Create Account to create the account. Capture the card_id (CAD). The card is in status: X (ready to emboss). The emboss process picks up the card along with the randomly generated PIN and writes the encrypted PIN block to the emboss file. The card is changed to status: Y and Galileo sends the SHIP: card_shipped event. Mexico only. The Program Manager generates a waybill, and then calls Update Account to put the name of the waybill in id2, with idType2: 14. Use the CAD for accountNo. The embosser writes the encrypted PIN block to the EMV chip. The cardholder receives the card, either in person or through the mail. Optionally, you can include the PIN in the card mailer, or you can send a letter containing the PIN. The cardholder goes to your app to activate the card. Follow the Activating a Card procedure. Launch the PIN Retrieval Service to display the current PIN, with an option to change the PIN. If the cardholder decides not to change the PIN, the cardholder inputs the displayed PIN in the card reader for the next transaction. If the cardholder decides to change the PIN, go to PIN-change procedure. Scenario 3: PIN set by issuer script at first transaction No PIN is set by the embosser. When the cardholder attempts the first transaction, it fails the specified number of times and then contacts Galileo online. Galileo runs a script that pushes a randomly generated PIN to the card reader. Do not use this method in regions where a PIN must be written on the chip during emboss, such as Mexico. Set these parameters: EMVOP: Y The cardholder verification method (CVM) should be set in this order: PIN offline PIN online Signature No CVM PIN retry counter typically set to 3 Workflow Steps Call Create Account to create the account. Capture the card_id (CAD). The card is in status: X (ready to emboss). The emboss process changes it to status: Y and sends the SHIP: card_shipped event. The embosser writes 0000 to the chip. The cardholder receives the card in the mail. The cardholder activates the card. Follow the Activating a Card procedure. The cardholder attempts to make a first transaction, which launches the Issuer script procedure to write a randomly generated PIN on the chip. The cardholder can view the new PIN with the PIN Retrieval Service and then complete the transaction. PIN-change procedure The cardholder changes an existing PIN using your interface. The cardholder changes the PIN using the direct render or direct POST PIN-set procedure. Galileo stores the changed PIN and sends the PNCH: system_pin_change event. Now the PIN on the chip and the PIN in Galileo's system do not match. You have two options: Use the PIN Retrieval Service to display the new PIN to the cardholder. Use the issuer script procedure, as shown in the next section, the next time the cardholder attempts a transaction. Issuer script procedure The cardholder attempts to make a transaction with a new PIN. After at least one failed transaction attempt, the card reader contacts Galileo, which sends a script to synchronize the PIN. The cardholder does one of the following: Inserts the card into an ATM and inputs the new PIN. The ATM contacts Galileo online. Goes to a point of sale and attempts to make a transaction. After failing to verify the PIN for the configured number of times, the card reader contacts Galileo online. Galileo sends a script to write the new PIN on the chip. Optionally, you can use the PIN Retrieval Service to display the new PIN to the cardholder. The next transaction attempt is successful when the cardholder inputs the new PIN. Galileo setup These internal parameters are set at Galileo according to your use case. ParameterDescriptionValuesCASPOSpecifies how to set the default PIN at emboss. Typically, SRPEL is used instead of this parameter to set the PIN for Mexican products.home_phone — Last 4 digits of home phonemobile_phone — Last 4 digits of mobile phoneprn — Last 4 digits of PRNnot set — No PIN is set.EMBFLProperties to add to the Filler column in the emboss file.PINBLOCK — Adds the encrypted PIN blockEMVOPControls whether offline PIN functionality is enabled.Y — Encode the cardholder PIN in the EMV chip for offline PIN functionality.Other or not set — Do not encode the PIN in the EMV chip; validate the PIN online.FTPAMSpecifies the threshold amount for offline PIN validation after a PIN change. When this parameter is set and EMVOP is set, any transactions below the amount in this parameter do not require offline PIN validation after a PIN change.Decimal number — Threshold amount for offline PIN authorization.Not set — Do not bypass offline PIN authorization for products with offline PIN functionality.FTPDYSpecifies the number of days after a PIN change that offline PIN validation is not required. When this parameter is set and the cardholder changes the PIN on a card with offline PIN functionality, transactions do not need offline PIN validation for the number of days in this parameter.Integer — Number of days after PIN change until offline transactions are authorized.Not set — Do not authorize offline transactions after PIN change until the cardholder makes an online transaction.KPPINControls whether to keep the same PIN when reissuing a card. When this parameter is not set, the PIN is overwritten with 0000, encrypted.Y — Do not set a new PIN when reissuing the card; keep the existing PIN. Other or not set — Set the new PIN to 0000.OFPBESpecifies how long to store the changed PIN block for offline PIN programs before deleting.Integer — Number of days to store PIN block before deleting.Not set — Default to 7 days.SRPELControls whether to set a randomly generated PIN when embossing lost, stolen, or reissued cards. This parameter is valid only for Mexican products.Y — Set a randomly generated PIN for lost, stolen, or reissued cards.Other or not set — Do not set a randomly generated PIN.XAACTSpecifies the initial statuses of the card and account at the time of card creation.Set to YNO for the cardholder to set the PIN during account creation. YN — The account is active upon creation O (letter O) — The card is in an operational hold until the PIN is set.Updated 16 days ago Table of Contents Initial PIN setting Write the PIN at emboss Write the PIN using a script Changing the PIN Improving the user experience Cardholder verification method (CVM) PIN-set scenarios Scenario 1: Cardholder sets PIN during card creation Scenario 2: Cardholder sets PIN during card activation Scenario 3: PIN set by issuer script at first transaction PIN-change procedure Issuer script procedure Galileo setup "
507,docs.galileo-ft.com/pro/reference/dispute/post/addattachments,"Add Attachments Use the Add Attachments endpoint to attach documents to the case, such as screenshots and receipts. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1510-4Invalid caseId or caseId returned no result1510-5Invalid Request:1510-14Invalid request message-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
508,docs.galileo-ft.com/pro/reference/api-reference-events-api-app-completed,"app_completed This event is sent regardless of account status, but it is not sent for Digital First cards. This event is not associated with card creation. Code — CAPP Event trigger — Account creation is successful. Processes — These processes contain the event trigger: Program API endpoints: Create Account Create Virtual Card Account Complete Enrollment Customer Service Tool Galileo-hosted cardholder websit Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CAPP"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""app_completed"" user_data Populated according to your use case and needs by arrangement with Galileo. xid Internal Galileo-generated ID for an account. Example: ""13162"" Example JSON# app_completed example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""CAPP"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""app_completed"", ""xid"": ""13162"" } Table of Contents Fields Example "
509,docs.galileo-ft.com/pro/docs/creating-a-corporate-hierarchy,"Creating a Corporate Hierarchy 👍AvailabilityCorporate Hierarchy is currently in a preliminary state and is available for select clients. The information in this guide is subject to change as development proceeds and is not a guarantee of future functionality. Contact Galileo if you are interested in learning more about this product. Corporate Hierarchy is a way to create a hierarchy of groups and then associate accounts with the groups. A hierarchy starts with a root group, which contains a business profile, and then other groups are created as subgroups (child groups), for up to five levels down from the root group. After you create the group hierarchy you can associate accounts (either new or existing) with the groups. With this arrangement, you can use your own tools to create a dashboard to display the spending for all of the accounts in a group, or all of the accounts in a group plus the subgroups. Result of following this procedure One root group and multiple non-root groups have been created in a hierarchy, and various accounts are associated with the groups. Prerequisites Your core must be on a Galileo AWS instance. General characteristics You can create multiple root groups in your core. A group can have only one parent group. An account can belong to only one group at a time. The maximum number of levels below a root group is five, making six levels total. You can create up to 200 total groups in a core. To create a corporate hierarchy, perform these steps: Create a root group with its business profile. Create subgroups, starting at the next level down from the root group. When creating a subgroup, specify the parent group to create the hierarchy. Add accounts to the groups. Example hierarchy This is an example hierarchy. From the root group there are three subgroup levels. Follow these steps to create the example hierarchy. The example assumes that ten card accounts already exist: their PRNs are represented as PRN1, PRN2, etc. The externalId, an optional parameter, contains sample values that specify the hierarchy level of the group. In your setup, you can use externalId however you choose. Call Create Group with these parameters: groupName: CDE Root Group externalId: L0000 phone: [valid phone number, digits only], required phoneCountryCode: +[valid country code], required Other business profile information as desired maxLevel: 3 The endpoint returns group_id: 0. Call Create Group four more times with these parameters. Keep in mind that phone and phoneCountryCode are required: groupNameparentGroupIdBusiness profileexternalIdgroup_idGroup A0As desiredL10011Group B0As desiredL10022Group C2As desiredL20013Group D3As desiredL30014 Associate existing accounts with the groups. Call Set Account Group Relationships with these parameters: groupId: 0 accountNos: [""PRN1"", ""PRN2""] (See Inputting multiple values for instructions on passing more than one value for this parameter.) Repeat the previous step for each group of accounts to associate with a group. groupIdaccountNos1[""PRN3"", ""PRN4""]2[""PRN5"", ""PRN6""]3['PRN7', ""PRN8""]4[""PRN9"", ""PRN10""] Managing the hierarchy Follow these instructions to manage the example hierarchy. Change the business profile To change the business profile, such as the phone number, call Update Group and pass the parameter(s) to change: phone: 18015552323 Retrieve group information To retrieve group metadata, call Get Groups Info. For example, to retrieve the metadata for the root group and Group D, call Get Groups Info with this parameter: groupIds: [""0"", ""4""] (See Inputting multiple values for instructions on passing more than one value for this parameter.) Response: JSON""response_data"": [  {  ""group_id"": ""0"",  ""parent_group_id"": Null,  ""group_name"": ""CDE Root Group"",  ""external_id"": ""L0000"",  ""max_level"": 3,  ""phone_country_code"": ""+1"",  ""phone"": ""18015551456"",  ""business_legal_name"": ""CDE Corp"",  ""doing_business_as"": ""SportsBall Enterprises"",  ""primary_contact_email"": ""[email protected]"",  ""primary_contact_name"": ""Maxina Seward""  },  {  ""group_id"": ""4"",  ""parent_group_id"": ""3"",  ""max_level"": Null,  ""group_name"": ""Group D"",  ""external_id"": ""L3001"",  ""business_legal_name"": """",  ""doing_business_as"": """",  ""phone_country_code"": """",  ""phone"": """",  ""primary_contact_email"": """",  ""primary_contact_name"": """"  } ] Retrieve root groups To retrieve all of the root groups in your core, call Get Root Groups. The endpoint returns this: JSON""response_data"":  {  ""group_id"": ""0"",  ""group_name"": ""Root Group""  } Retrieve the hierarchy To retrieve the groups in the hierarchy, call Get Group Hierarchy. This endpoint returns only the groups, not the accounts. For example, to return all of the subgroups for Group B (Groups C and D), call Get Group Hierarchy with these parameters: groupId: 2 subGroupLevel: Leave blank or 0 Response: JSON""response_data"": {  ""group_id"": ""2"",  ""group_name"": ""Group B"",  ""children"": [   {   ""group_id"": ""3"",   ""group_name"": ""Group C"",   ""children"": [    {     ""group_id"": ""4"",     ""group_name"": ""Group D"",     ""children"": []    }   ]  }  ] } To return only one level below Group B (meaning Group C), pass these parameters: groupId: 2 subGroupLevel: 1 Response: JSON""response_data"": {  ""group_id"": ""2"",  ""group_name"": ""Group B"",  ""children"": [   {   ""group_id"": ""3"",   ""group_name"": ""Group C"",   ""children"": []}  ] } Retrieve the accounts in a group or groups To retrieve the accounts in one or more groups, call Get Account Group Relationships. For example, to retrieve the accounts for Group B only, call Get Account Group Relationships with these parameters: groupId: 2 includeSubGroups: N Response: JSON""response_data"": [   {    ""group_id"": ""1001"",    ""pmt_ref_no"": [     ""('PRN5',)"",     ""('PRN6',)""    ]   }  ] To retrieve the accounts for Group B as well as the accounts in Group B's subgroups, pass these parameters: groupId: 2 includeSubGroups: Y Response: JSON""response_data"": [   {    ""group_id"": ""2"",    ""pmt_ref_no"": [     ""('PRN5',)"",     ""('PRN6',)""    ]   },   {    ""group_id"": ""3"",    ""pmt_ref_no"": [     ""('PRN7',)"",     ""('PRN8',)""    ]   },   {    ""group_id"": ""4"",    ""pmt_ref_no"": [     ""('PRN9',)"",     ""('PRN10',)""    ]   } ] Move an account to a new group To move Account 1 to Group A, call Set Account Group Relationships with these parameters: groupId: 1 accountNos: PRN1 (See Inputting multiple values for instructions on passing more than one value for this parameter.) Response: JSON""response_data"": [  {  ""group_id"": ""1"",  ""pmt_ref_no"": [   ""PRN1""  ] } ] The resulting hierarchy looks like this: Delete a group Use Delete Groups to delete one or more groups; however, you cannot delete a group that has subgroups or accounts linked to it. To delete a group that has linked accounts, follow the instructions in Move an account to a new group to move the linked accounts to a different group. Alternatively, you can use Remove Account Group Relationships to remove the accounts without moving them to a new group. You can link the accounts to another group later using Set Account Group Relationships. If the group to delete has subgroups, you cannot change the parent ID of those subgroups, so you must recreate the subgroups in another location in the hierarchy, move the subgroups' accounts to the new groups, and then delete the subgroups before deleting the current group. To delete Group C, for example, you first have to move Group D and its linked accounts to another location in the hierarchy. In this example, the new Group D will become a subgroup of Group B, and the accounts linked to Group C will be moved to Group D. Recreate Group D as a subgroup of Group B by calling Create Group with these parameters: groupName: Group D externalId: L2001 parentGroupId: 2 The endpoint returns group_id: 5. Move the Group C and old Group D accounts to the new Group D by calling Set Account Group Relationships with these parameters: groupId: 5 accountNos: [""PRN7"", ""PRN8"", ""PRN9"", ""PRN10""] (See Inputting multiple values for instructions on passing more than one value for this parameter.) Delete the old Group D and Group C by calling Delete Groups with this parameter: groupIds: [""3"", ""4""] (See Inputting multiple values for instructions on passing more than one value for this parameter.) The resulting hierarchy looks like this: Inputting multiple values Two of the parameters in some endpoints can accept multiple values: accountNos groupIds You have two options to input multiple values: repeat the parameter or use a JSON list. Each option requires a different Content-Type header. Repeated parameter For this method, specify Content-Type: application/x-www-form-urlencoded in the header. In the body of the request, pass one parameter/value pair for each value. For example: HTTPPOST /intserv/4.0/setAccountGroupRelationships HTTP/1.1 Host: [URL] response-content-type: json Content-Type: application/x-www-form-urlencoded Content-Length: 174 apiLogin=[redacted]&apiTransKey=[redacted]&providerId=19&transactionId=45d7ecbd-3e53-4a69-8971-af3bbaf17956&groupId=1001&accountNos=777777777777&accountNos=888888888888 JSON list For this method, specify Content-Type: application/json in the header. In the body of the request, specify the values as a JSON list. For example: HTTPPOST /intserv/4.0/getGroupsInfo HTTP/1.1 Host: [URL] response-content-type: json Content-Type: application/json Content-Length: 179 {  ""apiLogin"": [redacted],  ""apiTransKey"": [redacted],  ""providerId"": ""19"",  ""transactionId"": ""d3914a0b-ce55-4d95-9926-2c8f3a3a9f10"",  ""groupIds"": [""1"", ""2"", ""5""] } Updated 1 day ago Table of Contents Result of following this procedure Prerequisites General characteristics Example hierarchy Managing the hierarchy Change the business profile Retrieve group information Retrieve root groups Retrieve the hierarchy Retrieve the accounts in a group or groups Move an account to a new group Delete a group Inputting multiple values "
511,docs.galileo-ft.com/pro/docs/billpay-endpoints,"Billpay Endpoints 👍NoticeThis guide is in a preliminary state. Some of the details may be incorrect, and we will be updating them as needed. Contact Galileo to report any errors or omissions. This guide explains how to use the billpay-related endpoints. For additional billpay information, see these guides: About Bill Pay — General information about bill pay at Galileo Creating a Billpay Transaction — Instructions for creating billpay transactions, including adding billers and creating scheduled transactions Managing Billpay Transactions — Instructions for displaying and canceling billpay transactions and removing billers. Search Biller Directory Consult the Adding a biller section of the Creating a Billpay Transaction guide to see where this endpoint fits in the sequence of events. This table explains the parameters that are specific to the Search Biller Directory endpoint. See the Search Biller Directory reference for details. ParameterUsagebillerAccountNoOptional. When this parameter is passed, the search engine compares it to biller-supplied masks, and an account number that matches a mask will help narrow the search.billerNamePass a complete or partial name of a biller to begin the search. In some cases, a single term will return multiple entries, and the account holder must select from among them. Alternatively, you can pass billerState and/or billerAccountNo to filter the results.billerStateOptional. When this parameter is passed, the search is narrowed to billers with addresses in that state or province. In the response, the biller_account_no_patterns may include one or more masks that you can use to validate the billerAccountNo for the Add RPPS Biller endpoint. Add RPPS Biller Consult the Adding a biller section of the Creating a Billpay Transaction guide to see where this endpoint fits in the sequence of events. This table explains the parameters that are specific to the Add RPPS Biller endpoint. See the Add RPPS Biller reference for details. ParameterUsagerppsBillerIdThis is the rpps_biller_id as returned by Search Biller Directory, if the biller is present in the directory. If it is not, use the Add Paper Biller endpoint to add the biller.billerAccountNoThis is the account number that the account holder has with the biller. The response to Search Biller Directory contains biller_account_no_patterns, which indicate how an account number must be formatted for that biller. The endpoint validates the account number in this parameter against those masks. If the number does not match the pattern, the endpoint returns status code: 485-03.This value cannot be updated with Modify RPPS Biller; if the account holder submits an incorrect billerAccountNo that is accepted by the endpoint, you must remove the biller and create the biller again with the correct billerAccountNo.Scheduling parametersOptional. Leave these blank to add a biller without setting up scheduled payments, or see Scheduling billpay transactions in the Creating a Billpay Transaction guide for instructions on setting up a schedule. Modify RPPS Biller The only properties of an RPPS biller that you can modify are the schedule and the amount of recurring payments. If you need to change the biller account number, you must remove the biller and replace it with a new biller. This table explains the parameters that are specific to the Modify RPPS Biller endpoint. See the Modify RPPS Biller reference for details. ParameterUsagebillerIdThis is the biller_id from Add RPPS Biller or Get Billers. Do not use the rpps_biller_id from Search Biller Directory.Scheduling parametersSee Scheduling billpay transactions in the Creating a Billpay Transaction guide for instructions on using these parameters. These parameters can be nullified. Add Paper Biller Consult the Adding a biller section of the Creating a Billpay Transaction guide to see where this endpoint fits in the sequence of events. This table explains the parameters that are specific to the Add Paper Biller endpoint. See the Add Paper Biller reference for details. These values are not validated. ParameterUsagebillerNameDisplay name, provided by the account holder. This value does not need to be unique—you can create multiple paper billers with this name as long as the addresses are different.Address parametersMailing address for the biller.billerPhoneOptional. Phone number for the biller.billerAccountNoThis is the account number that the account holder has with the biller. This value is not validated against a formatting mask.This value cannot be edited with Modify Paper Biller; if the account holder submits an incorrect billerAccountNo, you must remove the biller and create the biller again with the correct billerAccountNo.You can also pass NA or another string when the check recipient is an individual or a business that doesn't maintain accounts for its clients.Scheduling parametersOptional. Leave these blank to add a biller without setting up scheduled payments, or see Scheduling billpay transactions in the Creating a Billpay Transaction guide for instructions on setting up a schedule. Modify Paper Biller The only properties of a paper biller that you can modify are the biller address and phone, schedule, and the amount of recurring payments. If you need to change the biller account number, you must remove the biller and replace it with a new biller. This table explains the parameters that are specific to the Modify Paper Biller endpoint. See the Modify Paper Biller reference for details. ParameterUsagebillerIdThis is the biller_id from Add Paper Biller or Get Billers.Address parametersTo update any of the address parameters, you must pass all of the address parameters.billerPhoneUpdate or nullifyScheduling parametersSee Scheduling billpay transactions in the Creating a Billpay Transaction guide for instructions on using these parameters. These parameters can be nullified. Create Bill Payment Use this endpoint to create a one-time bill payment for a biller that has already been added to the account. Consult Creating a one-time billpay transaction in the Creating a Billpay Transaction guide to see where this endpoint fits in the sequence of events. This table explains the parameters that are specific to the Create Bill Payment endpoint. See the Create Bill Payment reference for details. ParameterUsagebillerIdThis is the biller_id from Add RPPS Biller, Add Paper Biller or Get Billers. Do not use the rpps_biller_id from Search Biller Directory.processDateOptional. Input a date in the future, or leave blank for the transaction to be processed on the current date.memoOptional. This message will be printed on the check in the Memo field.Updated about 6 hours ago Table of Contents Search Biller Directory Add RPPS Biller Modify RPPS Biller Add Paper Biller Modify Paper Biller Create Bill Payment "
512,docs.galileo-ft.com/pro/reference/post/getoverdraftbalance,Get Overdraft Balance For accountNo you can use the PRN or PAN of the core account that is associated with the overdraft account or the PRN of the overdraft account.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description472-01Cardholder is not opted in to overdraftLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
513,docs.galileo-ft.com/pro/reference/about-the-events-api,"About the Events API Sections in this guide: Events API Scenarios — Examples from each category of Events API webhooks. Events Setup and Configuration — Considerations and decisions to make when configuring your products and system for events. Event Testing and Triggers — Information about testing events, events that are triggered by automated processes, and events that are triggered by the CST. 📘NoteFor information about all events in the Galileo system, including event IDs, fields, and triggers, see the Events API reference, starting at About Events API. "
514,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-metadata,"auth_metadata Code — AUMD Event trigger — Galileo sends an authorization response to the network. Process — This process contains the event trigger: Galileo receives an authorization request from the network. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_in_request_ts X Time that Galileo received the authorization request from the network. Example: ""2023-08-23 05:18:10.032032"" auth_in_response_ts X Time that the Auth API consumer sent the response to Galileo. Example: ""2023-08-23 05:18:12.301843"" auth_out_request_ts X Time that Galileo sent the Auth API webhook to the API consumer. Example: ""2023-08-23 05:18:10.507382"" auth_out_response_ts X Time that Galileo sent the authorization response to the network. Example: ""2023-08-23 05:18:13.102843"" is_auth_api_fallback X Whether Galileo performed a fallback authorization. Example: ""N"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""AUMD"" network X See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" total_auth_response_time X Number of milliseconds between auth_in_request_ts and auth_out_response_ts. Example: ""3070.811"" type X The name of this event: ""auth_metadata"" Example JSON# auth_metadata example: { ""auth_id"": ""12303090"", ""auth_in_request_ts"": ""2023-08-23 05:18:10.032032"", ""auth_in_response_ts"": ""2023-08-23 05:18:12.301843"", ""auth_out_request_ts"": ""2023-08-23 05:18:10.507382"", ""auth_out_response_ts"": ""2023-08-23 05:18:13.102843"", ""is_auth_api_fallback"": ""N"", ""msg_event_id"": ""243693"", ""msg_id"": ""AUMD"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""total_auth_response_time"": ""3070.811"", ""type"": ""auth_metadata"" } Table of Contents Fields Example "
515,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth,"denied_auth This event is sent only when the reason for the denial is not covered by one of these other authorization-denial events: PUMP: denied_auth_gas NACT: denied_auth_inactive_card IPIN: denied_auth_invalid_pin BNSF: denied_auth_nsf STPD: denied_auth_stip BPAN: denied_auth_bad_pan Code — DAUT Event trigger — You or Galileo deny an authorization request. Process — This process contains the event trigger: Galileo receives one of these messages from a card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amt Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""DAUT"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_requester Name of the entity that is requesting a tokenized version of the card. Example: ""Apple Inc."" token_requester_id Identifier for ""token_requester"". Example: ""40010030273"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""denied_auth"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# denied_auth example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""fee_amt"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant"": ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""DAUT"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_requester"": ""Apple Inc."", ""token_requester_id"": ""40010030273"", ""token_type"": ""Apple Inc."", ""type"": ""denied_auth"" } Table of Contents Fields Example "
516,docs.galileo-ft.com/pro/reference/api-reference-events-api-ready-to-activate,"ready_to_activate Code — CRCA Event trigger — The card status has been updated to N by the activation process. Process — This system contains the event trigger: Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""CRCA"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""ready_to_activate"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# ready_to_activate example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""CRCA"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""ready_to_activate"" } Table of Contents Fields Example "
517,docs.galileo-ft.com/pro/reference/dispute/post/getcasereasons,"Get Case Reasons Use the Get Case Reasons endpoint to retrieve the case reasons, which are questions and answers that you display to the account holder during the creation of a dispute case. The answers to these questions classify the type of dispute and provide a reason for the dispute. The case reasons are radio buttons so that the account holder can select only one option. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1503-4Invalid caseId or caseId returned no result1503-5Invalid Request:1503-6Error saving case1503-13caseId references a case that is currently locked1503-14Invalid request message1503-15This case is already resolved with status:1503-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
518,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-deposit,"fed_benefits_status_deposit Code — FBSD Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSD"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_deposit"" Example JSON# fed_benefits_status_deposit example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSD"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_deposit"" } Table of Contents Fields Example "
520,docs.galileo-ft.com/pro/reference/api-reference-events-api-failed-id,"failed_id Code — BFID Event trigger — The Active Fraud process returns a Failed verdict. Processes — These processes contain the event trigger: Program API endpoints: Create Account Create Virtual Card Account Start Enrollment Run CIP Run Enrollment CIP Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BFID"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""failed_id"" Example JSON# failed_id example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""BFID"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""failed_id"" } Table of Contents Fields Example "
521,docs.galileo-ft.com/pro/reference/api-reference-events-api-mobile-activation-tvn,"mobile_activation TVN Number of retries exceeded Code expired or invalidated Activation code entered incorrectly by cardholder Failure to update replacement primary account number The wallet_type field contains the mobile wallet type (Apple, Google, Samsung), and the first letter of the code also indicates the wallet type: Axxx — Apple Pay Gxxx — Google Pay Sxxx — Samsung Pay Codes — ATVN, GTVN, STVN Event trigger — Galileo receives notification from Mastercard that the activation attempt with the code has failed. Process — This process contains the event trigger: A provisioning attempt had entered the yellow path, and the cardholder obtained a one-time password (mobile activation code) to activate the card. Fields All fields are strings. Your field names may vary. Field Required Description auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" cad Galileo-generated card ID. Example: ""12534"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""ATVN"" network See Events Network Codes for possible values. Example: ""V"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""mobile_activation TVN"" wallet_type X Wallet provider. Possible values: ""Apple"" (event code ATCN) ""Google"" (event code GTCN) ""Samsung"" (event code STCN) Example JSON# mobile_activation TVN example: { ""auth_id"": ""12303090"", ""cad"": ""12534"", ""msg_event_id"": ""243693"", ""msg_id"": ""ATVN"", ""network"": ""V"", ""pmt_ref_no"": ""155101003022"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""mobile_activation TVN"", ""wallet_type"": ""Google"" } Table of Contents Fields Example "
522,docs.galileo-ft.com/instant/docs/cardholder-agreements,"Cardholder Agreements There are three agreements your customer must read and agree to before you can create a Cardholder. These include the Electronic Communications Agreement, Deposit Account Agreement, and Privacy Policy. A fourth agreement may be added, if necessary, including information specific to your use case that isn't covered in the other three agreements. The agreements Electronic Communications Agreement By default, banks are required to deliver certain information in writing. The Electronic Communications Agreement obtains your cardholders' consent to receive communications in electronic form vs. physical form. This agreement must be the first agreement presented to your customer. If the customer doesn't agree to electronic communications, you will be unable to continue with their enrollment process because paper documents and ""wet signatures"" would be required. Deposit Account Agreement The Deposit Account Agreement, also known as a Cardholder Agreement, defines everything that is expected from the card program from a legal standpoint. It outlines everything from account creation to ACH transfers to customer service. Privacy Policy The Privacy Policy explains how a cardholder's personal data are handled, including data gathering, data use, and data protection. Presenting the Agreements to Your Customers Step 1: Accessing the agreements Your cardholders must agree to each agreement during their on-boarding process. Use the API to get the Agreements, passing in your business_id (found in the Dashboard by clicking ""Settings"" > ""Account Information"") and product_id as the path parameters. The response contains the agreement_id and url of each agreement. Step 2: Present the Electronic Communications Agreement The Electronic Communications Agreement must be presented to and accepted by cardholders before presenting the other agreements. Use the url associated with the Electronic Communications Agreement (agreement_type = electronic_communications) to present the Agreement PDF to the customer. While presenting the agreement, the screen title should read ""Electronic Communications Agreement."" At the bottom of the screen, below the last page of the agreement, provide a button for accepting the agreement, with accompanying language that reads ""By tapping 'Accept,' I agree to the Electronic Communications Agreement."" Step 3: Present the Deposit Account Agreement Use the url associated with the Deposit Account Agreement (agreement_type = deposit_account_agreement) to present the Deposit Account Agreement. The screen title should read ""Deposit Account Agreement."" At the bottom of the screen, below the last page of the agreement, provide a button for accepting the agreement, with the accompanying language that reads ""By tapping 'Accept,' I agree to the Deposit Account Agreement."" Step 4: Present the Privacy Policy Use the url associated with the Privacy Policy (agreement_type = privacy_policy) to present the Privacy Policy. The screen title should read ""Bancorp Privacy Policy."" At the bottom of the screen, below the last page of the agreement, provide a button for accepting the agreement, with the accompanying language that reads ""By tapping 'Accept,' I agree to The Bancorp Privacy Policy."" Step 5: Notify Galileo that the agreements have been accepted The API request to create a cardholder has a required parameter, agreements, that is a list of each agreement_id from the three agreements that were accepted in Steps 2 through 4 above. All three are required to create a cardholder. Handling updates to the agreements After the agreements have been accepted during on-boarding, they will continue to be updated as the program evolves. Galileo will send an email, notifying cardholders of upcoming updates. It is not necessary for cardholders to indicate their acceptance every time an agreement is updated. If a cardholder objects to an update and prefers to discontinue use of the product rather than accepting the new terms, they will be asked to close the account before the new update takes effect. Making the agreements available within your app Cardholders must be able to easily access each agreement from your app. You should consider including a ""Legal"" section in your app's ""Settings"" or ""User Profile"" sections to display the agreements.Updated over 2 years ago Table of Contents The agreements Electronic Communications Agreement Deposit Account Agreement Privacy Policy Presenting the Agreements to Your Customers Step 1: Accessing the agreements Step 2: Present the Electronic Communications Agreement Step 3: Present the Deposit Account Agreement Step 4: Present the Privacy Policy Step 5: Notify Galileo that the agreements have been accepted Handling updates to the agreements Making the agreements available within your app "
523,docs.galileo-ft.com/pro/reference/post/assessfee,Assess Fee The table below lists status codes that apply to this specific endpoint. Status CodeCode Description410-01Undefined FeeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
524,docs.galileo-ft.com/pro/docs/five-step-sequence-simulation,"Five-Step Sequence Simulation A cardholder makes a $25 transaction at a gas pump. This is the same transaction shown in Five-step sequence in Card Transaction Examples, except that these examples show Mastercard instead of Visa. Also see Scenario 2: Preauthorization with Completion. In Production, most gas pump transactions arrive at Galileo over interbank (PIN) rails. However, the simulator only simulates Visa credit or Mastercard credit rails. Preauthorization Call Create Simulated Card Authorization with these parameters: ParameterValueaccountNoPAN, PRN or CADamount1 if you have upcharges configured for MCC 5542 or 75 if you do notassociationvisa or mc_authmerchantNameCentral Gasolinemcc5542transType2 JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 1.59,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 5566  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""332b5f66-cb15-4e0c-b2bb-f5c73808caec""  },  ""system_timestamp"": ""2022-10-10 09:01:14"",  ""rtoken"": ""b48a7355-ec78-488f-bbe1-3d8061337ae3"" } Capture the auth_id for later use. View the preauthorization Call Get Authorization History to see the preauthorization. JSON""authorizations"": [    {     ""auth_id"": ""5566"",     ""details"": ""Central Gasoline  SALT LAKE CITY US"",     ""details_formatted"": ""CENTRAL GASOLINE, SALT LAKE CIT, US"",     ""amount"": ""-75"",     ""timestamp"": ""2022-10-11 15:42:46"",     ""type"": ""L"",     ""mcc"": ""5542"",     ""merchant_id"": ""CYwDBh4KY4LA5nX"",     ""acq_id"": ""480334"",     ""terminal_id"": ""36247942"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""0"",     ""network_code"": ""M"",     ""local_amt"": ""000000007500"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ] Completion Call Create Simulated Card Authorization with these parameters to simulate the completion, because a completion comes to Galileo through the authorization stream. ParameterValueaccountNoPAN, PRN or CADamount25associationvisa or mc_authmcc5542originalAuthIdauth_id from previous responsetransType4 (Visa) or 3 (Mastercard) JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 3.228,  ""response_data"": {   ""auth_response_code"": ""00"",   ""auth_response_description"": ""Success"",   ""auth_id"": 8899  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""d748139c-e3fe-4367-9a10-c870b0d70bf5""  },  ""system_timestamp"": ""2022-10-10 10:12:19"",  ""rtoken"": ""9ea42dd8-9979-405d-a58f-7ed302b0e33a"" } Capture the auth_id for later use. View the Completion Call Get Authorization History to see the completion. Notice that the preauthorization is no longer present. It has been replaced by this completion, which has a new auth_id, and 25 is the new hold amount. When you settle the transaction, you settle this completion. The original_auth_id field contains the auth_id from the preauthorization. JSON""authorizations"": [    {     ""auth_id"": ""8899"",     ""details"": ""Central Gasoline  SALT LAKE CITY US"",     ""details_formatted"": ""CENTRAL GASOLINE, SALT LAKE CIT, US"",     ""amount"": ""-25"",     ""timestamp"": ""2022-10-11 15:45:35"",     ""type"": ""C"",     ""mcc"": ""5542"",     ""merchant_id"": ""CYwDBh4KY4LA5nX"",     ""acq_id"": ""480334"",     ""terminal_id"": ""36247942"",     ""can_be_expired"": ""1"",     ""original_auth_id"": ""5566"",     ""network_code"": ""M"",     ""local_amt"": ""000000002500"",     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null    }   ] Settlement Call Create Simulated Card Settlement with these parameters: ParameterValueauthIdauth_id from the completion responseaccountNoPAN, PRN, or CADassociationvisa or mc_authamount25 or leave blank JSON{  ""status_code"": 0,  ""status"": ""Success"",  ""processing_time"": 5.989,  ""response_data"": {   ""settle_response_code"": ""00"",   ""settle_response_description"": ""Success"",   ""settle_dtl"": 702  },  ""echo"": {   ""provider_transaction_id"": """",   ""provider_timestamp"": null,   ""transaction_id"": ""af9714fe-e061-4ea3-99cc-12dac7d2e0ac""  },  ""system_timestamp"": ""2022-10-10 10:24:20"",  ""rtoken"": ""87c276a8-4e51-4a7a-89f5-fe1d861601ee"" } Transactions created Call Get All Transaction History to see the five ledger entries, in reverse chronological order. JSON""transactions"": [    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": true,     ""details"": ""Central Gasoline, SALT LAKE CIT, US"",     ""act_type"": ""SE"",     ""act_type_description"": ""Settled Authorization"",     ""post_ts"": ""2022-10-11 15:48:32"",     ""amt"": -25,     ""source_id"": ""8899"",     ""type"": ""5"",     ""type_description"": """",     ""trans_code"": ""SE5"",     ""arn"": ""58761105376480333252104"",     ""merchant_id"": ""CYwDBh4KY4LA5nX"",     ""external_trans_id"": """",     ""calculated_balance"": 925,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:45:35"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL GASOLINE, SALT LAKE CIT, US"",     ""network_code"": ""M"",     ""auth_id"": ""8899"",     ""local_amt"": null,     ""local_curr_code"": ""840"",     ""settle_amt"": null,     ""settle_curr_code"": ""840"",     ""billing_amt"": null,     ""billing_curr_code"": ""840"",     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5542"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""BO"",     ""act_type_description"": ""Authorization Backout"",     ""post_ts"": ""2022-10-11 15:48:32"",     ""amt"": 25,     ""source_id"": ""8899"",     ""type"": ""5"",     ""type_description"": """",     ""trans_code"": ""BO5"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": ""5530"",     ""formatted_merchant_desc"": """",     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": """",     ""act_type"": ""BK"",     ""act_type_description"": ""BK"",     ""post_ts"": ""2022-10-11 15:45:35"",     ""amt"": 75,     ""source_id"": ""5566"",     ""type"": ""BK"",     ""type_description"": null,     ""trans_code"": ""BKBK"",     ""arn"": """",     ""merchant_id"": null,     ""external_trans_id"": """",     ""calculated_balance"": 1000,     ""ach_trans_id"": null,     ""auth_ts"": null,     ""prior_id"": null,     ""card_id"": ""5530"",     ""formatted_merchant_desc"": null,     ""network_code"": null,     ""auth_id"": null,     ""local_amt"": null,     ""local_curr_code"": null,     ""settle_amt"": null,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": null,     ""credit_ind"": null    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Gasoline, SALT LAKE CIT, US"",     ""act_type"": ""AU"",     ""act_type_description"": ""Authorization"",     ""post_ts"": ""2022-10-11 15:45:35"",     ""amt"": -25,     ""source_id"": ""8899"",     ""type"": ""C"",     ""type_description"": """",     ""trans_code"": ""AUC"",     ""arn"": """",     ""merchant_id"": ""CYwDBh4KY4LA5nX"",     ""external_trans_id"": """",     ""calculated_balance"": 975,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:45:35"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL GASOLINE, SALT LAKE CIT, US"",     ""network_code"": ""M"",     ""auth_id"": ""8899"",     ""local_amt"": 25,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5542"",     ""credit_ind"": ""Y""    },    {     ""is_savings"": false,     ""deny_code"": null,     ""disputable"": false,     ""details"": ""Central Gasoline, SALT LAKE CIT, US"",     ""act_type"": ""AU"",     ""act_type_description"": ""Authorization"",     ""post_ts"": ""2022-10-11 15:42:46"",     ""amt"": -75,     ""source_id"": ""5566"",     ""type"": ""L"",     ""type_description"": """",     ""trans_code"": ""AUL"",     ""arn"": """",     ""merchant_id"": ""CYwDBh4KY4LA5nX"",     ""external_trans_id"": """",     ""calculated_balance"": 925,     ""ach_trans_id"": null,     ""auth_ts"": ""2022-10-11 15:42:46"",     ""prior_id"": ""0"",     ""card_id"": ""5530"",     ""formatted_merchant_desc"": ""CENTRAL GASOLINE, SALT LAKE CIT, US"",     ""network_code"": ""M"",     ""auth_id"": ""5566"",     ""local_amt"": 75,     ""local_curr_code"": ""840"",     ""settle_amt"": 0,     ""settle_curr_code"": null,     ""billing_amt"": null,     ""billing_curr_code"": null,     ""pmt_ref_no"": ""999102163165"",     ""mcc_code"": ""5542"",     ""credit_ind"": ""Y""    } ] Updated 4 months ago Table of Contents Preauthorization View the preauthorization Completion View the Completion Settlement Transactions created "
526,docs.galileo-ft.com/pro/reference/api-reference-business-application-identifier,Business Application Identifier CodeApplication typeAAAccount to accountBBBusiness to businessBIMoney transfer (bank-initiated)BPNon-card bill paymentCDCash depositCICash inCOCash outCPCard bill paymentFDFunds disbursement (general)FTFunds transferGDGovernment disbursementGPGambling payment (other than online gambling)LOLoyalty and offersMDMerchant disbursementMIMerchant-initiated Money TransferMPFace-to-face merchant paymentOGOnline gambling payoutPDPayroll/pension disbursementPPPerson to personPSPayment for goods and servicesTUPrepaid reload / top-upWTWallet transfer 
527,docs.galileo-ft.com/pro/docs/ach-developer-setup,"ACH Developer Setup When an ACH transaction enters Galileo’s system, your options for processing the transaction depend on the direction of the transaction and movement of funds, as shown in these guides: ACH Endpoints — An overview of Program API endpoints to manage ACH accounts and to create, view, and cancel ACH transactions. Other ACH Controls — Events API webhooks, External Trans API, and CST controls for ACH. ACH Tracing and Troubleshooting — Explanation of identifiers for tracing ACH transactions and information on troubleshooting outgoing ACH. See also Galileo ACH workflows for a general overview.Updated 2 months ago "
528,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-expired,"billpay_expired Code — BPEX Fields All fields are strings. Your field names may vary. Field Required Description auth_id Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" check_no X Number of the expired check. Example: ""2345"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPEX"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type xid X Internal Galileo-generated ID for an account. Example: ""13162"" Example JSON# billpay_expired example: { ""auth_id"": ""12303090"", ""check_no"": ""2345"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPEX"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_expired"", ""xid"": ""13162"" } Table of Contents Fields Example "
529,docs.galileo-ft.com/instant/docs/about-accounts,"About Accounts An account is a bank account that stores either your money or your cardholder's money. This guide discusses the information contained in the Account Object, the two types of accounts, and how to create and fund each type. The Account Object The Account Object contains information about the account (e.g., routing_number) and the money stored in the account (e.g., balance). Account ID The account_id uniquely identifies the cardholder's account. This identifier is used in all API requests regarding a particular account. It is for use only between you and Galileo; there is no reason to communicate this identifier to your Cardholder. Account number The account_number is used by other financial institutions to identify a cardholder's account. It is primarily used for ACH and wire transfers. Make this number available to your cardholders as it is useful for paying bills and receiving direct deposits. Account type The account_type specifies whether an account is a Master Funds Account, Spending Account, or ACH Account. See the Account Type enum for a list of possible values. Balance The balance tracks the amount of funds available for your cardholder to spend at any given time. It should always be up to date (allowing a couple of seconds for processing immediately after a transaction). Creation date The creation_date is the datetime recorded when the account was created. Name The name of the account may be Spending Account, Master Funds Account, or the name of the ACH account (e.g., Acme Bank - Checking). Product ID The product_id signifies which product the account belongs to. As accounts and cards inherit features from the product, the product_id is useful in determining account and card features. For example, if you want to know the color of a cardholder's card, you check the product_id of the account to which the card belongs and use the Dashboard to determine the card color for that product. Routing Number The routing_number is similar to the account_number, except it identifies the bank at which the account resides rather than the account itself. Make this number available to your cardholders. Status The status indicates the state of the account. See the Account Status enum for possible values. Note that needs_cip is a read-only status - it isn't possible to change a status to or from needs_cip. Account types There are three types of accounts: Master Funds Accounts, Spending Accounts, and ACH Accounts. Though each type of account has a different purpose, the common thread is they are each capable of holding and transferring money. Master Funds Account The Master Funds Account is your company's account associated with your Instant program. This account is used to transfer funds to your cardholders (e.g., account funding or a referral bonus) and to pay fees to Galileo (e.g., the account creation fee). Account information—including account number, routing number, and balance—is available from the Dashboard or via API. There is no card associated with the Master Funds Account. Creation A Sandbox version of the Master Funds Account is created automatically when you sign up through our Dashboard. This version is pre-loaded with faux money you can use to test your Instant program. A Production version of the Master Funds Account is created automatically when your program is approved for Production validation. Funding The Master Funds Account may be funded via ACH or wire transfer. Use the routing and account numbers, found in the Dashboard, to send money to the account. Spending Account A Spending Account is the primary DDA account associated with a cardholder. This account includes, by default, a debit card. Information about this account—including the routing number, account number, balance, and transactions—is available via API. High-level information, such as cardholder name and account balance, is available from our Dashboard. Creation A Spending Account is created automatically when a cardholder is created. After the cardholder is created, use the API to get the Spending Account. A $5 creation fee is charged to your Master Funds Account each time a Spending Account is created. Funding You may fund a Spending Account by transferring money from your Master Funds Account, initiating an ACH debit from an ACH Account, sending money to the account via ACH credit, or sending a wire transfer to the account. ACH Account An ACH Account is an external bank account your Cardholder authenticates with Plaid from within your app. It may be used to transfer money to and from the Cardholder's Spending Account. Galileo doesn't track the balance of an ACH Account. Galileo doesn't keep a record of the Transactions of an ACH Account. Creation An ACH Account may only be created after the Cardholder's external account has been authenticated through Plaid.Updated over 2 years ago Table of Contents The Account Object Account types Master Funds Account Spending Account ACH Account "
530,docs.galileo-ft.com/pro/reference/post/getcard,"Get Card 📘NoteYou can receive PCI-sensitive information only if your provider parameters permit it.RecipesGet Card response, multiple emboss recordsOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
531,docs.galileo-ft.com/pro/reference/post/getaccountoverview,"Get Account Overview Data sets returned by Get Account Overview: General account information (balance, status, application date) Cardholder profile data Posted transactions Pending card authorizations Pending fees (generally because of insufficient funds) Savings interest data, applicable only if an associated savings account exists; otherwise, a unary savings_interest element is returned. 📘NoteTransactions created by the Create Payment and Create Adjustment endpoints are not visible for several seconds after creation.RecipesGet Account Overview response, primary and secondary accountsOpen RecipeSee Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
532,docs.galileo-ft.com/pro/docs/setup-for-single-use-virtual-card,"Setup for Single-Use Virtual Card This guide describes your responsibilities to set up a single-use virtual card, part of Galileo’s Buy Now, Pay Later product. Set up a credit program Single-use virtual cards are treated as a credit product at Galileo. When you set up a credit product, you are adding a new program and a new BIN. You will need approval for the new BIN from both your bank partner and Mastercard. You can ask your Galileo representative to help you with your conversation with the network to avoid misunderstandings. Refer to the Setup Galileo Secured Credit for details on credit at Galileo. Obtain a bank partner Before you can use Galileo’s Buy Now Pay Later service, you must acquire a bank partner to sponsor your program. Your issuing bank may not support credit products. If this is the case, you will need to use a separate sponsor bank. PCI compliance You may need to be PCI compliant if you plan to display virtual card information, like the PAN, to customers in the application and/or in their mobile wallet. Loan underwriting process Galileo does not provide underwriting. You determine the risk of underwriting each customer and how much the customer can afford to borrow. You can choose to set up underwriting in house or partner with a third-party underwriter to determine a cardholder has the correct qualifications. Merchant credits and refunds You are responsible for determining how to handle merchant credits and refunds. You may decide to pay merchant credits and refunds to the cardholder, apply them to the next installment loan, or some other solution. Disputes You are responsible for setting up your own internal process to handle disputes. You may decide to integrate with Galileo’s disputes partner. Galileo setup These internal parameters are set at Galileo according to your use case. ParameterLevelDescriptionSUVCProductRequired to specify a single-use virtual card program for BNPL.SUVCTProductThe dollar amount threshold above which will be considered a consumer initiated transaction on a single use virtual card. Consumer initiated transactions below this threshold will be considered a preauthorization hold that will be followed by a second, larger transaction.SUMTAProductOptional. The dollar amount threshold below which a transaction will be declined. Defaults to $50.SUVCMProductOptional. Configures the transaction-matching method based on value. Values are: TERMINAL — Requires that the terminal ID of any subsequent transaction matches the terminal_id (DE41) of the first transaction on file or the subsequent transaction will be declined.MERCHANT — Requires that the merchant ID of any subsequent transaction matches the merchant_id (DE42) of the first transaction on file or the subsequent transaction will be declined.TERMINAL, MERCHANT — Recommended. Requires both the terminal ID and merchant ID of any subsequent transaction to match the ones stored on file or the subsequent transaction will be declined.NONE — No merchant data is checked on subsequent transactions. Subsequent transactions will be approved, assuming there are sufficient funds.Updated 3 months ago What’s NextSetup for Installment LoansTable of Contents Set up a credit program Obtain a bank partner PCI compliance Loan underwriting process Merchant credits and refunds Disputes Galileo setup "
533,docs.galileo-ft.com/pro/reference/response,"Responses Sample requestPOST /intserv/4.0/ping HTTP/1.1 Host: 10.6.33.31 Connection: close Accept-encoding: gzip, deflate User-Agent: Galileo API Tester Content-Type: application/x-www-form-urlencoded response-content-type: json Content-Length: 103 apiLogin=XXXXXX-9999&apiTransKey=XXXXXXXXX&providerId=XXX&transactionId=q3jkzvunwra29zfy9tnhc9gg3rcwcl By default, all responses contain these fields. FieldData typeDescriptionSample valuesstatus_codeNumericNumeric code for the status. See Status Codes and Errors for more information.0407-02statusStringThe description of the status_code.Successprocessing_timeFloatThe amount of time between the call and the response.0.065response_dataObjectEndpoint-specific data. For some endpoints this field is empty. See the individual endpoint response examples.echoObjectContains values that were passed in the original endpoint call.provider_transaction_idStringThe value of the providerTransactionId parameter.provider_timestampDate-timeThe value of the providerTimestamp parameter.transaction_idStringThe value of the transactionId parameter.errorsListContains details about an error. Present only when status_code contains an error code.'achAccountNo' is required and cannot be emptyrtokenUUIDUUID for the endpoint call, generated by the Galileo system. Use this value when troubleshooting specific endpoint calls with Galileo.system_timestampDatetimeDate-time of the response in Galileo system time.2023-04-26 16:12:06 Example response structure JSON{ ""status_code"": 0, ""status"": ""Success"", ""processing_time"": 0.1671297550201416, ""response_data"": {}, ""echo"": {  ""provider_transaction_id"": """",  ""provider_timestamp"": null,  ""transaction_id"": ""25570855"" }, ""rtoken"": ""8cc16de0-5eda-4e2a-968e-3b08fce6f778"", ""system_timestamp"": ""2020-07-13 10:47:34"" } "
534,docs.galileo-ft.com/pro/docs/developer-setup-for-galileo-secured-credit,"Developer Setup for Galileo Secured Credit This guide describes the endpoints and procedures for implementing Galileo Secured Credit. Endpoints for Galileo Secured Credit This table lists actions for creating and managing secured credit products at Galileo, and related Program API endpoints. Guides provide additional information and procedures. 📘NoteEndpoints listed here are not exclusive to secured credit products. The same endpoints are used across Galileo products. ActionEndpoint(s)Guide(s)Create the primary account, charge card account, and secured credit accountCreate AccountAdd AccountCreating an AccountActivate the charge cardActivate CardAbout CardsActivating a CardMove funds into the secured credit accountCreate Account TransferCreating an Internal TransferMove funds out of the secured credit accountCreate AdjustmentCreate PaymentCreating an AdjustmentCreating a PaymentUpdate the credit limit when the secured credit account balance changesSet Credit LimitChange account or card statusModify StatusAccount status in About AccountsCard statuses in About CardsReport account closure statusModify StatusAccount closure status reporting in Setting Up Secured CreditReporting account closure status in Developer Setup for Secured CreditGet account and card informationGet Account OverviewGet CardRetrieving account information in About AccountsViewing card information in About CardsView credit historyGet Credit SummaryGet Credit Limit Change HistoryCharge off an unpaid account. If Galileo handles your credit reporting, the charge-off is included in the report.Charge Off AccountRelated to Account closure status reporting Creating secured credit accounts for a new or existing customer Secured credit requires three accounts: a primary account, a charge card account, and secured credit account. This section describes how to set up each account. For an example account creation workflow, see Secured credit account structure under Secured Credit Workflows. Primary account The primary account for a secured credit product can be a DDA or another type of account capable of holding and transferring funds. Existing customers will already have this account. When you create the primary account for a new customer, follow the normal onboarding procedure as described in the Creating an Account guide. If you are setting up secured credit for an existing customer, and the primary account has a debit card linked to it, you may decide to deactivate the existing debit card depending on your business plan. For a DDA, see Canceling the DDA debit card in this guide. If you are setting up secured credit for a new customer, you do not need to create a debit card linked to the primary account. Pass e-sign verification information to Galileo via Set Account Feature. Send featureType: 19 (E-sign Act opt-in) and the appropriate featureValue (set to Y to receive electronic letters). Depending on your internal setup, you may require the cardholder to deposit funds into the primary account either before the secured credit account is created, or after all three accounts are created. The primary account must contain funds before you can establish a credit line with the secured account. Charge card account The charge card account links to the credit card and gives the cardholder access to the credit line. To create a new charge card account for an existing customer, send an Add Account request. This table describes parameters that are specific to creating a new charge card account. ParameterDescriptionprodIdProduct ID for the charge card productprimaryAccountPRN for the primary account Collateral account The secured credit account contains the collateral funds for the credit line. You set the credit line according to the amount in this account. To create a new secured credit account for an existing customer, send an Add Account request. This table describes parameters that are specific to creating a new secured credit account. ParameterDescriptionprodIdProduct ID for the charge card productprimaryAccountPRN for the primary account Canceling the DDA debit card When you set up Galileo Secured Credit for an existing cardholder, you may decide to cancel the DDA debit card at the time that the charge card is activated. Keep in mind that virtual cards are automatically activated. See Card cancelation in the Setting Up a Card Program guide for more information. Setting the credit line After the secured credit account is created, follow these steps to set the credit line: Send the Create Account Transfer request to move funds from the primary account into the secured account. Send the Set Credit Limit request to adjust the credit line. Reporting account closure status When a secured credit account closes, you can send the account closure status to Galileo. If Galileo handles your credit reporting, this status will be included in the report. For an overview of account closure status reporting for secured credit products, see Account closure status reporting under Setting Up Secured Credit. To report account closure status, send a Modify Status request with the following parameters: ParameterValueaccountNoThe primary account number for the secured credit producttypeValid types are 2, 13, 16, and 20closureReasonOne of the values listed in the table below This table lists possible values for closureReason. ValueDescriptionchargeoffAccount is unpaid, closed by the issuer, and charged offcollectionAccount is unpaid, closed by the issuer, and is in internal collectionsdeleted_fraudAccount takeover fraud, account closed by the issuerinactivityAccount is paid and closed by the issuer due to inactivitypaid_userAccount is paid and closed at the customer’s requestUpdated 21 days ago What’s NextGalileo Secured Credit WorkflowsTable of Contents Endpoints for Galileo Secured Credit Creating secured credit accounts for a new or existing customer Primary account Charge card account Collateral account Canceling the DDA debit card Setting the credit line Reporting account closure status "
535,docs.galileo-ft.com/pro/reference/api-reference-transaction-types,"Transaction Types The first two characters of a transaction code are the Activity Type and the remaining characters are the transaction type. For example, a Mastercard Banknet retail settlement is SE5, which is activity type SE (Mastercard Banknet settlement) plus transaction type 5 (retail sale), whereas an Interlink preauthorization is VIL, which is activity type VI (Visa authorization) plus transaction type L (preauthorization). See Classifying transactions in the About Transactions guide for more information. The tables below show the transaction types for authorization and settlement transactions. Your program may not use all of the types shown here. Use the lookup file that Galileo supplies to see all of the transaction types that you will be using. 📘NoteFor payments (PM), adjustments (AD) and fee (FE) activity types, Galileo will supply you with a curated list of transaction types that are specific to your use case and bank requirements. However, some payments and adjustments take place over network rails; these transactions are included in the Additional network transactions table. Authorization and settlement transaction types This table shows how transaction types are paired with activity types for each card network. Where there are two activity types shown, the first is for authorizations and the second for settlements. For example, the transaction code for a retail Interlink authorization is VIA and its settlement is ISA. These transaction codes are visible in the Posted Transactions RDF, Program API responses, and the CST. (In the CST, the activity type is spelled out in the Type field, and the transaction code is labeled Type Code.) For the TRANSACTION CODE in the Authorized Transactions RDF, see Authorization types, below. TypeDescriptionBanknet (MC credit)Maestro (MC debit)VisaInterlinkPlusSTARAllpointMoneyPassDiscoverPulsePresto5Retail settlementSE57Cash disbursementSE78Mobile wallet or cash-transfer app settlementSE811Completion without preauthorizationAU11AAuthorization, or purchase with PINAUADBASDAVIAVSAVIAISAVIAPLASTASSAPUASPAPRABBalance inquiryAUBDBBVIBVIBSTBCPreauthorization completionSDCVSCISCSSCSPCFFee collectionVSFISFIBalance inquirySDIJAdjustment (debit or credit)VSJISJPLJLPreauthorization or Discover authorizationAULDBLVILVILVILSSLDCLSCLMForce post*SDMVSMISMPLMSSMASMMPMSCMSPMRReversalAURDBRSDRVIRVSRVIRISRPLRSTRSSRAPRASRMPRSCRSPRPRRRWCash reversalVSRWVReversal debiting balanceSDVVSVWATM withdrawal, cashDBWSDWVIWVSWVIWISWVIWPLWSTWSSWAPWASWMPWPUWSPWPRWYATM withdrawal, creditVIYVSYZMerchant credit**DBZSDZVIZVSZVIZISZVIZPLZSSZSCZSPZ * For Mastercard Banknet, a force post has the transaction code SE5. ** For Mastercard Banknet, merchant credits are adjustments with transaction code ADC. Additional network transactions Some transactions that take place on network rails are classified as adjustments (AD) and payments (PM). Card loads are payments, and Mastercard Banknet merchant credits and chargeback-related transactions are adjustments. The chargeback-related codes (chargeback, second presentment, exceptions) are valid only when using Galileo's disputes process. All of these transaction types are case-sensitive. TypeDescriptionBanknet (MC credit)Maestro (MC debit)VisaInterlinkPlusSTARAllpointDiscoverPulseadChargebackADadAOAllpoint loadPMAOaoAllpoint load reversalADaoapSecond presentmentADapasExceptionADasCMerchant creditADCDCChargebackADDCDEExceptionsADDEdhChargebackADdhdjSecond presentmentADdjdkExceptionADdkdsSecond presentmentADdsfdFinal disputeADfdADfdADfdADfdADfdADfdADfdADfdADfdHChargebackADHhChargebackADhADhADhISecond presentmentADIJArbitrationADJjSecond presentmentADjADjADjkExceptionADkADkADkLCDiscover loadPMLCMLMastercard loadPMMLMXMaestro loadPMMXpdChargebackADpdpeSecond presentmentADpepzExceptionADpzSCSecond presentmentADSCseChargebackADseSSExceptionADSStcTemporary creditADtcADtcADtcADtcADtcADtcADtcADtcADtcVH*Visa Money TransferPMVHVLVisa ReadyLinkPMVLVT*Visa Money TransferPMVT * The Visa Money Transfer types are differentiated by the BAI. See the Business Application Identifier enumeration for the definitions. VH — BP, CP, FD, GD, GP, LO, MD, OG, PD VT — All other BAIs Authorization types In the Authorized Transactions RDF, the TRANSACTION CODE field may contain these values. TypeDescription4Convenience check5Purchase6Merchant credits7Cash disbursements8Unique transactions9ATM disbursements10Balance inquiry11Transfer13Quasi-cash28Load50Bill pay These transaction types are also present in Authorization Events API webhooks as auth_tran_type. They are not available in the Program API.Table of Contents Authorization and settlement transaction types Additional network transactions Authorization types "
536,docs.galileo-ft.com/pro/reference/post/createbillpayment,Create Bill Payment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description433-01Unknown biller433-02Invalid payment date433-03Invalid amount433-04Transaction amount exceeds configured maximum bill payment amount433-05Transaction amount plus fee exceeds customer available balance433-06Account is not activeLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
537,docs.galileo-ft.com/pro/docs/retrieving-card-information,"Retrieving Card Information This guide describes the card records that Galileo stores, as well as emboss records for physical cards, and how you can retrieve this information. This guide also includes instructions for retrieving a digital card image. Related guides: Setting Up a Card Program — General explanation of the card lifecycle Choose a Card Strategy — How to decide which cards to issue and when Design a Card — Specifications for card designs Card records Each client has a cards table that records all of the cards in the program. Every time you create a new card, Galileo adds a row to that table. The row number is the CAD, and included in that row are the following columns: CAD — The card identifier, a Galileo-generated number. PAN — The 16-digit card number, displayed on the card. Encrypted in the Galileo system. Expiration date — The date when the card expires. Encrypted in the Galileo system. Account number — Value that links the card record to the account record. Cardholder ID — Value that links the card record to the cardholder record. Create date — Date when the card record was created. Activation date — Date when the card was activated. PIN data — Record of PIN failures, last failure date, and hashed PIN. Card status — Single-letter designation of the card's status. See the Card Statuses guide for more information. Every time a new PAN is generated, a new row is added to the cards table, meaning that a new CAD is also generated. This 1:1 relationship between a PAN and a CAD means that when you are not PCI-compliant, you can pass the CAD in an API call for accountNo and it will point to the same card record as the PAN. In general, when passing the accountNo for an API call, you should use the CAD or PAN when the endpoint is intended to affect a single card rather than the account as a whole. When you pass the PRN for accountNo and there is more than one active card associated with the PRN, most endpoints will return an error. On the other hand, some endpoints do not accept PAN or CAD for accountNo. Check the endpoint reference for each individual endpoint to verify. A PAN also has a 1:1 relationship with a PIN. When you generate a new PAN, you have to set a new PIN for the card. In contrast, if you reissue the card with the same PAN, you do not have to set a new PIN. See PIN-Set Procedures for more information. A new PAN (and therefore new CAD) is generated under these circumstances: A new card account is created using the Create Account, Add Account, Create Virtual Card Account, Add Card or Complete Enrollment endpoint. A card is reissued with a new PAN with the Reissue Card or Switch Product endpoint. A card is replaced through the lost/stolen process. This table summarizes how the PAN and CAD are represented in the Galileo system. Galileo systemPANCADProgram API requestsaccountNoaccountNoProgram API responsescard_numbercard_idEvents APIcard_numbercadAuth APIcard_numbercadRDFsCARD NUMBERCARD IDENTIFIER Emboss records The emboss table stores emboss records. An emboss record is created only for physical cards, and it is created every time the card is sent to the embosser. It is therefore possible for one card to have multiple emboss records: one when the card is first created, and then one each time the card is reissued with the same PAN. The row number is identified by the emboss UUID, and each row includes these columns: Emboss UUID — A globally unique identifier for the row in the emboss table. Expiration date — The date when the card will expire. CVV — The three-digit code displayed on a card to authenticate the card for card-not-present transactions. Encrypted in the Galileo system. Created date — The date the emboss record was created. Emboss date — The date the emboss record was sent to the embosser. Emboss status — The status of the emboss record: Y — Sent to the embosser N — Card has been activated Shipping type — Whether the card was shipped standard or express. Product ID — The product ID for the embossed card. A new emboss record is generated by the emboss process, which runs every 15 minutes in CV. In Production, the interval of the process varies according to your settings, but is at least once per day. When you create a new card, a new CAD is created immediately, but the emboss record is not created until after the emboss process runs. For this reason, you will often not see an emboss record right after creating or reissuing a card. The emboss process generates both the expiry date and the CVV. These two values have a 1:1 relationship, meaning that any time you generate a new expiry date for a card, you also generate a new CVV. An emboss record is generated under these circumstances. A new physical card account is created using the Create Account, Add Account, Add Card or Complete Enrollment endpoint. A physical card is reissued with a new expiry (but not new PAN) using the Reissue Card or Switch Product endpoint. (The legacy method of reissuing using Modify Status also generates a new expiry date.) A physical card is reissued with a new PAN (because a new PAN must have a new expiry date), using the Reissue Card or Switch Product endpoint. A physical card is replaced through the lost/stolen process. Emboss UUID You can use the emboss UUID to identify which emboss record is the latest. When the emboss_uuid field is returned by a Program API endpoint, it is nested in the embossed_cards object. The new_embossed_uuid field specifies which emboss_uuid is the most recent. Card identifiers in program API responses When you call endpoints that return card information, the card and emboss records are nested as follows: customer: [  accounts: [   cards: [    emboss_records: [ ]  ]  ] ] Viewing card information For every new or updated card record, Galileo includes that record in the daily Account Card RDF. In the CST, you can see card information on the landing page for a card. To retrieve card information with the Program API, use Get Card or Get Account Cards. Keep in mind that to receive an unmasked PAN, the card expiry, and the CVV, you must be PCI compliant; otherwise, you will receive only the masked PAN. Use the Get Card endpoint to retrieve information about a specific card and the Get Account Cards endpoint to get a list of cards that are associated with the holder of the specified account, including related secondary accounts. AttributeGet CardGet Account CardsPAN (card_number)XXExpiry (expiry_date)XXCVV (card_security_code)XCAD (card_id)XXCard statusXXExternal card IDXXPRN (pmt_ref_no)XXCardholder nameXXEncrypted card numberXEncrypted expiryXEmbossed cards object (embossed_cards)XXEmboss UUID (emboss_uuid)XXFreeze info object (freeze_info)XXPIN fail countXXPIN fail dateXXSSN*XCardholder addressXCardholder phoneXCardholder emailXCardholder date of birthXShip-to addressXExpress mail settingXCardholder occupationXCardholder income sourceXAccount active statusXAccount application dateXBill cycle dayXGalileo account number (balance ID)XProduct ID (prod_id)XActivation date (start_date)X * Only when provider parameters are set. Open these Recipes to see examples of multiple accounts, cards and emboss records. Get Account Cards response, secondary account, multiple emboss recordsOpen Recipe Get Card response, multiple emboss recordsOpen Recipe Digital card images This section describes the steps to retrieve a dynamically generated card image that displays full PAN, expiry, cardholder name, and CVV. You do not need to be PCI compliant to use this method. 📘NoteDo not use this method with mobile wallets. To present a virtual card or a digital image of a physical card in your application, follow these steps: Provide a digital card template to Galileo. See Digital card design in the Design a Card guide for specifications. From your app or your website, retrieve a token from Galileo Send the token and the image request to Galileo Present the image in your app or on your website Galileo generates a configuration ID that corresponds to a card template and font specification, meaning if your product offers three possible templates for a card, you would have a different configuration ID for each image/font combination. You can use the same configuration ID across multiple programs as long as all programs use the same template. The configuration ID is a required parameter when you build the URL to Galileo's asset application to retrieve the generated card image—this is the config parameter in the HTTP request for the image. To retrieve a card image you must send two requests to Galileo: a Get Access Token call and an HTTP request to retrieve the card image from Galileo's asset application. Get Access Token call These parameters are required for the Get Access Token call: accountNo — Galileo recommends using the CAD (card_id) or PAN, but the PRN is valid as long as only one card has ever been associated with the account. type — Pass 0 to retrieve a card-related token. The response will contain these fields: token — A case-sensitive alphanumeric string, for example, hpSVyayQScHmhJS6_MVXT1WlsFRQoDJrRu_fi_JlX2Jo2dgg5p expires — The date/time the token expires, formatted as YYYY-MM-DD hh:mm:ss The token has two properties: the expiration (default: 300 seconds) and the maximum times an access token can be used (default: 3). You can change the defaults in your program or product parameters. TSECV — Controls the maximum seconds of access-token validity. TUSEC — Controls the maximum times an access token can be used. HTTP request for the image With the token assemble an HTTP call to retrieve the card image, as shown in the example. The URL is an AWS instance that Galileo sets up for each client. Request an AWS URL from Galileo if you do not already have one. This example is for the CV environment. For Production change the cv in the URL to pd. HTTPhttps://asset-[clientname].cv.gpsrv.com/asset/image?token=[token]&config=[config_id] where: clientname — The name of your tenanted AWS instance token — The token you retrieved with the Get Access Token call config_id — The configuration ID that corresponds with the image to retrieve Galileo returns the PNG or JPG binary.Updated 7 days ago Table of Contents Card records Emboss records Emboss UUID Card identifiers in program API responses Viewing card information Digital card images Get Access Token call HTTP request for the image "
538,docs.galileo-ft.com/pro/reference/post/getlocations,Get Locations The table below lists status codes that apply to this specific endpoint. Status CodeCode Description507-01No locations found matching search criteriaLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
539,docs.galileo-ft.com/pro/docs/quickstart,"Quickstart This guide will show you how to connect to the Galileo API and send a POST request to the Ping endpoint using cURL, Python, and the Postman API development platform. Make sure you have your Sandbox credentials before you begin (see Sandbox environment in the Environments guide). 📘NoteNew API credentials are required after 30 days and must be generated by a team admin. If the incorrect details are used, your API request will fail and your company account will be locked. After you finish the quickstart, make sure to see Build a Sample App, where you will learn how to create a sample account, deposit funds, and send requests to a few common endpoints. cURL cURL is a terminal tool that enables HTTP requests. It is installed on most computers, so setup should be minimal. 📘NoteTo check if you have cURL, open the terminal and run the command, curl -V. If you have cURL, you should see a version number. If you don’t have it, you can download it here: https://curl.haxx.se/download.html. Follow these steps to send a POST request to the Ping endpoint using cURL: Open the terminal. Run the script below, replacing values with your credentials for: apiLogin apiTransKey transactionId — This can be any random string but must be unique for each request. Mac OS/LinuxWindowscurl --location --request POST 'https://api-sandbox.cv.gpsrv.com/intserv/4.0/ping' \  --header 'response-content-type: json' \  --header 'Content-Type: application/x-www-form-urlencoded'’ \  --data-urlencode 'apiLogin=0000' \  --data-urlencode 'apiTransKey=1111' \  --data-urlencode 'providerId=29152' \  --data-urlencode 'transactionId=c6285802-72e4-4760-9011-b39993ecfbd5' curl --location --request POST ""https://api-sandbox.cv.gpsrv.com/intserv/4.0/ping"" ^  --header ""response-content-type: json"" ^  --header ""Content-Type: application/x-www-form-urlencoded"" ^  --data-urlencode ""apiLogin=0000"" ^  --data-urlencode ""apiTransKey=1111"" ^  --data-urlencode ""transactionId=c6285802-72e4-4760-9011-b39993ecfbd5"" 📘NoteIf you are accessing the CV or Production environment, replace the Sandbox URL and credentials with the URL and credentials that you received from your Galileo representative. Check the output. A successful ping will return ""status_code"":0,""status"":""Success"". Python You can also use Python to make API requests in the Sandbox environment. Python setup To get started with Python: If you don't have it, you can download Python here: https://www.python.org/. When Python is installed, open the terminal. In the terminal, run one of the following commands to install the requests module: Mac OS/Linux — python -m pip install requests Windows — py -m pip install requests Check the output. You should see a message indicating that the module was successfully installed. Using Python from the terminal Follow these steps to send a POST request to the Ping endpoint using Python from the terminal: Open the terminal. At the prompt, run the command, python. At the Python prompt, run the script below, replacing values with your Sandbox credentials for: apiLogin apiTransKey Pythonimport requests from xml.dom.minidom import parseString import uuid payload = {'apiLogin':'0000', 'apiTransKey':'1111', 'transactionId':uuid.uuid4()} r = requests.post('https://api-sandbox.cv.gpsrv.com/intserv/4.0/ping', data=payload') dom = parseString(r.text) statusCode = dom.getElementsByTagName('status_code') print('ping response code=' + statusCode[0].firstChild.nodeValue) 📘NoteIf you are accessing the CV or Production environment, replace the Sandbox URL and credentials with the URL and credentials that you received from your Galileo representative. Check the output. A successful ping returns ping response code=0. Using a Python file To work from a file instead of directly in the terminal: Paste the code above into a plain text file. Save the file with the extension .py (for example, test-ping.py). Open the terminal and navigate to the directory containing your client certificate and .py file. Run python test-ping.py Check the output. A successful ping returns ping response code=0. Postman Galileo has created a collection for the Postman API client. See Postman Setup for setup instructions and a tutorial for sending a POST request to the Ping endpoint.Updated about 1 month ago Table of Contents cURL Python Python setup Using Python from the terminal Using a Python file Postman "
540,docs.galileo-ft.com/pro/docs/about-corporate-credit,"About Corporate Credit 👍AvailabilityThis guide is intended to provide a general outline of new Galileo functionality prior to its release to production. The information in this guide is therefore subject to change as development proceeds and is not a guarantee of future functionality. If you are interested in this feature, contact Galileo for details. Why this new feature? Galileo already offers Real-Time Funding for debit accounts, which associates multiple debit cards with a single funding account. However, many small businesses prefer a credit-based system to help manage expenses, because it helps the business build a better credit score and is easier to obtain than a small-business loan. With Galileo's Corporate Credit offering, you can provide your business customers with a central credit limit that multiple charge cards draw from. This arrangement simplifies expense management, because a company's employees can spend only as much as the credit limit permits. A single billing cycle makes statements easy, and terms and repayments happen at a corporate level. What this means to your customers The employees of some smaller businesses use their personal credit-card accounts for business expenses and then claim the expenses in a separate process. To replace and simplify that process, you can offer corporate charge cards so that all business-related expenditures are reported together, thereby eliminating the need for separate expense claims. Furthermore, small-to-medium businesses may find it easier to qualify for a corporate credit program than for a small business loan. You can offer them one or more funding accounts to help improve their credit score and to help them expand their business. You can combine a Corporate Credit offering with Account-Level Authorization Controls, which impose different spending restrictions per account. These controls can affect the amount per transaction, the number of transactions per timespan, the total amount per timespan, the merchant category, and specific merchant locations. Authorization experience Employees with charge cards are able to make purchases in the conventional manner, with no change to the authorization process. Only when the credit limit on the corresponding funding account is exhausted will their purchases be declined. What this means to you Because a Corporate Credit program uses credit BINs instead of debit BINs, you can garner higher interchange rates per purchase (with Mastercard Account-Level Management). Fraud protection also tends to be better for credit than for debit, and businesses don't need to provide a large amount of cash up front, as with a debit account. By leveraging Galileo's Corporate Hierarchy you can easily organize your customers' funding accounts with their respective charge cards. This organization makes it easy for you to create expense reports per funding account, which you can expose on a customer dashboard. Your customers can then drill down to activity on each individual card. For your customers that maintain vehicle pools, you can offer corporate Fleet Cards with the specialized reporting that program provides. What you provide You will be managing the following features with your internal logic: Fees Interest Statements Grace period Repayments Delinquency What Galileo provides From Galileo you can expect: API endpoints to set and update the credit limit, retrieve the current balance and remaining credit, and associate charge cards with funding accounts RDFs containing a list of all transactions so that you can itemize purchases per charge card Real-time event messages for authorizations, reversals, and settlements General properties Corporate Credit is a credit offering that links charge cards to a single funding account. The funding account has a credit limit that is shared by all of the linked charge cards. The funding account balance must be paid in full at the end of the billing cycle. Partial payments can be made to the funding account, which replenishes the credit limit. The one-month billing cycle applies at a corporate level. As desired, you can build your own logic to create a billing cycle with a different period, such as two weeks. The credit limit can be changed at any time. Reversed transactions, merchant credits and card loads are automatically returned to the funding account. Disputed transactions are not included in the credit limit. Works well with these Galileo products: Corporate Hierarchy — Organize funding and charge accounts and improve reporting. Account-Level Authorization Controls — Impose granular spend controls on individual accounts. Fleet Cards — Provide detailed transaction data for vehicles and equipment. Use cases These use cases present some ways you and your customers can take advantage of Corporate Credit as well as Galileo's other business offerings. Use case 1: Northern Floral Northern Floral has ten employees, four of whom are authorized to make purchases. Each of the four employees has a company charge card that is linked to the same funding account, which has a credit limit of $10,000. As each employee spends against the credit limit, Northern Floral receives notification of the purchases along with the remaining available credit amount. Several times per week, Northern Floral makes partial repayments, which replenishes the credit limit. For example, if halfway through the billing cycle the combined total spending of the four cards is $7000, and Northern floral repays $400, the remaining credit limit increases from $3000 to $3400. At the end of the billing cycle, Northern Floral pays the entire balance, and the credit limit resets to $10,000. Their spending and repayment activity is reported to the credit bureaus, which helps increase their business credit rating. Use case 2: Southern Manufacturing Southern Manufacturing makes products to support the farming industry. Production is divided into three main divisions: irrigation systems, storage, and heavy equipment such as tractors, harvesters and cultivators. For this company you set up a corporate hierarchy with each division in its own group, and each group has a funding account with a different credit limit. With the accounts organized by group, you can create reports for each division and present them in a customer dashboard. The dashboard could show the remaining credit limit per division and permit the customer to drill down to expenditures per card. The company could also use your dashboard to make payments into each funding account. If you enable Account-Level Authorization Controls for Southern Manufacturing, you can set different spending limits for each account, according to the cardholders' levels of responsibility. For example, the managers in each group could be authorized to spend more per week than the regular cardholders, or the cardholders in one division could be authorized to make purchases at merchant types that cardholders in other divisions cannot make.Updated 15 days ago Table of Contents Why this new feature? What this means to your customers Authorization experience What this means to you What you provide What Galileo provides General properties Use cases Use case 1: Northern Floral Use case 2: Southern Manufacturing "
541,docs.galileo-ft.com/pro/reference/api-reference-events-api-phone-changed,"phone_changed Code — PHCH Event trigger — One of these fields changes: Primary phone Other phone Mobile phone Processes — These processes contain the event trigger: Update Account endpoint Customer Service Tool Galileo-hosted cardholder website Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" carrier_id X Integer ID for the mobile carrier. Example: ""23"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" firstname X Account holder's first name. Example: ""Tom"" home_phone X New home phone number. Example: ""8015553234"" mobile_phone X New mobile phone number. Example: ""8015553768"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PHCH"" old_home_phone X Old home phone number. Example: ""8015553076"" old_mobile_phone X Old mobile phone number. Example: ""8015553211"" old_other_phone X Old other (secondary) phone number. Example: ""8015558324"" open_to_buy X The available balance to spend. Example: ""500.00"" other_phone X New other (secondary) phone number. Example: ""8015553222"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""phone_changed"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# phone_changed example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""carrier_id"": ""23"", ""credit_balance"": ""325.00"", ""firstname"": ""Tom"", ""home_phone"": ""8015553234"", ""mobile_phone"": ""8015553768"", ""msg_event_id"": ""243693"", ""msg_id"": ""PHCH"", ""old_home_phone"": ""8015553076"", ""old_mobile_phone"": ""8015553211"", ""old_other_phone"": ""8015558324"", ""open_to_buy"": ""500.00"", ""other_phone"": ""8015553222"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""phone_changed"" } Table of Contents Fields Example "
542,docs.galileo-ft.com/pro/reference/post/getpaymenthistory,Get Payment History See Record-Set Pagination for instructions on using the paging parameters.See Global Response Statuses for status codes that are common across endpoints.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
543,docs.galileo-ft.com/pro/reference/post/getproductinfo,Get Product Info The table below lists status codes that apply to this specific endpoint. Status CodeCode Description509-01No products found matching search criteria.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
544,docs.galileo-ft.com/pro/reference/post/modifypaperbiller,"Modify Paper Biller The table below lists status codes that apply to this specific endpoint. Status CodeCode Description582-01amount, nextDate, and endDate are required for scheduled bill payment582-02Biller not associated to account582-03Biller not found582-04All the address fields are mandatory for updating the biller addressLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
545,docs.galileo-ft.com/pro/reference/api-reference-events-api-about-events-api-retry,"Retry To be concrete, the following table shows an example, assuming RTRDL is set to 60 seconds and RETRY is 5. Attempt is the total number of attempts, over time. The first attempt is the first time Galileo tries to send the event to the client, so with RETRY = 5, there will be 6 attempts total. Retry Delay Seconds is how many seconds Galileo will wait to do the next attempt if the current attempt fails. (Retry Delay Minutes and Retry Delay Hours is the same information but in different units.) Retry Seconds increases exponentially for each retry by multiplying RTRDL by Attempt^2. The first retry attempt has a value of 1, so the first delay will be RTRDL. AttemptRetry Delay SecondsRetry Delay MinutesRetry Delay Hours1601.00.0222404.00.0735409.00.15496016.00.275150025.00.426216036.00.60 "
546,docs.galileo-ft.com/pro/reference/post/addpaperbiller,"Add Paper Biller The table below lists status codes that apply to this specific endpoint. Status CodeCode Description487-01Customer already has this biller487-04amount, nextDate, and endDate are required for scheduled bill paymentLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! "
547,docs.galileo-ft.com/pro/reference/post/setaccountlevelmcccontrols,Set Account-Level MCC Controls The table below lists status codes that apply to this specific endpoint. Status CodeCode Description609-01The MCC range overlaps one or more MCCs on the blocklist.609-02Mismatched allowDeny value with other account-level controls.609-03Mismatched allowDeny value between the account-level and product-level MCC controls.609-04The MCC range overlaps with existing account-level MCC controls.609-05The MCC range overlaps with existing product-level MCC controls.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
548,docs.galileo-ft.com/pro/reference/post/getauthcontrol,Get Auth Control Desired ResultcontrolIdprodIdaccountNoGet all product-level controls for a product.blankProduct IDblankGet all account-level controls for an account.blankblankPRNGet the product-level control details for a particular control ID.Control IDProduct IDblankGet the account-level control details for a particular control ID.Control IDblankPRNRecipesGet Auth Control response for productOpen RecipeGet Auth Control response for accountOpen RecipeSee Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description600-01No account-level auth control has been set for this account600-02Product is not configured for account-level auth controls.LanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
549,docs.galileo-ft.com/pro/reference/lending/post/createloan,"Create Loan Note: For optional parameters, do not pass an empty string or null value.The table below lists status codes that apply to this specific endpoint. See Global Response Statuses for status codes that are common across endpoints. Status CodeCode Description1201-01The subProductId is invalid or does not exist.1201-02This SSN already exists1201-03The loan amount exceeds the maximum allowed loan amount configured for this subproduct1201-04The loan amount is less than the minimum allowed loan amount configured for this subproduct1201-05The state is invalid1201-06The loan term is greater than the maximum configured1201-07The loan term is less than the minimum configured1201-08The loan term entered must be between 0 and 99991201-09First name, last name, or date of birth may not be set for this customer PRN.1201-10The total loan term is more than the maximum allowable limit, please validate the capital term or loan term values.1201-11The total loan term is less than the minimum allowable limit, please validate the capital term or loan term values.1201-12The loan APR cannot exceed 36%.LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! "
550,docs.galileo-ft.com/pro/reference/api-reference-external-trans-api-about-external-trans-api,"About External Transactions API Approving/denying bill payments Approving/denying ACH debits It's similar to Auth API, but for bill pay and ACH debits. When the Galileo backoffice system processes a bill payment or ACH debit (i.e., an ACH transaction that will pull funds from an account), it can call out to a client system, giving the client the opportunity to approve or deny the transaction. Galileo will provide information about the transaction (the amount, the biller for bill payments, the recipient for ACH debits, etc.), and the client responds with a response code that indicates how it wants the transaction to be processed (approved, denied, denied with a specific ACH return code, retry the webhook later, etc.). There are currently two endpoints (paths): One for billpay, and one for ACH debit. The entire endpoint is configurable. For example, a client could use these endpoints: https://client.example.com/path/foo/achdebit https://client.example.com/bar/billpay while another client could use these endpoints: https://www.bar.com/ach https://www.bar.com/v2/bp "
551,docs.galileo-ft.com/pro/reference/post/setcreditlimit,Set Credit Limit The table below lists status codes that apply to this specific endpoint. Status CodeCode Description550-01System error setting credit limitLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
552,docs.galileo-ft.com/pro/docs/api-reference-modify-pending-deposit-status-return-codes,"Modify Pending Deposit Status Return Codes Return codeDescriptionR02Account ClosedR03No account, Unable to Locate AccountR04Invalid Account NumberR06Returned per ODFI's RequestR08Payment Stopped or Stop Payment on Source DocumentR23Credit Entry Refused by Receiver "
553,docs.galileo-ft.com/pro/docs/transaction-history,"Transaction History This guide presents some of the options that you have for keeping transaction histories. According to your business use case, you may follow the examples presented here or you can devise other strategies. Along with this guide you might want to read these guides: About Transactions — A general explanation of how transactions are handled by the Galileo system. About Card Transactions — An explanation of how card transactions work, plus what transaction sequences are produced by different types of card transactions. Card Transaction Examples — Different types of card transactions as returned by the Program API. Card Transaction Scenarios — Detailed examples of card transactions as they appear in the Auth API, Events API, Program API, and RDFs. You will need to access your account holders' transaction histories for reasons such as these: Present to account holders their transaction histories on your app or website Send account holders a monthly statement, summarizing all transactions during that period Analyze transaction data for various purposes, such as spending categorization Which data source to access for transaction histories depends on the use case and the time frame. To display a list of transactions on your mobile app or website for the past 30 days or less, Galileo recommends that you use the Program API, as explained in the next section. To display a list of transactions that extends past the previous 30 days—or for statements and data analysis—Galileo recommends that you use a transaction history that you create on your own, as described in Building a transaction history. Obtaining transaction history via API You can get a comprehensive transaction history for the past 30 days using any of these Program API endpoints. Choose the API depending on your use case. Get Account Overview This convenient method retrieves an assortment of account information within a specified date range from multiple other endpoints such as Get Authorization History, Get Transaction History, and Get Balance. It returns a list of authorizations, a list of all other transactions, the account balance, and the account holder profile. Advantages Only includes information that is relevant to account holders. For example, if a transaction has settled, only the settlement is returned, not the authorization. Efficient, because authorizations, settlements, other applicable transactions, and the balance are included in a single API request. Disadvantages Lacks some transaction details that are provided in Get All Transaction History and the Event Messages. The additional information results in a larger payload, so if you are looking for just authorizations, Get Authorization History is a better option. Conclusion Get Account Overview is likely the best option for dashboards that display balance, authorizations, and transactions. A combination of Get Authorization History and Get Transaction History Get Authorization History retrieves all unsettled authorizations within a specified date range and Get Transaction History retrieves all settlements and other transactions within a specified date range. Together, they provide the complete set of a cardholder's transactions. Advantages Only includes information that is relevant to cardholders—an authorization is retrieved by Get Authorization History until it has settled, in which case it is retrieved by Get Transaction History. Allows authorizations to be retrieved independently of other transactions. Because Get Authorization History does not return declined authorizations, combining it with Get Transaction History will provide a complete list of authorizations. Disadvantages Less efficient, because it requires two separate API calls to get all the transactions. Lacks some transaction details that are provided in Get All Transaction History and the event messages. Conclusion This combination of endpoints may be the right option if your use case requires authorizations to be loaded separately from other transactions and doesn't require granular details. Get All Transaction History Get All Transaction History retrieves a comprehensive history of all transactions within a specified date range. Its intended purpose is to provide customer service representatives with abundant context to help them troubleshoot cardholder issues. It offers more detail than most of your customers require. Advantages Provides the most details about each transaction. Gets all transaction types in a single API call. Disadvantages Requires you to do additional processing because it includes information that isn't pertinent to your customers. For example, a single card swipe results in multiple transaction records: an authorization, a backout and a settlement. You need to sift through the records to determine which ones are relevant to your customer. The additional details result in a large payload. Conclusion Get All Transactions History may be the right option if your use case requires granular details and you are willing to filter out extraneous transaction records. 📘NoteDo not use the calculated_balance value in the Get All Transaction History response for reconciliation or processing. This value is calculated at the time of the API request and so may not accurately portray what the account balance was at the time of the transaction. It is intended only to be a helpful reference and may be shown to customers in your app or used by customer service agents, but it should not be considered authoritative. Specialized transaction lists Use these specialized endpoints to get lists of the specific transaction types: Get Authorization History Get Fee History Get Payment History Get Deposit History Get ACH Transaction History Get Hold History Get Bill Payment History These specialized lists can be useful sometimes, but in most cases, your customers will be interested in seeing an aggregated list of transactions. Building a transaction history Galileo strongly recommends that its clients maintain their own transaction histories instead of relying exclusively on Galileo data sources. Your data store should be your primary resource for building customer statements and analyzing transaction data, as well as providing your customers with transaction histories that include more than the past 30 days. When building your own transaction history, you will need to decide among these options: Which data sources to use Events API — Live transaction notifications that you can subscribe to, comprising three event message types. Program API — Endpoint calls that can retrieve all transactions or specific types only. (Using this source for time frames larger than 30 days can place significant stress on the Galileo system.) RDF — An authoritative record of all transactions that took place across your programs during a 24-hour period. How to uniquely identify a transaction in your database Whether to overwrite previous transaction records when an update arrives or maintain the whole list of transactions Data sources Galileo offers these data sources for you to build your own transaction history: Events API The Events API comprises these transaction-related message types that you can subscribe to: Authorization Events — Based on notifications from card networks when a card transaction is authorized Settlement Events — Based on notifications from card networks when an authorized transaction is cleared Transaction Events — Notifications from the Galileo system about payments, adjustments, fees, and holds See About the Events API for more information. Program API See Obtaining transaction history via API. RDFs Every day Galileo sends you RDFs containing an authoritative list of transactions that took place in your program during a 24-hour period. You can use these files to verify that your transaction history is accurate. You can also create new records in your transaction history from these files if your record is missing any transactions. For more information see the About the RDFs and CDFs guide. 📘NoteGalileo strongly recommends that you use your RDF datastore when creating customer-facing statements and performing data analysis. Uniquely identifying transactions For each authorization, Galileo generates an authorization ID (auth_id) that is unique only within the subnetwork, so an Authorization Event from a Visa card could have the same auth_id as an Authorization Event from Mastercard. Furthermore, Transaction Events are broken down into payments, fees, adjustments, and other types, each of which has an identifier that is unique only within its type. Galileo strongly recommends that you create a unique mapping identifier for each transaction using selected fields from the Events API or Program API messages as well as fields from the RDFs. See Mapping Transactions Within Your System for possible ways to create unique mapping identifiers. Identifying accounts Account identifiers within the Galileo system are the PRN, CAD, PAN and balance ID. When creating your own transaction record you may want to include all of these fields for every entry so that you can reconcile your records against different Galileo systems. (If you are not PCI compliant, you will have only a masked PAN.) This table shows how account identifiers are returned by Galileo systems. IdentifierRDFsProgram APIEvents APIAuth APIPRNPRNpmt_ref_nopmt_ref_noprnCADCARD IDcard_idcadcadPANCARD NUMBERcard_numberprotected_pan_fourpanBalance IDGALILEO ACCOUNT IDbal_idgalileo_account_numberbalance_id— Updating transaction records Some transactions are completed at the same time they are initiated, such as a fee that is assessed for a transaction. Other transactions are initiated and remain in a pending status until completion, such as a bill payment. Still other transactions begin with an authorization at a point of sale and then pass through a few more steps before settlement. See About Card Transactions for a detailed explanation of card transactions. In your transaction history, you may use one of these methods to keep track of each transaction's progress: Create the initial record, and then when additional information on that transaction arrives, overwrite the data in the initial record with the new information. Create a new record for each transaction step as it happens, linking it to the previous step in the sequence. Transaction sequence initiation The Events API messages in the lists below can indicate the first step of a transaction sequence. 📘NoteIf the Authorization message contains a non-zero value for original_auth_id, it means that the message does not correspond to the first step of a transaction sequence. The value in original_auth_id contains the auth_id of the previous step of a transaction sequence. Events marked with an asterisk (*) are both the first and last step of a transaction. Authorization Events AAPM: auth_payment* BAUT: auth BNSF: denied_auth_nsf* BSPM: pmt_split CRHD: create_hold DAUT: denied_auth* IPIN: denied_auth_invalid_pin* NACT: denied_auth_inactive_card* PUMP: denied_auth_gas* STPD: denied_auth_stip* Transaction Events BADJ: adj* BPMT: pmt* BFEE: fee* BPCQ: billpay_request_made 📘NoteFor some of the Transaction Events messages, the initiation and completion steps of the transaction happen at the same time. Others may pend before completion, such as a fee assessed on an account with insufficient funds. Transaction sequence completion The Events API messages in the lists below can indicate subsequent steps in a transaction sequence, either intermediary or final. Authorization Events AAAU: auth BEXP: auth_exp BEXR: auth_exp_reversal BSPM: pmt_split Settlement Events SETL: setl Transaction Events ACHC: ach_credit_fail ACHR: ach_debit_fail ACRT: ach_return BDPM: pmt_delayed BPAR: billpay_retry BPAY: billpay BPCC: billpay_check_cleared BPCR: billpay_request_returned BPEX: billpay_expired BSPF: sched_billpay_fail BSPM: pmt_split EXHD: expire_hold FACH: ach_credit_return FREV: fee_reversal How to link a transaction with its previous steps differs depending on the transaction type. See Linking transactions in the About Transactions guide for details. Transaction sequence examples These examples describe possible methods to record transaction sequences. In these examples the unique mapping identifier for authorizations is network letter + auth_id, and a latest_version flag tracks which is the latest version of the transaction. For an explanation of the act_type and otype fields see Classifying transactions in the About Transactions guide. For additional examples see Events API Scenarios. Basic authorization with settlement For details on how a card transaction (authorization/settlement) works, see About Card Transactions. This example shows a retail purchase for $50 over Mastercard Banknet rails. First, you receive the Authorization Event message BAUT: auth with these values: type: auth amount: 50 act_type: AU otype: A network: M original_auth_id: 0 auth_id: 33333 The Authorization Event could be recorded in your database like this: map_idamounttrans_codeoriginal_auth_idlatest_versionM33333-50.00AUA0True Later, after Mastercard sends the clearing file, you receive the Settlement Event SETL: setl message with these values: type: setl amount: 50 act_type: SE otype: 5 network: M original_auth_id: 0 auth_id: 33333 Your database records might look like this: map_idamounttrans_codeoriginal_auth_idlatest_versionM33333-50.00AUA0FalseM33333-50.00SE50True Because the identifier M33333 has both an authorization (AUA) and a settlement entry (SE5) for the same amount, you know that the transaction is settled. For more examples of an authorization and settlement transaction, see Three-step sequence in Card Transaction Examples and Scenario 1: Authorization with Settlement. 📘NoteIt is possible for a settlement to contain a partial amount, so a transaction should not be considered complete until settlements equal authorizations. See Incremental clearing in the Settlement guide for more information. Authorization plus completion This example shows a $75 preauthorization at a gas pump with a subsequent completion for $25. The network is Visa Interlink. First, you receive the Authorization Event message BAUT: auth with these values: type: auth amount: 75 act_type: VI otype: L network: V original_auth_id: 0 auth_id: 77777 The Authorization Event could be recorded in your database like this: map_idamounttrans_codeoriginal_auth_idlatest_versionV77777-75.00VIL0True 📘NoteAuthorization event messages for Visa Interlink transactions have network: V, but the settlement event messages have network: I. There are no auth_id collisions among the Visa, Interlink and Plus networks. See Events Network Codes for more information. Later, you receive the Authorization Event message AAAU: auth with these values: type: auth amount: 25 act_type: VI otype: C network: V original_auth_id: 77777 auth_id: 77788 A completion (C) has the original_auth_id populated with the auth_id of the original preauthorization. When the completion arrives, Galileo backs out the entire $75 preauthorization hold and replaces it with a $25 hold. (To see backouts use the Get All Transaction History endpoint or the CST.) The transaction is not considered settled at this point. Your database records might look like this: map_idamounttrans_codeoriginal_auth_idlatest_versionV77777-75.00VIL0FalseV77788-25.00VICV77777True Later, you receive the Settlement Event SETL: setl message with these values: type: setl amount: 25 act_type: IS otype: C network: I original_auth_id: 77777 auth_id: 77788 This event means that Galileo received a clearing file from Visa and matched the $25 completion. Your database records might look like this: map_idamounttrans_codeoriginal_auth_idlatest_versionV77777-75.00VIL0FalseV77788-25.00VICV77777FalseV77788-25.00ISCV77777True Because the settlement has the same map_id and amount as the completion, you know that the transaction has settled. For more examples of a gas pump transaction, see Five-step-sequence in Card Transaction Examples and Scenario 2: Preauthorization with Completion. Using the RDFs to reconcile The Authorized Transactions and Posted Transactions files are RDFs that contain a comprehensive list of the previous day's transactions. Use these files to reconcile the transaction records that you gathered from the Events API or the Program API. If there are inconsistencies between the two—for example, if the RDF contains a transaction that your data store does not, or the transaction details don't match—you should consider the information in the RDF to be authoritative. For more information see the About the RDFs and CDFs guide. 📘NoteThese examples show only some of the RDF fields that are available. Authorization and settlement example For example, if your database contains the following entries from the Events API: balance_idtrans_codeauth_idamountoriginal_auth_idnetworkmap_id33333AUA717-25.000MM71755555ISA414-30.000VV41433333SE5717-40.000MM717 The corresponding entries in the Authorized Transactions RDF would look like this: GALILEO ACCOUNT IDTRANSACTION AMOUNTAUTHORIZATION CODENETWORK CODE3333325.00-717M And the corresponding entries in the Posted Transactions RDF would look like this: GALILEO ACCOUNT IDTRANSACTION CODE/TYPETRANSACTION AMOUNTAUTHORIZATION CODENETWORK CODE55555ISA30.00-414V33333SE540.00-717M 📘NoteBy request, Galileo can include a reversal ID field in the RDFs to track incremental authorizations and other linkage. Non-network transaction example One field you can add to the RDFs, SOURCE ID, contains the identifier for the specific transaction: pmt_id, fee_id, adj_id, and so on. For example, if your database contains the following entries: balance_idpayment_idfee_idadj_idamounttrans_codemap_id22222202+50.00PMRCPM-20266666505-3.00FE01FE-50544444303+40.00PMDDPM-30344444707-20.00ADAAD-707 In the Posted Transactions RDF, the corresponding entries might look like this: GALILEO ACCOUNT IDTRANSACTION CODE/TYPETRANSACTION AMOUNTSOURCE ID22222PMRC50.00+20266666FE013.00-50544444PMDD40.00+30344444ADA20.00-707Updated 7 days ago Table of Contents Obtaining transaction history via API Get Account Overview A combination of Get Authorization History and Get Transaction History Get All Transaction History Specialized transaction lists Building a transaction history Data sources Uniquely identifying transactions Identifying accounts Updating transaction records Transaction sequence initiation Transaction sequence completion Transaction sequence examples Using the RDFs to reconcile Authorization and settlement example "
555,docs.galileo-ft.com/pro/reference/dispute/post/addquestionnaire,Add Questionnaire Use the Add Questionnaire endpoint to submit the account-holder answers to questions presented by Get Questionnaire. This endpoint is part of a conversational API—a series of endpoint calls that must be made in a certain order. For instructions see the Creating a Dispute guide. Status CodeCode Description0Success1507-4Invalid caseId or caseId returned no result1507-5Invalid Request:1507-6Error saving case1507-13caseId references a case that is currently locked1507-14Invalid request message1507-15This case is already resolved with status:1507-16This case has been submitted for processing and this action can no longer be performed.-1System Failure encountered while processing request:LanguageShellNodeRubyPHPPythonRESPONSEClick Try It! to start a request and see the response here! 
556,docs.galileo-ft.com/pro/reference/api-reference-events-api-ach-credit-return,"ach_credit_return In this case, the funds were already temporarily credited to the customer account. After the request is rejected and returned, an adjustment is created to remove the funds from the customer account, and the adjustment has a hold on it (typically five days). When the hold expires, the BADJ: adj event is sent. No product parameter setting is required to receive this event. Code — FACH Event trigger — Galileo finds the returned ACH credit in the Nacha file. Process — This process contains the event trigger: Galileo receives a Nacha file. Fields All fields are strings. Your field names may vary. Field Required Description ach_source_trace Trace ID for an ACH transaction, generated by the originator. 15 digits. Example: ""034294619573021"" amount Amount of the transaction. Unsigned. Example: ""63.21"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" ext_trans_id X The transactionId of the API call that initiated the ACH transaction. msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FACH"" open_to_buy X The available balance to spend. Example: ""500.00"" payment_id X Identifier (pmt_id) for the payment into the cardholder account. Example: ""1236458"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" receiver_name Name on the recipient account. Example: `""Jamal Williams"" return_code X See ACH Return Codes for possible values. Example: ""R01"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""ach_credit_return"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# ach_credit_return example: { ""ach_source_trace"": ""034294619573021"", ""amount"": ""63.21"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""credit_balance"": ""325.00"", ""ext_trans_id"": ""9845dk-39fdk3fj3-4483483478"", ""msg_event_id"": ""243693"", ""msg_id"": ""FACH"", ""open_to_buy"": ""500.00"", ""payment_id"": ""1236458"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""receiver_name"": ""Jamal Williams"", ""return_code"": ""R01"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""ach_credit_return"" } Table of Contents Fields Example "
557,docs.galileo-ft.com/instant/reference/transaction-status,Transaction Status StatusDescriptionpendingThe transaction isn't finalized yetpostedThe transaction is finalized 
558,docs.galileo-ft.com/pro/reference/api-reference-events-api-adj,"adj Code — BADJ Event trigger — The specified amount is credited or debited to the account. Processes — These processes contain the event trigger: Program API endpoints: Create Adjustment Reverse Adjustment Create Account Transfer Reverse Account Transfer Reverse Payment Create ACH Transaction ACH transactions Customer Service Tool Galileo-hosted cardholder website Merchant credits Payment hold expires Internal administrative processes Fields All fields are strings. Your field names may vary. Field Required Description account_status See Account Statuses for possible values. Example: ""N"" ach_acct_id The ACH account to which the payment was posted. Example: ""212101392821"" ach_source_trace Trace ID for an ACH transaction, generated by the originator. 15 digits. Example: ""034294619573021"" ach_trans_id X Unique Galileo-generated identifier for an ACH transaction. Example: ""7971383"" act_type X For all adjustments the activity type is ""AD"". adj_id X Galileo-generated identifier for this adjustment. Example: ""462354"" amount X Amount of the adjustment. A negative sign (-) indicates amount debited from account. Example: ""32.56"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" card_status See Card Statuses for possible values. Example: ""N"" client_id ID for the customer record. Example: ""264539"" company_entry_desc Company descriptor found in the batch header of the Nacha file. Example: ""RESTAURANT"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" description X Transaction description. Example: ""Transfer from savings"" ext_trans_id External transaction ID. Example: ""1234-abcdefg"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BADJ"" odfi_routing_number Routing number for the originating depository financial institution of an ACH transaction. Nine digits. Example: ""325491456"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" orig_acct_number ACH originator account number. Example: ""265493042"" orig_name ACH originator name. Example: ""ABC Bank"" otype X See the curated list of otypes for your program from Galileo. Example: ""AC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" receiver_name Name on the recipient account. Example: `""Jamal Williams"" sec_code Standard entry class code such as PPD for direct deposits and WEB for P2P transactions. Example: ""PPD"" settle_julian_date The date the transaction settled in Julian format: YYDDD Example: ""23005"" source_id X An identifier that maps back to the origin of the adjustment. source_inst_name For ACH transactions, the name of the originator. timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""adj"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# adj example: { ""account_status"": ""N"", ""ach_acct_id"": ""212101392821"", ""ach_source_trace"": ""034294619573021"", ""ach_trans_id"": ""7971383"", ""act_type"": ""AD"", ""adj_id"": ""462354"", ""amount"": ""32.56"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""card_status"": ""N"", ""client_id"": ""264539"", ""company_entry_desc"": ""RESTAURANT"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""description"": ""Transfer from savings"", ""ext_trans_id"": ""1234-abcdefg"", ""msg_event_id"": ""243693"", ""msg_id"": ""BADJ"", ""odfi_routing_number"": ""325491456"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""orig_acct_number"": ""265493042"", ""orig_name"": ""ABC Bank"", ""otype"": ""AC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""receiver_name"": ""Jamal Williams"", ""sec_code"": ""PPD"", ""settle_julian_date"": ""23005"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""adj"" } Table of Contents Fields Example "
559,docs.galileo-ft.com/pro/reference/post/setuserdefinedaccountfield,Set User-Defined Account Field fieldId — Provide an identifier for the field. This identifier needs to be unique only to the account. fieldValue — Provide the value for that field. These fields are visible in the CST in the Account tab.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description518-01user defined field already exists; field updatedLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
560,docs.galileo-ft.com/pro/reference/api-reference-events-api-pass-id,"pass_id Code — PTID Event trigger — Galileo's integrated ID verification process returns a Success verdict. Processes — These processes contain the event trigger: Program API endpoints: Create Account Create Virtual Card Account Start Enrollment Run CIP Run Enrollment CIP Force Pass CIP Galileo-hosted cardholder website Customer Service Tool Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PTID"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""pass_id"" Example JSON# pass_id example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""PTID"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""pass_id"" } Table of Contents Fields Example "
561,docs.galileo-ft.com/pro/reference/api-reference-events-api-neg-bal,"neg_bal Compare with BBAL: bal. Code — BNEG Event trigger — The account has a negative balance today. Process — This process contains the event trigger: Internal process that detects accounts with a negative balance. Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" msg_event_id X Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BNEG"" open_to_buy X The available balance to spend. Example: ""-21.10"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""neg_bal"" Example JSON# neg_bal example: { ""balance_id"": ""20211"", ""msg_event_id"": ""243693"", ""msg_id"": ""BNEG"", ""open_to_buy"": ""-21.10"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""neg_bal"" } Table of Contents Fields Example "
562,docs.galileo-ft.com/pro/page/scenario-18-real-time-funding,"Scenario 18: Real-Time Funding << Back to the index For more RTF scenarios, see Real-Time Funding Transaction Examples. A company has set up a real-time funding (RTF) source account and has issued a number of RTF spending accounts that are associated with it. An RTF spending cardholder makes a $45 purchase at a retail outlet. The following are true: The RTF funding account (PRN: 333333333333) has a $1000 available balance. The RTF spending account (PRN: 777777777777) has a $0 available balance. The network is Mastercard Debit Switch (Maestro). Sequence of events Events in the same step have the same timestamp. Mastercard sends an authorization request for –45.00. Galileo moves 45.00 from the RTF funding account to the RTF spending account. The RTF funding account now has an available balance of 955.00 and the RTF spending account has an available balance of 45.00. Galileo approves the authorization request and puts a 45.00 hold on the RTF spending account. The RTF spending account now has an available balance of 0.00. Galileo sends the BAUT: auth event message. Two days later, Maestro sends a settlement batch file with the –45.00 transaction. Galileo backs out the 45.00 hold and posts –45.00 to the RTF spending account. The RTF spending account still has an available balance of 0.00 and the RTF funding account still has a 955.00 balance. Galileo sends the SETL: setl event message. Transactions These tables show how the transactions are represented by various Galileo systems. For an explanation of the trans_code field, see Classifying transactions in the About Transactions guide. Auth API auth_typetransaction_typetrans_amountauth_idoriginal_idavailable_fundstimestampAuthAuth45.00330004520210414:141529MST Authorization/Settlement Events webhooks msg_idtypeamountauth_idoriginal_auth_idopen_to_buytimestampBAUTauth453300002021-04-14 14:15:29 MSTSETLsetl453300002021-04-16 06:16:30 MST Authorized Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODEREVERSAL IDPRNTRANSACTION DATE/TIME45.00-33005077777777777704142021 14:15:29 Posted Transactions RDF TRANSACTION AMOUNTAUTHORIZATION CODETRANSACTION CODE/TYPESOURCE IDPRNTRANSACTION DATE/TIMEPOST DATE45.00-4477ADFY447733333333333304142021 14:15:290416202145.00+4478ADSY447877777777777704142021 14:15:290416202145.00-3300SDA330077777777777704142021 14:15:2904162021 Get Authorization History response This endpoint returns only transactions that have not settled or expired. These transactions are also returned by Get Account Overview. This endpoint does not return the RTF adjustments. amtauth_idoriginal_auth_idtypelocal_amttimestamp-453300050000000045002021-04-14 14:15:29 Get Transaction History response This endpoint returns only settled transactions. These transactions are also returned by Get Account Overview. This endpoint does not return the RTF adjustments. amtsource_idoriginal_auth_idtrans_codeauth_tspost_ts-4533000SDA2021-04-14 14:15:292021-04-16 06:16:30 Get All Transaction History response This endpoint returns the same transactions as the All Transactions screen of the CST. This is the response when accountNo is the RTF spending account. amtauth_idprior_idtrans_codesource_idcalculated_balancecredit_indauth_tspost_ts453300NoneADSY447845None2021-04-14 14:15:292021-04-14 14:15:29-4533000DBA33000N2021-04-14 14:15:292021-04-14 14:15:2945NoneNoneBDA330045NoneNone2021-04-16 06:16:30-4533000SDA33000N2021-04-14 14:15:292021-04-16 06:16:30 "
563,docs.galileo-ft.com/pro/reference/api-reference-events-api-auth-exp,"auth_exp Code — BEXP Event trigger — The expiry time elapses before an authorization is cleared. Process — This process contains the event trigger: Galileo receives a clearing message for the reversal. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description act_type See Activity Type for possible values. Example: ""VI"" amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billing_amt Amount to be billed in the currency of the cardholder account (DE006). Example: ""24.35"" billing_curr_code Currency code for billing_amt (DE051). Example: ""840"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fund_pastotb The available balance of the real-time funding account after this transaction takes place. Example: ""24365.90"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant Concatenation of merchant_name and merchant_location. Example: ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BEXP"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" otype See Transaction Types for possible values. Example: ""W"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""auth_exp"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# auth_exp example: { ""act_type"": ""VI"", ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""billing_amt"": ""77"", ""billing_curr_code"": ""840"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant"": ""RIDESHARE.COM/CHARGES, SAN FRANCISCO, CA"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BEXP"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""otype"": ""W"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""risk_score"": ""26"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""auth_exp"" } Table of Contents Fields Example "
564,docs.galileo-ft.com/instant/docs/getting-transaction-history,"Getting Transaction History Most banking products show cardholders their transaction history. Galileo makes it simple to obtain past transactions, so you can display them to your cardholders. You can get a paginated list of transactions by sending a GET request to the Transactions endpoint. The list of transactions is sorted first by status, with pending transactions listed before posted transactions, and second by timestamp, in reverse chronological order. We separate the pending and posted transactions because many partners show all pending transactions in a cluster rather than mixed with other transactions. It is possible to filter transactions by type by passing in a transaction_type argument. This can be useful if you want to show your cardholders a list of all of their fees, for example. See the About Transactions Guide to learn more about the Transaction Object. 📘NoteOur system requires a couple of seconds to process Transactions before they will appear in the Transaction History. Data cleansing You may wish to do some additional cleansing on the transaction description for card transactions, as the description comes directly from the payment acquirer and may appear messy. For example, a transaction at a Chipotle in Bountiful, Utah, may come through as ""CHIPOTLE 0953 WEST BOUNTIFU UT CHIPOTLE 0953, WEST BOUNTIFU, UT.""Updated over 2 years ago Table of Contents Data cleansing "
565,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-check-mailed,"billpay_check_mailed Code — BPCM Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPCM"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_check_mailed"" Example JSON# billpay_check_mailed example: { ""act_type"": ""AD"", ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPCM"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_check_mailed"" } Table of Contents Fields Example "
566,docs.galileo-ft.com/pro/reference/post/createsingleusevirtualcard,Create Single-Use Virtual Card The table below lists status codes that apply to this specific endpoint. Status CodeCode Description605-01The product that corresponds with the prodId does not support single-use virtual cards. Occurs when SUVC is not set to Y.605-02Error creating the new account for the SUVC card605-03setCreditLimit errorLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
567,docs.galileo-ft.com/pro/reference/post/reverseaccounttransfer,Reverse Account Transfer Consult the Creating an Internal Transfer guide for instructions on using this endpoint.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description496-01Insufficient balance for reversalLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
568,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-invalid-pin,"denied_auth_invalid_pin Code — IPIN Event trigger — One of these things happens: You or Galileo deny an authorization request because of an invalid PIN. The PIN retry limit is reached. Process — This process contains the event trigger: Galileo receives one of these messages from a card network: Preauthorization request Authorization request Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" cashback_amount Amount of the transaction that is cashback instead of purchase. This amount is included in amount. Example: ""20.00"" client_id ID for the customer record. Example: ""264539"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" credit_ind Whether the transaction arrived at Galileo over credit or debit rails. Y is credit; N is debit. Example: ""Y"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" de003 Raw contents of DE003, processing code. See DE003 Codes for possible values. Example: ""002000"" de022 Raw contents of DE022, POS entry mode. See DE022 Codes for possible values. Example: ""071"" domestic Whether this is a domestic transaction. Y is domestic; N is international. Example: ""Y"" fee_amount Program transaction fee. Example: ""2.00"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" local_currency Currency code for local_currency_amount (DE049). Example: ""124"" local_currency_amount Amount of the transaction in the currency at the point of sale (DE004). No fees or upcharges included. Example: ""1245.20"" local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""IPIN"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" original_auth_id The ID of a prior authorization in the sequence. For example, for a completion, this is the auth_id of the preauthorization. For a reversal, this is the auth_id of the transaction that is being reversed. Example: ""12303085"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code See Authorization Response Codes for possible values. Example: ""05"" response_reasons Pipe-delimited list of factors that were calculated for response_code. Example: ""Acquiring merchant blocked by product|Suspected fraud"" risk_score Risk score provided by the network. Higher numbers mean higher risk. Example: ""26"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" settle_currency Currency code for settle_currency_amount. Example: ""840"" settle_currency_amount Amount of the settlement in the currency of the cardholder account. Example: ""35.44"" sign_amount Contains - (minus sign) when the amount debits the open_to_buy. Example: ""-"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" token_type Name of token requester. Example: ""Apple Inc."" type X The name of this event: ""denied_auth_invalid_pin"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# denied_auth_invalid_pin example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""cashback_amount"": ""20.00"", ""client_id"": ""264539"", ""credit_balance"": ""325.00"", ""credit_ind"": ""Y"", ""currency"": ""840"", ""de003"": ""002000"", ""de022"": ""071"", ""domestic"": ""Y"", ""fee_amount"": ""2.00"", ""local_currency"": ""124"", ""local_currency_amount"": ""1245.20"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""IPIN"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""original_auth_id"": ""12303085"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""response_reasons"": ""Acquiring merchant blocked by product|Suspected fraud"", ""risk_score"": ""26"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""settle_currency"": ""840"", ""settle_currency_amount"": ""35.44"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""token_type"": ""Apple Inc."", ""type"": ""denied_auth_invalid_pin"" } Table of Contents Fields Example "
570,docs.galileo-ft.com/pro/docs/configuring-overdraft-products,"Configuring Overdraft Products The primary account product and the overdraft product are configured in separate programs. This guide describes considerations and configurable settings for overdraft products. Considerations for overdraft account product setup Before configuring an overdraft account product at Galileo, consider the following points. Agreement with the issuing bank — You develop an agreement with your issuing bank to ensure you meet the bank’s requirements for overdraft protection. This agreement guides setup and configuration for your product at Galileo (some modifications may be necessary). Mandated requirements for overdraft — In addition to your bank’s requirements, there may be other requirements that apply to your overdraft product. Staffing requirements — You should have adequate staffing to handle the associated monitoring, reporting, and customer support needed to administer overdraft protection. Overdraft opt-in — You decide how to present overdraft opt-in to customers during enrollment. Available line of credit — You determine the credit limit to extend to overdraft account holders. You may set a tiered line of credit that depends on customer behavior (for example, customers who maintain a larger balance might have a higher credit limit). Qualified overdraft transactions — Your issuing bank may have overdraft restrictions on scheduled payments, ATM withdrawals, cash back purchases, and other transactions. Overdraft account ledger — If Galileo holds the ledger for your program, Galileo also manages the ledger balance for overdraft accounts. Otherwise, you or your bank hold the overdraft ledger balance. Alternatives to overdraft — Consider whether the program's customer experience is better served by one of our secured credit products. Refer to the Secured Credit guide. Primary and secondary accounts When you create an overdraft account, only the primary account has access to the overdraft line of credit. Any secondary accounts, such as savings accounts, do not have access to the overdraft account. For more information on primary and secondary accounts, see Account types in the About Accounts guide. Overdraft line of credit The line of credit limit is the maximum amount of overdraft funds available to the account holder for transactions. The Galileo process that calculates the account holder’s line of credit limit and available overdraft funds runs multiple times per day. You configure the line of credit limit for the program. An additional feature allows for “tiering” within the same program, typically based on account holder behavior. For example, a higher line of credit can be given to an account holder who makes larger deposits to their DDA account. To authorize a transaction, Galileo evaluates available funds as either the DDA balance or the sum of the DDA balance and available overdraft line of credit. If the DDA balance is insufficient to cover the transaction, but the sum of the DDA balance and available overdraft is sufficient, the transaction is authorized. Qualified transactions You can configure your product to check for certain transaction types, available line of credit, existing overdraft fees, and other criteria before overdraft usage is authorized. For example, your issuing bank may require that you deny overdraft authorization for scheduled payments, withdrawals and cash transactions (e.g., ATM or cash back). Overdraft fees You can choose to charge account holders a fee for using overdraft funds. Fee settings, such as eligibility and fee amount are configurable during product setup. Fees are calculated and assessed as part of the overdraft settlement process. The following are other overdraft-related fee configurations. The de minimis threshold amounts associated with the amount of overdraft funds used in a single transaction and the cumulative amount of overdraft funds used. The grace period before an overdraft fee is charged. When a grace period is set, an account holder who deposits funds to pay the full overdraft amount within the grace period avoids the fee. The cap on the number and amount of overdraft-related fees assessed in a given time period. Galileo will use any deposit or credit applied to the DDA account to pay off the overdraft amount used. The actual amount repaid is based on your configuration, the amount used, and the amount deposited. Generally, when overdraft funds are used, payments are applied to the overdraft account first and only funds that exceed that amount are applied to the DDA balance. Galileo setup ParameterLevelDescriptionODANBProductControls whether the overdraft account can have a negative available balance. This parameter must be set to Y for overdraft products. Set this parameter on the overdraft product.ODATMProgram or productControls whether ATM and cash-back transactions can use overdraft. This parameter must be set to N for overdraft products. Set this parameter on the primary product.ODBUFProductSpecifies the de minimis threshold for an overdraft transaction to trigger a fee. An overdraft transaction that is equal to or greater than this value triggers a fee. Set this parameter on the overdraft product.ODCAEProductControls the eligibility check for overdraft accounts. This parameter is required for overdraft eligibility verification. Set this parameter on the primary product.ODDMBProductSpecifies the minimum de minimis value before a fee is triggered. When the available overdraft balance is greater than this value, a fee is triggered. Set this parameter on the overdraft product.ODELGProductControls whether a DDA is eligible to use overdraft upon account creation. This parameter is set on the primary product, such that account feature 17 is set to E (eligible) when a primary account is created. With the value set to E on the primary account, an associated overdraft account can then be manually created.ODFDCProductContains text for the overdraft fee description that will display in the CST along with the merchant name and clearing date. Typical values are Overdraft Transaction Fee and Overdraft Fee. Set this parameter on the primary product.ODFGPProductSpecifies the number of hours for the overdraft grace period. This period occurs between an overdraft transaction and the overdraft balance being paid off, wherein overdraft fees are negated, meaning that settled fees are reversed out and unsettled fees are changed to zero. Set this parameter on the primary product.ODFOCProductSpecifies which account is assessed the overdraft fee (primary or overdraft) and whether fees can drive the primary account negative or if they are reserved on overdraft. Set this parameter with the same value on both the primary product and overdraft product.ODLINProductSpecifies the initial overdraft limit when the limit is not set on the primary product using ODSCL. This parameter is required on the overdraft product if ODSCL is not set on the primary product.ODMOBProductSpecifies which action to take after a primary account is opted out of overdraft: move the overdraft balance and close the primary and overdraft accounts, move the overdraft balance and charge off the account, move the overdraft balance only, or do nothing. Set this parameter on the primary product.ODOBIProductSpecifies which value to assign to account feature 17 (overdraft eligibility or participation) when a primary account opts out of overdraft. Set this parameter on the primary product.ODOUTProductControls whether the cardholder can opt out of overdraft on the Galileo-hosted cardholder website. Set this parameter on the primary product.ODPAAProductSpecifies the number of days after which all available funds in a primary account are used to pay the overdraft balance, even when the available primary balance is less than the overdraft amount. Set this parameter on the primary product.ODPDNProductSpecifies the number of days before an overdraft account with an unpaid balance is paid off, driving the primary account negative. This parameter takes effect when the available primary balance is less than the overdraft balance. Set this parameter on the primary product.ODPFOProductSpecifies the number of days after an unpaid overdraft transaction to move funds from the primary account to overdraft, but only when the available primary account balance is sufficient to pay the whole overdraft amount. Set this parameter on the primary product.ODPSQProductSpecifies the number of days after an overdraft transaction after which the account is marked delinquent, if there is no payment into overdraft. Set this parameter on the primary product.ODSCLProductSpecifies the starting credit limit of the overdraft account for the primary product. This parameter is required on the primary product if this product uses Galileo's integrated overdraft limit process.ODSRTProductControls the order in which overdraft transactions are settled. This parameter is valid only for Visa products. Set this parameter on the primary product. When this parameter is not set, overdraft transactions are sorted in descending order, with the largest being settled first.ODTFRProductSpecifies the fee cap (maximum total overdraft fees) after which overdraft transactions are denied. Set this parameter on the overdraft product.ODTORProductControls whether an authorization for an amount larger than the available primary balance causes a ""take"" or a reserve from overdraft. A take moves the funds immediately upon authorization, and a reserve moves the funds from overdraft upon settlement. Set this parameter on the overdraft product.USESBProductControls whether to use the settled balance of the primary account when doing overdraft processing. The settled balance is the ledger balance without including pending transactions. Set this parameter on the primary account.Updated 2 months ago Table of Contents Considerations for overdraft account product setup Primary and secondary accounts Overdraft line of credit Qualified transactions Overdraft fees Galileo setup "
573,docs.galileo-ft.com/pro/docs/about-disputes,"About Disputes This guide explains the general dispute process. See Disputes at Galileo for Galileo's dispute process. Account holders have the right to dispute a charge when they question the legitimacy of a transaction that was posted to their account. This guide explains two types of transactions that might be disputed: card transactions and ACH transactions. Each type of dispute passes through different processes depending on the type of program (such as consumer or business). ACH transactions — See ACH disputes for more information. Card transactions — Continue reading. Card transaction disputes In the United States, the primary regulations that govern consumer card-transaction disputes are: Regulation E (Reg E) — The Electronic Funds Transfer Act, which applies to debit accounts Regulation Z (Reg Z) — The Truth in Lending Act, which applies to credit accounts For disputes in other countries, ask Galileo where you can find the applicable regulations. Card-transaction dispute lifecycle A card-transaction dispute passes through various stages before completion. A dispute can potentially pass through all of these steps: Transaction posted Dispute initiated Chargeback Second presentment Arbitration 1. Transaction posted As explained in About Card Transactions, merchants ""clear"" each card transaction by periodically submitting a list of charges to their acquiring banks. These charges are accompanied by receipts and other evidence that proves the legitimacy of the charges. This clearing process is also called the ""first presentment,"" because it is the first time that the merchant submits evidence of a transaction's legitimacy. After the acquiring banks submit the charges to the networks, the networks send the charges to the issuer, who is obligated to post all charges to cardholder accounts. After transactions have been thus settled, they can be formally disputed. Sometimes arrangements can be made to permit disputes on unsettled (pending) transactions, but only settled transactions can be formally disputed. 2. Dispute initiated A card-transaction dispute may be initiated by one of two parties: Issuer — An issuer may dispute a charge that it suspects is illegitimate or incorrect and that has caused financial harm to the issuer, such as a force-posted transaction that was not first authorized or a settlement that is far in excess of the authorized amount, thus causing a negative balance. Cardholder — Cardholders are entitled to contact their card's issuer to dispute a charge that has been posted to their account. Legitimate reasons for disputing a transaction are suspected fraud or merchant error and include: Duplicate transactions Unauthorized transactions Charged more than was agreed to Item or service not provided Item or service not satisfactory Credits not posted to account 📘NoteSome cardholders abuse the dispute system for outright fraudulent reasons, and others initiate a dispute for legal but inappropriate reasons. See Cardholder fraud and Friendly fraud for more information. Issuers must provide cardholders with at least one way to initiate disputes, such as: Customer-service phone number Online chat ""Dispute transaction"" control in app or website Mailing address Fax number Cardholders are permitted to initiate a dispute up to 60 days after the statement date, depending on the card network and other circumstances. An issuer is not obligated to handle a dispute after the deadline; however, in the United States, the timeframe can be extended for various reasons, including extenuating circumstances such as natural disasters or family emergencies. Under Reg Z, issuers must acknowledge the receipt of a credit dispute within 30 days of receiving the dispute from the cardholder. The issuer performs a preliminary evaluation of the case and then takes one of these steps: If the issuer determines that the dispute is not valid based on the evidence, it will reject the dispute and send the cardholder the appropriate communication. If no chargeback rights exist under the card network rules, and the dispute is valid, the amount is written off (the issuer grants the dispute amount to the cardholder) and the cardholder is notified of the outcome. If the dispute is either determined to be valid or the issuer needs additional information, and there are chargeback rights per the card network rules, the issuer may use the chargeback process as a part of its investigation. Provisional credit If the issuer decides to continue investigating the dispute, the debit cardholder may be entitled to provisional credit, which means that the issuer temporarily awards the disputed amount to the cardholder while the dispute is being processed. Reg E (debit accounts) specifies that if the disputed transaction is a merchant error, the issuer has 10 days to investigate the dispute (20 days for a new account), and if the issuer is unable to resolve the case in that time, the cardholder should be awarded provisional credit. After the provisional credit is awarded, the deadline for resolving the dispute is extended to 45 days (90 for a new account). For disputes that involve non-receipt of merchandise, items not as described, canceled services, credit not processed, and quality of service, Reg E does not apply. For credit accounts, Reg Z indicates that the cardholder is not obligated to pay the disputed amount while it is under investigation. 3. Chargeback If the issuer is unable to determine whether the dispute is valid and needs more information from the merchant, it can raise a chargeback. Issuers use the chargeback process to gather additional information for their investigations as well as recover the disputed funds. For this reason the card networks have strict rules about who, when and what information must be included to raise a chargeback. Failure to include all required information could result in the dispute being dismissed or settled in the merchant's favor. For this reason, issuers should have a thorough intake process that ensures that all information is in order before raising a chargeback. When the chargeback is raised, the network provisionally moves funds into the issuer's account (not the cardholder's) and out of the merchant's account. The chargeback notifies the merchant that there is an issue with the first presentment and requests additional information from the merchant to corroborate the charge. 4. Second presentment When the issuer raises a chargeback, it provides the merchant with the details of the disputed transaction and requests further evidence of the transaction's legitimacy. The merchant has three options: Refund the cardholder — The merchant may participate in a “pre-chargeback” service that allows the merchant to determine that a dispute is valid, such as a duplicate transaction or an improperly fulfilled order, prior to a chargeback being raised via the normal process. The merchant can submit a merchant credit via these services, and the chargeback is considered settled. Accept the chargeback — The merchant may determine that the dispute is valid and accept the chargeback either by sending a notification that they accept the chargeback or by not responding to the chargeback by the allowed response period (30 days for Visa and 45 days for Mastercard). Once the response period expires, the chargeback is considered settled and if applicable, the cardholder keeps any provisional credit that was awarded. Challenge the dispute — If the merchant believes the dispute is in error, the merchant makes a ""second presentment"" (or ""representment"") of evidence to support the transaction. With this challenge, the network reverses the chargeback funds into the merchant's account and out of the issuer's account. The merchant must provide a packet of compelling evidence that may include a combination of these items, among others: A positive AVS response Sales receipts Proof of shipping (shipping receipt, tracking number) Proof of delivery (photo of delivered item, delivery receipt, confirmation email) Proof that the ship-to address was accurate Any correspondence with the customer IP addresses for online purchases Successful 3DS authentication Terms and conditions agreed to The merchant sends the second presentment to the issuer, who re-evaluates the dispute. If the issuer finds the merchant's response to be convincing, it can rule in favor of the merchant, in which case the issuer withdraws any provisional credit from the cardholder. If the issuer rules in favor of the cardholder, the network moves funds back out of the merchant's account and into the issuer's account, and the provisional credit is made permanent. On the other hand, if the issuer believes the second presentment does not sufficiently refute the cardholder's claims, the issuer can raise a second chargeback, and the dispute goes into pre-arbitration. During pre-arbitration the merchant has two options: Accept liability for the chargeback — The cardholder is refunded in full. Request arbitration — Ask for the network to make the decision. 5. Arbitration During arbitration, the card network steps in to determine whether the dispute is valid. Once the network has provided a verdict, there can be no further challenges. Depending on how the verdict is rendered, funds may be moved back into the account of the winning party. Disputes flowchart This flowchart shows how each participant functions in the dispute process in Steps 2–5, as well as showing how the funds move. The aqua boxes show the various points at which the dispute can be resolved in either the cardholder's favor or the merchant's. Cardholder fraud Fraud on a card account can fall into one of two categories: Fraudulent card or account — A malicious user obtains a card by theft (either the physical card or the card number through computer hacking or interception) or prints a counterfeit card. Happens at the point of sale Liability typically falls on card issuer Deterrence through strong card authentication Chargeback fraud — Cardholders dispute transactions with the intent of defrauding the merchant, such as claiming that they did not receive an item or claiming damage but not returning the damaged merchandise. Happens after settlement Liability typically falls on merchant Deterrence through record-keeping, contesting disputes Cardholders suspected of chargeback abuse are often blacklisted by merchants. In some cases, merchants can take chargeback abusers to court, and some jurisdictions will prosecute them as criminals. ""Friendly fraud"" Most disputes are filed not for fraud or merchant error but for inappropriate reasons in what is known as ""friendly fraud."" It's called ""friendly"" because the cardholder does not necessarily intend to defraud the merchant but instead does not understand some aspect of the transaction or how disputes are supposed to work. Some of the most common reasons for inappropriate chargebacks include: An unrecognized purchase made by a family member Buyer's remorse Finding the merchant's return process to be too difficult Not knowing that disputes are not the same as the return process Misunderstanding the delivery schedule Wanting to return an item without paying a restocking fee Asking for a return after the return deadline has passed Not recognizing the merchant description on the transaction, because it is different from the merchant name Chargeback fraud and issuers This is the typical breakdown of chargebacks: 5–15% — True chargeback fraud 10–15% — Merchant error 60–76% — Friendly fraud Although merchants bear the greater burden for chargeback fraud, the issuer can also be negatively affected. There is a positive correlation between high numbers of chargebacks and authorization denials. High numbers of chargebacks affect fraud-detection systems that use machine learning to detect patterns. The more chargebacks are raised against a merchant, the more ""suspicious"" the merchant looks to the fraud-detection system, which results in more authorization requests being denied. When a transaction is denied, a cardholder is likely to use a different card for the payment, and the denied card ends up at the ""back of the wallet,"" where it will be used less frequently or not at all. Most dispute-intake systems screen for some types of friendly fraud, such as asking the cardholder if an unrecognized transaction could have been performed by another authorized card user or family member, or asking for evidence that the cardholder already attempted to resolve the issue with the merchant. To help prevent chargeback fraud, both the friendly and malicious types, issuers should monitor accounts that have a high number of chargebacks, especially those that are resolved in the merchant's favor. If the cardholder appears to be abusing chargebacks, the issuer can impose penalties such as freezing the card, assessing fees, or terminating the account. Receiving the verdict When a decision has been made about the dispute, the entity that performed the evaluation (usually the issuing bank) returns a verdict either in favor of or against the account holder. As shown in the flowchart above, the dispute can be resolved at various points during the dispute process—shortly after initial submission, after the merchant receives the dispute, after the second presentment, or after arbitration. When the dispute is resolved, the issuer must officially notify the cardholder, either electronically or by paper letter, according to the applicable regulations. ACH disputes Some merchants prefer using the ACH system for funds transfers because of lower processing costs. Many peer-to-peer cash transfer apps use ACH, for example, and utilities companies also rely on ACH. When an ACH transaction is disputed it constitutes an ACH return. Both Regulation E and Nacha rules govern ACH disputes. The allowable reasons for returning ACH transactions are far narrower than for card transactions. Dissatisfaction with merchandise or services is not a valid reason. Account holders can ask for an ACH return only under these circumstances: An entity, such as a utility company, posted duplicate debits. The entity that posted the debit is not authorized to withdraw funds. The account was debited before the date authorized. The amount debited was different than the amount that was authorized. The account holder revoked authorization prior to the funds being debited. Account holders have 60 days to dispute a transaction, depending on the ACH type. Merchants cannot contest ACH disputes. For this reason, banks subject ACH disputes to far more scrutiny than card disputes. The ACH dispute is evaluated only by the banks. There is no intermediary to arbitrate claims. ACH dispute return codes These are return codes that are provided in the Nacha file when there is a dispute. Except as noted, each of these return codes requires a Written Statement of Unauthorized Debit (WSUD) from the account holder, and each return must be submitted within 60 calendar days of the transaction being posted to the recipient account. CodeDescriptionExplanationR05Unauthorized debitThe debit was not authorized by the receiver (account holder).R07Authorization revoked by customerThe account holder previously authorized the originator to withdraw funds but has revoked authorization from the originator.R10Customer advises unauthorized transactionThe account holder has no previous relationship with the originator and has never authorized the originator to debit the account.R11Customer advises entry not in accordance with the terms of the authorizationThe transaction is inaccurate or improperly initiated, the source document was ineligible, notice was not provided to the account holder, or the amount was inaccurately obtained.R29Corporate customer advises not authorizedThe receiver has notified the sending entity that the corporate debit entry, transmitted to a corporate account, is not authorized. This return code must be submitted within two banking days but a WSUD is not required. ACH dispute–related transaction otypes depend on your bank and on your program setup. You should receive a curated list of otypes from Galileo Finance that includes ACH dispute–related otypes. Externally initiated ACH disputes An RDFI can return an ACH transaction that one of your customers originated when the recipient account holder challenges the transaction. Nacha requires that as an originator you keep disputes below 0.5% of ACH debit returns for the preceding 60 days. To help prevent these ACH disputes, ensure that your onboarding processes include anti-money laundering measures that screen for account holders who are likely to abuse the ACH system. For more information on the ACH return process, consult these guides: Incoming ACH returns workflow in the Galileo ACH Workflows guide ACH returns and stop-payment orders in the ACH at Galileo guide Updated 22 days ago Table of Contents Card transaction disputes Card-transaction dispute lifecycle 1. Transaction posted 2. Dispute initiated 3. Chargeback 4. Second presentment 5. Arbitration Disputes flowchart Cardholder fraud ""Friendly fraud"" Chargeback fraud and issuers Receiving the verdict ACH disputes ACH dispute return codes Externally initiated ACH disputes "
574,docs.galileo-ft.com/pro/reference/api-reference-external-trans-api-about-external-trans-api-retries,"Retries If Galileo reaches a timeout when invoking a client's webhook, or the client responds with response code ""99"", Galileo will retry the webhook later, a configurable number of times, using exponential backoff. "
575,docs.galileo-ft.com/pro/docs/creating-an-internal-transfer,"Creating an Internal Transfer This guide describes the procedure for performing internal transfers using the Create Account Transfer endpoint. Follow this procedure to Transfer funds from one account (sending account) to another account (receiving account) within the same Galileo client program. The accounts can belong to the same account holder or different account holders, and a fee can also be assessed. Combine an adjustment, payment, and fee into one API call. Reverse out a transfer that was created with Create Account Transfer. 📘NoteIf the sending and receiving accounts have different program IDs, program parameters must permit transfers between the programs. Do not follow this procedure to Transfer funds between a customer account and an ACH account; instead, follow the instructions in Creating an ACH transaction. Transfer funds between an account provided by one Galileo client and an account provided by another Galileo client; instead, use the Create ACH Transaction endpoint or external bank-to-bank means such as wiring funds. Result of calling Create Account Transfer When the Create Account Transfer endpoint has been successfully called: The specified amount is debited from the sending account (adjustment). The specified amount is credited to the receiving account (payment). If configured, a fee is assessed to the sending account. The transaction types for transfers using the Create Account Transfer endpoint depend on the breakdown of the value in the type parameter. For example, if the type refers to a transfer that assesses a 20-cent fee on the sending account, a $50.00 transfer from PRN 33333 to PRN 77777 will produce these transactions: pmt_ref_noact_typeamtexternal_trans_id33333AD-50.00d930f-20e0677777PM+50.00d930f-20e0633333FE-0.20d930f-20e06 📘NoteWhen initiating a transaction with the Program API, the transactionId from the API request is copied to the external transaction ID field of all transactions that result from the request. The external transaction ID is available in the responses to transaction-retrieval Program API requests as external_trans_id, in the Posted Transactions RDF as EXTERNAL TRANSACTION ID, and in the Events API webhook messages as ext_trans_id. Driving the sending account negative By default, a transaction that drives the sending account below 0.00 is not allowed. To permit transactions created by Create Account Transfer to drive the sending account negative, set the ALWNB parameter on the sending account product. (In contrast, to permit the Create Adjustment endpoint to drive an account negative, ALWNB must be set at the provider level.) Message fields Banks require that all account transfers include a message with both the payment and the adjustment. You can determine which message to display by choosing from among these options: Default message Customization per transaction type Cardholder-defined messages Default message By default, the string ""Card to Card"" is displayed for both the payment and the adjustment. You can change this default by requesting that Galileo populate the BMNAM product parameter. The message in BMNAM is then displayed for both the payment and the adjustment. Customization per transaction type You can request that Galileo set up a lookup table to supply a different message according to the sender product, activity (adj or pmt), and transaction types (specific to your program). For example, you could provide a table to Galileo with values such as these: sender prod_idact_typeotypeMessage9999ADmtTransfer to checking9999PMmsTransfer from savings9999ADCRTransfer to <firstname lastname>9999PMCSTransfer from <firstname lastname> In the messages you can include fields for the value in BMNAM as well as sender and recipient first and last names. If a transaction does not match a prod_id/act_type/otype combination, the default message in BMNAM is displayed. Cardholder-defined messages You can provide the message and senderMessage fields for the cardholder to manually enter messages. To use these fields, Galileo must set the provider parameter C2DSC to 1. The message and senderMessage parameters follow these rules: When both parameters are populated: The value in message is displayed on the payment. The value in senderMessage is displayed on the adjustment. When only message is populated: The value in message is displayed on both the payment and the adjustment. When only senderMessage is populated: The value in senderMessage is displayed on the adjustment. The payment message is the default message. When neither field is populated, the default message is displayed. Message hierarchy Among the methods to define messages, this is the order of precedence: Cardholder-defined messages in message and senderMessage (provided that C2DSC is set) Lookup table, if it exists BMNAM value ""Card to Card"" (default value) If a value is missing for a message, the message in the next level down is considered the default. For example, if you have a lookup table and you also provide the cardholder-defined messages, the cardholder-defined message will override the value in the lookup table, but if no value is provided by the cardholder, the value in the lookup table is used. If there is no value in the lookup table, the value in BMNAM is used. Parameters This table explains the parameters that are specific to the Create Account Transfer endpoint. ParameterUsageaccountNoThe sending account numberamountThe amount to transfer, as a decimal or whole number.transferToAccountNoThe receiving account numbermessageCustomer-provided message to attach to the transaction. According to your provider parameters, the message will be in the payment description on the recipient's transaction.typeYou determine valid values in cooperation with Galileo. If you do not pass a value for type these default transaction types are used: Payment — C2 Adjustment — M Fee — C2C Account-transfer workflow This flowchart shows the logical progression of the Create Account Transfer endpoint. The actual sequence of events in the Galileo system may vary. You send the Create Account Transfer request. Galileo verifies that the receiving account exists; if it does not, the endpoint returns status: 445-01. Galileo verifies that the receiving account is in status N, L or S. If it is not, the endpoint returns status 445-02. Galileo checks program and product parameters to verify that the receiving account is eligible to receive this type of transfer; if it is not, the endpoint returns status: 445-03. If the sending and receiving accounts are not in the same program, Galileo checks program parameters to verify that the receiving program is eligible to receive this type of transfer; if not, the endpoint returns status: 445-07. Galileo verifies that the transaction does not violate velocity limits for either account; if it does, the endpoint returns status: 445-04 for the sending account or status: 445-05 for the receiving account. If both accounts are in violation, only status: 445-04 is sent, because Galileo checks the sending account first. Galileo verifies that there are sufficient funds in the sending account; if not, the endpoint returns status: 445-06. If all checks are successful, the endpoint returns status: 0 and creates the transaction by debiting the sending account and crediting the receiving account. Galileo sends Transaction Events webhooks according to your specific configuration: BADJ: adj for the sending account and BPMT: pmt for the receiving account. If the payment type includes a fee, Galileo sends BFEE: fee for the sending account. Account-transfer reversal Although the Program API has a Reverse Account Transfer endpoint, Galileo recommends that you not use it to reverse account transfers, because of the way that endpoint handles transaction codes. If you use the Reverse Account Transfer endpoint, the reversed transactions will not have transaction codes that indicate that they are reversals of previous transactions. Instead, when you design your funds-flow schema with Galileo, make sure that you have otypes that designate the appropriate transfer reversals. Using the Create Adjustment endpoint, reverse out both the payment and adjustment in separate calls, using the corresponding reversal otypes for type. For the fee, use Reverse Fee. View the internal transfer You can retrieve a record of the transfer using any endpoint that returns posted transactions: Get Account Overview Get Transaction History Get All Transaction History 📘NoteThere is a delay of several seconds before a transfer appears in a customer’s transaction history. You can also see the transactions in the Posted Transactions RDF. Sample endpoint request and response Consult the Create Account Transfer reference to see how to build the API request and to see the response schema. Create Account Transfer status codes Status codeDescriptionNext steps445-01The value in transferToAccountNo does not exist in the Galileo system.Retry with a valid account number in transferToAccountNo or inform the customer that the receiving account does not exist.445-02The transfer-to (receiving) account is in a non-active status.Verify that the receiving account is status N, S or L, or inform the customer that the receiving account is ineligible to receive funds.445-03The transfer-to (receiving) account product is not authorized to receive a transferInform the customer that the receiving account is not eligible to receive funds445-04Moving funds out of this account violates its velocity limits.Inform the customer that they cannot make this transfer.445-05Moving funds into this account violates its velocity limits.Inform the customer that they cannot make this transfer.445-06The value in amount is higher than the sending account's available funds.Inform the customer that they do not have sufficient funds to make this transfer.445-07The sending and receiving accounts are in different programs, and program settings do not permit transfers between these programs.Verify that your program settings permit transfers between the two programs, or inform the customer that they cannot transfer funds between those two accounts.Updated 21 days ago Table of Contents Result of calling Create Account Transfer Driving the sending account negative Message fields Default message Customization per transaction type Cardholder-defined messages Message hierarchy Parameters Account-transfer workflow Account-transfer reversal View the internal transfer Sample endpoint request and response Create Account Transfer status codes "
578,docs.galileo-ft.com/pro/reference/api-reference-events-api-denied-auth-stip,"denied_auth_stip Code — STPD Event trigger — Galileo receives notification that a STIP authorization request was denied. Fields The data elements (DEs) indicated in the field descriptions may vary by network. All fields are strings. Your field names may vary. Field Required Description amount X The amount of the authorization request. Includes fees and upcharges. DE004 times the conversion rate in DE009. The amount is signed: - to debit the account and + to credit the account. Example: ""10.25"" auth_id X Galileo-generated ID for the authorization request. This ID is unique per subnetwork. Example: ""12303090"" auth_tran_type Based on DE003, processing code. Type of authorization request. See Authorization types for possible values. Example: ""5"" avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad X Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" currency Currency code for amount, which is the currency of the cardholder account.. Example: ""840"" fund_pmt_ref_no The PRN of the real-time funding account that is associated with this RTF spending account. Example: ""122101354223"" in_de39* X The response code that the network provided to the merchant (not the response code that Galileo provided to the network, which for STIP notifications is always 00). See Authorization Response Codes for possible values. local_surcharge_amt The surcharge amount (DE028) added by the merchant or ATM operator. This amount is included in amount. Example: ""2.50"" mcc X Merchant category code (DE018). Example: ""5712"" merchant_location X Merchant city and state (from remaining part of ISO DE043). Example: ""NEW YORK, NY"" merchant_name X Merchant name (first 22 characters of DE043). Should not be used for matching; instead, use merchant_number. Example: ""Widgets Incorporated"" merchant_number X Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""STPD"" network X See Events Network Codes for possible values. Example: ""V"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" response_code X See Authorization Response Codes for possible values. Example: ""05"" rules_results X Comma-delimited list of DENY, WARN or FREEZE rules from Galileo's dynamic fraud engine. Example: ""hr_crypto:DENY, intl_cnp_ecom:DENY"" stip_info X Advice reason code from the network. See Stand-in processing for more information. Example: ""9020"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""denied_auth_stip"" * Required in new setups (as of Feb 2022); optional for all others Example JSON# denied_auth_stip example: { ""amount"": ""10.25"", ""auth_id"": ""12303090"", ""auth_tran_type"": ""5"", ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""currency"": ""840"", ""local_surcharge_amt"": ""2.50"", ""mcc"": ""5712"", ""merchant_location"": ""NEW YORK, NY"", ""merchant_name"": ""Widgets Incorporated"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""STPD"", ""network"": ""V"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""response_code"": ""05"", ""rules_results"": ""hr_crypto:DENY, intl_cnp_ecom:DENY"", ""stip_info"": ""9020"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""denied_auth_stip"" } Table of Contents Fields Example "
579,docs.galileo-ft.com/pro/reference/post/createivrcall,Create IVR Call The table below lists status codes that apply to this specific endpoint. Status CodeCode Description465-01Unknown IVR call type465-02Invalid parameters passed in 'callParams' parameter465-03Customer has no registered phone numbers465-04Error queuing calls465-05Internal configuration errorLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
580,docs.galileo-ft.com/pro/docs/about-use-cases,"About Use Cases This section describes use cases for Galileo products and programs. Currently, we present an overview of Business Banking Programs and Maximizing Customer Activation Rates, with more guides on the way.Updated 2 months ago "
581,docs.galileo-ft.com/pro/docs/setup-for-instant-issue,"Setup for Instant Issue This guide describes developer implementation for instant-issue cards. For general information, see Instant-issue cards in the Choose a Card Strategy guide. Initial setup Follow these steps to set up, create, and distribute instant-issue cards. Step 1: Create the instant-issue product Set these parameters on the instant-issue product. ParameterDescriptionCASPOSets a default PIN when creating an account. Can be set to 0000, last four of mobile or home phone, or last four of PRN.CBAD1Required. Specifies how to include the name and address for shipping instant-issue cards. Set to SADDR.EMBFLSet only for Latin American products where a PIN-block is required. Do not set for other instant-issue products.IIEXRequired. The number of years or days that the instant-issue card is valid. Numbers 1–5 are years and numbers 6 and higher are days.IIPERComma-separated product IDs of personalized cards that the instant-issue card can upgrade to. Cannot be set for gift cards.IITYPRequired. Specifies an internal process to use for this instant-issue product. Set to PRN.TEMPCCancels the instant-issue card when the personalized card is activated. IIPER must be set also. Do not set for gift cards. Step 2: Set up the location Ordering instant-issue cards requires that you have at least one location set up. If you already have a location 0 (root), skip this step. If you don't have any locations, call Create Location with these parameters: ParameterValuenameYour organization nameAddress parametersHeadquarters address and phoneparentLocationblankparentLocationTypeblankproviderSpecifiedIdblankstatusActivestore_typeCorporate Step 3: Create bulk order Instead of embossing cards on-demand as you would with personalized cards, instant-issue cards are embossed in bulk. Call Create Bulk Card Order with these parameters: ParameterDescriptionprodIdProduct ID of the instant-issue cardnumberOfCardsNumber of cards to ship to the location. Max: 9999. If you need to send more than 9999 cards to the same location, make additional endpoint calls.embossWithOptional. String to print on the card, such as Preferred Customer.shipToNameIn-care-of name for the address where the bulk card order is to be shipped.shipToAddressStreet address where the order is to be shipped. Include suite numbers on this line.shipToCityCity where the order is to be shipped.shipToStateOrProvinceState or province where the order is to be shipped.shipToPostalCodePostal code where the order is to be shipped.locationPass 0.locationTypePass 0. 🚧WarningThe endpoint returns an order_id that you must capture and record at this time. Galileo does not provide a way to retrieve order IDs, and you must use these IDs to get the card identifiers and perform other tasks. The bulk card order is sent to the embosser in the daily emboss file, and the cards are embossed and shipped to the location specified. The SHIP: card_shipped event is not sent out for bulk card orders. Step 4: Get the card identifiers To get a list of PRNs and card IDs for all of the cards in a batch, call Get Bulk Card Order with these parameters: orderId — The order ID (order_id) as returned by the Create Bulk Card Order endpoint. returnAllCards — Pass 1 to get a list of PRNs and PANs. The expiry dates will not be available right after creating the order, because they are generated asynchronously by a back-end process. Ask Galileo how often that process runs in your core to know when the expiry dates will be generated. Alternatively, you can call Verify Instant-Issue Card for a single card. For example, if you have the card in hand you can pass the PAN in accountNo to retrieve the PRN as well as other information such as the batch ID, case ID, and bundle ID for the card. Step 5: Enroll customer and issue card Perform this step only for prepaid reloadable cards. Do not perform this step for gift cards. At the store, you have an interface for customer enrollment and card issuing. 📘NoteIn some cases you must perform KYC/CIP on the customer prior to issuing a prepaid reloadable card. The requirement depends on the amount on the card and other factors. Consult with your bank for your specific use case. Also see the Customer ID Verification (KYC/CIP) guide. In your enrollment interface, input the customer's name, address, and other information. If you are required to perform CIP, input a government ID such as the SSN or whatever your bank requires. If you are performing your own CIP, submit the information to your service and wait for the response. If Galileo is performing CIP, go to the next step. Call Create Account with these parameters: accountNo: PRN of the card, as returned by Get Bulk Card Order or Verify Instant-Issue Card. prodId: Product ID for the instant-issue card Other parameters as shown in the Parameters section of the Creating an Account guide. Galileo creates a customer record and associates the PRN of the card with it. The cardholder activates the card and sets a PIN. See Activating a Card and PIN-Set Procedures for more information. Step 6: Switch to a personal product This step is optional for prepaid reloadable cards. Do not perform this step for gift cards. If you would like to upgrade an instant-issue customer to a personalized card, you must perform a product switch. How you perform the product switch depends on how the BINs are set up for the instant-issue and the personalized products. If the two products have the same BIN (same first six digits) follow the instructions below. If they have different BINs, follow the instructions in Switching Products with Different BINs. Follow the steps in Use case 4: Product switch with new PAN and expiry of the Switching Products guide. A new card is issued and sent in the mail. When the new card is activated, the instant-issue card is deactivated, as long as TEMPC is set. See Activating a Card for more information. Because the card has a new PAN, a new PIN must be set. See PIN-Set Procedures for more information. Adding an instant-issue card to an existing user The most common use case for adding an instant-issue card to an existing user is to provide a temporary physical card when a card has been lost, stolen or damaged, while waiting for the replacement or reissued card to be embossed and mailed. Perform these steps when a cardholder comes to your place of business to report a lost, stolen, or damaged card. Initiate the process to replace the card: For lost or stolen cards follow the steps in the Lost, Stolen, or Damaged Cards guide. For damaged cards follow the steps in Use case 1: Reissue card with same PAN and new expiry of Reissuing Cards. Call Add Card with these parameters: accountNo: PRN of old card newAccountNo: PRN of instant-issue card prodId: Product ID of instant-issue card The instant-issue card is activated by the endpoint call. The endpoint returns the card_id of the instant-issue card. The PRN is the same as the lost, stolen, or damaged card. Updated 2 months ago Table of Contents Initial setup Step 1: Create the instant-issue product Step 2: Set up the location Step 3: Create bulk order Step 4: Get the card identifiers Step 5: Enroll customer and issue card Step 6: Switch to a personal product Adding an instant-issue card to an existing user "
583,docs.galileo-ft.com/pro/reference/api-reference-account-statuses,"Account Statuses Account status is independent of card status. Both the account and card must be in status: N (normal, active) to perform card transactions. See Card Statuses for more information. This table indicates whether an account status permits certain types of transactions or account updates. X means that the transaction is permitted and other characters indicate that performing the transaction is contingent on settings. StatusDescriptionNetworkLoadAdjACH debitACH creditUpdateCCanceled§*X*******XDDisabled§XX***FFailed ID verificationXX***JSuspended/never activatedXX***KSuspendedXX***MMoved to new program. The cardholder has been migrated to a new program. This status is functionally identical to status: Z.XX***NActive (normal)XXX*****XPPassed ID verificationXX***QDelinquentXX***RCharged off. The account has been negative for a number of days, as defined in the CODYS product parameter, or the account was charged off by the Charge Off Account endpoint.XX***XTID verification in processXX***XUUpgradedXX***XVApplication submitted. The account setup process has not completed. The exact steps in the setup process vary according to the ACSET product parameter.XX***XWWaiting to be processedXXX***XZCanceled without refund§*X*******XdBankruptcy dischargedXeBankruptcy dismissedXfBankruptcy filedX § Merchant credits only, except for Mastercard credit merchant credits, which are adjustments (trans_code: ADC). * Loads controlled by BLKLD ** Incoming ACH debits controlled by ACHCA *** Incoming ACH credits controlled by ACSTS **** Cannot originate ACH debits To change some properties of account statuses, you can set these parameters. ParameterDescriptionACHCASpecifies whether an account must be in status: N to permit incoming ACH debits.ACSTSContains a list of statuses that are allowed to receive an ACH credit.STPLDContains a list of statuses that do not permit transactions originated by Create Payment, Create Adjustment, Create ACH Transaction, and Create Account Transfer (sending account only)BLKLDContains a list of account statuses that cannot receive card loads. Does not apply to ACH credits. Default: C, ZRISCSList of card statuses that permit card reissue. Default: N,C,Z "
584,docs.galileo-ft.com/pro/reference/api-reference-events-api-pin-changed,"PIN_changed For PIN changes that are staged by the direct render or direct POST procedures, see agserv_PIN_change_success. Code — PINC Event trigger — The card's PIN change is successfully staged. Processes — These processes contain the event trigger: Customer Service Tool Galileo-hosted cardholder website Automated phone system (IVR) Fields All fields are strings. Your field names may vary. Field Required Description avail_cash For debit accounts, the open_to_buy plus available overdraft. Example: ""143.11"" avail_credit For credit accounts, the available credit limit to spend. Example: ""432.00"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" cad Galileo-generated card ID. Example: ""12534"" credit_balance For credit accounts, the total amount of unpaid purchases and advances. Example: ""325.00"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""PINC"" open_to_buy X The available balance to spend. Example: ""500.00"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""PIN_changed"" user_data Populated according to your use case and needs by arrangement with Galileo. Example JSON# PIN_changed example: { ""avail_cash"": ""143.11"", ""avail_credit"": ""432.00"", ""balance_id"": ""20211"", ""cad"": ""12534"", ""credit_balance"": ""325.00"", ""msg_event_id"": ""243693"", ""msg_id"": ""PINC"", ""open_to_buy"": ""500.00"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""PIN_changed"" } Table of Contents Fields Example "
585,docs.galileo-ft.com/pro/docs/payment-risk-platform,"Payment Risk Platform 👍AvailabilityThe information in this document is subject to change as development proceeds and is not a guarantee of future functionality. Galileo’s multi-layered approach to fraud mitigation combines the power of people, technology, and data with direct access to trained fraud analysts to inform your fraud-mitigation strategies. How it works The new tools and platforms the Payment Risk Platform (PRP) provides make it easy to configure risk rules that block fraudulent events in real time. With access to fraud intelligence derived from more than 100M unique spend patterns that pinpoint operational and transactional fraud risks on top of that, Galileo clients save an average of 35%* in fraud costs. PRP targets every corner of the payments ecosystem by combining Galileo consortium data for risk and fraud insights, a real-time decision rules engine, a case-management system that includes a knowledge graph for manual review, backtesting capability, support for multiple product types (debit card, credit card, BNPL, customer onboarding, Money Movement, and more), and an optional GUI self-service environment. *Based on a review of Galileo clients using Galileo fraud mitigation services - conducted in July 2022 and November 2022 What this means to your customers Efforts can be made to improve the fraud dispute process and strengthen account take-over controls. Additionally, utilizing the resources and protection provided by a consortium such as Galileo may also aid in detecting and preventing fraudulent transactions. This can help increase customer confidence in the ability to detect and protect against fraud. What this means to you PRP will include a premium real-time risk decision engine, custom risk feature configurations, artificial intelligence/machine learning model risk scores, a case-management system with UI, and more. Fraud-strategy calibration is streamlined through a centralized system for monitoring, with regular consultation sessions with fraud-strategy Galileo’s Risk Ops Team. Access your self-service dashboard to view fraud insights and make changes to your fraud policy based on real-time risk scoring, or consult with the Galileo Risk Ops Team to manage your fraud rules. Price varies by the volume of traffic generated by the product. Key capabilities Risk decision rules engine with optional self-service UI Access Easy risk feature configuration from simple data transformations to complex velocity features setups Back-testing capabilities before pushing the rule into production, using the historical data and/or a mock-up data Modifying, removing, or adding a fraud rule does not require any engineering configuration changes. Every change can be initiated and completed by the user No integration, no infra changes, no resource to maintain transaction decision rules engine Optional real-time artificial intelligence/machine learning transaction risk model scores Provides the riskiness level of an event in real-time, such as debit/credit card transactions, card applications, money movement transactions, and more. Continuous artificial intelligence/machine learning model retraining once a quarter No integration, no infra changes, no resource for maintenance Access to optional case management system with knowledge graph Easy changes in manual review queue on the UI Flexible access controls Quick fraud ring investigations using knowledge graph visualization Real-time fraud rule performance monitoring No integration, no infra changes, no resource for maintenance Fraud protection leveraged by Galileo consortium data Galileo consortium artificial intelligence/machine learning model to provide insights into fraud patterns identified by other Galileo clients Sharing merchant insights from across the consortium's spend patterns to identify compromised merchants Negative database (global black/graylist) from Galileo consortium data Proactive fraud detection algorithms such as common point of compromise (CPC) Flexibility to support multiple product types, including debit card transactions, credit card transactions, card applications, BNPL transactions, money movement (ACH transaction), mobile wallet provisioning events Pick and choose desired product types to receive Galileo’s risk assessment What you provide Reach out to your relationship manager (RM) or technical project manager (TPM) and inform them that you want to sign up for PRP. If you want to use a third-party risk vendor as part of your fraud policy, ask your RM or TPM to assess the vendor to provide their risk assessment within PRP. What Galileo provides Your RM or TPM will set up a series of regular fraud-strategy consultation sessions with the Galileo Risk Ops Team and test PRP in the CV environment on your behalf, prior to deployment. After the product overview call and PRP is enabled on your system, your fraud controls are active right away. PRP service options Basic services Galileo consortium fraud insight data Global fraud features and fraud rules Galileo-managed fraud rule backtesting Real-time fraud decision engine Global artificial intelligence/machine transaction risk scores and global velocity features Risk/fraud dashboard and fraud pattern analysis managed by Galileo Additional proactive fraud detection algorithms Optional add-ons Galileo proprietary artificial intelligence/machine transaction risk score Advanced services All basic services plus the following additional capabilities: Access to risk/fraud dashboard with pre-reserved seats Self-service fraud feature creation and fraud rule modification Self-service fraud rule backtesting Custom artificial intelligence/machine transaction risk scores and custom velocity features Case management system Optional add-ons Knowledge Graph for Case Management System Additional seats available for purchase Use cases These use cases provide examples of how each PRP feature can benefit a fraud manager of a fintech company who is responsible for monitoring fraud patterns, performing fraud investigations, and making changes in the fraud policy to systematically block risky transactions. Use case 1: Detect abnormal transaction behaviors This model detects abnormal transaction behaviors. When a transaction is flagged as suspicious, you can decline the transaction and/or freeze the account in real-time, preventing the potential fraudster from accessing the account and protecting your customers' funds. Additionally, you can detect suspicious patterns in transaction volumes and take action to prevent fraud with a velocity feature tailored to your specific use cases. Use case 2: Detect potentially compromised merchants Help protect your program from automated fraud attacks and BIN attacks. Rapid spend patterns are detected in real-time and transactions with compromised merchants are blocked. Each rapid transaction is given a risk score, which you can use to improve your fraud rules. Common-point-of-compromise gives you visibility into which merchants are likely to be compromised for fraud investigations and a list of all active accounts that have ever touched these risky merchants. Use case 3: Use data points to queue risky transactions Log into the PRP user interface (UI) to configure the logic for queuing and reviewing risky transactions. While optional, this UI allows you to monitor the volume of risky transactions and determine the appropriate post-transaction decision actions, such as adding the card holder to the black/gray/whitelist. By reviewing all of the available data points within PRP, including the risk score, merchant velocity features, and account velocity features, you can make informed decisions about which transactions to queue and how to handle them. Use case 4: Get performance data for fraud policies To determine the effectiveness of your fraud policies, you can access your Risk Dashboard, the Snowflake querying console, or create an RDF to send you fraud master data that is customized to your needs. Meet with Galileo’s Risk Ops Team on a regular basis to consult on your fraud strategy. Get insight on your fraud events and patterns, recommendations on appropriate risk features or fraud policy changes. Artificial intelligence/machine learning models are re-trained by the Risk Ops Team to provide continuing insights on recent changes in fraud patterns. Aggregated trend patterns across the Galileo platform are shared.Updated 3 days ago Table of Contents How it works What this means to your customers What this means to you Key capabilities What you provide What Galileo provides PRP service options Basic services Advanced services Use cases Use case 1: Detect abnormal transaction behaviors Use case 2: Detect potentially compromised merchants Use case 3: Use data points to queue risky transactions Use case 4: Get performance data for fraud policies "
586,docs.galileo-ft.com/pro/docs/galileo-analytics-report-index,"Galileo Analytics Report Index This guide is a list of all of the reports for Galileo Analytics (gAnalytics), which is Galileo's data-reporting tool, and provides a brief summary of each report. If you are currently signed up with gAnalytics and need more information, reach out to your Relationship Manager or Business Development Rep. Landing page The landing page/dashboard shows several key monthly metrics for the selected month range. It also provides quick access to the recently run reports, your favorites reports and recently added or shared notes. Portfolio management ReportPeriodDescriptionPortfolio OverviewMonthlyProvides insight into various strategic key performance indicators. The summary section shows the average monthly active account counts for the selected month range.Key Performance IndicatorsMonthlyAllows you to view several important KPIs within a selected month range for your portfolio. Sample KPIs include: Active Account Counts, Applications/ Emboss/ FailedID Counts, Activation & Funding %, Load/ Fee/ Revenue/ Interchange amount, and several other metrics such as IVR & Customer service calls.Product ComparisonMonthlyCompare the performance of various products. Select a KPI/metric to see the value for each of the top 5 products. You have the option to view the total values and a monthly trend chart, and compare the monthly load trend across products.Active Attrition AnalysisMonthlyProvides the number of active customers, insight into whether you are adding or losing customers, and the average number of closing and active accounts for each month in the selected month range.Account Status OverviewMonthlyA snapshot report that shows the historical totals of accounts in various statuses for a selected date.Account Status DetailDailyShows details of all accounts that are in a particular status and an export link to export account level details.Account Status Change SummaryDailyProvides count data of accounts that were changed to a particular status for a specific date range. Data is available at daily, weekly, and monthly levels.Account StatusDailyProvides count data of accounts that changed from a particular status to another particular status and an Export link to download the complete list to Excel. Data is available at daily, weekly, and monthly levels.Cards Status OverviewMonthlyShows the total count of cards in various statues. Example card statuses include: Active, Blocked, Canceled, Disabled, Lost Card, Set to Emboss, Shipped Ready to Activate, Stolen, etc. This report can only be run for a single date at a time.Card Status DetailDailySelect a particular card status and view the details of individual cards in that status. Export the data to view more than 10 records. Data is available at daily, weekly, and monthly levels.Card Status Change DetailDailyView cards that changed from a particular status to another particular status during a given date range. The From or To parameter is required to run the report. Data is available at daily, weekly, and monthly levels.OverdraftDailyView the KPI section to see various overdraft related metrics, including the total OD fee. View the power list to display the same information at individual product level, and the power chart to trend the metrics over a period of time. Data is available at daily, weekly, and monthly levels, and is relevant to overdraft products only. Applications ReportPeriodDescriptionApplications OverviewDailyProvides a quick overview of applications received during a selected time period, sorted by the application date. Data is available at daily, weekly, and monthly levels.ID VerificationDailyDisplays ID verification summary data, including: application count, failed ID verification count, and percentage for the selected application date range. Data is refreshed once a day and includes full historical data; available at daily, weekly, and monthly levels.Application Quality ScoreDailyAn innovative measure of the quality of applications you receive. The score is a dollar amount that represents the average net income generated per application, which can be used to compare application quality across multiple months, products, or stores. Data is available at daily, weekly, and monthly levels. Emboss ReportPeriodDescriptionEmboss OverviewDailyShows various metrics related to embossed cards and the counts of various emboss types. Data is available at daily, weekly, and monthly levels.ActivationsDailyShows various metrics related to card activations. Some of the important metrics are the count of first card activations and average number of days to activate (from emboss data). Data is available at daily, weekly, and monthly levels.Activation detailDailyShows data for the list of cards (along with cardholder info) that were activated during a 30 day date range. Data is available at daily, weekly, and monthly levels. Financials ReportPeriodDescriptionFinancial OverviewDailyProvides a high-level view of various financial metrics, as well as the total number of accounts with a positive balance, per the end of the selected date range and the Average Balance Per Active Account. Data is available at daily, weekly, and monthly levels.RollforwardDailyProvides summaries (amounts and counts) of various types of financial activities including: Adjustment, Fee, Settlement, and Payments/Loads, sorted by date, or by product/program. Data is available at daily, weekly, and monthly levels.Loads OverviewDailyShows various load amount related numbers, including the Total Load amount along with Load Count and Average Load Size, Total Direct Deposit Load amount, Total Non-Direct Deposit Load amount, along with their respective Average Load Size. View data at program or product level, as well as by day/week/month, load types, and stores where the card was purchased.Loads Monthly SummaryMonthlyProvides a monthly overview of Direct Deposit loads, that gives you insight into the Average Monthly Loads per Active Account for various types of active accounts, so you get a completely different perspective of loads, respective to active card holders/accounts. Only accounts with more than 10 direct deposit loads are considered for DD counts.Direct Deposit AnalysisMonthlyProvides a monthly overview of Direct Deposit loads, where you can see KPI trends and chart two metrics to compare the numbers on a monthly basis.Fee OverviewDailyShows the total amounts for various types of fees for the selected data range. The various types of fees include: monthly fee, transaction fee, transaction decline fee, ATM fee, ATM decline fee, and other fees. Data is available at daily, weekly, and monthly levels.Fee Monthly SummaryMonthlyThe goal with this report is to check the fee trend, average fee per card holder, and how many active accounts were not charged a fee.Authorization OverviewDailyDisplays all authorizations received during a given time period. The power chart at the top allows the user to chart metrics to see the trend over a period of time, which can also be used to compare two similar metrics. Data is available at daily, weekly, and monthly levels.Authorization DetailDailyShows a detailed view of authorizations received during a given time period. Click the Export link to download the complete dataset to Excel. Data is available at daily, weekly, and monthly levels.Settled Transactions OverviewDailyGives insight into various settlement metrics, including the trend of Settlement Amount and Count and trends of specific settlement types, like POS PIN, POS Signature, ATM, Domestic, and International settlements. Data is available at daily, weekly, and monthly levels.Settled Transactions DetailDailyShows details of the settlements that happened in a particular date range, including the PRN, Settle amount and date, and merchant details of where the settlement happened. Details are available only for the last 30 days. Data is available at daily, weekly, and monthly levels.Merchant CreditDailyShows the details of Merchant Credits and funds held and released, if any. Click the Export link to download the complete list to Excel. Data is available at daily, weekly, and monthly levels. Money In OutDailyShows the overall opening balance, total transactions (money-in and money-out), and the net closing balance for the selected date range. Data is available at daily, weekly, and monthly levels. Note: The selected date range cannot include today’s date.Store / Agent Sales PerformanceDailyCompare store and agent-level sales performance. View data at Agent or Store level, as well as by day/week/month, and Program/Product/Date. Note: the report shows only retail loads and unloads (load description must have “Retail” keyword). All other load types can be viewed in the Financial Activity > Loads > Overview report. Non-Financials ReportPeriodDescriptionNon-Financial OverviewDailyProvides insight into various card holder activities, including the count of IVR calls, customer service calls, average time spent on call, average speed of answer, card holder web usage counts, alert and campaign counts. Data is available at daily, weekly, and monthly levels.IVR Call OverviewDailyProvides insight into IVR calls received from cardholders to determine the top reasons for use. Data is available at daily, weekly, and monthly levels. IVR Actions OverviewDailyShows only those cardholders that successfully entered their account credentials. Data is available at daily, weekly, and monthly levels.CS Calls OverviewDailyShows various metrics around customer service calls, which can be used to determine top reasons why cardholders are talking to a CS agent. This data can uncover ways to improve your IVR design or CS training to reduce transfer rates and improve case management. Data is available at daily, weekly, and monthly levels.Survey OverviewDailyShows data from completed surveys, available at daily, weekly, and monthly levels.Mobile AppDailyProvides a quick overview of mobile app downloads/registrations and mobile logins during a selected time period. Data is refreshed once a day with full historical data, available at daily, weekly, and monthly levels.Activity By HourDailyShows various activities at each hour of the day, for a limited period of time (select a month or a single date within this time period only). Data is available at daily, weekly, and monthly intervals. Analytics NOW The data for all real-time reports are loaded every 15 minutes on the 0, 15th, 30th, and 45th minute of the hour, between 8 AM and 5 PM MST. Reports do not show today’s real-time data outside of these hours. Depending on the level of traffic in our warehouse, the prior 15 minutes of data can take 5-10 minutes to process. The time on the charts/tables shows the beginning of a 15-minute interval. ReportPeriodDescriptionApplications NowMonthlyShows a real-time view of all applications received in the past two hours.Authorizations NowMonthlyShows a real-time view of the authorizations received in the past two hours, including the total received during each 15-minute interval, or by status, type, and product/merchant category.CS/IVR NowMonthlyShows a real-time view of the CS/IVR calls received in the past two hours to see the distribution of CS calls in 15-minute intervals, along with the final call status during each interval.API NowMonthlyShows a real-time view of the API calls received in the past two hours. View the distribution of API calls in 15-minute intervals along with the response code distribution during each interval, the percentage distribution of calls grouped by their response codes, and distribution of calls by call method and product. Other modules ReportPeriodDescriptionHomeDailyDashboards are a quick way to glance at a lot of information around one or two key performance indicators, which shows data for a 6 or 12 month period. Data is available at daily, weekly, and monthly intervals.Big PictureDailyGet a 30,000 foot view of your programs in a single report. It highlights all the important metrics and trends over a 12 month period, so it’s easy to identify top performing products. Data is available at daily, weekly, and monthly intervals.BalanceMonthlyShows the total balance amounts (Total Negative Balance, Total Positive Balance, Accounts with Positive Balance, etc) for accounts in various statuses, and sorted by various programs, products, and product types.Fraud Authorization VelocityDailyThe goal is to be able to perform velocity analysis at both individual and cumulative transaction level (large single transactions and smaller frequent transactions totaling to larger total amounts). View up to 20 records, or click the Export link to download the entire dataset in Excel. Data is available at daily, weekly, and monthly intervals.KPI StrategicMonthlyView several important key performance indicators (KPIs) for your portfolio within a selected month range. Click the Export link to download KPI data into Excel.KPI OperationsDailyShows various key metrics for the business within the selected date range and has full historical data refreshed once a day. Data is available at daily, weekly, and monthly intervals.TimelineDailyProvides a quick overview of portfolio performance over a period of time. Performance is displayed for each individual year and compared with the prior year. Data is available at daily, weekly, and monthly intervals.Fraud Cash In Cash OutDailyReview accounts that are relatively new (active months) and are withdrawing money within 1-7 days of loading it to help identify potentially fraudulent accounts. Data is available at daily, weekly, and monthly intervals.Negative Balance AgingDailyReview cardholder accounts with a negative balance for risk analysis, collections, and charge off purposes. Click the Export link to download the entire dataset into Excel. Data is available at daily, weekly, and monthly intervals.Fraud - Foreign TransactionsDailyDisplays all successful foreign transactions during a selected time period. Click the Export link to download the entire dataset into Excel. Data is available at daily, weekly, and monthly intervals.MilestoneDailyProvides a quick preview of all the major achievements during the history of your program. Data is available at daily, weekly, and monthly intervals.Fraud Load VelocityDailyPerform velocity analysis at both individual, and cumulative load level. View 10 records at a time, or click Export to download the entire dataset in Excel.Client ScorecardDailyMonthly scorecard that provides some important KPI's related to Call Center Statistics and Disputes. Data is available at daily, weekly, and monthly intervals.ACH ReportsDailyShows the summary of ACHs for the selected program(s) by status. Data is available at daily, weekly, and monthly intervals.Dispute SummaryDailyShows the total amount and number of transactions for three dispute types: Chargebacks, 2nd Presentments, Arbitration & Pre-Arbitration, for the selected time period and programs. Data is available at daily, weekly, and monthly intervals.Visa LoadsDailyShows a summary of Visa lad payments over the selected date range grouped by date, and how many of the total posted Visa leads were force posted. Data is available at daily, weekly, and monthly intervals.Fraud Lost/StolenDailyDisplays all transactions received for cards that have been marked lost/stolen. Data is available at daily, weekly, and monthly intervals.Active AccountsDailyCurrent active account trend, counts, percentage acquired within a date range, products with highest active accounts. Data is available at daily, weekly, and monthly intervals.ACH Real-TimeDailyShows details of the ACHs received for the selected file dates. Data is available at daily, weekly, and monthly intervals.IVR Events OverviewDailyShows only the cardholders that successfully entered their account credentials. Data is available at daily, weekly, and monthly intervals.Web UsageDailyShows the web usage summary for the selected week, including the number of cardholders that logged in to the website in the last 7, 14, or 30 days from the selected week's end date. Data is available at daily, weekly, and monthly intervals.Pending LoadDailyProvides a summary of pending payments in the system, including the pending portion of split payments and any incoming ACH payments that are pending due to a future date. Data is available at daily, weekly, and monthly intervals.Call ReasonDailyTop reasons why customers are calling. Identify operational issues with specific products. Isolate training opportunities and solve operational bottlenecks. Data is available at daily, weekly, and monthly intervals.Cards SoldDailyShows cards sold by month and product, and the percentage of cards that have reloads, that are still active, and that have been personalized. Data is available at daily, weekly, and monthly intervals.Customer Lifetime ValueDailyThis report helps answer the following questions: How much revenue do you make per customer over the lifetime of the account? Which products are the most profitable? How much revenue do they generate per account each month? Data is available at daily, weekly, and monthly intervals.Split LoadDailyProvides a summary of payments that have been split due to load velocity limits. If the load amount is higher than a certain limit, it is split into smaller amounts and posted over a period of time. The report shows what portion of such split payments is still pending and what portion has posted. Data is available at daily, weekly, and monthly intervals.Spend AnalysisDailyProvides high-level and detailed insight into cardholder spending behavior. There are four reports available to export in this module: Transactions by Category, Transactions by Geographic Location, Cardholder by Transaction Category, and Cardholders by Merchant. Data is updated at the beginning of each month.Customer ServiceDailyView call center metrics for yesterday and a 7 day or 30 day period. Metrics include the total calls, speed of answer, and call duration. Data is available at daily, weekly, and monthly intervals.HistogramsMonthlyProvides insight into how long it takes for cardholders to activate, fund, or direct deposit during a selected time period and product/program.Fee Reversal SummaryDailyShows a summary of all fee reversals for the selected date range and programs/products. Data is available at daily, weekly, and monthly intervals.Fraud Case Manager DashboardDailyProvides a glance of: Number of New Cases Created, Number of Cases Closed, and Number of Cases Closed by Users. Data is available at daily, weekly, and monthly intervals.Fraud Case ManagerDailyUsed by the manager to assign cases to their team to complete. Each case is an account that violated the compliance criteria specified by the bank or the client. Data is available at daily, weekly, and monthly intervals.Bank ACH SummaryMonthlyShows three different ACH summary reports for a given file date. The Schedule tab shows a summary of all the ACHs received for the bank partner, the Processed tab shows a summary of all processed ACHs, (along with their processed date), and the Pre/Post tab shows a summary of all ACHs that posted before or after the post date in the file. Click the Export link to download the complete dataset to Excel. Data is available at daily, weekly, and monthly intervals.Bank ACH Schedule DetailMonthlyShows the posted date, scheduled post date, ACH amount, and type for each of the ACHs received. Click the Export link to download the complete dataset to Excel.Bank ActivityDailyShows money movement activity for banks, including the transaction time, description, and amount of the transaction. Click the Export link to download the complete dataset to Excel. Data is available at daily, weekly, and monthly intervals.Bank ACH Posted DetailMonthlyShows the details of the ACH credits and debits received for the selected date. Click the Export link to download the complete dataset to Excel.Spend Analysis Transactions by Category/ MerchantMonthlyProvides insight into the spending distribution for a set of programs. It shows the distribution of spending by mcc category and sub-category, as well as the top 10 merchants with the maximum number of transactions. The displayed data is for the last 12 calendar months for the selected programs.Spend Analysis - Transactions by Geographical LocationMonthlyGives an overview of total spending based on state and city, including the top 20 states and cities based on the total number/amount of transactions. Click on a state to view data for the cities in that state. The displayed data is for the last 12 calendar months for the selected programs.Spend Analysis - Cardholder by Transaction CategoryMonthlyGives an overview of customer spending based on transaction category and sub-category, including the top 10 transaction categories and sub- categories (based on the number of distinct customers that transacted in each category or sub-category). Click on a category to view data for all sub-categories in the list. The displayed data is for the last 3 calendar months for the selected programs. Click the Export link to download the full list of customers to Excel.Spend Analysis Cardholder by MerchantMonthlyGives an overview of customer spending based on merchants, including the top 20 merchants (based on the number of distinct customers that transacted at each merchant). Click on a merchant’s Number of Accounts value to view a sample of the customers that transacted. The displayed data is for the last 3 calendar months for the selected programs. Click the Export link to download the full list of customers to Excel.Product InformationDailyLists the product IDs along with their short descriptions for the selected programs. Data is available at daily, weekly, and monthly intervals.Calls AnsweredDailyProvides a summary of answered calls for the selected date range and program/product list. Answered calls are grouped into buckets based on the amount of time the calls sat in the call queue before being answered. Data is available at daily, weekly, and monthly intervals.Call StatisticsDailyGives a summary of call counts and other important metrics for the selected date range. Data is available at daily, weekly, and monthly intervals.Calls AbandonedDailyProvides a summary of abandoned calls for the selected date range and program/product list. The calls are grouped into buckets based on the amount of time the calls sat in the call queue before being abandoned. Data is available at daily, weekly, and monthly intervals.ACH Transfer (1Debit)DailyACH Debit item report used as a reconciliation report. Data is available at daily, weekly, and monthly intervals.IVRDailyView the IVR call totals, including the transfer rate, hangup rate, abandon rate, and average speed of answer for a 7, 14, or 30 day period, and compare these metrics across products. Data is available at daily, weekly, and monthly intervals.Savings InterestMonthlyShows interest accrued on savings accounts for the selected month, interest accrued in the current quarter, interest amount paid in the prior quarter, and the interest rate. Shows data at summary level for the month and also at individual balance level.Custom Card ImageDailyShows all of the custom card image requests by card holders and the status of each request. Select a date range to view the card image requests during that time period. Data is available at daily, weekly, and monthly intervals.Monthly PerformanceDailyShows the performance of the most important KPIs and comparison across the top 10 products. Data is available at daily, weekly, and monthly intervals.RevenueDailyShows the total revenue generated by products during the past 12 months. View revenue by fee type, revenue from customers acquired during different years, and revenue by customer segment. Data is available at daily, weekly, and monthly intervals.Updated 4 months ago Table of Contents Landing page Portfolio management Applications Emboss Financials Non-Financials Analytics NOW Other modules "
587,docs.galileo-ft.com/pro/reference/api-reference-customer-id-types,"Customer ID Types See the Customer ID Verification guide for more information. These endpoints contain the ID-related parameters: Create Account Create Virtual Card Account Start Enrollment Update Enrollment Verify Enrollment Run Enrollment CIP IDDescriptionLayout0PAN or PRNPAN or PRN Example: 1234567890121Driver's License Number<DL# 1–20 alphanumeric>|<DL State 2 alpha>| <DL expiration mm-dd-yyyy> Example: abcd12345|UT|05-02-20202Social Security Number9 digits, all numeric. See Validation for ID type 2. Example:1234567893Green Card Number<9-digit green card ID>|<mm-dd-yyyy> Example: 123456789|05-02-20204Passport Number<6–9 alphanumeric passport ID>|<mm-dd-yyyy > Example: abc1234|05-02-20205Visa Number<4–15 alphanumeric Visa ID>|<mm-dd-yyyy> Example: abcd12345|05-02-20206Matricula Consular Number<7–9 digit MCN ID>|<mm-dd-yyyy> Example: 123456789|05-02-20207RFDCAlphanumeric 1–50 characters Example: abcdefgh12345678CDEAlphanumeric 1–50 characters Example: abcdefgh12345679Social Insurance Number9 digits, all numeric Example: 12345678910Citizenship PapersAlphanumeric 1–50 characters Example: abcdefgh123456711Canadian Drivers License Number<DL# 1–20 alphanumeric>|<DL Province 2 alpha>|<DL expiration mm-dd-yyyy> Example: abcd12345|NB|05-02-202012Card DetailsAlphanumeric 1–50 characters Example: abcdefgh123456713State ID<DL# 1–20 alphanumeric>|<DL State 2 alpha>|<DL expiration mm-dd-yyyy> Example: abcd12345|UT|05-02-202014Client-Generated IDAlphanumeric 1–50 characters Example: abcdefgh123456715ITIN (Individual Tax Identification Number)9-digit ITIN ID Example: 123456789 Validation for ID type 2 In both the CV and Production environments, Social Security numbers are validated. If any of these conditions are true, the system returns an error: Starts with 9 Starts with 000 Starts with 666 Has 00 in the 2-digit segment (positions 4–5) Has 0000 in the 4-digit segment (positions 6–9) Table of Contents Validation for ID type 2 "
588,docs.galileo-ft.com/pro/reference/api-reference-events-api-fed-benefits-status-submitted,"fed_benefits_status_submitted Code — FBSS Fields All fields are strings. Your field names may vary. Field Required Description balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" fbe_status_id Identifier for the federal benefits status. Example: ""204938675"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""FBSS"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""fed_benefits_status_submitted"" Example JSON# fed_benefits_status_submitted example: { ""balance_id"": ""20211"", ""fbe_status_id"": ""204938675"", ""msg_event_id"": ""243693"", ""msg_id"": ""FBSS"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""fed_benefits_status_submitted"" } Table of Contents Fields Example "
589,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay,"billpay Code — BPAY Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". adj_id X Galileo-generated identifier for this adjustment. Example: ""462354"" amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billername X Name of the biller. billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" ext_trans_id X External transaction ID. Example: ""1234-abcdefg"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPAY"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" otype See the curated list of otypes for your program from Galileo. Example: ""AC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" source_id ID for the adjustment (adj_id) out of the account. timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay"" Example JSON# billpay example: { ""act_type"": ""AD"", ""adj_id"": ""462354"", ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""ext_trans_id"": ""1234-abcdefg"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPAY"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""otype"": ""AC"", ""pmt_ref_no"": ""155101003022"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay"" } Table of Contents Fields Example "
592,docs.galileo-ft.com/pro/reference/api-reference-events-api-billpay-check-cleared,"billpay_check_cleared Code — BPCC Fields All fields are strings. Your field names may vary. Field Required Description act_type For all bill payments the activity type is ""AD"". amount X Amount of the payment. Example: ""376.50"" balance_id X The balance ID, also called the galileo_account_number. Example: ""20211"" billpay_id X Unique identifier for this billpay transaction. Example: ""2436543"" description Description for the billpay transaction. Example: ""Nov 2023 bill"" merchant_number Merchant number (DE042). Example: ""L4DIV6D5LM4X7LF"" msg_event_id Unique Galileo-generated identifier for this message. Example: ""243693"" msg_id The four-letter code to identify this event. Example: ""BPCC"" open_to_buy X The available balance to spend. Example: ""500.00"" opentobuy_ts The exact date-time at which open_to_buy was captured. Format: YYYY-MM-DD hh:mm:ss.ssssss Example: ""2023-03-17 14:06:50.243654"" otype See the curated list of otypes for your program from Galileo. Example: ""AC"" pmt_ref_no X Galileo 12-digit payment reference number (PRN) for the account. Example: ""155101003022"" proc_date Date on which the billpay check cleared. Format: M/D/YYYY Example: ""3/4/2023"" prod_id X The product ID of the account. Example: ""1701"" prog_id X The program ID of the account. Example: ""305"" timestamp X Date-time when this event was created in Mountain Standard Time (GMT -0700). Format: YYYY-MM-DD hh:mm:ss MST Example: ""2023-01-29 17:20:33 MST"" type X The name of this event: ""billpay_check_cleared"" Example JSON# billpay_check_cleared example: { ""act_type"": ""AD"", ""amount"": ""376.50"", ""balance_id"": ""20211"", ""billpay_id"": ""2436543"", ""description"": ""Nov 2023 bill"", ""merchant_number"": ""L4DIV6D5LM4X7LF"", ""msg_event_id"": ""243693"", ""msg_id"": ""BPCC"", ""open_to_buy"": ""500.00"", ""opentobuy_ts"": ""2023-03-17 14:06:50.243654"", ""otype"": ""AC"", ""pmt_ref_no"": ""155101003022"", ""proc_date"": ""3/4/2023"", ""prod_id"": ""1701"", ""prog_id"": ""305"", ""timestamp"": ""2023-01-29 17:20:33 MST"", ""type"": ""billpay_check_cleared"" } Table of Contents Fields Example "
594,docs.galileo-ft.com/pro/reference/post/verifyenrollment,Verify Enrollment The table below lists status codes that apply to this specific endpoint. Status CodeCode Description505-01Enrollment record could not be foundLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
595,docs.galileo-ft.com/pro/reference/post/runcip,Run CIP Consult the Customer ID Verification guide for how to use this endpoint with Galileo's integrated CIP solution.See Global Response Statuses for status codes that are common across endpoints. The table below lists status codes that apply to this specific endpoint. Status CodeCode Description461-01Invalid application461-02Product not configured to run CIP461-03Product does not have any aggregators configured461-04Could not find productLanguageShellPythonNodeJavaGoRESPONSEClick Try It! to start a request and see the response here! 
